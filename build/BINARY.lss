
build/BINARY.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_frsub>:
 80005f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	e002      	b.n	80005fc <__addsf3>
 80005f6:	bf00      	nop

080005f8 <__aeabi_fsub>:
 80005f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005fc <__addsf3>:
 80005fc:	0042      	lsls	r2, r0, #1
 80005fe:	bf1f      	itttt	ne
 8000600:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000604:	ea92 0f03 	teqne	r2, r3
 8000608:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800060c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000610:	d06a      	beq.n	80006e8 <__addsf3+0xec>
 8000612:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000616:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800061a:	bfc1      	itttt	gt
 800061c:	18d2      	addgt	r2, r2, r3
 800061e:	4041      	eorgt	r1, r0
 8000620:	4048      	eorgt	r0, r1
 8000622:	4041      	eorgt	r1, r0
 8000624:	bfb8      	it	lt
 8000626:	425b      	neglt	r3, r3
 8000628:	2b19      	cmp	r3, #25
 800062a:	bf88      	it	hi
 800062c:	4770      	bxhi	lr
 800062e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000636:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000642:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000646:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800064a:	bf18      	it	ne
 800064c:	4249      	negne	r1, r1
 800064e:	ea92 0f03 	teq	r2, r3
 8000652:	d03f      	beq.n	80006d4 <__addsf3+0xd8>
 8000654:	f1a2 0201 	sub.w	r2, r2, #1
 8000658:	fa41 fc03 	asr.w	ip, r1, r3
 800065c:	eb10 000c 	adds.w	r0, r0, ip
 8000660:	f1c3 0320 	rsb	r3, r3, #32
 8000664:	fa01 f103 	lsl.w	r1, r1, r3
 8000668:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800066c:	d502      	bpl.n	8000674 <__addsf3+0x78>
 800066e:	4249      	negs	r1, r1
 8000670:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000674:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000678:	d313      	bcc.n	80006a2 <__addsf3+0xa6>
 800067a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800067e:	d306      	bcc.n	800068e <__addsf3+0x92>
 8000680:	0840      	lsrs	r0, r0, #1
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	f102 0201 	add.w	r2, r2, #1
 800068a:	2afe      	cmp	r2, #254	; 0xfe
 800068c:	d251      	bcs.n	8000732 <__addsf3+0x136>
 800068e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000692:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000696:	bf08      	it	eq
 8000698:	f020 0001 	biceq.w	r0, r0, #1
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	4770      	bx	lr
 80006a2:	0049      	lsls	r1, r1, #1
 80006a4:	eb40 0000 	adc.w	r0, r0, r0
 80006a8:	3a01      	subs	r2, #1
 80006aa:	bf28      	it	cs
 80006ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006b0:	d2ed      	bcs.n	800068e <__addsf3+0x92>
 80006b2:	fab0 fc80 	clz	ip, r0
 80006b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80006ba:	ebb2 020c 	subs.w	r2, r2, ip
 80006be:	fa00 f00c 	lsl.w	r0, r0, ip
 80006c2:	bfaa      	itet	ge
 80006c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006c8:	4252      	neglt	r2, r2
 80006ca:	4318      	orrge	r0, r3
 80006cc:	bfbc      	itt	lt
 80006ce:	40d0      	lsrlt	r0, r2
 80006d0:	4318      	orrlt	r0, r3
 80006d2:	4770      	bx	lr
 80006d4:	f092 0f00 	teq	r2, #0
 80006d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006dc:	bf06      	itte	eq
 80006de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006e2:	3201      	addeq	r2, #1
 80006e4:	3b01      	subne	r3, #1
 80006e6:	e7b5      	b.n	8000654 <__addsf3+0x58>
 80006e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f0:	bf18      	it	ne
 80006f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f6:	d021      	beq.n	800073c <__addsf3+0x140>
 80006f8:	ea92 0f03 	teq	r2, r3
 80006fc:	d004      	beq.n	8000708 <__addsf3+0x10c>
 80006fe:	f092 0f00 	teq	r2, #0
 8000702:	bf08      	it	eq
 8000704:	4608      	moveq	r0, r1
 8000706:	4770      	bx	lr
 8000708:	ea90 0f01 	teq	r0, r1
 800070c:	bf1c      	itt	ne
 800070e:	2000      	movne	r0, #0
 8000710:	4770      	bxne	lr
 8000712:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000716:	d104      	bne.n	8000722 <__addsf3+0x126>
 8000718:	0040      	lsls	r0, r0, #1
 800071a:	bf28      	it	cs
 800071c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000720:	4770      	bx	lr
 8000722:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000726:	bf3c      	itt	cc
 8000728:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800072c:	4770      	bxcc	lr
 800072e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000732:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000736:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800073a:	4770      	bx	lr
 800073c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000740:	bf16      	itet	ne
 8000742:	4608      	movne	r0, r1
 8000744:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000748:	4601      	movne	r1, r0
 800074a:	0242      	lsls	r2, r0, #9
 800074c:	bf06      	itte	eq
 800074e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000752:	ea90 0f01 	teqeq	r0, r1
 8000756:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800075a:	4770      	bx	lr

0800075c <__aeabi_ui2f>:
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	e004      	b.n	800076c <__aeabi_i2f+0x8>
 8000762:	bf00      	nop

08000764 <__aeabi_i2f>:
 8000764:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000768:	bf48      	it	mi
 800076a:	4240      	negmi	r0, r0
 800076c:	ea5f 0c00 	movs.w	ip, r0
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000778:	4601      	mov	r1, r0
 800077a:	f04f 0000 	mov.w	r0, #0
 800077e:	e01c      	b.n	80007ba <__aeabi_l2f+0x2a>

08000780 <__aeabi_ul2f>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	f04f 0300 	mov.w	r3, #0
 800078c:	e00a      	b.n	80007a4 <__aeabi_l2f+0x14>
 800078e:	bf00      	nop

08000790 <__aeabi_l2f>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800079c:	d502      	bpl.n	80007a4 <__aeabi_l2f+0x14>
 800079e:	4240      	negs	r0, r0
 80007a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a4:	ea5f 0c01 	movs.w	ip, r1
 80007a8:	bf02      	ittt	eq
 80007aa:	4684      	moveq	ip, r0
 80007ac:	4601      	moveq	r1, r0
 80007ae:	2000      	moveq	r0, #0
 80007b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007b4:	bf08      	it	eq
 80007b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007be:	fabc f28c 	clz	r2, ip
 80007c2:	3a08      	subs	r2, #8
 80007c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007c8:	db10      	blt.n	80007ec <__aeabi_l2f+0x5c>
 80007ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ce:	4463      	add	r3, ip
 80007d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80007d4:	f1c2 0220 	rsb	r2, r2, #32
 80007d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007dc:	fa20 f202 	lsr.w	r2, r0, r2
 80007e0:	eb43 0002 	adc.w	r0, r3, r2
 80007e4:	bf08      	it	eq
 80007e6:	f020 0001 	biceq.w	r0, r0, #1
 80007ea:	4770      	bx	lr
 80007ec:	f102 0220 	add.w	r2, r2, #32
 80007f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80007f4:	f1c2 0220 	rsb	r2, r2, #32
 80007f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000800:	eb43 0002 	adc.w	r0, r3, r2
 8000804:	bf08      	it	eq
 8000806:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800080a:	4770      	bx	lr

0800080c <__aeabi_dmul>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8de 	bleq	80009e8 <__aeabi_dmul+0x1dc>
 800082c:	442c      	add	r4, r5
 800082e:	ea81 0603 	eor.w	r6, r1, r3
 8000832:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000836:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800083a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800083e:	bf18      	it	ne
 8000840:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800084c:	d038      	beq.n	80008c0 <__aeabi_dmul+0xb4>
 800084e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000852:	f04f 0500 	mov.w	r5, #0
 8000856:	fbe1 e502 	umlal	lr, r5, r1, r2
 800085a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800085e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000862:	f04f 0600 	mov.w	r6, #0
 8000866:	fbe1 5603 	umlal	r5, r6, r1, r3
 800086a:	f09c 0f00 	teq	ip, #0
 800086e:	bf18      	it	ne
 8000870:	f04e 0e01 	orrne.w	lr, lr, #1
 8000874:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000878:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800087c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000880:	d204      	bcs.n	800088c <__aeabi_dmul+0x80>
 8000882:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000886:	416d      	adcs	r5, r5
 8000888:	eb46 0606 	adc.w	r6, r6, r6
 800088c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000890:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000894:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000898:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800089c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008a4:	bf88      	it	hi
 80008a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008aa:	d81e      	bhi.n	80008ea <__aeabi_dmul+0xde>
 80008ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008b0:	bf08      	it	eq
 80008b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008b6:	f150 0000 	adcs.w	r0, r0, #0
 80008ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008be:	bd70      	pop	{r4, r5, r6, pc}
 80008c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008c4:	ea46 0101 	orr.w	r1, r6, r1
 80008c8:	ea40 0002 	orr.w	r0, r0, r2
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008d4:	bfc2      	ittt	gt
 80008d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008de:	bd70      	popgt	{r4, r5, r6, pc}
 80008e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008e4:	f04f 0e00 	mov.w	lr, #0
 80008e8:	3c01      	subs	r4, #1
 80008ea:	f300 80ab 	bgt.w	8000a44 <__aeabi_dmul+0x238>
 80008ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80008f2:	bfde      	ittt	le
 80008f4:	2000      	movle	r0, #0
 80008f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80008fa:	bd70      	pople	{r4, r5, r6, pc}
 80008fc:	f1c4 0400 	rsb	r4, r4, #0
 8000900:	3c20      	subs	r4, #32
 8000902:	da35      	bge.n	8000970 <__aeabi_dmul+0x164>
 8000904:	340c      	adds	r4, #12
 8000906:	dc1b      	bgt.n	8000940 <__aeabi_dmul+0x134>
 8000908:	f104 0414 	add.w	r4, r4, #20
 800090c:	f1c4 0520 	rsb	r5, r4, #32
 8000910:	fa00 f305 	lsl.w	r3, r0, r5
 8000914:	fa20 f004 	lsr.w	r0, r0, r4
 8000918:	fa01 f205 	lsl.w	r2, r1, r5
 800091c:	ea40 0002 	orr.w	r0, r0, r2
 8000920:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000924:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000928:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800092c:	fa21 f604 	lsr.w	r6, r1, r4
 8000930:	eb42 0106 	adc.w	r1, r2, r6
 8000934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000938:	bf08      	it	eq
 800093a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f1c4 040c 	rsb	r4, r4, #12
 8000944:	f1c4 0520 	rsb	r5, r4, #32
 8000948:	fa00 f304 	lsl.w	r3, r0, r4
 800094c:	fa20 f005 	lsr.w	r0, r0, r5
 8000950:	fa01 f204 	lsl.w	r2, r1, r4
 8000954:	ea40 0002 	orr.w	r0, r0, r2
 8000958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800095c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000960:	f141 0100 	adc.w	r1, r1, #0
 8000964:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000968:	bf08      	it	eq
 800096a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	f1c4 0520 	rsb	r5, r4, #32
 8000974:	fa00 f205 	lsl.w	r2, r0, r5
 8000978:	ea4e 0e02 	orr.w	lr, lr, r2
 800097c:	fa20 f304 	lsr.w	r3, r0, r4
 8000980:	fa01 f205 	lsl.w	r2, r1, r5
 8000984:	ea43 0302 	orr.w	r3, r3, r2
 8000988:	fa21 f004 	lsr.w	r0, r1, r4
 800098c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000990:	fa21 f204 	lsr.w	r2, r1, r4
 8000994:	ea20 0002 	bic.w	r0, r0, r2
 8000998:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800099c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a0:	bf08      	it	eq
 80009a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f094 0f00 	teq	r4, #0
 80009ac:	d10f      	bne.n	80009ce <__aeabi_dmul+0x1c2>
 80009ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009b2:	0040      	lsls	r0, r0, #1
 80009b4:	eb41 0101 	adc.w	r1, r1, r1
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf08      	it	eq
 80009be:	3c01      	subeq	r4, #1
 80009c0:	d0f7      	beq.n	80009b2 <__aeabi_dmul+0x1a6>
 80009c2:	ea41 0106 	orr.w	r1, r1, r6
 80009c6:	f095 0f00 	teq	r5, #0
 80009ca:	bf18      	it	ne
 80009cc:	4770      	bxne	lr
 80009ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009d2:	0052      	lsls	r2, r2, #1
 80009d4:	eb43 0303 	adc.w	r3, r3, r3
 80009d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009dc:	bf08      	it	eq
 80009de:	3d01      	subeq	r5, #1
 80009e0:	d0f7      	beq.n	80009d2 <__aeabi_dmul+0x1c6>
 80009e2:	ea43 0306 	orr.w	r3, r3, r6
 80009e6:	4770      	bx	lr
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f0:	bf18      	it	ne
 80009f2:	ea95 0f0c 	teqne	r5, ip
 80009f6:	d00c      	beq.n	8000a12 <__aeabi_dmul+0x206>
 80009f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009fc:	bf18      	it	ne
 80009fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a02:	d1d1      	bne.n	80009a8 <__aeabi_dmul+0x19c>
 8000a04:	ea81 0103 	eor.w	r1, r1, r3
 8000a08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	bd70      	pop	{r4, r5, r6, pc}
 8000a12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a16:	bf06      	itte	eq
 8000a18:	4610      	moveq	r0, r2
 8000a1a:	4619      	moveq	r1, r3
 8000a1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a20:	d019      	beq.n	8000a56 <__aeabi_dmul+0x24a>
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dmul+0x222>
 8000a28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a2c:	d113      	bne.n	8000a56 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	d105      	bne.n	8000a40 <__aeabi_dmul+0x234>
 8000a34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a38:	bf1c      	itt	ne
 8000a3a:	4610      	movne	r0, r2
 8000a3c:	4619      	movne	r1, r3
 8000a3e:	d10a      	bne.n	8000a56 <__aeabi_dmul+0x24a>
 8000a40:	ea81 0103 	eor.w	r1, r1, r3
 8000a44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
 8000a56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}

08000a60 <__aeabi_d2uiz>:
 8000a60:	004a      	lsls	r2, r1, #1
 8000a62:	d211      	bcs.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d211      	bcs.n	8000a8e <__aeabi_d2uiz+0x2e>
 8000a6a:	d50d      	bpl.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d40e      	bmi.n	8000a94 <__aeabi_d2uiz+0x34>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_d2uiz+0x3a>
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0000 	mov.w	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <__NVIC_EnableIRQ.lto_priv.0>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0c      	blt.n	8000aca <__NVIC_EnableIRQ.lto_priv.0+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4905      	ldr	r1, [pc, #20]	; (8000ad0 <__NVIC_EnableIRQ.lto_priv.0+0x30>)
 8000aba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aca:	bf00      	nop
 8000acc:	b002      	add	sp, #8
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000ad4:	b500      	push	{lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000adc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000ae0:	f002 f9c6 	bl	8002e70 <cosf>
 8000ae4:	eef0 7a40 	vmov.f32	s15, s0
 8000ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8000aec:	b003      	add	sp, #12
 8000aee:	f85d fb04 	ldr.w	pc, [sp], #4

08000af2 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000af2:	b500      	push	{lr}
 8000af4:	b083      	sub	sp, #12
 8000af6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000afa:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000afe:	f002 f9ef 	bl	8002ee0 <sinf>
 8000b02:	eef0 7a40 	vmov.f32	s15, s0
 8000b06:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0a:	b003      	add	sp, #12
 8000b0c:	f85d fb04 	ldr.w	pc, [sp], #4

08000b10 <_Z4Initv>:
PID pidUd (&filterediD,  &setUd, &setiD, 1, 2.5, 0.0001, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);

 

void Init()
{ 
 8000b10:	b500      	push	{lr}
 8000b12:	b083      	sub	sp, #12
	ClockManager::hseInit();
 8000b14:	f001 f9aa 	bl	8001e6c <_ZN12ClockManager7hseInitEv>
	ClockManager::pllCfg(1, 320000000, 2, ClockManager::pllDiv::div2, ClockManager::pllDiv::div2); //160 MHz clock
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2202      	movs	r2, #2
 8000b20:	49a7      	ldr	r1, [pc, #668]	; (8000dc0 <_Z4Initv+0x2b0>)
 8000b22:	2001      	movs	r0, #1
 8000b24:	f001 faa8 	bl	8002078 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_>
	ClockManager::setSysClk(clkSrc::pll);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f001 fa51 	bl	8001fd0 <_ZN12ClockManager9setSysClkE6clkSrc>
	//ClockManager::clockSummary();
	ClockManager::initTick();
 8000b2e:	f001 fbb9 	bl	80022a4 <_ZN12ClockManager8initTickEv>

	

	// timer 2 - sine wave generation
	//NVIC_EnableIRQ(TIM2_IRQn);
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; 
 8000b32:	4ba4      	ldr	r3, [pc, #656]	; (8000dc4 <_Z4Initv+0x2b4>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	4aa3      	ldr	r2, [pc, #652]	; (8000dc4 <_Z4Initv+0x2b4>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6593      	str	r3, [r2, #88]	; 0x58
	//RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; 
	TIM2->PSC = 15; // 160000000/160 = 1000000 Hz
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b42:	220f      	movs	r2, #15
 8000b44:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100; // 100/1000000 = 1kHz
 8000b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b4a:	2264      	movs	r2, #100	; 0x64
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 10;
 8000b4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b52:	220a      	movs	r2, #10
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2 -> DIER |= TIM_DIER_CC1DE | TIM_DIER_UIE; // Update DMA request enable
	TIM2->CR1  |= TIM_CR1_ARPE;
 8000b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b64:	6013      	str	r3, [r2, #0]
	TIM2->CR1  |= TIM_CR1_CEN;	
 8000b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6013      	str	r3, [r2, #0]
	

	// // Timer 1 - PWM generation
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b76:	2019      	movs	r0, #25
 8000b78:	f7ff ff92 	bl	8000aa0 <__NVIC_EnableIRQ.lto_priv.0>
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  
 8000b7c:	4b91      	ldr	r3, [pc, #580]	; (8000dc4 <_Z4Initv+0x2b4>)
 8000b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b80:	4a90      	ldr	r2, [pc, #576]	; (8000dc4 <_Z4Initv+0x2b4>)
 8000b82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b86:	6613      	str	r3, [r2, #96]	; 0x60
	TIM1-> CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8000b88:	4b8f      	ldr	r3, [pc, #572]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a8e      	ldr	r2, [pc, #568]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000b8e:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000b92:	6193      	str	r3, [r2, #24]
	TIM1-> CCMR1 |= 0b110<< TIM_CCMR1_OC2M_Pos | TIM_CCMR1_OC2PE ; // PWM mode 1 channel 2
 8000b94:	4b8c      	ldr	r3, [pc, #560]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a8b      	ldr	r2, [pc, #556]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000b9a:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000b9e:	6193      	str	r3, [r2, #24]
	TIM1-> CCMR2 |= 0b110<< TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC3PE ; // PWM mode 1 channel 3
 8000ba0:	4b89      	ldr	r3, [pc, #548]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	4a88      	ldr	r2, [pc, #544]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000ba6:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000baa:	61d3      	str	r3, [r2, #28]
	TIM1-> CCMR2 |= 0b0110<< TIM_CCMR2_OC4M_Pos;
 8000bac:	4b86      	ldr	r3, [pc, #536]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	4a85      	ldr	r2, [pc, #532]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bb2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000bb6:	61d3      	str	r3, [r2, #28]
	TIM1-> CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
 8000bb8:	4b83      	ldr	r3, [pc, #524]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bba:	6a1b      	ldr	r3, [r3, #32]
 8000bbc:	4a82      	ldr	r2, [pc, #520]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bbe:	f043 0305 	orr.w	r3, r3, #5
 8000bc2:	6213      	str	r3, [r2, #32]
	TIM1-> CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;
 8000bc4:	4b80      	ldr	r3, [pc, #512]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bc6:	6a1b      	ldr	r3, [r3, #32]
 8000bc8:	4a7f      	ldr	r2, [pc, #508]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bca:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000bce:	6213      	str	r3, [r2, #32]
	TIM1-> CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;
 8000bd0:	4b7d      	ldr	r3, [pc, #500]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	4a7c      	ldr	r2, [pc, #496]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bd6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000bda:	6213      	str	r3, [r2, #32]
	//TIM1->CR2 |= 0b010<<TIM_CR2_MMS_Pos;   // Set TRGO on Update Event
	TIM1->PSC = 3;  // 160000000/4 = 40000000 Hz
 8000bdc:	4b7a      	ldr	r3, [pc, #488]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bde:	2203      	movs	r2, #3
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 40000000/PWM_FREQ; 
 8000be2:	4b79      	ldr	r3, [pc, #484]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000be8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1-> CCR1 = 0;
 8000bea:	4b77      	ldr	r3, [pc, #476]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1-> CCR2 = 0;
 8000bf0:	4b75      	ldr	r3, [pc, #468]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1-> CCR3 = 0;
 8000bf6:	4b74      	ldr	r3, [pc, #464]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1-> CCR4 = 500;
 8000bfc:	4b72      	ldr	r3, [pc, #456]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000bfe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c02:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1 -> DIER |=  TIM_DIER_UIE; // interrupt enable
 8000c04:	4b70      	ldr	r3, [pc, #448]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a6f      	ldr	r2, [pc, #444]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	60d3      	str	r3, [r2, #12]
	TIM1->CR2 = 0b0111<<TIM_CR2_MMS_Pos;   // Set TRGO on Update Event
 8000c10:	4b6d      	ldr	r3, [pc, #436]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c12:	2270      	movs	r2, #112	; 0x70
 8000c14:	605a      	str	r2, [r3, #4]
	TIM1->CR1  |= TIM_CR1_ARPE | 0b01<<TIM_CR1_CMS_Pos;
 8000c16:	4b6c      	ldr	r3, [pc, #432]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a6b      	ldr	r2, [pc, #428]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c1c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000c20:	6013      	str	r3, [r2, #0]
	TIM1->EGR |= TIM_EGR_UG;
 8000c22:	4b69      	ldr	r3, [pc, #420]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a68      	ldr	r2, [pc, #416]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6153      	str	r3, [r2, #20]
	TIM1->BDTR |= TIM_BDTR_MOE | 0b00100000<<TIM_BDTR_DTG_Pos;
 8000c2e:	4b66      	ldr	r3, [pc, #408]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a65      	ldr	r2, [pc, #404]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->CR1  |= TIM_CR1_CEN;
 8000c3e:	4b62      	ldr	r3, [pc, #392]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a61      	ldr	r2, [pc, #388]	; (8000dc8 <_Z4Initv+0x2b8>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6013      	str	r3, [r2, #0]
	

  
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 8000c4a:	4b5e      	ldr	r3, [pc, #376]	; (8000dc4 <_Z4Initv+0x2b4>)
 8000c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c4e:	4a5d      	ldr	r2, [pc, #372]	; (8000dc4 <_Z4Initv+0x2b4>)
 8000c50:	f043 0305 	orr.w	r3, r3, #5
 8000c54:	6493      	str	r3, [r2, #72]	; 0x48
	// DMA1_Channel4->CPAR = (uint32_t) &(TIM1-> CCR3);
	// DMA1_Channel4->CNDTR = (sizeof(sineLookUp3)/sizeof(sineLookUp3 [0]));
	// DMA1_Channel4->CCR |= DMA_CCR_EN;

	// ADC1 configuration
	RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;	
 8000c56:	4b5b      	ldr	r3, [pc, #364]	; (8000dc4 <_Z4Initv+0x2b4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a5a      	ldr	r2, [pc, #360]	; (8000dc4 <_Z4Initv+0x2b4>)
 8000c5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC12_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);	// Set ADC clock to HCLK/2 and enable VREFINT
 8000c62:	4b5a      	ldr	r3, [pc, #360]	; (8000dcc <_Z4Initv+0x2bc>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	4a59      	ldr	r2, [pc, #356]	; (8000dcc <_Z4Initv+0x2bc>)
 8000c68:	f443 0386 	orr.w	r3, r3, #4390912	; 0x430000
 8000c6c:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADSTP;
 8000c6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c78:	f043 0310 	orr.w	r3, r3, #16
 8000c7c:	6093      	str	r3, [r2, #8]
	while((ADC1->ISR & ADC_ISR_ADRDY));	
 8000c7e:	bf00      	nop
 8000c80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1f3      	bne.n	8000c80 <_Z4Initv+0x170>
	ADC1->CR =0;
 8000c98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
	ADC1->CFGR = ADC_CFGR_OVRMOD | 1<<ADC_CFGR_EXTEN_Pos | 0b01001<<ADC_CFGR_EXTSEL_Pos | ADC_CFGR_DMAEN | ADC_CFGR_DMACFG; // Set overrun mode, external trigger rising edge, TIM1_TRGO as trigger, DMA enable, DMA circular mode
 8000ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ca4:	f241 5223 	movw	r2, #5411	; 0x1523
 8000ca8:	60da      	str	r2, [r3, #12]
	ADC1->CR |= ADC_CR_ADVREGEN;	
 8000caa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADCAL;
 8000cba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc8:	6093      	str	r3, [r2, #8]
	while(ADC1->CR & ADC_CR_ADCAL);
 8000cca:	bf00      	nop
 8000ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	0fdb      	lsrs	r3, r3, #31
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1f8      	bne.n	8000ccc <_Z4Initv+0x1bc>
	ADC1->SQR1 |= 0b10<<ADC_SQR1_L_Pos; // 3 ADC1 conversions
 8000cda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |= 1<<ADC_SQR1_SQ1_Pos | 8<<ADC_SQR1_SQ2_Pos | 9<<ADC_SQR1_SQ3_Pos; // First conversion - channel 14. Second conversion - channel 2.
 8000cea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cf4:	f443 1312 	orr.w	r3, r3, #2392064	; 0x248000
 8000cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->CR |= ADC_CR_ADEN;
 8000cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6093      	str	r3, [r2, #8]
	while(!(ADC1->ISR & ADC_ISR_ADRDY));
 8000d0e:	bf00      	nop
 8000d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	bf0c      	ite	eq
 8000d1e:	2301      	moveq	r3, #1
 8000d20:	2300      	movne	r3, #0
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f3      	bne.n	8000d10 <_Z4Initv+0x200>
	ADC1->CR |= ADC_CR_ADSTART;
 8000d28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6093      	str	r3, [r2, #8]

	DMAMUX1_Channel4->CCR = 5;
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <_Z4Initv+0x2c0>)
 8000d3a:	2205      	movs	r2, #5
 8000d3c:	601a      	str	r2, [r3, #0]
	DMA1_Channel5-> CCR = 0b1<<DMA_CCR_MSIZE_Pos | 0b10<<DMA_CCR_PSIZE_Pos | DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_TCIE; // 16 bit memory size, 32 bit peripheral size, memory increment mode, circular mode, transfer complete interrupt enable
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <_Z4Initv+0x2c4>)
 8000d40:	f240 62a2 	movw	r2, #1698	; 0x6a2
 8000d44:	601a      	str	r2, [r3, #0]
	DMA1_Channel5->CPAR = (uint32_t) &(ADC1->DR);
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <_Z4Initv+0x2c4>)
 8000d48:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <_Z4Initv+0x2c8>)
 8000d4a:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t) AdcDmaReadings;
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <_Z4Initv+0x2c4>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <_Z4Initv+0x2cc>)
 8000d50:	60da      	str	r2, [r3, #12]
	DMA1_Channel5->CNDTR = 3;
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <_Z4Initv+0x2c4>)
 8000d54:	2203      	movs	r2, #3
 8000d56:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <_Z4Initv+0x2c4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <_Z4Initv+0x2c4>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6013      	str	r3, [r2, #0]
	// // DAC1 configuration
	// RCC->AHB2ENR |=RCC_AHB2ENR_DAC1EN;
	// DAC1->CR |= DAC_CR_EN1;
	// DAC1->DHR12R1 = 2050;
	
	ADC2->CR |= ADC_CR_ADSTP;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <_Z4Initv+0x2d0>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <_Z4Initv+0x2d0>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6093      	str	r3, [r2, #8]
	while((ADC2->ISR & ADC_ISR_ADRDY));	
 8000d70:	bf00      	nop
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <_Z4Initv+0x2d0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bf14      	ite	ne
 8000d7e:	2301      	movne	r3, #1
 8000d80:	2300      	moveq	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f4      	bne.n	8000d72 <_Z4Initv+0x262>
	ADC2->CR =0;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <_Z4Initv+0x2d0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
	ADC2->CFGR = ADC_CFGR_OVRMOD | ADC_CFGR_CONT; // Set overrun mode, external trigger rising edge, TIM1_TRGO as trigger, DMA enable, DMA circular mode
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <_Z4Initv+0x2d0>)
 8000d90:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000d94:	60da      	str	r2, [r3, #12]
	ADC2->CR |= ADC_CR_ADVREGEN;	
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <_Z4Initv+0x2d0>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <_Z4Initv+0x2d0>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADCAL;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <_Z4Initv+0x2d0>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <_Z4Initv+0x2d0>)
 8000da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dac:	6093      	str	r3, [r2, #8]
	while(ADC2->CR & ADC_CR_ADCAL);
 8000dae:	bf00      	nop
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <_Z4Initv+0x2d0>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	0fdb      	lsrs	r3, r3, #31
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f9      	bne.n	8000db0 <_Z4Initv+0x2a0>
	ADC2->SQR1 |= 0b0<<ADC_SQR1_L_Pos; // 1 ADC2 conversions
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_Z4Initv+0x2d0>)
 8000dbe:	e011      	b.n	8000de4 <_Z4Initv+0x2d4>
 8000dc0:	1312d000 	.word	0x1312d000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	50000300 	.word	0x50000300
 8000dd0:	40020810 	.word	0x40020810
 8000dd4:	40020058 	.word	0x40020058
 8000dd8:	50000040 	.word	0x50000040
 8000ddc:	20000058 	.word	0x20000058
 8000de0:	50000100 	.word	0x50000100
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_Z4Initv+0x320>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
	ADC2->SQR1 |= 12<<ADC_SQR1_SQ1_Pos; // First conversion - ch12
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_Z4Initv+0x320>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <_Z4Initv+0x320>)
 8000df0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
	ADC2->CR |= ADC_CR_ADEN;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <_Z4Initv+0x320>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <_Z4Initv+0x320>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6093      	str	r3, [r2, #8]
	while(!(ADC2->ISR & ADC_ISR_ADRDY));
 8000e02:	bf00      	nop
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <_Z4Initv+0x320>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf0c      	ite	eq
 8000e10:	2301      	moveq	r3, #1
 8000e12:	2300      	movne	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f4      	bne.n	8000e04 <_Z4Initv+0x2f4>
	ADC2->CR |= ADC_CR_ADSTART;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <_Z4Initv+0x320>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <_Z4Initv+0x320>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6093      	str	r3, [r2, #8]
	
}
 8000e26:	bf00      	nop
 8000e28:	b003      	add	sp, #12
 8000e2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e2e:	bf00      	nop
 8000e30:	50000100 	.word	0x50000100

08000e34 <_Z6setPwmfff>:
      {
            _sineLookUp[i] = 180+(_amplitude*sin(i*inc+phaseShiftDeg))*0.5f;
      }
}
void setPwm(float Ua, float Ub, float Uc)
{
 8000e34:	b084      	sub	sp, #16
 8000e36:	ed8d 0a03 	vstr	s0, [sp, #12]
 8000e3a:	edcd 0a02 	vstr	s1, [sp, #8]
 8000e3e:	ed8d 1a01 	vstr	s2, [sp, #4]
	TIM1->CCR1 = Ub;
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <_Z6setPwmfff+0x44>)
 8000e44:	eddd 7a02 	vldr	s15, [sp, #8]
 8000e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e4c:	ee17 2a90 	vmov	r2, s15
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = Ua;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <_Z6setPwmfff+0x44>)
 8000e54:	eddd 7a03 	vldr	s15, [sp, #12]
 8000e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e5c:	ee17 2a90 	vmov	r2, s15
 8000e60:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = Uc;
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <_Z6setPwmfff+0x44>)
 8000e64:	eddd 7a01 	vldr	s15, [sp, #4]
 8000e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e6c:	ee17 2a90 	vmov	r2, s15
 8000e70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e72:	bf00      	nop
 8000e74:	b004      	add	sp, #16
 8000e76:	4770      	bx	lr
 8000e78:	40012c00 	.word	0x40012c00

08000e7c <_Z15setPhaseVoltagefff>:
void setPhaseVoltage(float Uq, float Ud, float angle_el) 
{  
 8000e7c:	b500      	push	{lr}
 8000e7e:	ed2d 8b02 	vpush	{d8}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	ed8d 0a03 	vstr	s0, [sp, #12]
 8000e88:	edcd 0a02 	vstr	s1, [sp, #8]
 8000e8c:	ed8d 1a01 	vstr	s2, [sp, #4]
    // Inverse park transform
	Ualpha = cos(angle_el) * Ud -sin(angle_el) * Uq;  // -sin(angle) * Uq;
 8000e90:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000e94:	f7ff fe1e 	bl	8000ad4 <_ZSt3cosf>
 8000e98:	eeb0 7a40 	vmov.f32	s14, s0
 8000e9c:	eddd 7a02 	vldr	s15, [sp, #8]
 8000ea0:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000ea4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000ea8:	f7ff fe23 	bl	8000af2 <_ZSt3sinf>
 8000eac:	eeb0 7a40 	vmov.f32	s14, s0
 8000eb0:	eddd 7a03 	vldr	s15, [sp, #12]
 8000eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <_Z15setPhaseVoltagefff+0x130>)
 8000ebe:	edc3 7a00 	vstr	s15, [r3]
	Ubeta = sin(angle_el) * Ud + cos(angle_el) * Uq;    //  cos(angle) * Uq;
 8000ec2:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000ec6:	f7ff fe14 	bl	8000af2 <_ZSt3sinf>
 8000eca:	eeb0 7a40 	vmov.f32	s14, s0
 8000ece:	eddd 7a02 	vldr	s15, [sp, #8]
 8000ed2:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000ed6:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000eda:	f7ff fdfb 	bl	8000ad4 <_ZSt3cosf>
 8000ede:	eeb0 7a40 	vmov.f32	s14, s0
 8000ee2:	eddd 7a03 	vldr	s15, [sp, #12]
 8000ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eea:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000eee:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <_Z15setPhaseVoltagefff+0x134>)
 8000ef0:	edc3 7a00 	vstr	s15, [r3]

	// Inverse Clarke transform
	uint32_t Ua = Ualpha + 500;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <_Z15setPhaseVoltagefff+0x130>)
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000fb4 <_Z15setPhaseVoltagefff+0x138>
 8000efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f06:	ee17 3a90 	vmov	r3, s15
 8000f0a:	9307      	str	r3, [sp, #28]
	uint32_t Ub = -0.5f * Ualpha  + M_SQRT3_2 * Ubeta + 500;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <_Z15setPhaseVoltagefff+0x130>)
 8000f0e:	edd3 7a00 	vldr	s15, [r3]
 8000f12:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8000f16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <_Z15setPhaseVoltagefff+0x134>)
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000fb8 <_Z15setPhaseVoltagefff+0x13c>
 8000f24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000fb4 <_Z15setPhaseVoltagefff+0x138>
 8000f30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f38:	ee17 3a90 	vmov	r3, s15
 8000f3c:	9306      	str	r3, [sp, #24]
	uint32_t Uc = -0.5f * Ualpha - M_SQRT3_2 * Ubeta + 500;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <_Z15setPhaseVoltagefff+0x130>)
 8000f40:	edd3 7a00 	vldr	s15, [r3]
 8000f44:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8000f48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <_Z15setPhaseVoltagefff+0x134>)
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000fb8 <_Z15setPhaseVoltagefff+0x13c>
 8000f56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000fb4 <_Z15setPhaseVoltagefff+0x138>
 8000f62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f6a:	ee17 3a90 	vmov	r3, s15
 8000f6e:	9305      	str	r3, [sp, #20]
	setPwm(Ua, Ub, Uc);
 8000f70:	9b07      	ldr	r3, [sp, #28]
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f7a:	9b06      	ldr	r3, [sp, #24]
 8000f7c:	ee07 3a10 	vmov	s14, r3
 8000f80:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000f84:	9b05      	ldr	r3, [sp, #20]
 8000f86:	ee06 3a90 	vmov	s13, r3
 8000f8a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8000f8e:	eeb0 1a66 	vmov.f32	s2, s13
 8000f92:	eef0 0a47 	vmov.f32	s1, s14
 8000f96:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9a:	f7ff ff4b 	bl	8000e34 <_Z6setPwmfff>
	// uart.print("Ub:");
	// uart.print((int)Ub);
	// uart.print(",");
	// uart.print("Uc:");
	// uart.println((int)Uc);
}
 8000f9e:	bf00      	nop
 8000fa0:	b009      	add	sp, #36	; 0x24
 8000fa2:	ecbd 8b02 	vpop	{d8}
 8000fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000faa:	bf00      	nop
 8000fac:	20000098 	.word	0x20000098
 8000fb0:	2000009c 	.word	0x2000009c
 8000fb4:	43fa0000 	.word	0x43fa0000
 8000fb8:	3f5db3d7 	.word	0x3f5db3d7

08000fbc <main>:

int main(void)
{
 8000fbc:	b500      	push	{lr}
 8000fbe:	b083      	sub	sp, #12
	// generateSine(sineLookUp2, 120, 0, 360);
	// generateSine(sineLookUp3, 240, 0, 360);
	
	// int i, j=0;
	static uint32_t prevMotorState=0;
	float offsetAngle = 0;
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	9301      	str	r3, [sp, #4]
	//initSysTick();	
	Init();  
 8000fc6:	f7ff fda3 	bl	8000b10 <_Z4Initv>
	pidUq.Init();
 8000fca:	4891      	ldr	r0, [pc, #580]	; (8001210 <main+0x254>)
 8000fcc:	f001 fcc6 	bl	800295c <_ZN3PID4InitEv>
	pidUq.SetOutputLimits(-490,490);
 8000fd0:	eddf 0a90 	vldr	s1, [pc, #576]	; 8001214 <main+0x258>
 8000fd4:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8001218 <main+0x25c>
 8000fd8:	488d      	ldr	r0, [pc, #564]	; (8001210 <main+0x254>)
 8000fda:	f001 fdc3 	bl	8002b64 <_ZN3PID15SetOutputLimitsEff>
	pidUq.SetMode(PIDMode_TypeDef::_PID_MODE_AUTOMATIC);
 8000fde:	2101      	movs	r1, #1
 8000fe0:	488b      	ldr	r0, [pc, #556]	; (8001210 <main+0x254>)
 8000fe2:	f001 fd9d 	bl	8002b20 <_ZN3PID7SetModeE15PIDMode_TypeDef>

	pidUd.Init();
 8000fe6:	488d      	ldr	r0, [pc, #564]	; (800121c <main+0x260>)
 8000fe8:	f001 fcb8 	bl	800295c <_ZN3PID4InitEv>
	pidUd.SetOutputLimits(-490,490);
 8000fec:	eddf 0a89 	vldr	s1, [pc, #548]	; 8001214 <main+0x258>
 8000ff0:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8001218 <main+0x25c>
 8000ff4:	4889      	ldr	r0, [pc, #548]	; (800121c <main+0x260>)
 8000ff6:	f001 fdb5 	bl	8002b64 <_ZN3PID15SetOutputLimitsEff>
	pidUd.SetMode(PIDMode_TypeDef::_PID_MODE_AUTOMATIC);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4887      	ldr	r0, [pc, #540]	; (800121c <main+0x260>)
 8000ffe:	f001 fd8f 	bl	8002b20 <_ZN3PID7SetModeE15PIDMode_TypeDef>
		
	while (1)
	{
	
		
		if (uart.readTillEOL(UARTrxData)) 
 8001002:	4987      	ldr	r1, [pc, #540]	; (8001220 <main+0x264>)
 8001004:	4887      	ldr	r0, [pc, #540]	; (8001224 <main+0x268>)
 8001006:	f000 fdc9 	bl	8001b9c <_ZN6Serial11readTillEOLEPc>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d040      	beq.n	8001092 <main+0xd6>
		{
			
			if (UARTrxData[0] == '0')
 8001010:	4b83      	ldr	r3, [pc, #524]	; (8001220 <main+0x264>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b30      	cmp	r3, #48	; 0x30
 8001016:	d103      	bne.n	8001020 <main+0x64>
			{
				motorState = 0;
 8001018:	4b83      	ldr	r3, [pc, #524]	; (8001228 <main+0x26c>)
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e038      	b.n	8001092 <main+0xd6>
			}
			else if (UARTrxData[0] == '1')
 8001020:	4b7f      	ldr	r3, [pc, #508]	; (8001220 <main+0x264>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b31      	cmp	r3, #49	; 0x31
 8001026:	d103      	bne.n	8001030 <main+0x74>
			{
					motorState = 1;
 8001028:	4b7f      	ldr	r3, [pc, #508]	; (8001228 <main+0x26c>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e030      	b.n	8001092 <main+0xd6>
			}
			else if (UARTrxData[0] == 'p')
 8001030:	4b7b      	ldr	r3, [pc, #492]	; (8001220 <main+0x264>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b70      	cmp	r3, #112	; 0x70
 8001036:	d10a      	bne.n	800104e <main+0x92>
			{
					setiQ +=1;
 8001038:	4b7c      	ldr	r3, [pc, #496]	; (800122c <main+0x270>)
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001046:	4b79      	ldr	r3, [pc, #484]	; (800122c <main+0x270>)
 8001048:	edc3 7a00 	vstr	s15, [r3]
 800104c:	e021      	b.n	8001092 <main+0xd6>
			}
			else if (UARTrxData[0] == 'm')
 800104e:	4b74      	ldr	r3, [pc, #464]	; (8001220 <main+0x264>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b6d      	cmp	r3, #109	; 0x6d
 8001054:	d10a      	bne.n	800106c <main+0xb0>
			{
					setiQ -=1;
 8001056:	4b75      	ldr	r3, [pc, #468]	; (800122c <main+0x270>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001064:	4b71      	ldr	r3, [pc, #452]	; (800122c <main+0x270>)
 8001066:	edc3 7a00 	vstr	s15, [r3]
 800106a:	e012      	b.n	8001092 <main+0xd6>
			}
			else if (UARTrxData[0] == 's')
 800106c:	4b6c      	ldr	r3, [pc, #432]	; (8001220 <main+0x264>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b73      	cmp	r3, #115	; 0x73
 8001072:	d105      	bne.n	8001080 <main+0xc4>
			{
					setMotorSpeed += 50;
 8001074:	4b6e      	ldr	r3, [pc, #440]	; (8001230 <main+0x274>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3332      	adds	r3, #50	; 0x32
 800107a:	4a6d      	ldr	r2, [pc, #436]	; (8001230 <main+0x274>)
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e008      	b.n	8001092 <main+0xd6>
			}
			else if (UARTrxData[0] == 'w')
 8001080:	4b67      	ldr	r3, [pc, #412]	; (8001220 <main+0x264>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b77      	cmp	r3, #119	; 0x77
 8001086:	d104      	bne.n	8001092 <main+0xd6>
			{
					setMotorSpeed -= 100;
 8001088:	4b69      	ldr	r3, [pc, #420]	; (8001230 <main+0x274>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3b64      	subs	r3, #100	; 0x64
 800108e:	4a68      	ldr	r2, [pc, #416]	; (8001230 <main+0x274>)
 8001090:	6013      	str	r3, [r2, #0]
			}

		}

		if (milis-motorProcessLastTime>=slopeInterval)
 8001092:	4b68      	ldr	r3, [pc, #416]	; (8001234 <main+0x278>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b68      	ldr	r3, [pc, #416]	; (8001238 <main+0x27c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	1ad2      	subs	r2, r2, r3
 800109c:	4b67      	ldr	r3, [pc, #412]	; (800123c <main+0x280>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	bf2c      	ite	cs
 80010a4:	2301      	movcs	r3, #1
 80010a6:	2300      	movcc	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d051      	beq.n	8001152 <main+0x196>
		{
			if (!motorState)
 80010ae:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <main+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d11c      	bne.n	80010f0 <main+0x134>
					
				}

			
				
				if (motorSpeed > 5)
 80010b6:	4b62      	ldr	r3, [pc, #392]	; (8001240 <main+0x284>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b05      	cmp	r3, #5
 80010bc:	bf8c      	ite	hi
 80010be:	2301      	movhi	r3, #1
 80010c0:	2300      	movls	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <main+0x118>
				{
					motorSpeed-=5;
 80010c8:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <main+0x284>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3b05      	subs	r3, #5
 80010ce:	4a5c      	ldr	r2, [pc, #368]	; (8001240 <main+0x284>)
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e00a      	b.n	80010ea <main+0x12e>
				{
					
				// 	generateSine(sineLookUp, 0, 0, 360);
				// 	generateSine(sineLookUp2, 120, 0, 360);
				// 	generateSine(sineLookUp3, 240, 0, 360);
					setUq = 0;
 80010d4:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <main+0x288>)
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
					setUd = 0;
 80010dc:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <main+0x28c>)
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
					motorSpeed = 0;
 80010e4:	4b56      	ldr	r3, [pc, #344]	; (8001240 <main+0x284>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
				}	
				prevMotorState = 0;
 80010ea:	4b58      	ldr	r3, [pc, #352]	; (800124c <main+0x290>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
											
			}
			if (motorState)
 80010f0:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <main+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d028      	beq.n	800114a <main+0x18e>
			{			
			
				if (prevMotorState == 0)
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <main+0x290>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <main+0x14a>
				{
					setUq=35;
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <main+0x288>)
 8001102:	4a53      	ldr	r2, [pc, #332]	; (8001250 <main+0x294>)
 8001104:	601a      	str	r2, [r3, #0]
			// 		generateSine(sineLookUp, 0, 200, 360);  //200hz 42 amplitude 21sek bez rad, 300hz 50 amplitude 6,5sek bez rad
			// 		generateSine(sineLookUp2, 120, 200, 360); // 200hz 42 amplitude 2min+++sek z rad, 300hz 50 amplitude 36 sek z rad
			// 		generateSine(sineLookUp3, 240, 200, 360); 
					// lastacceltime = milis;
				}			
				if ((motorSpeed <setMotorSpeed) && setUd > -480)
 8001106:	4b4e      	ldr	r3, [pc, #312]	; (8001240 <main+0x284>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <main+0x274>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d20b      	bcs.n	800112a <main+0x16e>
 8001112:	4b4d      	ldr	r3, [pc, #308]	; (8001248 <main+0x28c>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001254 <main+0x298>
 800111c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	dd01      	ble.n	800112a <main+0x16e>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <main+0x170>
 800112a:	2300      	movs	r3, #0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <main+0x180>
				{				
					motorSpeed++;			
 8001130:	4b43      	ldr	r3, [pc, #268]	; (8001240 <main+0x284>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a42      	ldr	r2, [pc, #264]	; (8001240 <main+0x284>)
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e003      	b.n	8001144 <main+0x188>
				}
				else
				{
					motorSpeed =setMotorSpeed;
 800113c:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <main+0x274>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a3f      	ldr	r2, [pc, #252]	; (8001240 <main+0x284>)
 8001142:	6013      	str	r3, [r2, #0]
					//motorState = 0;
					// acceltime = milis - lastacceltime;				
				}
				prevMotorState = 1;
 8001144:	4b41      	ldr	r3, [pc, #260]	; (800124c <main+0x290>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]
			// }else 
			{
				//TIM2->ARR = 1;
			}  
			
			motorProcessLastTime = milis;
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <main+0x278>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a3a      	ldr	r2, [pc, #232]	; (8001238 <main+0x27c>)
 8001150:	6013      	str	r3, [r2, #0]
			// uart.print("beta:");
			// uart.print(iBeta);
			// uart.print("iD:");
			// uart.print(iD);
			// uart.print(",");
			uart.print("FilterediQ:");
 8001152:	4941      	ldr	r1, [pc, #260]	; (8001258 <main+0x29c>)
 8001154:	4833      	ldr	r0, [pc, #204]	; (8001224 <main+0x268>)
 8001156:	f000 fc9e 	bl	8001a96 <_ZN6Serial5printEPKc>
			uart.print(filterediQ);
 800115a:	4b40      	ldr	r3, [pc, #256]	; (800125c <main+0x2a0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f99e 	bl	80004a0 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	2103      	movs	r1, #3
 800116a:	ec43 2b10 	vmov	d0, r2, r3
 800116e:	482d      	ldr	r0, [pc, #180]	; (8001224 <main+0x268>)
 8001170:	f000 fcc1 	bl	8001af6 <_ZN6Serial5printEdh>
			uart.print(",");			
 8001174:	493a      	ldr	r1, [pc, #232]	; (8001260 <main+0x2a4>)
 8001176:	482b      	ldr	r0, [pc, #172]	; (8001224 <main+0x268>)
 8001178:	f000 fc8d 	bl	8001a96 <_ZN6Serial5printEPKc>
			uart.print("uD:");
 800117c:	4939      	ldr	r1, [pc, #228]	; (8001264 <main+0x2a8>)
 800117e:	4829      	ldr	r0, [pc, #164]	; (8001224 <main+0x268>)
 8001180:	f000 fc89 	bl	8001a96 <_ZN6Serial5printEPKc>
			uart.print(setUd);
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <main+0x28c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f989 	bl	80004a0 <__aeabi_f2d>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	2103      	movs	r1, #3
 8001194:	ec43 2b10 	vmov	d0, r2, r3
 8001198:	4822      	ldr	r0, [pc, #136]	; (8001224 <main+0x268>)
 800119a:	f000 fcac 	bl	8001af6 <_ZN6Serial5printEdh>
			uart.print(",");
 800119e:	4930      	ldr	r1, [pc, #192]	; (8001260 <main+0x2a4>)
 80011a0:	4820      	ldr	r0, [pc, #128]	; (8001224 <main+0x268>)
 80011a2:	f000 fc78 	bl	8001a96 <_ZN6Serial5printEPKc>
			uart.print("uQ:");
 80011a6:	4930      	ldr	r1, [pc, #192]	; (8001268 <main+0x2ac>)
 80011a8:	481e      	ldr	r0, [pc, #120]	; (8001224 <main+0x268>)
 80011aa:	f000 fc74 	bl	8001a96 <_ZN6Serial5printEPKc>
			uart.print(setUq);
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <main+0x288>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f974 	bl	80004a0 <__aeabi_f2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	2103      	movs	r1, #3
 80011be:	ec43 2b10 	vmov	d0, r2, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <main+0x268>)
 80011c4:	f000 fc97 	bl	8001af6 <_ZN6Serial5printEdh>
			uart.print(",");
 80011c8:	4925      	ldr	r1, [pc, #148]	; (8001260 <main+0x2a4>)
 80011ca:	4816      	ldr	r0, [pc, #88]	; (8001224 <main+0x268>)
 80011cc:	f000 fc63 	bl	8001a96 <_ZN6Serial5printEPKc>
			uart.print("speed:");
 80011d0:	4926      	ldr	r1, [pc, #152]	; (800126c <main+0x2b0>)
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <main+0x268>)
 80011d4:	f000 fc5f 	bl	8001a96 <_ZN6Serial5printEPKc>
			uart.print((int)motorSpeed);
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <main+0x284>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	4811      	ldr	r0, [pc, #68]	; (8001224 <main+0x268>)
 80011e0:	f000 fc70 	bl	8001ac4 <_ZN6Serial5printEi>
			// uart.print(",");
			// uart.print("iQ:");
			// uart.print(iQ);
			uart.print(",");
 80011e4:	491e      	ldr	r1, [pc, #120]	; (8001260 <main+0x2a4>)
 80011e6:	480f      	ldr	r0, [pc, #60]	; (8001224 <main+0x268>)
 80011e8:	f000 fc55 	bl	8001a96 <_ZN6Serial5printEPKc>
			uart.print("filterediD:");
 80011ec:	4920      	ldr	r1, [pc, #128]	; (8001270 <main+0x2b4>)
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <main+0x268>)
 80011f0:	f000 fc51 	bl	8001a96 <_ZN6Serial5printEPKc>
			uart.println(filterediD);
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <main+0x2b8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f951 	bl	80004a0 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	2103      	movs	r1, #3
 8001204:	ec43 2b10 	vmov	d0, r2, r3
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <main+0x268>)
 800120a:	f000 fc9b 	bl	8001b44 <_ZN6Serial7printlnEdh>
		if (uart.readTillEOL(UARTrxData)) 
 800120e:	e6f8      	b.n	8001002 <main+0x46>
 8001210:	200000b4 	.word	0x200000b4
 8001214:	43f50000 	.word	0x43f50000
 8001218:	c3f50000 	.word	0xc3f50000
 800121c:	200000f4 	.word	0x200000f4
 8001220:	20000024 	.word	0x20000024
 8001224:	200001b8 	.word	0x200001b8
 8001228:	200000a8 	.word	0x200000a8
 800122c:	20000004 	.word	0x20000004
 8001230:	20000008 	.word	0x20000008
 8001234:	200002cc 	.word	0x200002cc
 8001238:	20000060 	.word	0x20000060
 800123c:	200000b0 	.word	0x200000b0
 8001240:	200000ac 	.word	0x200000ac
 8001244:	20000090 	.word	0x20000090
 8001248:	20000094 	.word	0x20000094
 800124c:	20000134 	.word	0x20000134
 8001250:	420c0000 	.word	0x420c0000
 8001254:	c3f00000 	.word	0xc3f00000
 8001258:	08003bb4 	.word	0x08003bb4
 800125c:	200000a0 	.word	0x200000a0
 8001260:	08003bc0 	.word	0x08003bc0
 8001264:	08003bc4 	.word	0x08003bc4
 8001268:	08003bc8 	.word	0x08003bc8
 800126c:	08003bcc 	.word	0x08003bcc
 8001270:	08003bd4 	.word	0x08003bd4
 8001274:	200000a4 	.word	0x200000a4

08001278 <TIM1_UP_TIM16_IRQHandler>:


extern "C"
{
	void TIM1_UP_TIM16_IRQHandler()
	{
 8001278:	b508      	push	{r3, lr}
 800127a:	ed2d 8b02 	vpush	{d8}
		TIM1->SR &= ~TIM_SR_UIF;
 800127e:	4b96      	ldr	r3, [pc, #600]	; (80014d8 <TIM1_UP_TIM16_IRQHandler+0x260>)
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	4a95      	ldr	r2, [pc, #596]	; (80014d8 <TIM1_UP_TIM16_IRQHandler+0x260>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	6113      	str	r3, [r2, #16]
		
			//iAlpha  = (0.66f)*(AdcDmaReadings[0]*0.0016541352f-3.3f) - (0.33f)*(AdcDmaReadings[1]*0.0016541352f-3.3f) + (0.33f)*(AdcDmaReadings[2]*0.0016541352f-3.3f);

			//iBeta   = (1.1547005f)*(AdcDmaReadings[1]*0.0016541352f-3.3f) - (1.1547005f)*(AdcDmaReadings[2]*0.0016541352f-3.3f);
		iA=AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET;
 800128a:	4b94      	ldr	r3, [pc, #592]	; (80014dc <TIM1_UP_TIM16_IRQHandler+0x264>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80014e0 <TIM1_UP_TIM16_IRQHandler+0x268>
 800129a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80014e4 <TIM1_UP_TIM16_IRQHandler+0x26c>
 80012a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012a6:	4b90      	ldr	r3, [pc, #576]	; (80014e8 <TIM1_UP_TIM16_IRQHandler+0x270>)
 80012a8:	edc3 7a00 	vstr	s15, [r3]
		iB=AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET;
 80012ac:	4b8b      	ldr	r3, [pc, #556]	; (80014dc <TIM1_UP_TIM16_IRQHandler+0x264>)
 80012ae:	889b      	ldrh	r3, [r3, #4]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80014e0 <TIM1_UP_TIM16_IRQHandler+0x268>
 80012bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80014e4 <TIM1_UP_TIM16_IRQHandler+0x26c>
 80012c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012c8:	4b88      	ldr	r3, [pc, #544]	; (80014ec <TIM1_UP_TIM16_IRQHandler+0x274>)
 80012ca:	edc3 7a00 	vstr	s15, [r3]
		iC=AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET;
 80012ce:	4b83      	ldr	r3, [pc, #524]	; (80014dc <TIM1_UP_TIM16_IRQHandler+0x264>)
 80012d0:	885b      	ldrh	r3, [r3, #2]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012da:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80014e0 <TIM1_UP_TIM16_IRQHandler+0x268>
 80012de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e2:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80014e4 <TIM1_UP_TIM16_IRQHandler+0x26c>
 80012e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ea:	4b81      	ldr	r3, [pc, #516]	; (80014f0 <TIM1_UP_TIM16_IRQHandler+0x278>)
 80012ec:	edc3 7a00 	vstr	s15, [r3]
		iAlpha  = iA;
 80012f0:	4b7d      	ldr	r3, [pc, #500]	; (80014e8 <TIM1_UP_TIM16_IRQHandler+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a7f      	ldr	r2, [pc, #508]	; (80014f4 <TIM1_UP_TIM16_IRQHandler+0x27c>)
 80012f6:	6013      	str	r3, [r2, #0]
		iBeta = (M_1_SQRT3*iAlpha) + (M_2_SQRT3 * iB);
 80012f8:	4b7e      	ldr	r3, [pc, #504]	; (80014f4 <TIM1_UP_TIM16_IRQHandler+0x27c>)
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80014f8 <TIM1_UP_TIM16_IRQHandler+0x280>
 8001302:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001306:	4b79      	ldr	r3, [pc, #484]	; (80014ec <TIM1_UP_TIM16_IRQHandler+0x274>)
 8001308:	edd3 7a00 	vldr	s15, [r3]
 800130c:	eddf 6a7b 	vldr	s13, [pc, #492]	; 80014fc <TIM1_UP_TIM16_IRQHandler+0x284>
 8001310:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	4b79      	ldr	r3, [pc, #484]	; (8001500 <TIM1_UP_TIM16_IRQHandler+0x288>)
 800131a:	edc3 7a00 	vstr	s15, [r3]
		theta = SetOLangle;
 800131e:	4b79      	ldr	r3, [pc, #484]	; (8001504 <TIM1_UP_TIM16_IRQHandler+0x28c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a79      	ldr	r2, [pc, #484]	; (8001508 <TIM1_UP_TIM16_IRQHandler+0x290>)
 8001324:	6013      	str	r3, [r2, #0]
		iD = iAlpha*cos(theta)+iBeta*sin(theta);
 8001326:	4b78      	ldr	r3, [pc, #480]	; (8001508 <TIM1_UP_TIM16_IRQHandler+0x290>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	f7ff fbd0 	bl	8000ad4 <_ZSt3cosf>
 8001334:	eeb0 7a40 	vmov.f32	s14, s0
 8001338:	4b6e      	ldr	r3, [pc, #440]	; (80014f4 <TIM1_UP_TIM16_IRQHandler+0x27c>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001342:	4b71      	ldr	r3, [pc, #452]	; (8001508 <TIM1_UP_TIM16_IRQHandler+0x290>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	f7ff fbd1 	bl	8000af2 <_ZSt3sinf>
 8001350:	eeb0 7a40 	vmov.f32	s14, s0
 8001354:	4b6a      	ldr	r3, [pc, #424]	; (8001500 <TIM1_UP_TIM16_IRQHandler+0x288>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001362:	4b6a      	ldr	r3, [pc, #424]	; (800150c <TIM1_UP_TIM16_IRQHandler+0x294>)
 8001364:	edc3 7a00 	vstr	s15, [r3]
		iQ = -iAlpha*sin(theta)+iBeta*cos(theta);
 8001368:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <TIM1_UP_TIM16_IRQHandler+0x27c>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	eeb1 8a67 	vneg.f32	s16, s15
 8001372:	4b65      	ldr	r3, [pc, #404]	; (8001508 <TIM1_UP_TIM16_IRQHandler+0x290>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	f7ff fbb9 	bl	8000af2 <_ZSt3sinf>
 8001380:	eef0 7a40 	vmov.f32	s15, s0
 8001384:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001388:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <TIM1_UP_TIM16_IRQHandler+0x290>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	f7ff fb9f 	bl	8000ad4 <_ZSt3cosf>
 8001396:	eeb0 7a40 	vmov.f32	s14, s0
 800139a:	4b59      	ldr	r3, [pc, #356]	; (8001500 <TIM1_UP_TIM16_IRQHandler+0x288>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013a8:	4b59      	ldr	r3, [pc, #356]	; (8001510 <TIM1_UP_TIM16_IRQHandler+0x298>)
 80013aa:	edc3 7a00 	vstr	s15, [r3]
		filterediQ = filterediQ + normalizedCoeff * (iQ - filterediQ);
 80013ae:	4b58      	ldr	r3, [pc, #352]	; (8001510 <TIM1_UP_TIM16_IRQHandler+0x298>)
 80013b0:	ed93 7a00 	vldr	s14, [r3]
 80013b4:	4b57      	ldr	r3, [pc, #348]	; (8001514 <TIM1_UP_TIM16_IRQHandler+0x29c>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013be:	4b56      	ldr	r3, [pc, #344]	; (8001518 <TIM1_UP_TIM16_IRQHandler+0x2a0>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c8:	4b52      	ldr	r3, [pc, #328]	; (8001514 <TIM1_UP_TIM16_IRQHandler+0x29c>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d2:	4b50      	ldr	r3, [pc, #320]	; (8001514 <TIM1_UP_TIM16_IRQHandler+0x29c>)
 80013d4:	edc3 7a00 	vstr	s15, [r3]
		filterediD = filterediD + normalizedCoeff * (iD - filterediD);
 80013d8:	4b4c      	ldr	r3, [pc, #304]	; (800150c <TIM1_UP_TIM16_IRQHandler+0x294>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	4b4f      	ldr	r3, [pc, #316]	; (800151c <TIM1_UP_TIM16_IRQHandler+0x2a4>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013e8:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <TIM1_UP_TIM16_IRQHandler+0x2a0>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <TIM1_UP_TIM16_IRQHandler+0x2a4>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	4b47      	ldr	r3, [pc, #284]	; (800151c <TIM1_UP_TIM16_IRQHandler+0x2a4>)
 80013fe:	edc3 7a00 	vstr	s15, [r3]
		
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001402:	4b47      	ldr	r3, [pc, #284]	; (8001520 <TIM1_UP_TIM16_IRQHandler+0x2a8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800140e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001524 <TIM1_UP_TIM16_IRQHandler+0x2ac>
 8001412:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001416:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001528 <TIM1_UP_TIM16_IRQHandler+0x2b0>
 800141a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141e:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8001422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <TIM1_UP_TIM16_IRQHandler+0x2b4>)
 8001428:	edc3 7a00 	vstr	s15, [r3]
			if (SetOLangle < M_2PI * POLE_PAIRS) 
 800142c:	4b35      	ldr	r3, [pc, #212]	; (8001504 <TIM1_UP_TIM16_IRQHandler+0x28c>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001530 <TIM1_UP_TIM16_IRQHandler+0x2b8>
 8001436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	bf4c      	ite	mi
 8001440:	2301      	movmi	r3, #1
 8001442:	2300      	movpl	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <TIM1_UP_TIM16_IRQHandler+0x1ea>
			{
				SetOLangle += velChange;
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <TIM1_UP_TIM16_IRQHandler+0x2b4>)
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <TIM1_UP_TIM16_IRQHandler+0x28c>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <TIM1_UP_TIM16_IRQHandler+0x28c>)
 800145c:	edc3 7a00 	vstr	s15, [r3]
 8001460:	e003      	b.n	800146a <TIM1_UP_TIM16_IRQHandler+0x1f2>
			}
			else
			{
				SetOLangle = 0;
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <TIM1_UP_TIM16_IRQHandler+0x28c>)
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
			}
		if (motorState )
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <TIM1_UP_TIM16_IRQHandler+0x2bc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d01c      	beq.n	80014ac <TIM1_UP_TIM16_IRQHandler+0x234>
		{
		
			pidUq.Compute();
 8001472:	4831      	ldr	r0, [pc, #196]	; (8001538 <TIM1_UP_TIM16_IRQHandler+0x2c0>)
 8001474:	f001 faa1 	bl	80029ba <_ZN3PID7ComputeEv>
			pidUd.Compute();
 8001478:	4830      	ldr	r0, [pc, #192]	; (800153c <TIM1_UP_TIM16_IRQHandler+0x2c4>)
 800147a:	f001 fa9e 	bl	80029ba <_ZN3PID7ComputeEv>
			if (UART5->ISR & USART_ISR_ORE)
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <TIM1_UP_TIM16_IRQHandler+0x2c8>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	bf14      	ite	ne
 800148a:	2301      	movne	r3, #1
 800148c:	2300      	moveq	r3, #0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <TIM1_UP_TIM16_IRQHandler+0x234>
			{
				led.set();
 8001494:	482b      	ldr	r0, [pc, #172]	; (8001544 <TIM1_UP_TIM16_IRQHandler+0x2cc>)
 8001496:	f001 f871 	bl	800257c <_ZN4GPIO3setEv>
				UART5->ICR |= USART_ICR_ORECF;
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <TIM1_UP_TIM16_IRQHandler+0x2c8>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a28      	ldr	r2, [pc, #160]	; (8001540 <TIM1_UP_TIM16_IRQHandler+0x2c8>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6213      	str	r3, [r2, #32]
				uart.bufferFlush();
 80014a6:	4828      	ldr	r0, [pc, #160]	; (8001548 <TIM1_UP_TIM16_IRQHandler+0x2d0>)
 80014a8:	f000 fbf4 	bl	8001c94 <_ZN6Serial11bufferFlushEv>
			
		
		}


		setPhaseVoltage(setUq, setUd, SetOLangle);
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <TIM1_UP_TIM16_IRQHandler+0x2d4>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <TIM1_UP_TIM16_IRQHandler+0x2d8>)
 80014b4:	ed93 7a00 	vldr	s14, [r3]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <TIM1_UP_TIM16_IRQHandler+0x28c>)
 80014ba:	edd3 6a00 	vldr	s13, [r3]
 80014be:	eeb0 1a66 	vmov.f32	s2, s13
 80014c2:	eef0 0a47 	vmov.f32	s1, s14
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	f7ff fcd7 	bl	8000e7c <_Z15setPhaseVoltagefff>
	}
 80014ce:	bf00      	nop
 80014d0:	ecbd 8b02 	vpop	{d8}
 80014d4:	bd08      	pop	{r3, pc}
 80014d6:	bf00      	nop
 80014d8:	40012c00 	.word	0x40012c00
 80014dc:	20000058 	.word	0x20000058
 80014e0:	3d2aa32b 	.word	0x3d2aa32b
 80014e4:	42a4ffff 	.word	0x42a4ffff
 80014e8:	20000064 	.word	0x20000064
 80014ec:	20000068 	.word	0x20000068
 80014f0:	2000006c 	.word	0x2000006c
 80014f4:	20000070 	.word	0x20000070
 80014f8:	3f13cd3a 	.word	0x3f13cd3a
 80014fc:	3f93cd3a 	.word	0x3f93cd3a
 8001500:	20000074 	.word	0x20000074
 8001504:	2000008c 	.word	0x2000008c
 8001508:	20000084 	.word	0x20000084
 800150c:	20000078 	.word	0x20000078
 8001510:	2000007c 	.word	0x2000007c
 8001514:	200000a0 	.word	0x200000a0
 8001518:	20000000 	.word	0x20000000
 800151c:	200000a4 	.word	0x200000a4
 8001520:	200000ac 	.word	0x200000ac
 8001524:	3dd67770 	.word	0x3dd67770
 8001528:	471c4000 	.word	0x471c4000
 800152c:	20000088 	.word	0x20000088
 8001530:	428a3ae7 	.word	0x428a3ae7
 8001534:	200000a8 	.word	0x200000a8
 8001538:	200000b4 	.word	0x200000b4
 800153c:	200000f4 	.word	0x200000f4
 8001540:	40005000 	.word	0x40005000
 8001544:	200001b0 	.word	0x200001b0
 8001548:	200001b8 	.word	0x200001b8
 800154c:	20000090 	.word	0x20000090
 8001550:	20000094 	.word	0x20000094

08001554 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0>:
}
 8001554:	b500      	push	{lr}
 8001556:	b085      	sub	sp, #20
 8001558:	9003      	str	r0, [sp, #12]
 800155a:	9102      	str	r1, [sp, #8]
 800155c:	9b03      	ldr	r3, [sp, #12]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d12c      	bne.n	80015bc <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x68>
 8001562:	9b02      	ldr	r3, [sp, #8]
 8001564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001568:	4293      	cmp	r3, r2
 800156a:	d127      	bne.n	80015bc <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x68>
uint32_t slopeInterval = 1000/accell;
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x70>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x74>)
 800157a:	6013      	str	r3, [r2, #0]
PID pidUq (&filterediQ,  &setUq, &setiQ, 1, 2.5, 0.0001, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
 800157c:	2300      	movs	r3, #0
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2301      	movs	r3, #1
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80015cc <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x78>
 8001588:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 800158c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x7c>)
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x80>)
 8001594:	4910      	ldr	r1, [pc, #64]	; (80015d8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x84>)
 8001596:	4811      	ldr	r0, [pc, #68]	; (80015dc <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x88>)
 8001598:	f001 f99e 	bl	80028d8 <_ZN3PIDC1EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef>
PID pidUd (&filterediD,  &setUd, &setiD, 1, 2.5, 0.0001, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
 800159c:	2300      	movs	r3, #0
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	2301      	movs	r3, #1
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	ed9f 1a09 	vldr	s2, [pc, #36]	; 80015cc <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x78>
 80015a8:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 80015ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x8c>)
 80015b2:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x90>)
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x94>)
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x98>)
 80015b8:	f001 f98e 	bl	80028d8 <_ZN3PIDC1EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef>
}
 80015bc:	bf00      	nop
 80015be:	b005      	add	sp, #20
 80015c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80015c4:	2000000c 	.word	0x2000000c
 80015c8:	200000b0 	.word	0x200000b0
 80015cc:	38d1b717 	.word	0x38d1b717
 80015d0:	20000004 	.word	0x20000004
 80015d4:	20000090 	.word	0x20000090
 80015d8:	200000a0 	.word	0x200000a0
 80015dc:	200000b4 	.word	0x200000b4
 80015e0:	20000080 	.word	0x20000080
 80015e4:	20000094 	.word	0x20000094
 80015e8:	200000a4 	.word	0x200000a4
 80015ec:	200000f4 	.word	0x200000f4

080015f0 <_GLOBAL__sub_I_sineLookUp>:
 80015f0:	b508      	push	{r3, lr}
 80015f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff ffac 	bl	8001554 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0>
 80015fc:	bd08      	pop	{r3, pc}
	...

08001600 <UART5_IRQHandler>:
int clockFreq = 160000000; // hard coded core clock freq, to be changed later

extern "C"
{
void UART5_IRQHandler()
	{
 8001600:	b508      	push	{r3, lr}
		uart.interrupt();
 8001602:	4802      	ldr	r0, [pc, #8]	; (800160c <UART5_IRQHandler+0xc>)
 8001604:	f000 fb26 	bl	8001c54 <_ZN6Serial9interruptEv>
	}
 8001608:	bf00      	nop
 800160a:	bd08      	pop	{r3, pc}
 800160c:	200001b8 	.word	0x200001b8

08001610 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1>:
}
float map (float _variable, float _inLowerRange, float _inUpperRange, float _outLowerRange, float _outUpperRange)
{
    float rangeCoefficient = (_outUpperRange - _outLowerRange)/(_inUpperRange - _inLowerRange);
    return _variable * rangeCoefficient + _outLowerRange;
}
 8001610:	b500      	push	{lr}
 8001612:	b087      	sub	sp, #28
 8001614:	9005      	str	r0, [sp, #20]
 8001616:	9104      	str	r1, [sp, #16]
 8001618:	9b05      	ldr	r3, [sp, #20]
 800161a:	2b01      	cmp	r3, #1
 800161c:	f040 80f2 	bne.w	8001804 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x1f4>
 8001620:	9b04      	ldr	r3, [sp, #16]
 8001622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001626:	4293      	cmp	r3, r2
 8001628:	f040 80ec 	bne.w	8001804 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x1f4>
GPIO uartTX (GPIOD, 2, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::PullUp, 5);
 800162c:	2305      	movs	r3, #5
 800162e:	9303      	str	r3, [sp, #12]
 8001630:	2301      	movs	r3, #1
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2300      	movs	r3, #0
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	2300      	movs	r3, #0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2302      	movs	r3, #2
 800163e:	2202      	movs	r2, #2
 8001640:	4972      	ldr	r1, [pc, #456]	; (800180c <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x1fc>)
 8001642:	4873      	ldr	r0, [pc, #460]	; (8001810 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x200>)
 8001644:	f000 fe7a 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO uartRX (GPIOC, 12, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::PullDown, 5);
 8001648:	2305      	movs	r3, #5
 800164a:	9303      	str	r3, [sp, #12]
 800164c:	2302      	movs	r3, #2
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	2300      	movs	r3, #0
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2300      	movs	r3, #0
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2302      	movs	r3, #2
 800165a:	220c      	movs	r2, #12
 800165c:	496d      	ldr	r1, [pc, #436]	; (8001814 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x204>)
 800165e:	486e      	ldr	r0, [pc, #440]	; (8001818 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x208>)
 8001660:	f000 fe6c 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO i2cSCL (GPIOC, 8, GPIOmode::AF, GPIOtype::OpenDrain, GPIOspeed::Low, GPIOpull::None, 8);
 8001664:	2308      	movs	r3, #8
 8001666:	9303      	str	r3, [sp, #12]
 8001668:	2300      	movs	r3, #0
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	2300      	movs	r3, #0
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	2301      	movs	r3, #1
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2302      	movs	r3, #2
 8001676:	2208      	movs	r2, #8
 8001678:	4966      	ldr	r1, [pc, #408]	; (8001814 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x204>)
 800167a:	4868      	ldr	r0, [pc, #416]	; (800181c <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x20c>)
 800167c:	f000 fe5e 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO i2cSDA (GPIOC, 9, GPIOmode::AF, GPIOtype::OpenDrain, GPIOspeed::Low, GPIOpull::None, 8);
 8001680:	2308      	movs	r3, #8
 8001682:	9303      	str	r3, [sp, #12]
 8001684:	2300      	movs	r3, #0
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2300      	movs	r3, #0
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2301      	movs	r3, #1
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2302      	movs	r3, #2
 8001692:	2209      	movs	r2, #9
 8001694:	495f      	ldr	r1, [pc, #380]	; (8001814 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x204>)
 8001696:	4862      	ldr	r0, [pc, #392]	; (8001820 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x210>)
 8001698:	f000 fe50 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim2ch1 (GPIOA, 0, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 1);
 800169c:	2301      	movs	r3, #1
 800169e:	9303      	str	r3, [sp, #12]
 80016a0:	2300      	movs	r3, #0
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	2300      	movs	r3, #0
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	2300      	movs	r3, #0
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2302      	movs	r3, #2
 80016ae:	2200      	movs	r2, #0
 80016b0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80016b4:	485b      	ldr	r0, [pc, #364]	; (8001824 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x214>)
 80016b6:	f000 fe41 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch1 (GPIOC, 0, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 2);
 80016ba:	2302      	movs	r3, #2
 80016bc:	9303      	str	r3, [sp, #12]
 80016be:	2300      	movs	r3, #0
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	2300      	movs	r3, #0
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2302      	movs	r3, #2
 80016cc:	2200      	movs	r2, #0
 80016ce:	4951      	ldr	r1, [pc, #324]	; (8001814 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x204>)
 80016d0:	4855      	ldr	r0, [pc, #340]	; (8001828 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x218>)
 80016d2:	f000 fe33 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch1N (GPIOC, 13, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 4);
 80016d6:	2304      	movs	r3, #4
 80016d8:	9303      	str	r3, [sp, #12]
 80016da:	2300      	movs	r3, #0
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2300      	movs	r3, #0
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2302      	movs	r3, #2
 80016e8:	220d      	movs	r2, #13
 80016ea:	494a      	ldr	r1, [pc, #296]	; (8001814 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x204>)
 80016ec:	484f      	ldr	r0, [pc, #316]	; (800182c <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x21c>)
 80016ee:	f000 fe25 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch2 (GPIOC, 1, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 2);
 80016f2:	2302      	movs	r3, #2
 80016f4:	9303      	str	r3, [sp, #12]
 80016f6:	2300      	movs	r3, #0
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	2300      	movs	r3, #0
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	2300      	movs	r3, #0
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2302      	movs	r3, #2
 8001704:	2201      	movs	r2, #1
 8001706:	4943      	ldr	r1, [pc, #268]	; (8001814 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x204>)
 8001708:	4849      	ldr	r0, [pc, #292]	; (8001830 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x220>)
 800170a:	f000 fe17 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch2N (GPIOB, 0, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 6);
 800170e:	2306      	movs	r3, #6
 8001710:	9303      	str	r3, [sp, #12]
 8001712:	2300      	movs	r3, #0
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2300      	movs	r3, #0
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	2300      	movs	r3, #0
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2302      	movs	r3, #2
 8001720:	2200      	movs	r2, #0
 8001722:	4944      	ldr	r1, [pc, #272]	; (8001834 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x224>)
 8001724:	4844      	ldr	r0, [pc, #272]	; (8001838 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x228>)
 8001726:	f000 fe09 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch3 (GPIOA, 10, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 6);
 800172a:	2306      	movs	r3, #6
 800172c:	9303      	str	r3, [sp, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	2300      	movs	r3, #0
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	2300      	movs	r3, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2302      	movs	r3, #2
 800173c:	220a      	movs	r2, #10
 800173e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001742:	483e      	ldr	r0, [pc, #248]	; (800183c <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x22c>)
 8001744:	f000 fdfa 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch3N (GPIOB, 9, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 12);
 8001748:	230c      	movs	r3, #12
 800174a:	9303      	str	r3, [sp, #12]
 800174c:	2300      	movs	r3, #0
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2302      	movs	r3, #2
 800175a:	2209      	movs	r2, #9
 800175c:	4935      	ldr	r1, [pc, #212]	; (8001834 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x224>)
 800175e:	4838      	ldr	r0, [pc, #224]	; (8001840 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x230>)
 8001760:	f000 fdec 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO adc1Ch1 (GPIOA, 0, GPIOmode::Analog);
 8001764:	2300      	movs	r3, #0
 8001766:	9303      	str	r3, [sp, #12]
 8001768:	2300      	movs	r3, #0
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	2300      	movs	r3, #0
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	2300      	movs	r3, #0
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2303      	movs	r3, #3
 8001776:	2200      	movs	r2, #0
 8001778:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800177c:	4831      	ldr	r0, [pc, #196]	; (8001844 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x234>)
 800177e:	f000 fddd 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO adc1Ch8 (GPIOC, 2, GPIOmode::Analog);
 8001782:	2300      	movs	r3, #0
 8001784:	9303      	str	r3, [sp, #12]
 8001786:	2300      	movs	r3, #0
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	2300      	movs	r3, #0
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	2300      	movs	r3, #0
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2303      	movs	r3, #3
 8001794:	2202      	movs	r2, #2
 8001796:	491f      	ldr	r1, [pc, #124]	; (8001814 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x204>)
 8001798:	482b      	ldr	r0, [pc, #172]	; (8001848 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x238>)
 800179a:	f000 fdcf 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO adc1Ch9 (GPIOC, 3, GPIOmode::Analog);
 800179e:	2300      	movs	r3, #0
 80017a0:	9303      	str	r3, [sp, #12]
 80017a2:	2300      	movs	r3, #0
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	2300      	movs	r3, #0
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	2300      	movs	r3, #0
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2303      	movs	r3, #3
 80017b0:	2203      	movs	r2, #3
 80017b2:	4918      	ldr	r1, [pc, #96]	; (8001814 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x204>)
 80017b4:	4825      	ldr	r0, [pc, #148]	; (800184c <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x23c>)
 80017b6:	f000 fdc1 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO adc2Ch12 (GPIOB, 2, GPIOmode::Analog); //Vin
 80017ba:	2300      	movs	r3, #0
 80017bc:	9303      	str	r3, [sp, #12]
 80017be:	2300      	movs	r3, #0
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	2300      	movs	r3, #0
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	2300      	movs	r3, #0
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2303      	movs	r3, #3
 80017cc:	2202      	movs	r2, #2
 80017ce:	4919      	ldr	r1, [pc, #100]	; (8001834 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x224>)
 80017d0:	481f      	ldr	r0, [pc, #124]	; (8001850 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x240>)
 80017d2:	f000 fdb3 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO led (GPIOC, 4, GPIOmode::Output, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 0);
 80017d6:	2300      	movs	r3, #0
 80017d8:	9303      	str	r3, [sp, #12]
 80017da:	2300      	movs	r3, #0
 80017dc:	9302      	str	r3, [sp, #8]
 80017de:	2300      	movs	r3, #0
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	2300      	movs	r3, #0
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2301      	movs	r3, #1
 80017e8:	2204      	movs	r2, #4
 80017ea:	490a      	ldr	r1, [pc, #40]	; (8001814 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x204>)
 80017ec:	4819      	ldr	r0, [pc, #100]	; (8001854 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x244>)
 80017ee:	f000 fda5 	bl	800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
Serial uart (UART5, 500000);
 80017f2:	4a19      	ldr	r2, [pc, #100]	; (8001858 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x248>)
 80017f4:	4919      	ldr	r1, [pc, #100]	; (800185c <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x24c>)
 80017f6:	481a      	ldr	r0, [pc, #104]	; (8001860 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x250>)
 80017f8:	f000 f866 	bl	80018c8 <_ZN6SerialC1EP13USART_TypeDefi>
I2C i2c3 (I2C3);
 80017fc:	4919      	ldr	r1, [pc, #100]	; (8001864 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x254>)
 80017fe:	481a      	ldr	r0, [pc, #104]	; (8001868 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x258>)
 8001800:	f000 fece 	bl	80025a0 <_ZN3I2CC1EP11I2C_TypeDef>
}
 8001804:	bf00      	nop
 8001806:	b007      	add	sp, #28
 8001808:	f85d fb04 	ldr.w	pc, [sp], #4
 800180c:	48000c00 	.word	0x48000c00
 8001810:	20000138 	.word	0x20000138
 8001814:	48000800 	.word	0x48000800
 8001818:	20000140 	.word	0x20000140
 800181c:	20000148 	.word	0x20000148
 8001820:	20000150 	.word	0x20000150
 8001824:	20000158 	.word	0x20000158
 8001828:	20000160 	.word	0x20000160
 800182c:	20000168 	.word	0x20000168
 8001830:	20000170 	.word	0x20000170
 8001834:	48000400 	.word	0x48000400
 8001838:	20000178 	.word	0x20000178
 800183c:	20000180 	.word	0x20000180
 8001840:	20000188 	.word	0x20000188
 8001844:	20000190 	.word	0x20000190
 8001848:	20000198 	.word	0x20000198
 800184c:	200001a0 	.word	0x200001a0
 8001850:	200001a8 	.word	0x200001a8
 8001854:	200001b0 	.word	0x200001b0
 8001858:	0007a120 	.word	0x0007a120
 800185c:	40005000 	.word	0x40005000
 8001860:	200001b8 	.word	0x200001b8
 8001864:	40007800 	.word	0x40007800
 8001868:	200002c8 	.word	0x200002c8

0800186c <_GLOBAL__sub_I__ZN12ClockManager8hseClockE>:
 800186c:	b508      	push	{r3, lr}
 800186e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff fecc 	bl	8001610 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1>
 8001878:	bd08      	pop	{r3, pc}
	...

0800187c <__NVIC_EnableIRQ.lto_priv.1>:
{
 800187c:	b082      	sub	sp, #8
 800187e:	4603      	mov	r3, r0
 8001880:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0c      	blt.n	80018a6 <__NVIC_EnableIRQ.lto_priv.1+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4905      	ldr	r1, [pc, #20]	; (80018ac <__NVIC_EnableIRQ.lto_priv.1+0x30>)
 8001896:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018a6:	bf00      	nop
 80018a8:	b002      	add	sp, #8
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <_ZN6BufferILi256EEC1Ev>:
#include <stdint.h>


template < int bSize >

class Buffer
 80018b0:	b082      	sub	sp, #8
 80018b2:	9001      	str	r0, [sp, #4]
 80018b4:	9b01      	ldr	r3, [sp, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	9b01      	ldr	r3, [sp, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	705a      	strb	r2, [r3, #1]
 80018c0:	9b01      	ldr	r3, [sp, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	b002      	add	sp, #8
 80018c6:	4770      	bx	lr

080018c8 <_ZN6SerialC1EP13USART_TypeDefi>:
#include "UART.h"


Serial::Serial (USART_TypeDef *_USARTx, int _baudRate): baudRate(_baudRate), USARTx(_USARTx)
 80018c8:	b500      	push	{lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	9003      	str	r0, [sp, #12]
 80018ce:	9102      	str	r1, [sp, #8]
 80018d0:	9201      	str	r2, [sp, #4]
 80018d2:	9b03      	ldr	r3, [sp, #12]
 80018d4:	9a01      	ldr	r2, [sp, #4]
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	9b03      	ldr	r3, [sp, #12]
 80018da:	9a02      	ldr	r2, [sp, #8]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	9b03      	ldr	r3, [sp, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	721a      	strb	r2, [r3, #8]
 80018e4:	9b03      	ldr	r3, [sp, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	725a      	strb	r2, [r3, #9]
 80018ea:	9b03      	ldr	r3, [sp, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	729a      	strb	r2, [r3, #10]
 80018f0:	9b03      	ldr	r3, [sp, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	72da      	strb	r2, [r3, #11]
 80018f6:	9b03      	ldr	r3, [sp, #12]
 80018f8:	330c      	adds	r3, #12
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ffd8 	bl	80018b0 <_ZN6BufferILi256EEC1Ev>
{
	
	
	//delay(100);

	switch ((uint32_t)USARTx)
 8001900:	9b03      	ldr	r3, [sp, #12]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <_ZN6SerialC1EP13USART_TypeDefi+0x17c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d016      	beq.n	8001938 <_ZN6SerialC1EP13USART_TypeDefi+0x70>
 800190a:	4a4e      	ldr	r2, [pc, #312]	; (8001a44 <_ZN6SerialC1EP13USART_TypeDefi+0x17c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	f200 8081 	bhi.w	8001a14 <_ZN6SerialC1EP13USART_TypeDefi+0x14c>
 8001912:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <_ZN6SerialC1EP13USART_TypeDefi+0x180>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d067      	beq.n	80019e8 <_ZN6SerialC1EP13USART_TypeDefi+0x120>
 8001918:	4a4b      	ldr	r2, [pc, #300]	; (8001a48 <_ZN6SerialC1EP13USART_TypeDefi+0x180>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d87a      	bhi.n	8001a14 <_ZN6SerialC1EP13USART_TypeDefi+0x14c>
 800191e:	4a4b      	ldr	r2, [pc, #300]	; (8001a4c <_ZN6SerialC1EP13USART_TypeDefi+0x184>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d04b      	beq.n	80019bc <_ZN6SerialC1EP13USART_TypeDefi+0xf4>
 8001924:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <_ZN6SerialC1EP13USART_TypeDefi+0x184>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d874      	bhi.n	8001a14 <_ZN6SerialC1EP13USART_TypeDefi+0x14c>
 800192a:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <_ZN6SerialC1EP13USART_TypeDefi+0x188>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d019      	beq.n	8001964 <_ZN6SerialC1EP13USART_TypeDefi+0x9c>
 8001930:	4a48      	ldr	r2, [pc, #288]	; (8001a54 <_ZN6SerialC1EP13USART_TypeDefi+0x18c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d02c      	beq.n	8001990 <_ZN6SerialC1EP13USART_TypeDefi+0xc8>
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_UART5RST;
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_UART5RST;
    NVIC_EnableIRQ(IRQn_Type::UART5_IRQn);
		break;
	default:
		break;
 8001936:	e06d      	b.n	8001a14 <_ZN6SerialC1EP13USART_TypeDefi+0x14c>
	RCC->APB2ENR  |= RCC_APB2ENR_USART1EN;
 8001938:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 800193a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193c:	4a46      	ldr	r2, [pc, #280]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 800193e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001942:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->APB2RSTR |= RCC_APB2RSTR_USART1RST;
 8001944:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a43      	ldr	r2, [pc, #268]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 800194a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB2RSTR &= ~RCC_APB2RSTR_USART1RST;
 8001950:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a40      	ldr	r2, [pc, #256]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
    NVIC_EnableIRQ(IRQn_Type::USART1_IRQn);
 800195c:	2025      	movs	r0, #37	; 0x25
 800195e:	f7ff ff8d 	bl	800187c <__NVIC_EnableIRQ.lto_priv.1>
		break;
 8001962:	e058      	b.n	8001a16 <_ZN6SerialC1EP13USART_TypeDefi+0x14e>
	RCC->APB1ENR1  |= RCC_APB1ENR1_USART2EN;
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	4a3b      	ldr	r2, [pc, #236]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 800196a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196e:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_USART2RST;
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001974:	4a38      	ldr	r2, [pc, #224]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197a:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_USART2RST;
 800197c:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	4a35      	ldr	r2, [pc, #212]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001982:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001986:	6393      	str	r3, [r2, #56]	; 0x38
    NVIC_EnableIRQ(IRQn_Type::USART2_IRQn);
 8001988:	2026      	movs	r0, #38	; 0x26
 800198a:	f7ff ff77 	bl	800187c <__NVIC_EnableIRQ.lto_priv.1>
		break;
 800198e:	e042      	b.n	8001a16 <_ZN6SerialC1EP13USART_TypeDefi+0x14e>
	RCC->APB1ENR1  |= RCC_APB1ENR1_USART3EN;
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	4a30      	ldr	r2, [pc, #192]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199a:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_USART3RST;
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	4a2d      	ldr	r2, [pc, #180]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a6:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_USART3RST;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ac:	4a2a      	ldr	r2, [pc, #168]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6393      	str	r3, [r2, #56]	; 0x38
    NVIC_EnableIRQ(IRQn_Type::USART3_IRQn);
 80019b4:	2027      	movs	r0, #39	; 0x27
 80019b6:	f7ff ff61 	bl	800187c <__NVIC_EnableIRQ.lto_priv.1>
		break;
 80019ba:	e02c      	b.n	8001a16 <_ZN6SerialC1EP13USART_TypeDefi+0x14e>
	RCC->APB1ENR1  |= RCC_APB1ENR1_UART4EN;
 80019bc:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019c6:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_UART4RST;
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019cc:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019d2:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_UART4RST;
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d8:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019da:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80019de:	6393      	str	r3, [r2, #56]	; 0x38
    NVIC_EnableIRQ(IRQn_Type::UART4_IRQn);
 80019e0:	2034      	movs	r0, #52	; 0x34
 80019e2:	f7ff ff4b 	bl	800187c <__NVIC_EnableIRQ.lto_priv.1>
		break;
 80019e6:	e016      	b.n	8001a16 <_ZN6SerialC1EP13USART_TypeDefi+0x14e>
	RCC->APB1ENR1  |= RCC_APB1ENR1_UART5EN;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019f2:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_UART5RST;
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f8:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 80019fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019fe:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_UART5RST;
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001a06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a0a:	6393      	str	r3, [r2, #56]	; 0x38
    NVIC_EnableIRQ(IRQn_Type::UART5_IRQn);
 8001a0c:	2035      	movs	r0, #53	; 0x35
 8001a0e:	f7ff ff35 	bl	800187c <__NVIC_EnableIRQ.lto_priv.1>
		break;
 8001a12:	e000      	b.n	8001a16 <_ZN6SerialC1EP13USART_TypeDefi+0x14e>
		break;
 8001a14:	bf00      	nop
	}




    USARTx->BRR =  (AHB2clockFreq/baudRate);
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_ZN6SerialC1EP13USART_TypeDefi+0x194>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	9b03      	ldr	r3, [sp, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a22:	9b03      	ldr	r3, [sp, #12]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |= ( USART_CR1_UE| USART_CR1_RXNEIE | USART_CR1_TE | USART_CR1_RE);
 8001a28:	9b03      	ldr	r3, [sp, #12]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	9b03      	ldr	r3, [sp, #12]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8001a36:	601a      	str	r2, [r3, #0]
}
 8001a38:	9b03      	ldr	r3, [sp, #12]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	b005      	add	sp, #20
 8001a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a42:	bf00      	nop
 8001a44:	40013800 	.word	0x40013800
 8001a48:	40005000 	.word	0x40005000
 8001a4c:	40004c00 	.word	0x40004c00
 8001a50:	40004400 	.word	0x40004400
 8001a54:	40004800 	.word	0x40004800
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	20000010 	.word	0x20000010

08001a60 <_ZN6Serial8sendCharEc>:

void Serial::sendChar (char _char)
{
 8001a60:	b082      	sub	sp, #8
 8001a62:	9001      	str	r0, [sp, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	f88d 3003 	strb.w	r3, [sp, #3]
	USARTx->TDR = _char;
 8001a6a:	9b01      	ldr	r3, [sp, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001a74:	bf00      	nop
 8001a76:	9b01      	ldr	r3, [sp, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f3      	bne.n	8001a76 <_ZN6Serial8sendCharEc+0x16>
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	b002      	add	sp, #8
 8001a94:	4770      	bx	lr

08001a96 <_ZN6Serial5printEPKc>:

void Serial::print(const char* _string)
{
 8001a96:	b500      	push	{lr}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	9001      	str	r0, [sp, #4]
 8001a9c:	9100      	str	r1, [sp, #0]
	while (*_string)
 8001a9e:	e008      	b.n	8001ab2 <_ZN6Serial5printEPKc+0x1c>
	{
		sendChar(*_string);
 8001aa0:	9b00      	ldr	r3, [sp, #0]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	9801      	ldr	r0, [sp, #4]
 8001aa8:	f7ff ffda 	bl	8001a60 <_ZN6Serial8sendCharEc>
		_string++;
 8001aac:	9b00      	ldr	r3, [sp, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	9300      	str	r3, [sp, #0]
	while (*_string)
 8001ab2:	9b00      	ldr	r3, [sp, #0]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f2      	bne.n	8001aa0 <_ZN6Serial5printEPKc+0xa>
	}
}
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	b003      	add	sp, #12
 8001ac0:	f85d fb04 	ldr.w	pc, [sp], #4

08001ac4 <_ZN6Serial5printEi>:

void Serial::print(int _number)
{ 
 8001ac4:	b500      	push	{lr}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	9001      	str	r0, [sp, #4]
 8001aca:	9100      	str	r1, [sp, #0]
	char charTab[11]={};
 8001acc:	2300      	movs	r3, #0
 8001ace:	9303      	str	r3, [sp, #12]
 8001ad0:	ab04      	add	r3, sp, #16
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f8c3 2003 	str.w	r2, [r3, #3]
	typeConverter::IntToString(_number, charTab);
 8001ada:	ab03      	add	r3, sp, #12
 8001adc:	4619      	mov	r1, r3
 8001ade:	9800      	ldr	r0, [sp, #0]
 8001ae0:	f000 fdba 	bl	8002658 <_ZN13typeConverter11IntToStringEiPc>
	print(charTab);
 8001ae4:	ab03      	add	r3, sp, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	9801      	ldr	r0, [sp, #4]
 8001aea:	f7ff ffd4 	bl	8001a96 <_ZN6Serial5printEPKc>
}
 8001aee:	bf00      	nop
 8001af0:	b007      	add	sp, #28
 8001af2:	f85d fb04 	ldr.w	pc, [sp], #4

08001af6 <_ZN6Serial5printEdh>:

void Serial::print(double _number, uint8_t _percision)
{
 8001af6:	b510      	push	{r4, lr}
 8001af8:	b08a      	sub	sp, #40	; 0x28
 8001afa:	9003      	str	r0, [sp, #12]
 8001afc:	ed8d 0b00 	vstr	d0, [sp]
 8001b00:	460b      	mov	r3, r1
 8001b02:	f88d 300b 	strb.w	r3, [sp, #11]
	char charTab[20]={};
 8001b06:	2300      	movs	r3, #0
 8001b08:	9305      	str	r3, [sp, #20]
 8001b0a:	ab06      	add	r3, sp, #24
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
	typeConverter::fractionalToString(_number, charTab, _percision);
 8001b16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001b1a:	f7fe fd19 	bl	8000550 <__aeabi_d2f>
 8001b1e:	4604      	mov	r4, r0
 8001b20:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001b24:	ab05      	add	r3, sp, #20
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	ee00 4a10 	vmov	s0, r4
 8001b2e:	f000 fded 	bl	800270c <_ZN13typeConverter18fractionalToStringEfPch>
	print(charTab);
 8001b32:	ab05      	add	r3, sp, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	9803      	ldr	r0, [sp, #12]
 8001b38:	f7ff ffad 	bl	8001a96 <_ZN6Serial5printEPKc>
}
 8001b3c:	bf00      	nop
 8001b3e:	b00a      	add	sp, #40	; 0x28
 8001b40:	bd10      	pop	{r4, pc}
	...

08001b44 <_ZN6Serial7printlnEdh>:
    print(_number);
    print("\n");
}

void Serial::println(double _number, uint8_t _percision)
{
 8001b44:	b500      	push	{lr}
 8001b46:	b085      	sub	sp, #20
 8001b48:	9003      	str	r0, [sp, #12]
 8001b4a:	ed8d 0b00 	vstr	d0, [sp]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	f88d 300b 	strb.w	r3, [sp, #11]
	print(_number, _percision);
 8001b54:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	ed9d 0b00 	vldr	d0, [sp]
 8001b5e:	9803      	ldr	r0, [sp, #12]
 8001b60:	f7ff ffc9 	bl	8001af6 <_ZN6Serial5printEdh>
	print("\n");
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <_ZN6Serial7printlnEdh+0x30>)
 8001b66:	9803      	ldr	r0, [sp, #12]
 8001b68:	f7ff ff95 	bl	8001a96 <_ZN6Serial5printEPKc>
}
 8001b6c:	bf00      	nop
 8001b6e:	b005      	add	sp, #20
 8001b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b74:	08003be4 	.word	0x08003be4

08001b78 <_ZN6Serial8readCharEv>:

char Serial::readChar ()
{
 8001b78:	b500      	push	{lr}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	9001      	str	r0, [sp, #4]
	char tmpChar;
	buffer.read(&tmpChar);
 8001b7e:	9b01      	ldr	r3, [sp, #4]
 8001b80:	330c      	adds	r3, #12
 8001b82:	f10d 020f 	add.w	r2, sp, #15
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f88f 	bl	8001cac <_ZN6BufferILi256EE4readEPc>
	return tmpChar;
 8001b8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	b005      	add	sp, #20
 8001b96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001b9c <_ZN6Serial11readTillEOLEPc>:

bool Serial::readTillEOL (char *_line) // returns 1 if EOL is found, 0 if not, when EOL is found save read data to _line
{
 8001b9c:	b500      	push	{lr}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	9001      	str	r0, [sp, #4]
 8001ba2:	9100      	str	r1, [sp, #0]
	if (uart.available())
 8001ba4:	4822      	ldr	r0, [pc, #136]	; (8001c30 <_ZN6Serial11readTillEOLEPc+0x94>)
 8001ba6:	f000 f845 	bl	8001c34 <_ZN6Serial9availableEv>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d039      	beq.n	8001c24 <_ZN6Serial11readTillEOLEPc+0x88>
	{		
		
		if(count==0)
 8001bb0:	9b01      	ldr	r3, [sp, #4]
 8001bb2:	7a9b      	ldrb	r3, [r3, #10]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d112      	bne.n	8001bde <_ZN6Serial11readTillEOLEPc+0x42>
		{
				for (int i=0; i<=elementsToFlush; i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9305      	str	r3, [sp, #20]
 8001bbc:	e009      	b.n	8001bd2 <_ZN6Serial11readTillEOLEPc+0x36>
				{
					char* tempPtr =_line+i;
 8001bbe:	9b05      	ldr	r3, [sp, #20]
 8001bc0:	9a00      	ldr	r2, [sp, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	9304      	str	r3, [sp, #16]
					*tempPtr = 0;				
 8001bc6:	9b04      	ldr	r3, [sp, #16]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
				for (int i=0; i<=elementsToFlush; i++)
 8001bcc:	9b05      	ldr	r3, [sp, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	9305      	str	r3, [sp, #20]
 8001bd2:	9b01      	ldr	r3, [sp, #4]
 8001bd4:	7adb      	ldrb	r3, [r3, #11]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	9b05      	ldr	r3, [sp, #20]
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	ddef      	ble.n	8001bbe <_ZN6Serial11readTillEOLEPc+0x22>
				}							
		}		

		char c = uart.readChar();
 8001bde:	4814      	ldr	r0, [pc, #80]	; (8001c30 <_ZN6Serial11readTillEOLEPc+0x94>)
 8001be0:	f7ff ffca 	bl	8001b78 <_ZN6Serial8readCharEv>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f88d 300f 	strb.w	r3, [sp, #15]
		if (c == '\n')
 8001bea:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d108      	bne.n	8001c04 <_ZN6Serial11readTillEOLEPc+0x68>
		{
			//GPIOA->ODR ^= GPIO_ODR_OD5;
			elementsToFlush=count;
 8001bf2:	9b01      	ldr	r3, [sp, #4]
 8001bf4:	7a9a      	ldrb	r2, [r3, #10]
 8001bf6:	9b01      	ldr	r3, [sp, #4]
 8001bf8:	72da      	strb	r2, [r3, #11]
			count=0;
 8001bfa:	9b01      	ldr	r3, [sp, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	729a      	strb	r2, [r3, #10]
			return 1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e010      	b.n	8001c26 <_ZN6Serial11readTillEOLEPc+0x8a>
		}
		else
		{
			_line+=count;
 8001c04:	9b01      	ldr	r3, [sp, #4]
 8001c06:	7a9b      	ldrb	r3, [r3, #10]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	9b00      	ldr	r3, [sp, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	9300      	str	r3, [sp, #0]
			*_line=c;
 8001c10:	9b00      	ldr	r3, [sp, #0]
 8001c12:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001c16:	701a      	strb	r2, [r3, #0]
			count++;
 8001c18:	9b01      	ldr	r3, [sp, #4]
 8001c1a:	7a9b      	ldrb	r3, [r3, #10]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	9b01      	ldr	r3, [sp, #4]
 8001c22:	729a      	strb	r2, [r3, #10]
		}		
	}
	return 0;	
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	b007      	add	sp, #28
 8001c2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c2e:	bf00      	nop
 8001c30:	200001b8 	.word	0x200001b8

08001c34 <_ZN6Serial9availableEv>:

bool Serial::available ()
{
 8001c34:	b500      	push	{lr}
 8001c36:	b083      	sub	sp, #12
 8001c38:	9001      	str	r0, [sp, #4]
	return !buffer.empty();
 8001c3a:	9b01      	ldr	r3, [sp, #4]
 8001c3c:	330c      	adds	r3, #12
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f867 	bl	8001d12 <_ZN6BufferILi256EE5emptyEv>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	b003      	add	sp, #12
 8001c50:	f85d fb04 	ldr.w	pc, [sp], #4

08001c54 <_ZN6Serial9interruptEv>:



void Serial::interrupt()
{
 8001c54:	b500      	push	{lr}
 8001c56:	b085      	sub	sp, #20
 8001c58:	9001      	str	r0, [sp, #4]
		if (USARTx->ISR & USART_ISR_RXNE)
 8001c5a:	9b01      	ldr	r3, [sp, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <_ZN6Serial9interruptEv+0x38>
		{			
			char c = USARTx->RDR;
 8001c72:	9b01      	ldr	r3, [sp, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	f88d 300f 	strb.w	r3, [sp, #15]
			buffer.write(c);
 8001c7c:	9b01      	ldr	r3, [sp, #4]
 8001c7e:	330c      	adds	r3, #12
 8001c80:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f858 	bl	8001d3c <_ZN6BufferILi256EE5writeEc>
		}
}
 8001c8c:	bf00      	nop
 8001c8e:	b005      	add	sp, #20
 8001c90:	f85d fb04 	ldr.w	pc, [sp], #4

08001c94 <_ZN6Serial11bufferFlushEv>:

void Serial::bufferFlush()
{
 8001c94:	b500      	push	{lr}
 8001c96:	b083      	sub	sp, #12
 8001c98:	9001      	str	r0, [sp, #4]
	buffer.flush();
 8001c9a:	9b01      	ldr	r3, [sp, #4]
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f882 	bl	8001da8 <_ZN6BufferILi256EE5flushEv>
}
 8001ca4:	bf00      	nop
 8001ca6:	b003      	add	sp, #12
 8001ca8:	f85d fb04 	ldr.w	pc, [sp], #4

08001cac <_ZN6BufferILi256EE4readEPc>:
		head = 0;

	return Buffer::status::ok;
	
}
	status read(char* _data)
 8001cac:	b082      	sub	sp, #8
 8001cae:	9001      	str	r0, [sp, #4]
 8001cb0:	9100      	str	r1, [sp, #0]
	{
	if (tail==head) 
 8001cb2:	9b01      	ldr	r3, [sp, #4]
 8001cb4:	785b      	ldrb	r3, [r3, #1]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	9b01      	ldr	r3, [sp, #4]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <_ZN6BufferILi256EE4readEPc+0x24>
		return Buffer::status::bufferEmpty;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e01d      	b.n	8001d0c <_ZN6BufferILi256EE4readEPc+0x60>
		
	*_data=buffer[tail];
 8001cd0:	9b01      	ldr	r3, [sp, #4]
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	9b01      	ldr	r3, [sp, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	789a      	ldrb	r2, [r3, #2]
 8001cde:	9b00      	ldr	r3, [sp, #0]
 8001ce0:	701a      	strb	r2, [r3, #0]
	tail++;
 8001ce2:	9b01      	ldr	r3, [sp, #4]
 8001ce4:	785b      	ldrb	r3, [r3, #1]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	9b01      	ldr	r3, [sp, #4]
 8001cee:	705a      	strb	r2, [r3, #1]

	if ( tail == (bSize-1) )
 8001cf0:	9b01      	ldr	r3, [sp, #4]
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2bff      	cmp	r3, #255	; 0xff
 8001cf8:	bf0c      	ite	eq
 8001cfa:	2301      	moveq	r3, #1
 8001cfc:	2300      	movne	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <_ZN6BufferILi256EE4readEPc+0x5e>
		tail = 0;
 8001d04:	9b01      	ldr	r3, [sp, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]

	return Buffer::status::ok;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	b002      	add	sp, #8
 8001d10:	4770      	bx	lr

08001d12 <_ZN6BufferILi256EE5emptyEv>:
	bool empty()
 8001d12:	b082      	sub	sp, #8
 8001d14:	9001      	str	r0, [sp, #4]
		if (tail==head) 
 8001d16:	9b01      	ldr	r3, [sp, #4]
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	9b01      	ldr	r3, [sp, #4]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	429a      	cmp	r2, r3
 8001d24:	bf0c      	ite	eq
 8001d26:	2301      	moveq	r3, #1
 8001d28:	2300      	movne	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <_ZN6BufferILi256EE5emptyEv+0x22>
			return 1;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <_ZN6BufferILi256EE5emptyEv+0x24>
		return 0;		
 8001d34:	2300      	movs	r3, #0
	}
 8001d36:	4618      	mov	r0, r3
 8001d38:	b002      	add	sp, #8
 8001d3a:	4770      	bx	lr

08001d3c <_ZN6BufferILi256EE5writeEc>:
	status write(char _data)
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	9001      	str	r0, [sp, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((head+1)==tail)
 8001d46:	9b01      	ldr	r3, [sp, #4]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	9a01      	ldr	r2, [sp, #4]
 8001d50:	7852      	ldrb	r2, [r2, #1]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	4293      	cmp	r3, r2
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <_ZN6BufferILi256EE5writeEc+0x2a>
		return Buffer::status::bufferFull;
 8001d62:	2302      	movs	r3, #2
 8001d64:	e01d      	b.n	8001da2 <_ZN6BufferILi256EE5writeEc+0x66>
	buffer[head] = _data;
 8001d66:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001d6a:	9b01      	ldr	r3, [sp, #4]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	4619      	mov	r1, r3
 8001d72:	9b01      	ldr	r3, [sp, #4]
 8001d74:	440b      	add	r3, r1
 8001d76:	709a      	strb	r2, [r3, #2]
	head++;
 8001d78:	9b01      	ldr	r3, [sp, #4]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	9b01      	ldr	r3, [sp, #4]
 8001d84:	701a      	strb	r2, [r3, #0]
	if ( head == (bSize-1) )
 8001d86:	9b01      	ldr	r3, [sp, #4]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2bff      	cmp	r3, #255	; 0xff
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <_ZN6BufferILi256EE5writeEc+0x64>
		head = 0;
 8001d9a:	9b01      	ldr	r3, [sp, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
	return Buffer::status::ok;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	b002      	add	sp, #8
 8001da6:	4770      	bx	lr

08001da8 <_ZN6BufferILi256EE5flushEv>:
	void flush()
 8001da8:	b082      	sub	sp, #8
 8001daa:	9001      	str	r0, [sp, #4]
		head=0;
 8001dac:	9b01      	ldr	r3, [sp, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
		tail=0;
 8001db2:	9b01      	ldr	r3, [sp, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	705a      	strb	r2, [r3, #1]
	}
 8001db8:	bf00      	nop
 8001dba:	b002      	add	sp, #8
 8001dbc:	4770      	bx	lr
	...

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	9100      	str	r1, [sp, #0]
 8001dc6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dca:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db0a      	blt.n	8001de8 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	9b00      	ldr	r3, [sp, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x48>)
 8001dd8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de6:	e00b      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	9b00      	ldr	r3, [sp, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4907      	ldr	r1, [pc, #28]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	b002      	add	sp, #8
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b500      	push	{lr}
 8001e12:	b083      	sub	sp, #12
 8001e14:	9001      	str	r0, [sp, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e16:	9b01      	ldr	r3, [sp, #4]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e1e:	d301      	bcc.n	8001e24 <SysTick_Config+0x14>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e20:	2301      	movs	r3, #1
 8001e22:	e00f      	b.n	8001e44 <SysTick_Config+0x34>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e24:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <SysTick_Config+0x3c>)
 8001e26:	9b01      	ldr	r3, [sp, #4]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2c:	210f      	movs	r1, #15
 8001e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e32:	f7ff ffc5 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SysTick_Config+0x3c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <SysTick_Config+0x3c>)
 8001e3e:	2207      	movs	r2, #7
 8001e40:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	b003      	add	sp, #12
 8001e48:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <SysTick_Handler>:

extern "C"
{
    void SysTick_Handler()
	{
		milis++;
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <SysTick_Handler+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <SysTick_Handler+0x14>)
 8001e58:	6013      	str	r3, [r2, #0]
		TIM6->EGR = TIM_EGR_UG;
 8001e5a:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <SysTick_Handler+0x18>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	615a      	str	r2, [r3, #20]
	}
 8001e60:	bf00      	nop
 8001e62:	4770      	bx	lr
 8001e64:	200002cc 	.word	0x200002cc
 8001e68:	40001000 	.word	0x40001000

08001e6c <_ZN12ClockManager7hseInitEv>:
}

void ClockManager::hseInit()
{
	if (!(RCC->CR & RCC_CR_HSERDY))
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <_ZN12ClockManager7hseInitEv+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d011      	beq.n	8001ea6 <_ZN12ClockManager7hseInitEv+0x3a>
	{
		RCC->CR |= RCC_CR_HSEON;
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <_ZN12ClockManager7hseInitEv+0x40>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <_ZN12ClockManager7hseInitEv+0x40>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
		while(!(RCC->CR & RCC_CR_HSERDY));
 8001e8e:	bf00      	nop
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <_ZN12ClockManager7hseInitEv+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f4      	bne.n	8001e90 <_ZN12ClockManager7hseInitEv+0x24>
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000

08001eb0 <_ZN12ClockManager18internalFreqUpdateEm>:

void ClockManager::internalFreqUpdate(uint32_t _targetFreq)
{
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	9001      	str	r0, [sp, #4]
	uint32_t flashDiv = 35000000;
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <_ZN12ClockManager18internalFreqUpdateEm+0xf4>)
 8001eb6:	9305      	str	r3, [sp, #20]

	if (_targetFreq < 26000000)
 8001eb8:	9b01      	ldr	r3, [sp, #4]
 8001eba:	4a3b      	ldr	r2, [pc, #236]	; (8001fa8 <_ZN12ClockManager18internalFreqUpdateEm+0xf8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d812      	bhi.n	8001ee6 <_ZN12ClockManager18internalFreqUpdateEm+0x36>
	{
		
		PWR->CR1 = 0x2 << PWR_CR1_VOS_Pos;
 8001ec0:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8001ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec6:	601a      	str	r2, [r3, #0]
		while(PWR->SR2 & PWR_SR2_VOSF);
 8001ec8:	bf00      	nop
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f4      	bne.n	8001eca <_ZN12ClockManager18internalFreqUpdateEm+0x1a>
		flashDiv = 12000000;
 8001ee0:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <_ZN12ClockManager18internalFreqUpdateEm+0x100>)
 8001ee2:	9305      	str	r3, [sp, #20]
 8001ee4:	e031      	b.n	8001f4a <_ZN12ClockManager18internalFreqUpdateEm+0x9a>
	}
	else if (_targetFreq < 150000000)
 8001ee6:	9b01      	ldr	r3, [sp, #4]
 8001ee8:	4a32      	ldr	r2, [pc, #200]	; (8001fb4 <_ZN12ClockManager18internalFreqUpdateEm+0x104>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d817      	bhi.n	8001f1e <_ZN12ClockManager18internalFreqUpdateEm+0x6e>
	{
		
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8001ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef4:	601a      	str	r2, [r3, #0]
		while(PWR->SR2 & PWR_SR2_VOSF);
 8001ef6:	bf00      	nop
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f4      	bne.n	8001ef8 <_ZN12ClockManager18internalFreqUpdateEm+0x48>
		PWR->CR5 = PWR_CR5_R1MODE;
 8001f0e:	4b27      	ldr	r3, [pc, #156]	; (8001fac <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8001f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		flashDiv = 30000000;
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <_ZN12ClockManager18internalFreqUpdateEm+0x108>)
 8001f1a:	9305      	str	r3, [sp, #20]
 8001f1c:	e015      	b.n	8001f4a <_ZN12ClockManager18internalFreqUpdateEm+0x9a>
	}
	else
	{
		
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8001f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f24:	601a      	str	r2, [r3, #0]
		while(PWR->SR2 & PWR_SR2_VOSF);
 8001f26:	bf00      	nop
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf14      	ite	ne
 8001f34:	2301      	movne	r3, #1
 8001f36:	2300      	moveq	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f4      	bne.n	8001f28 <_ZN12ClockManager18internalFreqUpdateEm+0x78>
		PWR->CR5 = 0;
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		flashDiv = 34000000;
 8001f46:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <_ZN12ClockManager18internalFreqUpdateEm+0x10c>)
 8001f48:	9305      	str	r3, [sp, #20]
	}

	ahbClock = _targetFreq;
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <_ZN12ClockManager18internalFreqUpdateEm+0x110>)
 8001f4c:	9b01      	ldr	r3, [sp, #4]
 8001f4e:	6013      	str	r3, [r2, #0]

	uint32_t waitStates = ahbClock / flashDiv < 15 ? ahbClock / flashDiv : 15;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <_ZN12ClockManager18internalFreqUpdateEm+0x110>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	9b05      	ldr	r3, [sp, #20]
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	2b0f      	cmp	r3, #15
 8001f5c:	bf28      	it	cs
 8001f5e:	230f      	movcs	r3, #15
 8001f60:	9304      	str	r3, [sp, #16]
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <_ZN12ClockManager18internalFreqUpdateEm+0x114>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 030f 	bic.w	r3, r3, #15
 8001f6a:	9a04      	ldr	r2, [sp, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	9303      	str	r3, [sp, #12]
	
	FLASH->ACR = flashConf;
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_ZN12ClockManager18internalFreqUpdateEm+0x114>)
 8001f72:	9b03      	ldr	r3, [sp, #12]
 8001f74:	6013      	str	r3, [r2, #0]
	while(FLASH->ACR != flashConf)
 8001f76:	bf00      	nop
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <_ZN12ClockManager18internalFreqUpdateEm+0x114>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	9a03      	ldr	r2, [sp, #12]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	bf14      	ite	ne
 8001f82:	2301      	movne	r3, #1
 8001f84:	2300      	moveq	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f5      	bne.n	8001f78 <_ZN12ClockManager18internalFreqUpdateEm+0xc8>
		;


	apbClock = ahbClock;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <_ZN12ClockManager18internalFreqUpdateEm+0x110>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <_ZN12ClockManager18internalFreqUpdateEm+0x118>)
 8001f92:	6013      	str	r3, [r2, #0]
	timerClock = apbClock;
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <_ZN12ClockManager18internalFreqUpdateEm+0x118>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <_ZN12ClockManager18internalFreqUpdateEm+0x11c>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	b006      	add	sp, #24
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	02160ec0 	.word	0x02160ec0
 8001fa8:	018cba7f 	.word	0x018cba7f
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	00b71b00 	.word	0x00b71b00
 8001fb4:	08f0d17f 	.word	0x08f0d17f
 8001fb8:	01c9c380 	.word	0x01c9c380
 8001fbc:	0206cc80 	.word	0x0206cc80
 8001fc0:	20000018 	.word	0x20000018
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	2000001c 	.word	0x2000001c
 8001fcc:	20000020 	.word	0x20000020

08001fd0 <_ZN12ClockManager9setSysClkE6clkSrc>:

void ClockManager::setSysClk(const clkSrc _src)
{
 8001fd0:	b500      	push	{lr}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	9001      	str	r0, [sp, #4]
	uint32_t targetFreq = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9303      	str	r3, [sp, #12]
	switch(_src)
 8001fda:	9b01      	ldr	r3, [sp, #4]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d010      	beq.n	8002002 <_ZN12ClockManager9setSysClkE6clkSrc+0x32>
 8001fe0:	9b01      	ldr	r3, [sp, #4]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	dc11      	bgt.n	800200a <_ZN12ClockManager9setSysClkE6clkSrc+0x3a>
 8001fe6:	9b01      	ldr	r3, [sp, #4]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d003      	beq.n	8001ff4 <_ZN12ClockManager9setSysClkE6clkSrc+0x24>
 8001fec:	9b01      	ldr	r3, [sp, #4]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d003      	beq.n	8001ffa <_ZN12ClockManager9setSysClkE6clkSrc+0x2a>
 8001ff2:	e00a      	b.n	800200a <_ZN12ClockManager9setSysClkE6clkSrc+0x3a>
	{
	case clkSrc::hsi:
		targetFreq = hsiClock;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <_ZN12ClockManager9setSysClkE6clkSrc+0x94>)
 8001ff6:	9303      	str	r3, [sp, #12]
		break;
 8001ff8:	e007      	b.n	800200a <_ZN12ClockManager9setSysClkE6clkSrc+0x3a>
	case clkSrc::hse:
		targetFreq = hseClock;
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <_ZN12ClockManager9setSysClkE6clkSrc+0x98>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	9303      	str	r3, [sp, #12]
		break;
 8002000:	e003      	b.n	800200a <_ZN12ClockManager9setSysClkE6clkSrc+0x3a>
	case clkSrc::pll:
		targetFreq = pllClock.r;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <_ZN12ClockManager9setSysClkE6clkSrc+0x9c>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	9303      	str	r3, [sp, #12]
		break;
 8002008:	bf00      	nop
	}
	

	if(targetFreq > coreClock)
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <_ZN12ClockManager9setSysClkE6clkSrc+0xa0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	9a03      	ldr	r2, [sp, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d902      	bls.n	800201a <_ZN12ClockManager9setSysClkE6clkSrc+0x4a>
		internalFreqUpdate(targetFreq);
 8002014:	9803      	ldr	r0, [sp, #12]
 8002016:	f7ff ff4b 	bl	8001eb0 <_ZN12ClockManager18internalFreqUpdateEm>

	RCC->CFGR = (RCC->CFGR & ~0x7) | static_cast<uint32_t>(_src);
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <_ZN12ClockManager9setSysClkE6clkSrc+0xa4>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	4913      	ldr	r1, [pc, #76]	; (8002074 <_ZN12ClockManager9setSysClkE6clkSrc+0xa4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != static_cast<uint32_t>(_src) << RCC_CFGR_SWS_Pos);
 800202a:	bf00      	nop
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <_ZN12ClockManager9setSysClkE6clkSrc+0xa4>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 020c 	and.w	r2, r3, #12
 8002034:	9b01      	ldr	r3, [sp, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f2      	bne.n	800202c <_ZN12ClockManager9setSysClkE6clkSrc+0x5c>

	

	if(targetFreq < coreClock)
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <_ZN12ClockManager9setSysClkE6clkSrc+0xa0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	9a03      	ldr	r2, [sp, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d202      	bcs.n	8002056 <_ZN12ClockManager9setSysClkE6clkSrc+0x86>
		internalFreqUpdate(targetFreq);
 8002050:	9803      	ldr	r0, [sp, #12]
 8002052:	f7ff ff2d 	bl	8001eb0 <_ZN12ClockManager18internalFreqUpdateEm>
	coreClock = targetFreq;
 8002056:	4a06      	ldr	r2, [pc, #24]	; (8002070 <_ZN12ClockManager9setSysClkE6clkSrc+0xa0>)
 8002058:	9b03      	ldr	r3, [sp, #12]
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	b005      	add	sp, #20
 8002060:	f85d fb04 	ldr.w	pc, [sp], #4
 8002064:	00f42400 	.word	0x00f42400
 8002068:	08003be0 	.word	0x08003be0
 800206c:	200002d0 	.word	0x200002d0
 8002070:	20000014 	.word	0x20000014
 8002074:	40021000 	.word	0x40021000

08002078 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_>:

void ClockManager::pllCfg([[maybe_unused]] int _pllNum, int _targetFreq, int _p, pllDiv _q, pllDiv _r)
{
 8002078:	b510      	push	{r4, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	9007      	str	r0, [sp, #28]
 800207e:	9106      	str	r1, [sp, #24]
 8002080:	9205      	str	r2, [sp, #20]
 8002082:	9304      	str	r3, [sp, #16]
	uint32_t sourceFreq;

	RCC->CR &= ~RCC_CR_PLLON;
 8002084:	4b43      	ldr	r3, [pc, #268]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a42      	ldr	r2, [pc, #264]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 800208a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208e:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLRDY);
 8002090:	bf00      	nop
 8002092:	4b40      	ldr	r3, [pc, #256]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f4      	bne.n	8002092 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x1a>
	if (RCC->CR & RCC_CR_HSERDY)
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x54>
	{
		sourceFreq = hseClock;
 80020be:	4b36      	ldr	r3, [pc, #216]	; (8002198 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x120>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	930b      	str	r3, [sp, #44]	; 0x2c
		RCC->PLLCFGR = RCC_PLLCFGR_PLLSRC_HSE;
 80020c4:	4b33      	ldr	r3, [pc, #204]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 80020c6:	2203      	movs	r2, #3
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	e001      	b.n	80020d0 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x58>
	}
	else
		sourceFreq = RCC_PLLCFGR_PLLSRC_HSI;
 80020cc:	2302      	movs	r3, #2
 80020ce:	930b      	str	r3, [sp, #44]	; 0x2c

	int m = sourceFreq / 4000000; //4 MHz input frequency
 80020d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80020d2:	4a32      	ldr	r2, [pc, #200]	; (800219c <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x124>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	0d1b      	lsrs	r3, r3, #20
 80020da:	930a      	str	r3, [sp, #40]	; 0x28

	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 80020dc:	9b06      	ldr	r3, [sp, #24]
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020fa:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
	int plln = (int)(targetDivider + 0.5f);
 80020fe:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8002102:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800210a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210e:	ee17 3a90 	vmov	r3, s15
 8002112:	9308      	str	r3, [sp, #32]

	RCC->PLLCFGR |= (m - 1) << RCC_PLLCFGR_PLLM_Pos;
 8002114:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800211a:	3a01      	subs	r2, #1
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	4611      	mov	r1, r2
 8002120:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002122:	430b      	orrs	r3, r1
 8002124:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	9b05      	ldr	r3, [sp, #20]
 800212c:	06db      	lsls	r3, r3, #27
 800212e:	4619      	mov	r1, r3
		| static_cast<uint32_t>(_q) << RCC_PLLCFGR_PLLQ_Pos
 8002130:	9b04      	ldr	r3, [sp, #16]
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	4319      	orrs	r1, r3
		| static_cast<uint32_t>(_r) << RCC_PLLCFGR_PLLR_Pos
 8002136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002138:	065b      	lsls	r3, r3, #25
 800213a:	430b      	orrs	r3, r1
		| plln << RCC_PLLCFGR_PLLN_Pos;
 800213c:	9908      	ldr	r1, [sp, #32]
 800213e:	0209      	lsls	r1, r1, #8
 8002140:	430b      	orrs	r3, r1
	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 8002142:	4914      	ldr	r1, [pc, #80]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	60cb      	str	r3, [r1, #12]

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN;
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 800214e:	f043 7388 	orr.w	r3, r3, #17825792	; 0x1100000
 8002152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002156:	60d3      	str	r3, [r2, #12]
	RCC->CR |= RCC_CR_PLLON;
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002162:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 8002164:	bf00      	nop
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f4      	bne.n	8002166 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0xee>

	pllClock = updatePll();
 800217c:	4c08      	ldr	r4, [pc, #32]	; (80021a0 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x128>)
 800217e:	466b      	mov	r3, sp
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f80f 	bl	80021a4 <_ZN12ClockManager9updatePllEv>
 8002186:	466b      	mov	r3, sp
 8002188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800218a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	
}
 800218e:	bf00      	nop
 8002190:	b00c      	add	sp, #48	; 0x30
 8002192:	bd10      	pop	{r4, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	08003be0 	.word	0x08003be0
 800219c:	431bde83 	.word	0x431bde83
 80021a0:	200002d0 	.word	0x200002d0

080021a4 <_ZN12ClockManager9updatePllEv>:

pllClk ClockManager::updatePll()
{
 80021a4:	b084      	sub	sp, #16
 80021a6:	9001      	str	r0, [sp, #4]
	pllClk pllClocks = {0, 0, 0, 0};
 80021a8:	9b01      	ldr	r3, [sp, #4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	2300      	movs	r3, #0
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	6053      	str	r3, [r2, #4]
 80021b2:	6093      	str	r3, [r2, #8]
 80021b4:	60d3      	str	r3, [r2, #12]
	uint32_t sourceFreq;

	if(!(RCC->CR & RCC_CR_PLLRDY))
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <_ZN12ClockManager9updatePllEv+0xf4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf0c      	ite	eq
 80021c2:	2301      	moveq	r3, #1
 80021c4:	2300      	movne	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d160      	bne.n	800228e <_ZN12ClockManager9updatePllEv+0xea>
		return pllClocks;

	if (RCC->CR & RCC_CR_HSERDY)
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <_ZN12ClockManager9updatePllEv+0xf4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf14      	ite	ne
 80021d8:	2301      	movne	r3, #1
 80021da:	2300      	moveq	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <_ZN12ClockManager9updatePllEv+0x46>
		sourceFreq = hseClock;
 80021e2:	4b2e      	ldr	r3, [pc, #184]	; (800229c <_ZN12ClockManager9updatePllEv+0xf8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	9303      	str	r3, [sp, #12]
 80021e8:	e001      	b.n	80021ee <_ZN12ClockManager9updatePllEv+0x4a>
	else
		sourceFreq = hsiClock;
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <_ZN12ClockManager9updatePllEv+0xfc>)
 80021ec:	9303      	str	r3, [sp, #12]

    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80021ee:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <_ZN12ClockManager9updatePllEv+0xf4>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002200:	edcd 7a02 	vstr	s15, [sp, #8]
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <_ZN12ClockManager9updatePllEv+0xf4>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	3301      	adds	r3, #1
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002218:	eddd 6a02 	vldr	s13, [sp, #8]
 800221c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002220:	edcd 7a02 	vstr	s15, [sp, #8]
    pllClocks.internal = sourceFreq * finalMult;
 8002224:	9b03      	ldr	r3, [sp, #12]
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800222e:	eddd 7a02 	vldr	s15, [sp, #8]
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800223a:	ee17 2a90 	vmov	r2, s15
 800223e:	9b01      	ldr	r3, [sp, #4]
 8002240:	601a      	str	r2, [r3, #0]
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 8002242:	9b01      	ldr	r3, [sp, #4]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <_ZN12ClockManager9updatePllEv+0xf4>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	0edb      	lsrs	r3, r3, #27
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	fbb2 f2f3 	udiv	r2, r2, r3
 8002254:	9b01      	ldr	r3, [sp, #4]
 8002256:	605a      	str	r2, [r3, #4]
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 8002258:	9b01      	ldr	r3, [sp, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <_ZN12ClockManager9updatePllEv+0xf4>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0d5b      	lsrs	r3, r3, #21
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	3301      	adds	r3, #1
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fbb2 f2f3 	udiv	r2, r2, r3
 800226e:	9b01      	ldr	r3, [sp, #4]
 8002270:	609a      	str	r2, [r3, #8]
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 8002272:	9b01      	ldr	r3, [sp, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <_ZN12ClockManager9updatePllEv+0xf4>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	0e5b      	lsrs	r3, r3, #25
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	3301      	adds	r3, #1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fbb2 f2f3 	udiv	r2, r2, r3
 8002288:	9b01      	ldr	r3, [sp, #4]
 800228a:	60da      	str	r2, [r3, #12]

	

    return pllClocks;
 800228c:	e000      	b.n	8002290 <_ZN12ClockManager9updatePllEv+0xec>
		return pllClocks;
 800228e:	bf00      	nop
}
 8002290:	9801      	ldr	r0, [sp, #4]
 8002292:	b004      	add	sp, #16
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	08003be0 	.word	0x08003be0
 80022a0:	00f42400 	.word	0x00f42400

080022a4 <_ZN12ClockManager8initTickEv>:

void ClockManager::initTick()
{
 80022a4:	b500      	push	{lr}
 80022a6:	b083      	sub	sp, #12
	enableClk(RCC->APB1ENR1, RCC_APB1ENR1_TIM6EN);
 80022a8:	2110      	movs	r1, #16
 80022aa:	4811      	ldr	r0, [pc, #68]	; (80022f0 <_ZN12ClockManager8initTickEv+0x4c>)
 80022ac:	f000 f82c 	bl	8002308 <_ZN12ClockManager9enableClkERVmm>
	int prescaler = timerClock / 1000000;
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <_ZN12ClockManager8initTickEv+0x50>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <_ZN12ClockManager8initTickEv+0x54>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0c9b      	lsrs	r3, r3, #18
 80022bc:	9301      	str	r3, [sp, #4]

	TIM6->PSC = prescaler - 1;
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	1e5a      	subs	r2, r3, #1
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <_ZN12ClockManager8initTickEv+0x58>)
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = 0x0FFF;
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <_ZN12ClockManager8initTickEv+0x58>)
 80022c8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80022cc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->CR1 = TIM_CR1_CEN;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <_ZN12ClockManager8initTickEv+0x58>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
    SysTick_Config(coreClock / 1000);
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <_ZN12ClockManager8initTickEv+0x5c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <_ZN12ClockManager8initTickEv+0x60>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fd95 	bl	8001e10 <SysTick_Config>
}
 80022e6:	bf00      	nop
 80022e8:	b003      	add	sp, #12
 80022ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80022ee:	bf00      	nop
 80022f0:	40021058 	.word	0x40021058
 80022f4:	20000020 	.word	0x20000020
 80022f8:	431bde83 	.word	0x431bde83
 80022fc:	40001000 	.word	0x40001000
 8002300:	20000014 	.word	0x20000014
 8002304:	10624dd3 	.word	0x10624dd3

08002308 <_ZN12ClockManager9enableClkERVmm>:
    __enable_irq();
    return result;
}

void ClockManager::enableClk(volatile uint32_t &_reg, uint32_t _bits)
{
 8002308:	b082      	sub	sp, #8
 800230a:	9001      	str	r0, [sp, #4]
 800230c:	9100      	str	r1, [sp, #0]
	_reg |= _bits;
 800230e:	9b01      	ldr	r3, [sp, #4]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	9b00      	ldr	r3, [sp, #0]
 8002314:	431a      	orrs	r2, r3
 8002316:	9b01      	ldr	r3, [sp, #4]
 8002318:	601a      	str	r2, [r3, #0]
	while((_reg & _bits) != _bits)
 800231a:	bf00      	nop
 800231c:	9b01      	ldr	r3, [sp, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	9b00      	ldr	r3, [sp, #0]
 8002322:	4013      	ands	r3, r2
 8002324:	9a00      	ldr	r2, [sp, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f3      	bne.n	800231c <_ZN12ClockManager9enableClkERVmm+0x14>
		;
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	b002      	add	sp, #8
 800233a:	4770      	bx	lr

0800233c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>:
#include "gpio.h"

GPIO::GPIO (GPIO_TypeDef* _GPIOx, uint8_t _pin, GPIOmode _mode, GPIOtype _type, GPIOspeed _speed, GPIOpull _pull, uint8_t _AFnumber):
 800233c:	b084      	sub	sp, #16
 800233e:	9003      	str	r0, [sp, #12]
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	f88d 3007 	strb.w	r3, [sp, #7]
GPIOx(_GPIOx), pin(_pin)
 800234a:	9b03      	ldr	r3, [sp, #12]
 800234c:	9a02      	ldr	r2, [sp, #8]
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	9b03      	ldr	r3, [sp, #12]
 8002352:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002356:	711a      	strb	r2, [r3, #4]
{
	switch ((uint32_t) _GPIOx)
 8002358:	9b02      	ldr	r3, [sp, #8]
 800235a:	4a81      	ldr	r2, [pc, #516]	; (8002560 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x224>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d04b      	beq.n	80023f8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xbc>
 8002360:	4a7f      	ldr	r2, [pc, #508]	; (8002560 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x224>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d84f      	bhi.n	8002406 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
 8002366:	4a7f      	ldr	r2, [pc, #508]	; (8002564 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x228>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d03e      	beq.n	80023ea <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xae>
 800236c:	4a7d      	ldr	r2, [pc, #500]	; (8002564 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x228>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d849      	bhi.n	8002406 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
 8002372:	4a7d      	ldr	r2, [pc, #500]	; (8002568 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x22c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d031      	beq.n	80023dc <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xa0>
 8002378:	4a7b      	ldr	r2, [pc, #492]	; (8002568 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x22c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d843      	bhi.n	8002406 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
 800237e:	4a7b      	ldr	r2, [pc, #492]	; (800256c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x230>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d024      	beq.n	80023ce <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x92>
 8002384:	4a79      	ldr	r2, [pc, #484]	; (800256c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x230>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d83d      	bhi.n	8002406 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
 800238a:	4a79      	ldr	r2, [pc, #484]	; (8002570 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x234>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d017      	beq.n	80023c0 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x84>
 8002390:	4a77      	ldr	r2, [pc, #476]	; (8002570 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x234>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d837      	bhi.n	8002406 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
 8002396:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800239a:	d003      	beq.n	80023a4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x68>
 800239c:	4a75      	ldr	r2, [pc, #468]	; (8002574 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x238>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x76>
			break;
		case GPIOG_BASE:
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
			break;
		default: 
		break;
 80023a2:	e030      	b.n	8002406 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80023a4:	4b74      	ldr	r3, [pc, #464]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a8:	4a73      	ldr	r2, [pc, #460]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 80023b0:	e02a      	b.n	8002408 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80023b2:	4b71      	ldr	r3, [pc, #452]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	4a70      	ldr	r2, [pc, #448]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 80023be:	e023      	b.n	8002408 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80023c0:	4b6d      	ldr	r3, [pc, #436]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c4:	4a6c      	ldr	r2, [pc, #432]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023c6:	f043 0304 	orr.w	r3, r3, #4
 80023ca:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 80023cc:	e01c      	b.n	8002408 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 80023ce:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	4a69      	ldr	r2, [pc, #420]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 80023da:	e015      	b.n	8002408 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
 80023dc:	4b66      	ldr	r3, [pc, #408]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	4a65      	ldr	r2, [pc, #404]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023e2:	f043 0310 	orr.w	r3, r3, #16
 80023e6:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 80023e8:	e00e      	b.n	8002408 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOFEN;
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	4a62      	ldr	r2, [pc, #392]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023f0:	f043 0320 	orr.w	r3, r3, #32
 80023f4:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 80023f6:	e007      	b.n	8002408 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
 80023f8:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fc:	4a5e      	ldr	r2, [pc, #376]	; (8002578 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 80023fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002402:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8002404:	e000      	b.n	8002408 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
		break;
 8002406:	bf00      	nop
	}

	GPIOx->MODER &= ~(0b11 << (pin*2));
 8002408:	9b03      	ldr	r3, [sp, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	9b03      	ldr	r3, [sp, #12]
 8002410:	791b      	ldrb	r3, [r3, #4]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2103      	movs	r1, #3
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	9b03      	ldr	r3, [sp, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	400a      	ands	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (static_cast<int>(_mode) << (pin*2));
 8002426:	9b03      	ldr	r3, [sp, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	9b03      	ldr	r3, [sp, #12]
 800242e:	791b      	ldrb	r3, [r3, #4]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	9900      	ldr	r1, [sp, #0]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	4619      	mov	r1, r3
 800243a:	9b03      	ldr	r3, [sp, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
	GPIOx->OTYPER &= ~(1 << pin);
 8002442:	9b03      	ldr	r3, [sp, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	9b03      	ldr	r3, [sp, #12]
 800244a:	791b      	ldrb	r3, [r3, #4]
 800244c:	4619      	mov	r1, r3
 800244e:	2301      	movs	r3, #1
 8002450:	408b      	lsls	r3, r1
 8002452:	43db      	mvns	r3, r3
 8002454:	4619      	mov	r1, r3
 8002456:	9b03      	ldr	r3, [sp, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	400a      	ands	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
	GPIOx->OTYPER |= (static_cast<int>(_type) << pin);
 800245e:	9b03      	ldr	r3, [sp, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	9b03      	ldr	r3, [sp, #12]
 8002466:	791b      	ldrb	r3, [r3, #4]
 8002468:	4619      	mov	r1, r3
 800246a:	9b04      	ldr	r3, [sp, #16]
 800246c:	408b      	lsls	r3, r1
 800246e:	4619      	mov	r1, r3
 8002470:	9b03      	ldr	r3, [sp, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]
	GPIOx->OSPEEDR &= ~(0b11 << (pin*2));
 8002478:	9b03      	ldr	r3, [sp, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	9b03      	ldr	r3, [sp, #12]
 8002480:	791b      	ldrb	r3, [r3, #4]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2103      	movs	r1, #3
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	4619      	mov	r1, r3
 800248e:	9b03      	ldr	r3, [sp, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	400a      	ands	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (static_cast<int>(_speed)<<(pin*2));
 8002496:	9b03      	ldr	r3, [sp, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	9b03      	ldr	r3, [sp, #12]
 800249e:	791b      	ldrb	r3, [r3, #4]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	9905      	ldr	r1, [sp, #20]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	9b03      	ldr	r3, [sp, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
	GPIOx->PUPDR &= ~(0b11 << (pin*2));
 80024b2:	9b03      	ldr	r3, [sp, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	9b03      	ldr	r3, [sp, #12]
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2103      	movs	r1, #3
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	4619      	mov	r1, r3
 80024c8:	9b03      	ldr	r3, [sp, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	400a      	ands	r2, r1
 80024ce:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (static_cast<int>(_pull)<<(pin*2));
 80024d0:	9b03      	ldr	r3, [sp, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	9b03      	ldr	r3, [sp, #12]
 80024d8:	791b      	ldrb	r3, [r3, #4]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	9906      	ldr	r1, [sp, #24]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	9b03      	ldr	r3, [sp, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]
	GPIOx->AFR[pin/8] &= ~(0xF << ((pin % 8)*4));
 80024ec:	9b03      	ldr	r3, [sp, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	9a03      	ldr	r2, [sp, #12]
 80024f2:	7912      	ldrb	r2, [r2, #4]
 80024f4:	08d2      	lsrs	r2, r2, #3
 80024f6:	b2d0      	uxtb	r0, r2
 80024f8:	4602      	mov	r2, r0
 80024fa:	3208      	adds	r2, #8
 80024fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002500:	9b03      	ldr	r3, [sp, #12]
 8002502:	791b      	ldrb	r3, [r3, #4]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	210f      	movs	r1, #15
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	4619      	mov	r1, r3
 8002514:	9b03      	ldr	r3, [sp, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4011      	ands	r1, r2
 800251a:	f100 0208 	add.w	r2, r0, #8
 800251e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIOx->AFR[pin/8] |= (_AFnumber << ((pin % 8)*4));
 8002522:	9b03      	ldr	r3, [sp, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	9a03      	ldr	r2, [sp, #12]
 8002528:	7912      	ldrb	r2, [r2, #4]
 800252a:	08d2      	lsrs	r2, r2, #3
 800252c:	b2d0      	uxtb	r0, r2
 800252e:	4602      	mov	r2, r0
 8002530:	3208      	adds	r2, #8
 8002532:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002536:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800253a:	9b03      	ldr	r3, [sp, #12]
 800253c:	791b      	ldrb	r3, [r3, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	4619      	mov	r1, r3
 800254a:	9b03      	ldr	r3, [sp, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4311      	orrs	r1, r2
 8002550:	f100 0208 	add.w	r2, r0, #8
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002558:	9b03      	ldr	r3, [sp, #12]
 800255a:	4618      	mov	r0, r3
 800255c:	b004      	add	sp, #16
 800255e:	4770      	bx	lr
 8002560:	48001800 	.word	0x48001800
 8002564:	48001400 	.word	0x48001400
 8002568:	48001000 	.word	0x48001000
 800256c:	48000c00 	.word	0x48000c00
 8002570:	48000800 	.word	0x48000800
 8002574:	48000400 	.word	0x48000400
 8002578:	40021000 	.word	0x40021000

0800257c <_ZN4GPIO3setEv>:
void GPIO::set()
{
 800257c:	b082      	sub	sp, #8
 800257e:	9001      	str	r0, [sp, #4]
	GPIOx->BSRR |= (1<<pin);
 8002580:	9b01      	ldr	r3, [sp, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	9b01      	ldr	r3, [sp, #4]
 8002588:	791b      	ldrb	r3, [r3, #4]
 800258a:	4619      	mov	r1, r3
 800258c:	2301      	movs	r3, #1
 800258e:	408b      	lsls	r3, r1
 8002590:	4619      	mov	r1, r3
 8002592:	9b01      	ldr	r3, [sp, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	b002      	add	sp, #8
 800259e:	4770      	bx	lr

080025a0 <_ZN3I2CC1EP11I2C_TypeDef>:
#include  "i2c.h"


I2C::I2C(I2C_TypeDef* _I2Cx): I2Cx(_I2Cx)
 80025a0:	b082      	sub	sp, #8
 80025a2:	9001      	str	r0, [sp, #4]
 80025a4:	9100      	str	r1, [sp, #0]
 80025a6:	9b01      	ldr	r3, [sp, #4]
 80025a8:	9a00      	ldr	r2, [sp, #0]
 80025aa:	601a      	str	r2, [r3, #0]
{
	switch (uint32_t(I2Cx)) // sprawdzić czy działa dla innych interfejsow niz i2c2
 80025ac:	9b01      	ldr	r3, [sp, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a23      	ldr	r2, [pc, #140]	; (8002640 <_ZN3I2CC1EP11I2C_TypeDef+0xa0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d024      	beq.n	8002600 <_ZN3I2CC1EP11I2C_TypeDef+0x60>
 80025b6:	4a22      	ldr	r2, [pc, #136]	; (8002640 <_ZN3I2CC1EP11I2C_TypeDef+0xa0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d828      	bhi.n	800260e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <_ZN3I2CC1EP11I2C_TypeDef+0xa4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d017      	beq.n	80025f2 <_ZN3I2CC1EP11I2C_TypeDef+0x52>
 80025c2:	4a20      	ldr	r2, [pc, #128]	; (8002644 <_ZN3I2CC1EP11I2C_TypeDef+0xa4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d822      	bhi.n	800260e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
 80025c8:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <_ZN3I2CC1EP11I2C_TypeDef+0xa8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d003      	beq.n	80025d6 <_ZN3I2CC1EP11I2C_TypeDef+0x36>
 80025ce:	4a1f      	ldr	r2, [pc, #124]	; (800264c <_ZN3I2CC1EP11I2C_TypeDef+0xac>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <_ZN3I2CC1EP11I2C_TypeDef+0x44>
 80025d4:	e01b      	b.n	800260e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
	{
		case I2C1_BASE:
			RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 80025dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e0:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 80025e2:	e014      	b.n	800260e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
		case I2C2_BASE:
			RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 80025e4:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	4a19      	ldr	r2, [pc, #100]	; (8002650 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 80025ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ee:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 80025f0:	e00d      	b.n	800260e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
		case I2C3_BASE:
			RCC->APB1ENR1 |= RCC_APB1ENR1_I2C3EN;
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	4a16      	ldr	r2, [pc, #88]	; (8002650 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 80025f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025fc:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 80025fe:	e006      	b.n	800260e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
		case I2C4_BASE:
			RCC->APB1ENR2 |= RCC_APB1ENR2_I2C4EN;
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	4a12      	ldr	r2, [pc, #72]	; (8002650 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	65d3      	str	r3, [r2, #92]	; 0x5c
			break;
 800260c:	bf00      	nop
	}

	
	I2Cx->CR1 &= ~I2C_CR1_PE; 
 800260e:	9b01      	ldr	r3, [sp, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	9b01      	ldr	r3, [sp, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
	I2Cx->TIMINGR = 0x00701F6B; // Set I2C2 timing register value
 800261e:	9b01      	ldr	r3, [sp, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <_ZN3I2CC1EP11I2C_TypeDef+0xb4>)
 8002624:	611a      	str	r2, [r3, #16]
	I2Cx->CR1 |= I2C_CR1_PE; // Enable I2C2 peripheral
 8002626:	9b01      	ldr	r3, [sp, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	9b01      	ldr	r3, [sp, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
}
 8002636:	9b01      	ldr	r3, [sp, #4]
 8002638:	4618      	mov	r0, r3
 800263a:	b002      	add	sp, #8
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40008400 	.word	0x40008400
 8002644:	40007800 	.word	0x40007800
 8002648:	40005400 	.word	0x40005400
 800264c:	40005800 	.word	0x40005800
 8002650:	40021000 	.word	0x40021000
 8002654:	00701f6b 	.word	0x00701f6b

08002658 <_ZN13typeConverter11IntToStringEiPc>:
#include "typeConverter.h"


void typeConverter::IntToString (int _number, char * _string){
 8002658:	b500      	push	{lr}
 800265a:	b087      	sub	sp, #28
 800265c:	9001      	str	r0, [sp, #4]
 800265e:	9100      	str	r1, [sp, #0]
int i=0;
 8002660:	2300      	movs	r3, #0
 8002662:	9305      	str	r3, [sp, #20]
bool negative = _number<0? true : false;
 8002664:	9b01      	ldr	r3, [sp, #4]
 8002666:	17db      	asrs	r3, r3, #31
 8002668:	f88d 300f 	strb.w	r3, [sp, #15]
 800266c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	f88d 300f 	strb.w	r3, [sp, #15]
int absNumber = _number<0? -_number : _number;
 8002678:	9b01      	ldr	r3, [sp, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	bfb8      	it	lt
 800267e:	425b      	neglt	r3, r3
 8002680:	9304      	str	r3, [sp, #16]
	if (absNumber==0) 
 8002682:	9b04      	ldr	r3, [sp, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d123      	bne.n	80026d0 <_ZN13typeConverter11IntToStringEiPc+0x78>
	{
		_string[0]='0';
 8002688:	9b00      	ldr	r3, [sp, #0]
 800268a:	2230      	movs	r2, #48	; 0x30
 800268c:	701a      	strb	r2, [r3, #0]
		i=1;
 800268e:	2301      	movs	r3, #1
 8002690:	9305      	str	r3, [sp, #20]
	}
	while (absNumber)
 8002692:	e01d      	b.n	80026d0 <_ZN13typeConverter11IntToStringEiPc+0x78>
	{
		_string[i++]=absNumber % 10 + '0';
 8002694:	9a04      	ldr	r2, [sp, #16]
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <_ZN13typeConverter11IntToStringEiPc+0xb0>)
 8002698:	fb83 1302 	smull	r1, r3, r3, r2
 800269c:	1099      	asrs	r1, r3, #2
 800269e:	17d3      	asrs	r3, r2, #31
 80026a0:	1ac9      	subs	r1, r1, r3
 80026a2:	460b      	mov	r3, r1
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	1ad1      	subs	r1, r2, r3
 80026ac:	b2cb      	uxtb	r3, r1
 80026ae:	3330      	adds	r3, #48	; 0x30
 80026b0:	b2d8      	uxtb	r0, r3
 80026b2:	9a00      	ldr	r2, [sp, #0]
 80026b4:	9b05      	ldr	r3, [sp, #20]
 80026b6:	1c59      	adds	r1, r3, #1
 80026b8:	9105      	str	r1, [sp, #20]
 80026ba:	4413      	add	r3, r2
 80026bc:	4602      	mov	r2, r0
 80026be:	701a      	strb	r2, [r3, #0]
		absNumber /= 10;
 80026c0:	9b04      	ldr	r3, [sp, #16]
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <_ZN13typeConverter11IntToStringEiPc+0xb0>)
 80026c4:	fb82 1203 	smull	r1, r2, r2, r3
 80026c8:	1092      	asrs	r2, r2, #2
 80026ca:	17db      	asrs	r3, r3, #31
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	9304      	str	r3, [sp, #16]
	while (absNumber)
 80026d0:	9b04      	ldr	r3, [sp, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1de      	bne.n	8002694 <_ZN13typeConverter11IntToStringEiPc+0x3c>
	}
	if (negative)
 80026d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <_ZN13typeConverter11IntToStringEiPc+0x94>
		_string[i++]='-';
 80026de:	9a00      	ldr	r2, [sp, #0]
 80026e0:	9b05      	ldr	r3, [sp, #20]
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	9105      	str	r1, [sp, #20]
 80026e6:	4413      	add	r3, r2
 80026e8:	222d      	movs	r2, #45	; 0x2d
 80026ea:	701a      	strb	r2, [r3, #0]

	reverseArray(_string, i);
 80026ec:	9905      	ldr	r1, [sp, #20]
 80026ee:	9800      	ldr	r0, [sp, #0]
 80026f0:	f000 f8c2 	bl	8002878 <_ZN13typeConverter12reverseArrayEPci>
	_string[i]='\0';
 80026f4:	9b05      	ldr	r3, [sp, #20]
 80026f6:	9a00      	ldr	r2, [sp, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
}
 80026fe:	bf00      	nop
 8002700:	b007      	add	sp, #28
 8002702:	f85d fb04 	ldr.w	pc, [sp], #4
 8002706:	bf00      	nop
 8002708:	66666667 	.word	0x66666667

0800270c <_ZN13typeConverter18fractionalToStringEfPch>:

void typeConverter::fractionalToString (float _number, char * _string, uint8_t _precision)
{
 800270c:	b530      	push	{r4, r5, lr}
 800270e:	b08d      	sub	sp, #52	; 0x34
 8002710:	ed8d 0a03 	vstr	s0, [sp, #12]
 8002714:	9002      	str	r0, [sp, #8]
 8002716:	460b      	mov	r3, r1
 8002718:	f88d 3007 	strb.w	r3, [sp, #7]
	int i=0;
 800271c:	2300      	movs	r3, #0
 800271e:	930b      	str	r3, [sp, #44]	; 0x2c
	bool negative = _number<0? true : false;
 8002720:	eddd 7a03 	vldr	s15, [sp, #12]
 8002724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272c:	bf4c      	ite	mi
 800272e:	2301      	movmi	r3, #1
 8002730:	2300      	movpl	r3, #0
 8002732:	f88d 301f 	strb.w	r3, [sp, #31]
	int64_t integerPart = static_cast<int64_t>(_number);
 8002736:	9803      	ldr	r0, [sp, #12]
 8002738:	f001 fa08 	bl	8003b4c <__aeabi_f2lz>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	e9cd 2304 	strd	r2, r3, [sp, #16]
	float fractionalPart;
	fractionalPart =  _number - integerPart;
 8002744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002748:	f7fe f822 	bl	8000790 <__aeabi_l2f>
 800274c:	ee07 0a10 	vmov	s14, r0
 8002750:	eddd 7a03 	vldr	s15, [sp, #12]
 8002754:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002758:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
	fractionalPart <0 ? fractionalPart = -fractionalPart : fractionalPart = fractionalPart;
 800275c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8002760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	d505      	bpl.n	8002776 <_ZN13typeConverter18fractionalToStringEfPch+0x6a>
 800276a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800276e:	eef1 7a67 	vneg.f32	s15, s15
 8002772:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8002776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	da05      	bge.n	800278a <_ZN13typeConverter18fractionalToStringEfPch+0x7e>
 800277e:	2100      	movs	r1, #0
 8002780:	4254      	negs	r4, r2
 8002782:	eb61 0503 	sbc.w	r5, r1, r3
 8002786:	4622      	mov	r2, r4
 8002788:	462b      	mov	r3, r5
 800278a:	4613      	mov	r3, r2
 800278c:	9309      	str	r3, [sp, #36]	; 0x24
	
	if (absNumber==0) 
 800278e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002790:	2b00      	cmp	r3, #0
 8002792:	d123      	bne.n	80027dc <_ZN13typeConverter18fractionalToStringEfPch+0xd0>
	{
		_string[0]='0';
 8002794:	9b02      	ldr	r3, [sp, #8]
 8002796:	2230      	movs	r2, #48	; 0x30
 8002798:	701a      	strb	r2, [r3, #0]
		i=1;
 800279a:	2301      	movs	r3, #1
 800279c:	930b      	str	r3, [sp, #44]	; 0x2c
	}
	while (absNumber)
 800279e:	e01d      	b.n	80027dc <_ZN13typeConverter18fractionalToStringEfPch+0xd0>
	{
		_string[i++]=absNumber % 10 + '0';
 80027a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027a2:	4b34      	ldr	r3, [pc, #208]	; (8002874 <_ZN13typeConverter18fractionalToStringEfPch+0x168>)
 80027a4:	fb83 1302 	smull	r1, r3, r3, r2
 80027a8:	1099      	asrs	r1, r3, #2
 80027aa:	17d3      	asrs	r3, r2, #31
 80027ac:	1ac9      	subs	r1, r1, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	1ad1      	subs	r1, r2, r3
 80027b8:	b2cb      	uxtb	r3, r1
 80027ba:	3330      	adds	r3, #48	; 0x30
 80027bc:	b2d8      	uxtb	r0, r3
 80027be:	9a02      	ldr	r2, [sp, #8]
 80027c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80027c6:	4413      	add	r3, r2
 80027c8:	4602      	mov	r2, r0
 80027ca:	701a      	strb	r2, [r3, #0]
		absNumber /= 10;
 80027cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027ce:	4a29      	ldr	r2, [pc, #164]	; (8002874 <_ZN13typeConverter18fractionalToStringEfPch+0x168>)
 80027d0:	fb82 1203 	smull	r1, r2, r2, r3
 80027d4:	1092      	asrs	r2, r2, #2
 80027d6:	17db      	asrs	r3, r3, #31
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	9309      	str	r3, [sp, #36]	; 0x24
	while (absNumber)
 80027dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1de      	bne.n	80027a0 <_ZN13typeConverter18fractionalToStringEfPch+0x94>
	}
	if (negative)
 80027e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <_ZN13typeConverter18fractionalToStringEfPch+0xec>
		_string[i++]='-';
 80027ea:	9a02      	ldr	r2, [sp, #8]
 80027ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027ee:	1c59      	adds	r1, r3, #1
 80027f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80027f2:	4413      	add	r3, r2
 80027f4:	222d      	movs	r2, #45	; 0x2d
 80027f6:	701a      	strb	r2, [r3, #0]
	reverseArray(_string, i);
 80027f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027fa:	9802      	ldr	r0, [sp, #8]
 80027fc:	f000 f83c 	bl	8002878 <_ZN13typeConverter12reverseArrayEPci>

	_string[i++]='.';
 8002800:	9a02      	ldr	r2, [sp, #8]
 8002802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002804:	1c59      	adds	r1, r3, #1
 8002806:	910b      	str	r1, [sp, #44]	; 0x2c
 8002808:	4413      	add	r3, r2
 800280a:	222e      	movs	r2, #46	; 0x2e
 800280c:	701a      	strb	r2, [r3, #0]

	for (int j=i; j<_precision+i; j++)
 800280e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002810:	9308      	str	r3, [sp, #32]
 8002812:	e024      	b.n	800285e <_ZN13typeConverter18fractionalToStringEfPch+0x152>
	{
		fractionalPart -= static_cast<int>(fractionalPart);
 8002814:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8002818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002820:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8002824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002828:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
		fractionalPart *=10;
 800282c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8002830:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002838:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
		_string[j]= static_cast<int>(fractionalPart) + '0';
 800283c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8002840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002844:	edcd 7a00 	vstr	s15, [sp]
 8002848:	f89d 2000 	ldrb.w	r2, [sp]
 800284c:	9b08      	ldr	r3, [sp, #32]
 800284e:	9902      	ldr	r1, [sp, #8]
 8002850:	440b      	add	r3, r1
 8002852:	3230      	adds	r2, #48	; 0x30
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]
	for (int j=i; j<_precision+i; j++)
 8002858:	9b08      	ldr	r3, [sp, #32]
 800285a:	3301      	adds	r3, #1
 800285c:	9308      	str	r3, [sp, #32]
 800285e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002864:	4413      	add	r3, r2
 8002866:	9a08      	ldr	r2, [sp, #32]
 8002868:	429a      	cmp	r2, r3
 800286a:	dbd3      	blt.n	8002814 <_ZN13typeConverter18fractionalToStringEfPch+0x108>
	}
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	b00d      	add	sp, #52	; 0x34
 8002872:	bd30      	pop	{r4, r5, pc}
 8002874:	66666667 	.word	0x66666667

08002878 <_ZN13typeConverter12reverseArrayEPci>:
			return -number;
		return number;
}

void typeConverter::reverseArray(char* _charTab, int _lenght)
{
 8002878:	b084      	sub	sp, #16
 800287a:	9001      	str	r0, [sp, #4]
 800287c:	9100      	str	r1, [sp, #0]
	for (int i =0; i<_lenght/2; i++)
 800287e:	2300      	movs	r3, #0
 8002880:	9303      	str	r3, [sp, #12]
 8002882:	e01c      	b.n	80028be <_ZN13typeConverter12reverseArrayEPci+0x46>
	{
		char temp = _charTab[i];
 8002884:	9b03      	ldr	r3, [sp, #12]
 8002886:	9a01      	ldr	r2, [sp, #4]
 8002888:	4413      	add	r3, r2
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	f88d 300b 	strb.w	r3, [sp, #11]
		_charTab [i] = _charTab [_lenght-i -1];
 8002890:	9a00      	ldr	r2, [sp, #0]
 8002892:	9b03      	ldr	r3, [sp, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	9a01      	ldr	r2, [sp, #4]
 800289a:	441a      	add	r2, r3
 800289c:	9b03      	ldr	r3, [sp, #12]
 800289e:	9901      	ldr	r1, [sp, #4]
 80028a0:	440b      	add	r3, r1
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	701a      	strb	r2, [r3, #0]
		_charTab [_lenght-i -1] = temp;
 80028a6:	9a00      	ldr	r2, [sp, #0]
 80028a8:	9b03      	ldr	r3, [sp, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	9a01      	ldr	r2, [sp, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80028b6:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<_lenght/2; i++)
 80028b8:	9b03      	ldr	r3, [sp, #12]
 80028ba:	3301      	adds	r3, #1
 80028bc:	9303      	str	r3, [sp, #12]
 80028be:	9b00      	ldr	r3, [sp, #0]
 80028c0:	0fda      	lsrs	r2, r3, #31
 80028c2:	4413      	add	r3, r2
 80028c4:	105b      	asrs	r3, r3, #1
 80028c6:	461a      	mov	r2, r3
 80028c8:	9b03      	ldr	r3, [sp, #12]
 80028ca:	4293      	cmp	r3, r2
 80028cc:	dbda      	blt.n	8002884 <_ZN13typeConverter12reverseArrayEPci+0xc>
	}
}
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	b004      	add	sp, #16
 80028d4:	4770      	bx	lr
	...

080028d8 <_ZN3PIDC1EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 80028d8:	b500      	push	{lr}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	9007      	str	r0, [sp, #28]
 80028de:	9106      	str	r1, [sp, #24]
 80028e0:	9205      	str	r2, [sp, #20]
 80028e2:	9304      	str	r3, [sp, #16]
 80028e4:	ed8d 0a03 	vstr	s0, [sp, #12]
 80028e8:	edcd 0a02 	vstr	s1, [sp, #8]
 80028ec:	ed8d 1a01 	vstr	s2, [sp, #4]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 80028f0:	9b07      	ldr	r3, [sp, #28]
 80028f2:	9a05      	ldr	r2, [sp, #20]
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28
	_myInput    = Input;
 80028f6:	9b07      	ldr	r3, [sp, #28]
 80028f8:	9a06      	ldr	r2, [sp, #24]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
	_mySetpoint = Setpoint;
 80028fc:	9b07      	ldr	r3, [sp, #28]
 80028fe:	9a04      	ldr	r2, [sp, #16]
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8002902:	9b07      	ldr	r3, [sp, #28]
 8002904:	2200      	movs	r2, #0
 8002906:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8002908:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002954 <_ZN3PIDC1EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef+0x7c>
 800290c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002958 <_ZN3PIDC1EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef+0x80>
 8002910:	9807      	ldr	r0, [sp, #28]
 8002912:	f000 f927 	bl	8002b64 <_ZN3PID15SetOutputLimitsEff>
	
	_sampleTime = _PID_SAMPLE_TIME_US_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002916:	9b07      	ldr	r3, [sp, #28]
 8002918:	2219      	movs	r2, #25
 800291a:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 800291c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8002920:	4619      	mov	r1, r3
 8002922:	9807      	ldr	r0, [sp, #28]
 8002924:	f000 f9f8 	bl	8002d18 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 8002928:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800292c:	4619      	mov	r1, r3
 800292e:	ed9d 1a01 	vldr	s2, [sp, #4]
 8002932:	eddd 0a02 	vldr	s1, [sp, #8]
 8002936:	ed9d 0a03 	vldr	s0, [sp, #12]
 800293a:	9807      	ldr	r0, [sp, #28]
 800293c:	f000 f972 	bl	8002c24 <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 8002940:	9b07      	ldr	r3, [sp, #28]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	425a      	negs	r2, r3
 8002946:	9b07      	ldr	r3, [sp, #28]
 8002948:	605a      	str	r2, [r3, #4]
	
}
 800294a:	9b07      	ldr	r3, [sp, #28]
 800294c:	4618      	mov	r0, r3
 800294e:	b009      	add	sp, #36	; 0x24
 8002950:	f85d fb04 	ldr.w	pc, [sp], #4
 8002954:	437f0000 	.word	0x437f0000
 8002958:	00000000 	.word	0x00000000

0800295c <_ZN3PID4InitEv>:

PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection){ }

/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 800295c:	b082      	sub	sp, #8
 800295e:	9001      	str	r0, [sp, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 8002960:	9b01      	ldr	r3, [sp, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	9b01      	ldr	r3, [sp, #4]
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
	_lastInput = *_myInput;
 800296a:	9b01      	ldr	r3, [sp, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	9b01      	ldr	r3, [sp, #4]
 8002972:	635a      	str	r2, [r3, #52]	; 0x34
	
	if (_outputSum > _outMax)
 8002974:	9b01      	ldr	r3, [sp, #4]
 8002976:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800297a:	9b01      	ldr	r3, [sp, #4]
 800297c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002988:	dd04      	ble.n	8002994 <_ZN3PID4InitEv+0x38>
	{
		_outputSum = _outMax;
 800298a:	9b01      	ldr	r3, [sp, #4]
 800298c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800298e:	9b01      	ldr	r3, [sp, #4]
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
	{
		_outputSum = _outMin;
	}
	else { }
	
}
 8002992:	e00f      	b.n	80029b4 <_ZN3PID4InitEv+0x58>
	else if (_outputSum < _outMin)
 8002994:	9b01      	ldr	r3, [sp, #4]
 8002996:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800299a:	9b01      	ldr	r3, [sp, #4]
 800299c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80029a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a8:	d400      	bmi.n	80029ac <_ZN3PID4InitEv+0x50>
}
 80029aa:	e003      	b.n	80029b4 <_ZN3PID4InitEv+0x58>
		_outputSum = _outMin;
 80029ac:	9b01      	ldr	r3, [sp, #4]
 80029ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b0:	9b01      	ldr	r3, [sp, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029b4:	bf00      	nop
 80029b6:	b002      	add	sp, #8
 80029b8:	4770      	bx	lr

080029ba <_ZN3PID7ComputeEv>:
	PID::Init(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID::Compute(void)
{
 80029ba:	b088      	sub	sp, #32
 80029bc:	9001      	str	r0, [sp, #4]
	float error;
	float dInput;
	float output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!_inAuto)
 80029be:	9b01      	ldr	r3, [sp, #4]
 80029c0:	785b      	ldrb	r3, [r3, #1]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <_ZN3PID7ComputeEv+0x10>
	{
		return _FALSE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e0a7      	b.n	8002b1a <_ZN3PID7ComputeEv+0x160>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80029ca:	2300      	movs	r3, #0
 80029cc:	9306      	str	r3, [sp, #24]
	timeChange = (now - _lastTime);
 80029ce:	9b01      	ldr	r3, [sp, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	9a06      	ldr	r2, [sp, #24]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	9305      	str	r3, [sp, #20]
	
	if (timeChange >= 0)
	{
		/* ..... Compute all the working error variables ..... */
		input   = *_myInput;
 80029d8:	9b01      	ldr	r3, [sp, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	9304      	str	r3, [sp, #16]
		error   = *_mySetpoint - input;
 80029e0:	9b01      	ldr	r3, [sp, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	ed93 7a00 	vldr	s14, [r3]
 80029e8:	eddd 7a04 	vldr	s15, [sp, #16]
 80029ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f0:	edcd 7a03 	vstr	s15, [sp, #12]
		dInput  = (input - _lastInput);
 80029f4:	9b01      	ldr	r3, [sp, #4]
 80029f6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80029fa:	ed9d 7a04 	vldr	s14, [sp, #16]
 80029fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a02:	edcd 7a02 	vstr	s15, [sp, #8]
		
		_outputSum += (_ki * error);
 8002a06:	9b01      	ldr	r3, [sp, #4]
 8002a08:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002a0c:	9b01      	ldr	r3, [sp, #4]
 8002a0e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002a12:	eddd 7a03 	vldr	s15, [sp, #12]
 8002a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1e:	9b01      	ldr	r3, [sp, #4]
 8002a20:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!_pOnE)
 8002a24:	9b01      	ldr	r3, [sp, #4]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10e      	bne.n	8002a4a <_ZN3PID7ComputeEv+0x90>
		{
			_outputSum -= _kp * dInput;
 8002a2c:	9b01      	ldr	r3, [sp, #4]
 8002a2e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002a32:	9b01      	ldr	r3, [sp, #4]
 8002a34:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a38:	eddd 7a02 	vldr	s15, [sp, #8]
 8002a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a44:	9b01      	ldr	r3, [sp, #4]
 8002a46:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		}
		
		if (_outputSum > _outMax)
 8002a4a:	9b01      	ldr	r3, [sp, #4]
 8002a4c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002a50:	9b01      	ldr	r3, [sp, #4]
 8002a52:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	dd04      	ble.n	8002a6a <_ZN3PID7ComputeEv+0xb0>
		{
			_outputSum = _outMax;
 8002a60:	9b01      	ldr	r3, [sp, #4]
 8002a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a64:	9b01      	ldr	r3, [sp, #4]
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
 8002a68:	e00e      	b.n	8002a88 <_ZN3PID7ComputeEv+0xce>
		}
		else if (_outputSum < _outMin)
 8002a6a:	9b01      	ldr	r3, [sp, #4]
 8002a6c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002a70:	9b01      	ldr	r3, [sp, #4]
 8002a72:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7e:	d503      	bpl.n	8002a88 <_ZN3PID7ComputeEv+0xce>
		{
			_outputSum = _outMin;
 8002a80:	9b01      	ldr	r3, [sp, #4]
 8002a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a84:	9b01      	ldr	r3, [sp, #4]
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (_pOnE)
 8002a88:	9b01      	ldr	r3, [sp, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <_ZN3PID7ComputeEv+0xea>
		{
			output = _kp * error;
 8002a90:	9b01      	ldr	r3, [sp, #4]
 8002a92:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a96:	ed9d 7a03 	vldr	s14, [sp, #12]
 8002a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9e:	edcd 7a07 	vstr	s15, [sp, #28]
 8002aa2:	e002      	b.n	8002aaa <_ZN3PID7ComputeEv+0xf0>
		}
		else
		{
			output = 0;
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	9307      	str	r3, [sp, #28]
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += _outputSum - _kd * dInput;
 8002aaa:	9b01      	ldr	r3, [sp, #4]
 8002aac:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ab0:	9b01      	ldr	r3, [sp, #4]
 8002ab2:	edd3 6a08 	vldr	s13, [r3, #32]
 8002ab6:	eddd 7a02 	vldr	s15, [sp, #8]
 8002aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac2:	ed9d 7a07 	vldr	s14, [sp, #28]
 8002ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aca:	edcd 7a07 	vstr	s15, [sp, #28]
		
		if (output > _outMax)
 8002ace:	9b01      	ldr	r3, [sp, #4]
 8002ad0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002ad4:	ed9d 7a07 	vldr	s14, [sp, #28]
 8002ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae0:	dd03      	ble.n	8002aea <_ZN3PID7ComputeEv+0x130>
		{
			output = _outMax;
 8002ae2:	9b01      	ldr	r3, [sp, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	9307      	str	r3, [sp, #28]
 8002ae8:	e00c      	b.n	8002b04 <_ZN3PID7ComputeEv+0x14a>
		}
		else if (output < _outMin)
 8002aea:	9b01      	ldr	r3, [sp, #4]
 8002aec:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002af0:	ed9d 7a07 	vldr	s14, [sp, #28]
 8002af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d502      	bpl.n	8002b04 <_ZN3PID7ComputeEv+0x14a>
		{
			output = _outMin;
 8002afe:	9b01      	ldr	r3, [sp, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	9307      	str	r3, [sp, #28]
		}
		else { }
		
		*_myOutput = output;
 8002b04:	9b01      	ldr	r3, [sp, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	9a07      	ldr	r2, [sp, #28]
 8002b0a:	601a      	str	r2, [r3, #0]
		
		/* ..... Remember some variables for next time ..... */
		_lastInput = input;
 8002b0c:	9b01      	ldr	r3, [sp, #4]
 8002b0e:	9a04      	ldr	r2, [sp, #16]
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34
		_lastTime  = now;
 8002b12:	9b01      	ldr	r3, [sp, #4]
 8002b14:	9a06      	ldr	r2, [sp, #24]
 8002b16:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8002b18:	2301      	movs	r3, #1
	else
	{
		return _FALSE;
	}
	
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	b008      	add	sp, #32
 8002b1e:	4770      	bx	lr

08002b20 <_ZN3PID7SetModeE15PIDMode_TypeDef>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 8002b20:	b500      	push	{lr}
 8002b22:	b085      	sub	sp, #20
 8002b24:	9001      	str	r0, [sp, #4]
 8002b26:	460b      	mov	r3, r1
 8002b28:	f88d 3003 	strb.w	r3, [sp, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002b2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f88d 300f 	strb.w	r3, [sp, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 8002b3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x34>
 8002b46:	9b01      	ldr	r3, [sp, #4]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x34>
	{
		Init();
 8002b4e:	9801      	ldr	r0, [sp, #4]
 8002b50:	f7ff ff04 	bl	800295c <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 8002b54:	9b01      	ldr	r3, [sp, #4]
 8002b56:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002b5a:	705a      	strb	r2, [r3, #1]
	
}
 8002b5c:	bf00      	nop
 8002b5e:	b005      	add	sp, #20
 8002b60:	f85d fb04 	ldr.w	pc, [sp], #4

08002b64 <_ZN3PID15SetOutputLimitsEff>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(float Min, float Max)
{
 8002b64:	b084      	sub	sp, #16
 8002b66:	9003      	str	r0, [sp, #12]
 8002b68:	ed8d 0a02 	vstr	s0, [sp, #8]
 8002b6c:	edcd 0a01 	vstr	s1, [sp, #4]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002b70:	ed9d 7a02 	vldr	s14, [sp, #8]
 8002b74:	eddd 7a01 	vldr	s15, [sp, #4]
 8002b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	da4c      	bge.n	8002c1c <_ZN3PID15SetOutputLimitsEff+0xb8>
	{
		return;
	}
	
	_outMin = Min;
 8002b82:	9b03      	ldr	r3, [sp, #12]
 8002b84:	9a02      	ldr	r2, [sp, #8]
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38
	_outMax = Max;
 8002b88:	9b03      	ldr	r3, [sp, #12]
 8002b8a:	9a01      	ldr	r2, [sp, #4]
 8002b8c:	63da      	str	r2, [r3, #60]	; 0x3c
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8002b8e:	9b03      	ldr	r3, [sp, #12]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d043      	beq.n	8002c1e <_ZN3PID15SetOutputLimitsEff+0xba>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8002b96:	9b03      	ldr	r3, [sp, #12]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	ed93 7a00 	vldr	s14, [r3]
 8002b9e:	9b03      	ldr	r3, [sp, #12]
 8002ba0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bac:	dd05      	ble.n	8002bba <_ZN3PID15SetOutputLimitsEff+0x56>
		{
			*_myOutput = _outMax;
 8002bae:	9b03      	ldr	r3, [sp, #12]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	9a03      	ldr	r2, [sp, #12]
 8002bb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e010      	b.n	8002bdc <_ZN3PID15SetOutputLimitsEff+0x78>
		}
		else if (*_myOutput < _outMin)
 8002bba:	9b03      	ldr	r3, [sp, #12]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	ed93 7a00 	vldr	s14, [r3]
 8002bc2:	9b03      	ldr	r3, [sp, #12]
 8002bc4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	d504      	bpl.n	8002bdc <_ZN3PID15SetOutputLimitsEff+0x78>
		{
			*_myOutput = _outMin;
 8002bd2:	9b03      	ldr	r3, [sp, #12]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	9a03      	ldr	r2, [sp, #12]
 8002bd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bda:	601a      	str	r2, [r3, #0]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8002bdc:	9b03      	ldr	r3, [sp, #12]
 8002bde:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002be2:	9b03      	ldr	r3, [sp, #12]
 8002be4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002be8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf0:	dd04      	ble.n	8002bfc <_ZN3PID15SetOutputLimitsEff+0x98>
		{
			_outputSum = _outMax;
 8002bf2:	9b03      	ldr	r3, [sp, #12]
 8002bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf6:	9b03      	ldr	r3, [sp, #12]
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfa:	e010      	b.n	8002c1e <_ZN3PID15SetOutputLimitsEff+0xba>
		}
		else if (_outputSum < _outMin)
 8002bfc:	9b03      	ldr	r3, [sp, #12]
 8002bfe:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002c02:	9b03      	ldr	r3, [sp, #12]
 8002c04:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	d505      	bpl.n	8002c1e <_ZN3PID15SetOutputLimitsEff+0xba>
		{
			_outputSum = _outMin;
 8002c12:	9b03      	ldr	r3, [sp, #12]
 8002c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c16:	9b03      	ldr	r3, [sp, #12]
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
 8002c1a:	e000      	b.n	8002c1e <_ZN3PID15SetOutputLimitsEff+0xba>
		return;
 8002c1c:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002c1e:	b004      	add	sp, #16
 8002c20:	4770      	bx	lr
	...

08002c24 <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef>:
void PID::SetTunings(float Kp, float Ki, float Kd)
{
	PID::SetTunings(Kp, Ki, Kd, _pOn);
}
void PID::SetTunings(float Kp, float Ki, float Kd, PIDPON_TypeDef POn)
{
 8002c24:	b088      	sub	sp, #32
 8002c26:	9005      	str	r0, [sp, #20]
 8002c28:	ed8d 0a04 	vstr	s0, [sp, #16]
 8002c2c:	edcd 0a03 	vstr	s1, [sp, #12]
 8002c30:	ed8d 1a02 	vstr	s2, [sp, #8]
 8002c34:	460b      	mov	r3, r1
 8002c36:	f88d 3007 	strb.w	r3, [sp, #7]
	
	float SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002c3a:	eddd 7a04 	vldr	s15, [sp, #16]
 8002c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c46:	d462      	bmi.n	8002d0e <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xea>
 8002c48:	eddd 7a03 	vldr	s15, [sp, #12]
 8002c4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	d45b      	bmi.n	8002d0e <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xea>
 8002c56:	eddd 7a02 	vldr	s15, [sp, #8]
 8002c5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	d454      	bmi.n	8002d0e <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xea>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 8002c64:	9b05      	ldr	r3, [sp, #20]
 8002c66:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002c6a:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002c6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	9b05      	ldr	r3, [sp, #20]
 8002c7e:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8002c80:	9b05      	ldr	r3, [sp, #20]
 8002c82:	9a04      	ldr	r2, [sp, #16]
 8002c84:	60da      	str	r2, [r3, #12]
	_dispKi = Ki;
 8002c86:	9b05      	ldr	r3, [sp, #20]
 8002c88:	9a03      	ldr	r2, [sp, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
	_dispKd = Kd;
 8002c8c:	9b05      	ldr	r3, [sp, #20]
 8002c8e:	9a02      	ldr	r2, [sp, #8]
 8002c90:	615a      	str	r2, [r3, #20]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((float)_sampleTime) / 1000000;
 8002c92:	9b05      	ldr	r3, [sp, #20]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c9e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002d14 <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xf0>
 8002ca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca6:	edcd 7a07 	vstr	s15, [sp, #28]
	
	_kp = Kp;
 8002caa:	9b05      	ldr	r3, [sp, #20]
 8002cac:	9a04      	ldr	r2, [sp, #16]
 8002cae:	619a      	str	r2, [r3, #24]
	_ki = Ki * SampleTimeInSec;
 8002cb0:	ed9d 7a03 	vldr	s14, [sp, #12]
 8002cb4:	eddd 7a07 	vldr	s15, [sp, #28]
 8002cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbc:	9b05      	ldr	r3, [sp, #20]
 8002cbe:	edc3 7a07 	vstr	s15, [r3, #28]
	_kd = Kd / SampleTimeInSec;
 8002cc2:	eddd 6a02 	vldr	s13, [sp, #8]
 8002cc6:	ed9d 7a07 	vldr	s14, [sp, #28]
 8002cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cce:	9b05      	ldr	r3, [sp, #20]
 8002cd0:	edc3 7a08 	vstr	s15, [r3, #32]
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 8002cd4:	9b05      	ldr	r3, [sp, #20]
 8002cd6:	78db      	ldrb	r3, [r3, #3]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d119      	bne.n	8002d10 <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xec>
	{
		
		_kp = (0 - _kp);
 8002cdc:	9b05      	ldr	r3, [sp, #20]
 8002cde:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ce2:	eef1 7a67 	vneg.f32	s15, s15
 8002ce6:	9b05      	ldr	r3, [sp, #20]
 8002ce8:	edc3 7a06 	vstr	s15, [r3, #24]
		_ki = (0 - _ki);
 8002cec:	9b05      	ldr	r3, [sp, #20]
 8002cee:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cf2:	eef1 7a67 	vneg.f32	s15, s15
 8002cf6:	9b05      	ldr	r3, [sp, #20]
 8002cf8:	edc3 7a07 	vstr	s15, [r3, #28]
		_kd = (0 - _kd);
 8002cfc:	9b05      	ldr	r3, [sp, #20]
 8002cfe:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d02:	eef1 7a67 	vneg.f32	s15, s15
 8002d06:	9b05      	ldr	r3, [sp, #20]
 8002d08:	edc3 7a08 	vstr	s15, [r3, #32]
 8002d0c:	e000      	b.n	8002d10 <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xec>
		return;
 8002d0e:	bf00      	nop
		
	}
	
}
 8002d10:	b008      	add	sp, #32
 8002d12:	4770      	bx	lr
 8002d14:	49742400 	.word	0x49742400

08002d18 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8002d18:	b082      	sub	sp, #8
 8002d1a:	9001      	str	r0, [sp, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	f88d 3003 	strb.w	r3, [sp, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8002d22:	9b01      	ldr	r3, [sp, #4]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d01d      	beq.n	8002d66 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x4e>
 8002d2a:	9b01      	ldr	r3, [sp, #4]
 8002d2c:	78db      	ldrb	r3, [r3, #3]
 8002d2e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d017      	beq.n	8002d66 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x4e>
	{
		
		_kp = (0 - _kp);
 8002d36:	9b01      	ldr	r3, [sp, #4]
 8002d38:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d3c:	eef1 7a67 	vneg.f32	s15, s15
 8002d40:	9b01      	ldr	r3, [sp, #4]
 8002d42:	edc3 7a06 	vstr	s15, [r3, #24]
		_ki = (0 - _ki);
 8002d46:	9b01      	ldr	r3, [sp, #4]
 8002d48:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d4c:	eef1 7a67 	vneg.f32	s15, s15
 8002d50:	9b01      	ldr	r3, [sp, #4]
 8002d52:	edc3 7a07 	vstr	s15, [r3, #28]
		_kd = (0 - _kd);
 8002d56:	9b01      	ldr	r3, [sp, #4]
 8002d58:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d5c:	eef1 7a67 	vneg.f32	s15, s15
 8002d60:	9b01      	ldr	r3, [sp, #4]
 8002d62:	edc3 7a08 	vstr	s15, [r3, #32]
		
	}
	
	_controllerDirection = Direction;
 8002d66:	9b01      	ldr	r3, [sp, #4]
 8002d68:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002d6c:	70da      	strb	r2, [r3, #3]
	
}
 8002d6e:	bf00      	nop
 8002d70:	b002      	add	sp, #8
 8002d72:	4770      	bx	lr

08002d74 <SystemInit>:

void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d74:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <SystemInit+0x3c>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <SystemInit+0x3c>)
 8002d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location add offset address ------------------*/
	#ifdef VECT_TAB_SRAM
		SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
	#else
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <SystemInit+0x3c>)
 8002d86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d8a:	609a      	str	r2, [r3, #8]
	#endif

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <SystemInit+0x40>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <SystemInit+0x40>)
 8002d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d96:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <SystemInit+0x44>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <SystemInit+0x44>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <SystemInit+0x44>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	bf00      	nop
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000ed00 	.word	0xe000ed00
 8002db4:	e000edf0 	.word	0xe000edf0
 8002db8:	e0001000 	.word	0xe0001000

08002dbc <_init>:
int __errno;
void *__dso_handle = (void *)&__dso_handle;

void _init(void) {}
 8002dbc:	bf00      	nop
 8002dbe:	4770      	bx	lr

08002dc0 <_sub_I_65535_0.0>:
 8002dc0:	b508      	push	{r3, lr}
 8002dc2:	f7fe fd53 	bl	800186c <_GLOBAL__sub_I__ZN12ClockManager8hseClockE>
 8002dc6:	f7fe fc13 	bl	80015f0 <_GLOBAL__sub_I_sineLookUp>
 8002dca:	bd08      	pop	{r3, pc}

08002dcc <Reset_Handler>:
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <LoopForever+0x2>)
 8002dce:	4685      	mov	sp, r0
 8002dd0:	480d      	ldr	r0, [pc, #52]	; (8002e08 <LoopForever+0x6>)
 8002dd2:	490e      	ldr	r1, [pc, #56]	; (8002e0c <LoopForever+0xa>)
 8002dd4:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <LoopForever+0xe>)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e002      	b.n	8002de0 <LoopCopyDataInit>

08002dda <CopyDataInit>:
 8002dda:	58d4      	ldr	r4, [r2, r3]
 8002ddc:	50c4      	str	r4, [r0, r3]
 8002dde:	3304      	adds	r3, #4

08002de0 <LoopCopyDataInit>:
 8002de0:	18c4      	adds	r4, r0, r3
 8002de2:	428c      	cmp	r4, r1
 8002de4:	d3f9      	bcc.n	8002dda <CopyDataInit>
 8002de6:	4a0b      	ldr	r2, [pc, #44]	; (8002e14 <LoopForever+0x12>)
 8002de8:	4c0b      	ldr	r4, [pc, #44]	; (8002e18 <LoopForever+0x16>)
 8002dea:	2300      	movs	r3, #0
 8002dec:	e001      	b.n	8002df2 <LoopFillZerobss>

08002dee <FillZerobss>:
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	3204      	adds	r2, #4

08002df2 <LoopFillZerobss>:
 8002df2:	42a2      	cmp	r2, r4
 8002df4:	d3fb      	bcc.n	8002dee <FillZerobss>
 8002df6:	f7ff ffbd 	bl	8002d74 <SystemInit>
 8002dfa:	f000 f811 	bl	8002e20 <__libc_init_array>
 8002dfe:	f7fe f8dd 	bl	8000fbc <main>

08002e02 <LoopForever>:
 8002e02:	e7fe      	b.n	8002e02 <LoopForever>
 8002e04:	20020000 	.word	0x20020000
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000024 	.word	0x20000024
 8002e10:	08003fbc 	.word	0x08003fbc
 8002e14:	20000024 	.word	0x20000024
 8002e18:	200002e0 	.word	0x200002e0

08002e1c <ADC1_2_IRQHandler>:
 8002e1c:	e7fe      	b.n	8002e1c <ADC1_2_IRQHandler>
	...

08002e20 <__libc_init_array>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <__libc_init_array+0x40>)
 8002e24:	4d0f      	ldr	r5, [pc, #60]	; (8002e64 <__libc_init_array+0x44>)
 8002e26:	42ab      	cmp	r3, r5
 8002e28:	eba3 0605 	sub.w	r6, r3, r5
 8002e2c:	d007      	beq.n	8002e3e <__libc_init_array+0x1e>
 8002e2e:	10b6      	asrs	r6, r6, #2
 8002e30:	2400      	movs	r4, #0
 8002e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e36:	3401      	adds	r4, #1
 8002e38:	4798      	blx	r3
 8002e3a:	42a6      	cmp	r6, r4
 8002e3c:	d8f9      	bhi.n	8002e32 <__libc_init_array+0x12>
 8002e3e:	f7ff ffbd 	bl	8002dbc <_init>
 8002e42:	4d09      	ldr	r5, [pc, #36]	; (8002e68 <__libc_init_array+0x48>)
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <__libc_init_array+0x4c>)
 8002e46:	1b5e      	subs	r6, r3, r5
 8002e48:	42ab      	cmp	r3, r5
 8002e4a:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8002e4e:	d006      	beq.n	8002e5e <__libc_init_array+0x3e>
 8002e50:	2400      	movs	r4, #0
 8002e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e56:	3401      	adds	r4, #1
 8002e58:	4798      	blx	r3
 8002e5a:	42a6      	cmp	r6, r4
 8002e5c:	d8f9      	bhi.n	8002e52 <__libc_init_array+0x32>
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	08003fb8 	.word	0x08003fb8
 8002e64:	08003fb8 	.word	0x08003fb8
 8002e68:	08003fb8 	.word	0x08003fb8
 8002e6c:	08003fbc 	.word	0x08003fbc

08002e70 <cosf>:
 8002e70:	ee10 3a10 	vmov	r3, s0
 8002e74:	4918      	ldr	r1, [pc, #96]	; (8002ed8 <cosf+0x68>)
 8002e76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e7a:	428a      	cmp	r2, r1
 8002e7c:	d91b      	bls.n	8002eb6 <cosf+0x46>
 8002e7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8002e82:	d302      	bcc.n	8002e8a <cosf+0x1a>
 8002e84:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002e88:	4770      	bx	lr
 8002e8a:	b500      	push	{lr}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	4668      	mov	r0, sp
 8002e90:	f000 f92a 	bl	80030e8 <__ieee754_rem_pio2f>
 8002e94:	f000 0003 	and.w	r0, r0, #3
 8002e98:	2801      	cmp	r0, #1
 8002e9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8002e9e:	ed9d 0a00 	vldr	s0, [sp]
 8002ea2:	d00c      	beq.n	8002ebe <cosf+0x4e>
 8002ea4:	2802      	cmp	r0, #2
 8002ea6:	d012      	beq.n	8002ece <cosf+0x5e>
 8002ea8:	b170      	cbz	r0, 8002ec8 <cosf+0x58>
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f000 f8d4 	bl	8003058 <__kernel_sinf>
 8002eb0:	b003      	add	sp, #12
 8002eb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eb6:	eddf 0a09 	vldr	s1, [pc, #36]	; 8002edc <cosf+0x6c>
 8002eba:	f000 b84b 	b.w	8002f54 <__kernel_cosf>
 8002ebe:	f000 f8cb 	bl	8003058 <__kernel_sinf>
 8002ec2:	eeb1 0a40 	vneg.f32	s0, s0
 8002ec6:	e7f3      	b.n	8002eb0 <cosf+0x40>
 8002ec8:	f000 f844 	bl	8002f54 <__kernel_cosf>
 8002ecc:	e7f0      	b.n	8002eb0 <cosf+0x40>
 8002ece:	f000 f841 	bl	8002f54 <__kernel_cosf>
 8002ed2:	eeb1 0a40 	vneg.f32	s0, s0
 8002ed6:	e7eb      	b.n	8002eb0 <cosf+0x40>
 8002ed8:	3f490fd8 	.word	0x3f490fd8
 8002edc:	00000000 	.word	0x00000000

08002ee0 <sinf>:
 8002ee0:	ee10 3a10 	vmov	r3, s0
 8002ee4:	4919      	ldr	r1, [pc, #100]	; (8002f4c <sinf+0x6c>)
 8002ee6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eea:	428a      	cmp	r2, r1
 8002eec:	d91c      	bls.n	8002f28 <sinf+0x48>
 8002eee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8002ef2:	d302      	bcc.n	8002efa <sinf+0x1a>
 8002ef4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002ef8:	4770      	bx	lr
 8002efa:	b500      	push	{lr}
 8002efc:	b083      	sub	sp, #12
 8002efe:	4668      	mov	r0, sp
 8002f00:	f000 f8f2 	bl	80030e8 <__ieee754_rem_pio2f>
 8002f04:	f000 0003 	and.w	r0, r0, #3
 8002f08:	2801      	cmp	r0, #1
 8002f0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8002f0e:	ed9d 0a00 	vldr	s0, [sp]
 8002f12:	d00e      	beq.n	8002f32 <sinf+0x52>
 8002f14:	2802      	cmp	r0, #2
 8002f16:	d013      	beq.n	8002f40 <sinf+0x60>
 8002f18:	b170      	cbz	r0, 8002f38 <sinf+0x58>
 8002f1a:	f000 f81b 	bl	8002f54 <__kernel_cosf>
 8002f1e:	eeb1 0a40 	vneg.f32	s0, s0
 8002f22:	b003      	add	sp, #12
 8002f24:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f28:	eddf 0a09 	vldr	s1, [pc, #36]	; 8002f50 <sinf+0x70>
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f000 b893 	b.w	8003058 <__kernel_sinf>
 8002f32:	f000 f80f 	bl	8002f54 <__kernel_cosf>
 8002f36:	e7f4      	b.n	8002f22 <sinf+0x42>
 8002f38:	2001      	movs	r0, #1
 8002f3a:	f000 f88d 	bl	8003058 <__kernel_sinf>
 8002f3e:	e7f0      	b.n	8002f22 <sinf+0x42>
 8002f40:	2001      	movs	r0, #1
 8002f42:	f000 f889 	bl	8003058 <__kernel_sinf>
 8002f46:	eeb1 0a40 	vneg.f32	s0, s0
 8002f4a:	e7ea      	b.n	8002f22 <sinf+0x42>
 8002f4c:	3f490fd8 	.word	0x3f490fd8
 8002f50:	00000000 	.word	0x00000000

08002f54 <__kernel_cosf>:
 8002f54:	ee10 3a10 	vmov	r3, s0
 8002f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f5c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002f60:	d22c      	bcs.n	8002fbc <__kernel_cosf+0x68>
 8002f62:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f66:	ee17 3a90 	vmov	r3, s15
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d060      	beq.n	8003030 <__kernel_cosf+0xdc>
 8002f6e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002f72:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003038 <__kernel_cosf+0xe4>
 8002f76:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800303c <__kernel_cosf+0xe8>
 8002f7a:	eddf 5a31 	vldr	s11, [pc, #196]	; 8003040 <__kernel_cosf+0xec>
 8002f7e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8003044 <__kernel_cosf+0xf0>
 8002f82:	eddf 6a31 	vldr	s13, [pc, #196]	; 8003048 <__kernel_cosf+0xf4>
 8002f86:	eea7 5a87 	vfma.f32	s10, s15, s14
 8002f8a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800304c <__kernel_cosf+0xf8>
 8002f8e:	eee5 5a27 	vfma.f32	s11, s10, s15
 8002f92:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8002f96:	eea7 7a86 	vfma.f32	s14, s15, s12
 8002f9a:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002f9e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002fa2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002fa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002faa:	eee7 0aa6 	vfma.f32	s1, s15, s13
 8002fae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002fb2:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8002fb6:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002fba:	4770      	bx	lr
 8002fbc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002fc0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003038 <__kernel_cosf+0xe4>
 8002fc4:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 800303c <__kernel_cosf+0xe8>
 8002fc8:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003040 <__kernel_cosf+0xec>
 8002fcc:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8003044 <__kernel_cosf+0xf0>
 8002fd0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8003048 <__kernel_cosf+0xf4>
 8002fd4:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <__kernel_cosf+0xfc>)
 8002fd6:	eea7 5a87 	vfma.f32	s10, s15, s14
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800304c <__kernel_cosf+0xf8>
 8002fe0:	eee5 5a27 	vfma.f32	s11, s10, s15
 8002fe4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8002fe8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8002fec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002ff0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ff4:	d9d5      	bls.n	8002fa2 <__kernel_cosf+0x4e>
 8002ff6:	4a17      	ldr	r2, [pc, #92]	; (8003054 <__kernel_cosf+0x100>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d814      	bhi.n	8003026 <__kernel_cosf+0xd2>
 8002ffc:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8003000:	ee07 3a10 	vmov	s14, r3
 8003004:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003008:	ee36 6a47 	vsub.f32	s12, s12, s14
 800300c:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8003010:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003014:	ee97 7aa5 	vfnms.f32	s14, s15, s11
 8003018:	eee7 0aa6 	vfma.f32	s1, s15, s13
 800301c:	ee37 7a60 	vsub.f32	s14, s14, s1
 8003020:	ee36 0a47 	vsub.f32	s0, s12, s14
 8003024:	4770      	bx	lr
 8003026:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 800302a:	eeb5 7a02 	vmov.f32	s14, #82	; 0x3e900000  0.2812500
 800302e:	e7ed      	b.n	800300c <__kernel_cosf+0xb8>
 8003030:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	ad47d74e 	.word	0xad47d74e
 800303c:	310f74f6 	.word	0x310f74f6
 8003040:	b493f27c 	.word	0xb493f27c
 8003044:	37d00d01 	.word	0x37d00d01
 8003048:	3d2aaaab 	.word	0x3d2aaaab
 800304c:	bab60b61 	.word	0xbab60b61
 8003050:	3e999999 	.word	0x3e999999
 8003054:	3f480000 	.word	0x3f480000

08003058 <__kernel_sinf>:
 8003058:	ee10 3a10 	vmov	r3, s0
 800305c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003060:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003064:	d204      	bcs.n	8003070 <__kernel_sinf+0x18>
 8003066:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800306a:	ee17 3a90 	vmov	r3, s15
 800306e:	b35b      	cbz	r3, 80030c8 <__kernel_sinf+0x70>
 8003070:	ee60 7a00 	vmul.f32	s15, s0, s0
 8003074:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80030cc <__kernel_sinf+0x74>
 8003078:	eddf 5a15 	vldr	s11, [pc, #84]	; 80030d0 <__kernel_sinf+0x78>
 800307c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80030d4 <__kernel_sinf+0x7c>
 8003080:	eddf 6a15 	vldr	s13, [pc, #84]	; 80030d8 <__kernel_sinf+0x80>
 8003084:	eee7 5a87 	vfma.f32	s11, s15, s14
 8003088:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80030dc <__kernel_sinf+0x84>
 800308c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8003090:	ee20 5a27 	vmul.f32	s10, s0, s15
 8003094:	eee6 6a27 	vfma.f32	s13, s12, s15
 8003098:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800309c:	b930      	cbnz	r0, 80030ac <__kernel_sinf+0x54>
 800309e:	eddf 6a10 	vldr	s13, [pc, #64]	; 80030e0 <__kernel_sinf+0x88>
 80030a2:	eee7 6a87 	vfma.f32	s13, s15, s14
 80030a6:	eea6 0a85 	vfma.f32	s0, s13, s10
 80030aa:	4770      	bx	lr
 80030ac:	ee27 7a45 	vnmul.f32	s14, s14, s10
 80030b0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80030b4:	eea0 7aa6 	vfma.f32	s14, s1, s13
 80030b8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80030e4 <__kernel_sinf+0x8c>
 80030bc:	eed7 0a27 	vfnms.f32	s1, s14, s15
 80030c0:	eee5 0a26 	vfma.f32	s1, s10, s13
 80030c4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	2f2ec9d3 	.word	0x2f2ec9d3
 80030d0:	b2d72f34 	.word	0xb2d72f34
 80030d4:	3638ef1b 	.word	0x3638ef1b
 80030d8:	b9500d01 	.word	0xb9500d01
 80030dc:	3c088889 	.word	0x3c088889
 80030e0:	be2aaaab 	.word	0xbe2aaaab
 80030e4:	3e2aaaab 	.word	0x3e2aaaab

080030e8 <__ieee754_rem_pio2f>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	ee10 3a10 	vmov	r3, s0
 80030ee:	4a88      	ldr	r2, [pc, #544]	; (8003310 <__ieee754_rem_pio2f+0x228>)
 80030f0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80030f4:	4294      	cmp	r4, r2
 80030f6:	b086      	sub	sp, #24
 80030f8:	4605      	mov	r5, r0
 80030fa:	d971      	bls.n	80031e0 <__ieee754_rem_pio2f+0xf8>
 80030fc:	4a85      	ldr	r2, [pc, #532]	; (8003314 <__ieee754_rem_pio2f+0x22c>)
 80030fe:	4294      	cmp	r4, r2
 8003100:	461e      	mov	r6, r3
 8003102:	d824      	bhi.n	800314e <__ieee754_rem_pio2f+0x66>
 8003104:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	eddf 7a83 	vldr	s15, [pc, #524]	; 8003318 <__ieee754_rem_pio2f+0x230>
 800310e:	4a83      	ldr	r2, [pc, #524]	; (800331c <__ieee754_rem_pio2f+0x234>)
 8003110:	f026 060f 	bic.w	r6, r6, #15
 8003114:	eeb0 7a40 	vmov.f32	s14, s0
 8003118:	f340 80e0 	ble.w	80032dc <__ieee754_rem_pio2f+0x1f4>
 800311c:	4296      	cmp	r6, r2
 800311e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003122:	bf09      	itett	eq
 8003124:	ed9f 7a7e 	vldreq	s14, [pc, #504]	; 8003320 <__ieee754_rem_pio2f+0x238>
 8003128:	eddf 6a7e 	vldrne	s13, [pc, #504]	; 8003324 <__ieee754_rem_pio2f+0x23c>
 800312c:	eddf 6a7e 	vldreq	s13, [pc, #504]	; 8003328 <__ieee754_rem_pio2f+0x240>
 8003130:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003134:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003138:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800313c:	ed80 7a00 	vstr	s14, [r0]
 8003140:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003144:	edc0 7a01 	vstr	s15, [r0, #4]
 8003148:	2001      	movs	r0, #1
 800314a:	b006      	add	sp, #24
 800314c:	bd70      	pop	{r4, r5, r6, pc}
 800314e:	4a77      	ldr	r2, [pc, #476]	; (800332c <__ieee754_rem_pio2f+0x244>)
 8003150:	4294      	cmp	r4, r2
 8003152:	d952      	bls.n	80031fa <__ieee754_rem_pio2f+0x112>
 8003154:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003158:	d248      	bcs.n	80031ec <__ieee754_rem_pio2f+0x104>
 800315a:	15e2      	asrs	r2, r4, #23
 800315c:	3a86      	subs	r2, #134	; 0x86
 800315e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800316a:	eddf 6a71 	vldr	s13, [pc, #452]	; 8003330 <__ieee754_rem_pio2f+0x248>
 800316e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003176:	ed8d 7a03 	vstr	s14, [sp, #12]
 800317a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800317e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003182:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003186:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800318a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800318e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003192:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319a:	edcd 7a05 	vstr	s15, [sp, #20]
 800319e:	f040 8098 	bne.w	80032d2 <__ieee754_rem_pio2f+0x1ea>
 80031a2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80031a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2302      	movne	r3, #2
 80031b0:	4960      	ldr	r1, [pc, #384]	; (8003334 <__ieee754_rem_pio2f+0x24c>)
 80031b2:	9101      	str	r1, [sp, #4]
 80031b4:	2102      	movs	r1, #2
 80031b6:	9100      	str	r1, [sp, #0]
 80031b8:	a803      	add	r0, sp, #12
 80031ba:	4629      	mov	r1, r5
 80031bc:	f000 f8cc 	bl	8003358 <__kernel_rem_pio2f>
 80031c0:	2e00      	cmp	r6, #0
 80031c2:	dac2      	bge.n	800314a <__ieee754_rem_pio2f+0x62>
 80031c4:	ed95 7a00 	vldr	s14, [r5]
 80031c8:	edd5 7a01 	vldr	s15, [r5, #4]
 80031cc:	eeb1 7a47 	vneg.f32	s14, s14
 80031d0:	eef1 7a67 	vneg.f32	s15, s15
 80031d4:	ed85 7a00 	vstr	s14, [r5]
 80031d8:	edc5 7a01 	vstr	s15, [r5, #4]
 80031dc:	4240      	negs	r0, r0
 80031de:	e7b4      	b.n	800314a <__ieee754_rem_pio2f+0x62>
 80031e0:	2200      	movs	r2, #0
 80031e2:	ed85 0a00 	vstr	s0, [r5]
 80031e6:	6042      	str	r2, [r0, #4]
 80031e8:	2000      	movs	r0, #0
 80031ea:	e7ae      	b.n	800314a <__ieee754_rem_pio2f+0x62>
 80031ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80031f0:	edc0 7a01 	vstr	s15, [r0, #4]
 80031f4:	edc0 7a00 	vstr	s15, [r0]
 80031f8:	e7f6      	b.n	80031e8 <__ieee754_rem_pio2f+0x100>
 80031fa:	f000 f8a5 	bl	8003348 <fabsf>
 80031fe:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003338 <__ieee754_rem_pio2f+0x250>
 8003202:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8003318 <__ieee754_rem_pio2f+0x230>
 8003206:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800320a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800320e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003324 <__ieee754_rem_pio2f+0x23c>
 8003212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003216:	ee17 0a90 	vmov	r0, s15
 800321a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800321e:	281f      	cmp	r0, #31
 8003220:	eea6 0ac6 	vfms.f32	s0, s13, s12
 8003224:	ee66 7a87 	vmul.f32	s15, s13, s14
 8003228:	eeb1 6a66 	vneg.f32	s12, s13
 800322c:	dc20      	bgt.n	8003270 <__ieee754_rem_pio2f+0x188>
 800322e:	4a43      	ldr	r2, [pc, #268]	; (800333c <__ieee754_rem_pio2f+0x254>)
 8003230:	1e41      	subs	r1, r0, #1
 8003232:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003236:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800323a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800323e:	4293      	cmp	r3, r2
 8003240:	d016      	beq.n	8003270 <__ieee754_rem_pio2f+0x188>
 8003242:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003246:	ee30 0a47 	vsub.f32	s0, s0, s14
 800324a:	2e00      	cmp	r6, #0
 800324c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003250:	ed85 7a00 	vstr	s14, [r5]
 8003254:	ed85 0a01 	vstr	s0, [r5, #4]
 8003258:	f6bf af77 	bge.w	800314a <__ieee754_rem_pio2f+0x62>
 800325c:	eeb1 7a47 	vneg.f32	s14, s14
 8003260:	eeb1 0a40 	vneg.f32	s0, s0
 8003264:	ed85 7a00 	vstr	s14, [r5]
 8003268:	ed85 0a01 	vstr	s0, [r5, #4]
 800326c:	4240      	negs	r0, r0
 800326e:	e76c      	b.n	800314a <__ieee754_rem_pio2f+0x62>
 8003270:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003274:	15e2      	asrs	r2, r4, #23
 8003276:	ee17 3a10 	vmov	r3, s14
 800327a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800327e:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 8003282:	2b08      	cmp	r3, #8
 8003284:	dddf      	ble.n	8003246 <__ieee754_rem_pio2f+0x15e>
 8003286:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003320 <__ieee754_rem_pio2f+0x238>
 800328a:	ed9f 5a27 	vldr	s10, [pc, #156]	; 8003328 <__ieee754_rem_pio2f+0x240>
 800328e:	eef0 5a40 	vmov.f32	s11, s0
 8003292:	eee6 5a07 	vfma.f32	s11, s12, s14
 8003296:	ee70 7a65 	vsub.f32	s15, s0, s11
 800329a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800329e:	eed6 7a85 	vfnms.f32	s15, s13, s10
 80032a2:	ee35 7ae7 	vsub.f32	s14, s11, s15
 80032a6:	ee17 3a10 	vmov	r3, s14
 80032aa:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80032ae:	1ad2      	subs	r2, r2, r3
 80032b0:	2a19      	cmp	r2, #25
 80032b2:	dd10      	ble.n	80032d6 <__ieee754_rem_pio2f+0x1ee>
 80032b4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003340 <__ieee754_rem_pio2f+0x258>
 80032b8:	ed9f 5a22 	vldr	s10, [pc, #136]	; 8003344 <__ieee754_rem_pio2f+0x25c>
 80032bc:	eeb0 0a65 	vmov.f32	s0, s11
 80032c0:	eea6 0a07 	vfma.f32	s0, s12, s14
 80032c4:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80032c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80032cc:	eed6 7a85 	vfnms.f32	s15, s13, s10
 80032d0:	e7b7      	b.n	8003242 <__ieee754_rem_pio2f+0x15a>
 80032d2:	2303      	movs	r3, #3
 80032d4:	e76c      	b.n	80031b0 <__ieee754_rem_pio2f+0xc8>
 80032d6:	eeb0 0a65 	vmov.f32	s0, s11
 80032da:	e7b4      	b.n	8003246 <__ieee754_rem_pio2f+0x15e>
 80032dc:	4296      	cmp	r6, r2
 80032de:	ee70 7a27 	vadd.f32	s15, s0, s15
 80032e2:	bf09      	itett	eq
 80032e4:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 8003320 <__ieee754_rem_pio2f+0x238>
 80032e8:	eddf 6a0e 	vldrne	s13, [pc, #56]	; 8003324 <__ieee754_rem_pio2f+0x23c>
 80032ec:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 8003328 <__ieee754_rem_pio2f+0x240>
 80032f0:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80032f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80032f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032fc:	ed80 7a00 	vstr	s14, [r0]
 8003300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003304:	edc0 7a01 	vstr	s15, [r0, #4]
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
 800330c:	e71d      	b.n	800314a <__ieee754_rem_pio2f+0x62>
 800330e:	bf00      	nop
 8003310:	3f490fd8 	.word	0x3f490fd8
 8003314:	4016cbe3 	.word	0x4016cbe3
 8003318:	3fc90f80 	.word	0x3fc90f80
 800331c:	3fc90fd0 	.word	0x3fc90fd0
 8003320:	37354400 	.word	0x37354400
 8003324:	37354443 	.word	0x37354443
 8003328:	2e85a308 	.word	0x2e85a308
 800332c:	43490f80 	.word	0x43490f80
 8003330:	43800000 	.word	0x43800000
 8003334:	08003c68 	.word	0x08003c68
 8003338:	3f22f984 	.word	0x3f22f984
 800333c:	08003be8 	.word	0x08003be8
 8003340:	2e85a300 	.word	0x2e85a300
 8003344:	248d3132 	.word	0x248d3132

08003348 <fabsf>:
 8003348:	ee10 3a10 	vmov	r3, s0
 800334c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003350:	ee00 3a10 	vmov	s0, r3
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop

08003358 <__kernel_rem_pio2f>:
 8003358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335c:	ed2d 8b04 	vpush	{d8-d9}
 8003360:	b0db      	sub	sp, #364	; 0x16c
 8003362:	460c      	mov	r4, r1
 8003364:	4681      	mov	r9, r0
 8003366:	4611      	mov	r1, r2
 8003368:	9868      	ldr	r0, [sp, #416]	; 0x1a0
 800336a:	4a96      	ldr	r2, [pc, #600]	; (80035c4 <__kernel_rem_pio2f+0x26c>)
 800336c:	9304      	str	r3, [sp, #16]
 800336e:	461e      	mov	r6, r3
 8003370:	4623      	mov	r3, r4
 8003372:	1d0c      	adds	r4, r1, #4
 8003374:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8003378:	f106 37ff 	add.w	r7, r6, #4294967295
 800337c:	f2c0 82b0 	blt.w	80038e0 <__kernel_rem_pio2f+0x588>
 8003380:	1eca      	subs	r2, r1, #3
 8003382:	bf48      	it	mi
 8003384:	1d0a      	addmi	r2, r1, #4
 8003386:	10d2      	asrs	r2, r2, #3
 8003388:	9203      	str	r2, [sp, #12]
 800338a:	3201      	adds	r2, #1
 800338c:	00d2      	lsls	r2, r2, #3
 800338e:	9206      	str	r2, [sp, #24]
 8003390:	9a06      	ldr	r2, [sp, #24]
 8003392:	9803      	ldr	r0, [sp, #12]
 8003394:	19ee      	adds	r6, r5, r7
 8003396:	eba1 0202 	sub.w	r2, r1, r2
 800339a:	eba0 0007 	sub.w	r0, r0, r7
 800339e:	d419      	bmi.n	80033d4 <__kernel_rem_pio2f+0x7c>
 80033a0:	3601      	adds	r6, #1
 80033a2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80035c8 <__kernel_rem_pio2f+0x270>
 80033a6:	f8dd c1a4 	ldr.w	ip, [sp, #420]	; 0x1a4
 80033aa:	4406      	add	r6, r0
 80033ac:	ac1e      	add	r4, sp, #120	; 0x78
 80033ae:	469e      	mov	lr, r3
 80033b0:	2800      	cmp	r0, #0
 80033b2:	bfa4      	itt	ge
 80033b4:	f85c 3020 	ldrge.w	r3, [ip, r0, lsl #2]
 80033b8:	ee07 3a90 	vmovge	s15, r3
 80033bc:	f100 0001 	add.w	r0, r0, #1
 80033c0:	bfac      	ite	ge
 80033c2:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 80033c6:	eef0 7a47 	vmovlt.f32	s15, s14
 80033ca:	42b0      	cmp	r0, r6
 80033cc:	ece4 7a01 	vstmia	r4!, {s15}
 80033d0:	d1ee      	bne.n	80033b0 <__kernel_rem_pio2f+0x58>
 80033d2:	4673      	mov	r3, lr
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	f2c0 82d9 	blt.w	800398c <__kernel_rem_pio2f+0x634>
 80033da:	9804      	ldr	r0, [sp, #16]
 80033dc:	ac1e      	add	r4, sp, #120	; 0x78
 80033de:	eb04 0680 	add.w	r6, r4, r0, lsl #2
 80033e2:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80033e6:	eb05 0e00 	add.w	lr, r5, r0
 80033ea:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
 80033ee:	463c      	mov	r4, r7
 80033f0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80033f4:	2f00      	cmp	r7, #0
 80033f6:	eddf 7a74 	vldr	s15, [pc, #464]	; 80035c8 <__kernel_rem_pio2f+0x270>
 80033fa:	db09      	blt.n	8003410 <__kernel_rem_pio2f+0xb8>
 80033fc:	46b3      	mov	fp, r6
 80033fe:	46ca      	mov	sl, r9
 8003400:	ecfa 6a01 	vldmia	sl!, {s13}
 8003404:	ed3b 7a01 	vldmdb	fp!, {s14}
 8003408:	4582      	cmp	sl, r0
 800340a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800340e:	d1f7      	bne.n	8003400 <__kernel_rem_pio2f+0xa8>
 8003410:	3401      	adds	r4, #1
 8003412:	4574      	cmp	r4, lr
 8003414:	ecec 7a01 	vstmia	ip!, {s15}
 8003418:	f106 0604 	add.w	r6, r6, #4
 800341c:	d1ea      	bne.n	80033f4 <__kernel_rem_pio2f+0x9c>
 800341e:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8003422:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 8003426:	e9cd 3107 	strd	r3, r1, [sp, #28]
 800342a:	3804      	subs	r0, #4
 800342c:	ed9f 9a68 	vldr	s18, [pc, #416]	; 80035d0 <__kernel_rem_pio2f+0x278>
 8003430:	eddf 8a66 	vldr	s17, [pc, #408]	; 80035cc <__kernel_rem_pio2f+0x274>
 8003434:	9005      	str	r0, [sp, #20]
 8003436:	eb09 0408 	add.w	r4, r9, r8
 800343a:	46ab      	mov	fp, r5
 800343c:	eb0a 0885 	add.w	r8, sl, r5, lsl #2
 8003440:	ae46      	add	r6, sp, #280	; 0x118
 8003442:	9501      	str	r5, [sp, #4]
 8003444:	4610      	mov	r0, r2
 8003446:	ab5a      	add	r3, sp, #360	; 0x168
 8003448:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 800344c:	f1bb 0f00 	cmp.w	fp, #0
 8003450:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8003454:	dd16      	ble.n	8003484 <__kernel_rem_pio2f+0x12c>
 8003456:	eb06 038b 	add.w	r3, r6, fp, lsl #2
 800345a:	4652      	mov	r2, sl
 800345c:	ee60 7a09 	vmul.f32	s15, s0, s18
 8003460:	eeb0 7a40 	vmov.f32	s14, s0
 8003464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003468:	ed73 6a01 	vldmdb	r3!, {s13}
 800346c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003470:	42b3      	cmp	r3, r6
 8003472:	eea7 7ae8 	vfms.f32	s14, s15, s17
 8003476:	ee37 0aa6 	vadd.f32	s0, s15, s13
 800347a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800347e:	eca2 7a01 	vstmia	r2!, {s14}
 8003482:	d1eb      	bne.n	800345c <__kernel_rem_pio2f+0x104>
 8003484:	9002      	str	r0, [sp, #8]
 8003486:	f000 faa5 	bl	80039d4 <scalbnf>
 800348a:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 800348e:	eeb0 8a40 	vmov.f32	s16, s0
 8003492:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003496:	f000 fb0f 	bl	8003ab8 <floorf>
 800349a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800349e:	eea0 8a67 	vfms.f32	s16, s0, s15
 80034a2:	9802      	ldr	r0, [sp, #8]
 80034a4:	2800      	cmp	r0, #0
 80034a6:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 80034aa:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 80034ae:	ee38 8a67 	vsub.f32	s16, s16, s15
 80034b2:	dd6e      	ble.n	8003592 <__kernel_rem_pio2f+0x23a>
 80034b4:	f10b 3cff 	add.w	ip, fp, #4294967295
 80034b8:	f1c0 0308 	rsb	r3, r0, #8
 80034bc:	f85a 202c 	ldr.w	r2, [sl, ip, lsl #2]
 80034c0:	fa42 f503 	asr.w	r5, r2, r3
 80034c4:	fa05 f303 	lsl.w	r3, r5, r3
 80034c8:	1ad2      	subs	r2, r2, r3
 80034ca:	f1c0 0107 	rsb	r1, r0, #7
 80034ce:	ee19 3a90 	vmov	r3, s19
 80034d2:	fa42 f101 	asr.w	r1, r2, r1
 80034d6:	442b      	add	r3, r5
 80034d8:	2900      	cmp	r1, #0
 80034da:	f84a 202c 	str.w	r2, [sl, ip, lsl #2]
 80034de:	ee09 3a90 	vmov	s19, r3
 80034e2:	f300 814b 	bgt.w	800377c <__kernel_rem_pio2f+0x424>
 80034e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80034ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ee:	f040 80ba 	bne.w	8003666 <__kernel_rem_pio2f+0x30e>
 80034f2:	9b01      	ldr	r3, [sp, #4]
 80034f4:	459b      	cmp	fp, r3
 80034f6:	dd0b      	ble.n	8003510 <__kernel_rem_pio2f+0x1b8>
 80034f8:	eb0a 038b 	add.w	r3, sl, fp, lsl #2
 80034fc:	2200      	movs	r2, #0
 80034fe:	f853 5d04 	ldr.w	r5, [r3, #-4]!
 8003502:	4543      	cmp	r3, r8
 8003504:	ea42 0205 	orr.w	r2, r2, r5
 8003508:	d1f9      	bne.n	80034fe <__kernel_rem_pio2f+0x1a6>
 800350a:	2a00      	cmp	r2, #0
 800350c:	f040 8154 	bne.w	80037b8 <__kernel_rem_pio2f+0x460>
 8003510:	9b01      	ldr	r3, [sp, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f040 8144 	bne.w	80037a6 <__kernel_rem_pio2f+0x44e>
 800351e:	9b05      	ldr	r3, [sp, #20]
 8003520:	2101      	movs	r1, #1
 8003522:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003526:	3101      	adds	r1, #1
 8003528:	2a00      	cmp	r2, #0
 800352a:	d0fa      	beq.n	8003522 <__kernel_rem_pio2f+0x1ca>
 800352c:	f10b 0301 	add.w	r3, fp, #1
 8003530:	4459      	add	r1, fp
 8003532:	469c      	mov	ip, r3
 8003534:	9d03      	ldr	r5, [sp, #12]
 8003536:	9a04      	ldr	r2, [sp, #16]
 8003538:	eb05 0e03 	add.w	lr, r5, r3
 800353c:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8003540:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
 8003542:	445a      	add	r2, fp
 8003544:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003548:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 800354c:	ab1e      	add	r3, sp, #120	; 0x78
 800354e:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8003552:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8003556:	edde 7a01 	vldr	s15, [lr, #4]
 800355a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355e:	2f00      	cmp	r7, #0
 8003560:	f10e 0e04 	add.w	lr, lr, #4
 8003564:	ece5 7a01 	vstmia	r5!, {s15}
 8003568:	eddf 7a17 	vldr	s15, [pc, #92]	; 80035c8 <__kernel_rem_pio2f+0x270>
 800356c:	db09      	blt.n	8003582 <__kernel_rem_pio2f+0x22a>
 800356e:	462a      	mov	r2, r5
 8003570:	464b      	mov	r3, r9
 8003572:	ecf3 6a01 	vldmia	r3!, {s13}
 8003576:	ed32 7a01 	vldmdb	r2!, {s14}
 800357a:	42a3      	cmp	r3, r4
 800357c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003580:	d1f7      	bne.n	8003572 <__kernel_rem_pio2f+0x21a>
 8003582:	f10c 0c01 	add.w	ip, ip, #1
 8003586:	4561      	cmp	r1, ip
 8003588:	eceb 7a01 	vstmia	fp!, {s15}
 800358c:	dae3      	bge.n	8003556 <__kernel_rem_pio2f+0x1fe>
 800358e:	468b      	mov	fp, r1
 8003590:	e759      	b.n	8003446 <__kernel_rem_pio2f+0xee>
 8003592:	f040 80e9 	bne.w	8003768 <__kernel_rem_pio2f+0x410>
 8003596:	f10b 33ff 	add.w	r3, fp, #4294967295
 800359a:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 800359e:	11c9      	asrs	r1, r1, #7
 80035a0:	2900      	cmp	r1, #0
 80035a2:	dda0      	ble.n	80034e6 <__kernel_rem_pio2f+0x18e>
 80035a4:	ee19 3a90 	vmov	r3, s19
 80035a8:	f1bb 0f00 	cmp.w	fp, #0
 80035ac:	f103 0301 	add.w	r3, r3, #1
 80035b0:	ee09 3a90 	vmov	s19, r3
 80035b4:	f340 81ee 	ble.w	8003994 <__kernel_rem_pio2f+0x63c>
 80035b8:	2500      	movs	r5, #0
 80035ba:	46d4      	mov	ip, sl
 80035bc:	462a      	mov	r2, r5
 80035be:	9102      	str	r1, [sp, #8]
 80035c0:	4686      	mov	lr, r0
 80035c2:	e019      	b.n	80035f8 <__kernel_rem_pio2f+0x2a0>
 80035c4:	08003fac 	.word	0x08003fac
 80035c8:	00000000 	.word	0x00000000
 80035cc:	43800000 	.word	0x43800000
 80035d0:	3b800000 	.word	0x3b800000
 80035d4:	3501      	adds	r5, #1
 80035d6:	45ab      	cmp	fp, r5
 80035d8:	f841 0c04 	str.w	r0, [r1, #-4]
 80035dc:	f340 80e8 	ble.w	80037b0 <__kernel_rem_pio2f+0x458>
 80035e0:	680b      	ldr	r3, [r1, #0]
 80035e2:	f10c 0c08 	add.w	ip, ip, #8
 80035e6:	3501      	adds	r5, #1
 80035e8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80035ec:	45ab      	cmp	fp, r5
 80035ee:	f04f 0201 	mov.w	r2, #1
 80035f2:	f84c 3c04 	str.w	r3, [ip, #-4]
 80035f6:	dd0d      	ble.n	8003614 <__kernel_rem_pio2f+0x2bc>
 80035f8:	4661      	mov	r1, ip
 80035fa:	f851 3b04 	ldr.w	r3, [r1], #4
 80035fe:	2a00      	cmp	r2, #0
 8003600:	f040 80b0 	bne.w	8003764 <__kernel_rem_pio2f+0x40c>
 8003604:	f5c3 7080 	rsb	r0, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e3      	bne.n	80035d4 <__kernel_rem_pio2f+0x27c>
 800360c:	3501      	adds	r5, #1
 800360e:	45ab      	cmp	fp, r5
 8003610:	468c      	mov	ip, r1
 8003612:	dcf1      	bgt.n	80035f8 <__kernel_rem_pio2f+0x2a0>
 8003614:	9902      	ldr	r1, [sp, #8]
 8003616:	4670      	mov	r0, lr
 8003618:	2800      	cmp	r0, #0
 800361a:	dd0c      	ble.n	8003636 <__kernel_rem_pio2f+0x2de>
 800361c:	2801      	cmp	r0, #1
 800361e:	f000 80b9 	beq.w	8003794 <__kernel_rem_pio2f+0x43c>
 8003622:	2802      	cmp	r0, #2
 8003624:	d107      	bne.n	8003636 <__kernel_rem_pio2f+0x2de>
 8003626:	f10b 35ff 	add.w	r5, fp, #4294967295
 800362a:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 800362e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003632:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 8003636:	2902      	cmp	r1, #2
 8003638:	f47f af55 	bne.w	80034e6 <__kernel_rem_pio2f+0x18e>
 800363c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003640:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003644:	2a00      	cmp	r2, #0
 8003646:	f43f af4e 	beq.w	80034e6 <__kernel_rem_pio2f+0x18e>
 800364a:	9109      	str	r1, [sp, #36]	; 0x24
 800364c:	9002      	str	r0, [sp, #8]
 800364e:	f000 f9c1 	bl	80039d4 <scalbnf>
 8003652:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003656:	9802      	ldr	r0, [sp, #8]
 8003658:	9909      	ldr	r1, [sp, #36]	; 0x24
 800365a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003662:	f43f af46 	beq.w	80034f2 <__kernel_rem_pio2f+0x19a>
 8003666:	9b07      	ldr	r3, [sp, #28]
 8003668:	9d01      	ldr	r5, [sp, #4]
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	4688      	mov	r8, r1
 800366e:	9b06      	ldr	r3, [sp, #24]
 8003670:	9908      	ldr	r1, [sp, #32]
 8003672:	9002      	str	r0, [sp, #8]
 8003674:	eeb0 0a48 	vmov.f32	s0, s16
 8003678:	1a58      	subs	r0, r3, r1
 800367a:	f000 f9ab 	bl	80039d4 <scalbnf>
 800367e:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 80035cc <__kernel_rem_pio2f+0x274>
 8003682:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8003686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800368e:	eef0 7a40 	vmov.f32	s15, s0
 8003692:	f2c0 814d 	blt.w	8003930 <__kernel_rem_pio2f+0x5d8>
 8003696:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 80035d0 <__kernel_rem_pio2f+0x278>
 800369a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800369e:	f10b 0401 	add.w	r4, fp, #1
 80036a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80036a6:	3208      	adds	r2, #8
 80036a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80036ac:	eee7 7a66 	vfms.f32	s15, s14, s13
 80036b0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80036b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b8:	ee17 1a90 	vmov	r1, s15
 80036bc:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 80036c0:	ee17 1a10 	vmov	r1, s14
 80036c4:	f84a 1024 	str.w	r1, [sl, r4, lsl #2]
 80036c8:	4610      	mov	r0, r2
 80036ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	f000 f980 	bl	80039d4 <scalbnf>
 80036d4:	2c00      	cmp	r4, #0
 80036d6:	9b01      	ldr	r3, [sp, #4]
 80036d8:	eeb0 7a40 	vmov.f32	s14, s0
 80036dc:	f2c0 814c 	blt.w	8003978 <__kernel_rem_pio2f+0x620>
 80036e0:	1c60      	adds	r0, r4, #1
 80036e2:	ae46      	add	r6, sp, #280	; 0x118
 80036e4:	ed5f 6a46 	vldr	s13, [pc, #-280]	; 80035d0 <__kernel_rem_pio2f+0x278>
 80036e8:	0081      	lsls	r1, r0, #2
 80036ea:	eb0a 0280 	add.w	r2, sl, r0, lsl #2
 80036ee:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80036f2:	ed72 7a01 	vldmdb	r2!, {s15}
 80036f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fa:	4552      	cmp	r2, sl
 80036fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003700:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003704:	ed60 7a01 	vstmdb	r0!, {s15}
 8003708:	d1f3      	bne.n	80036f2 <__kernel_rem_pio2f+0x39a>
 800370a:	1f0a      	subs	r2, r1, #4
 800370c:	a846      	add	r0, sp, #280	; 0x118
 800370e:	2d00      	cmp	r5, #0
 8003710:	eb00 0702 	add.w	r7, r0, r2
 8003714:	f04f 0600 	mov.w	r6, #0
 8003718:	469c      	mov	ip, r3
 800371a:	db20      	blt.n	800375e <__kernel_rem_pio2f+0x406>
 800371c:	4bab      	ldr	r3, [pc, #684]	; (80039cc <__kernel_rem_pio2f+0x674>)
 800371e:	eddf 7aac 	vldr	s15, [pc, #688]	; 80039d0 <__kernel_rem_pio2f+0x678>
 8003722:	4638      	mov	r0, r7
 8003724:	2200      	movs	r2, #0
 8003726:	e001      	b.n	800372c <__kernel_rem_pio2f+0x3d4>
 8003728:	42b2      	cmp	r2, r6
 800372a:	dc08      	bgt.n	800373e <__kernel_rem_pio2f+0x3e6>
 800372c:	ecf3 6a01 	vldmia	r3!, {s13}
 8003730:	ecb0 7a01 	vldmia	r0!, {s14}
 8003734:	3201      	adds	r2, #1
 8003736:	4295      	cmp	r5, r2
 8003738:	eee6 7a87 	vfma.f32	s15, s13, s14
 800373c:	daf4      	bge.n	8003728 <__kernel_rem_pio2f+0x3d0>
 800373e:	ab5a      	add	r3, sp, #360	; 0x168
 8003740:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 8003744:	42a6      	cmp	r6, r4
 8003746:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800374a:	ea4f 0086 	mov.w	r0, r6, lsl #2
 800374e:	f106 0201 	add.w	r2, r6, #1
 8003752:	f1a7 0704 	sub.w	r7, r7, #4
 8003756:	d047      	beq.n	80037e8 <__kernel_rem_pio2f+0x490>
 8003758:	2d00      	cmp	r5, #0
 800375a:	4616      	mov	r6, r2
 800375c:	dade      	bge.n	800371c <__kernel_rem_pio2f+0x3c4>
 800375e:	eddf 7a9c 	vldr	s15, [pc, #624]	; 80039d0 <__kernel_rem_pio2f+0x678>
 8003762:	e7ec      	b.n	800373e <__kernel_rem_pio2f+0x3e6>
 8003764:	468c      	mov	ip, r1
 8003766:	e73e      	b.n	80035e6 <__kernel_rem_pio2f+0x28e>
 8003768:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800376c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003774:	f280 80a2 	bge.w	80038bc <__kernel_rem_pio2f+0x564>
 8003778:	2100      	movs	r1, #0
 800377a:	e6b4      	b.n	80034e6 <__kernel_rem_pio2f+0x18e>
 800377c:	3301      	adds	r3, #1
 800377e:	f1bb 0f00 	cmp.w	fp, #0
 8003782:	ee09 3a90 	vmov	s19, r3
 8003786:	bfd8      	it	le
 8003788:	2200      	movle	r2, #0
 800378a:	f73f af15 	bgt.w	80035b8 <__kernel_rem_pio2f+0x260>
 800378e:	2801      	cmp	r0, #1
 8003790:	f47f af47 	bne.w	8003622 <__kernel_rem_pio2f+0x2ca>
 8003794:	f10b 35ff 	add.w	r5, fp, #4294967295
 8003798:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 800379c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a0:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 80037a4:	e747      	b.n	8003636 <__kernel_rem_pio2f+0x2de>
 80037a6:	f10b 0301 	add.w	r3, fp, #1
 80037aa:	469c      	mov	ip, r3
 80037ac:	4619      	mov	r1, r3
 80037ae:	e6c1      	b.n	8003534 <__kernel_rem_pio2f+0x1dc>
 80037b0:	9902      	ldr	r1, [sp, #8]
 80037b2:	4670      	mov	r0, lr
 80037b4:	2201      	movs	r2, #1
 80037b6:	e72f      	b.n	8003618 <__kernel_rem_pio2f+0x2c0>
 80037b8:	f10b 34ff 	add.w	r4, fp, #4294967295
 80037bc:	4688      	mov	r8, r1
 80037be:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 80037c2:	9d01      	ldr	r5, [sp, #4]
 80037c4:	9b07      	ldr	r3, [sp, #28]
 80037c6:	f1a0 0208 	sub.w	r2, r0, #8
 80037ca:	2900      	cmp	r1, #0
 80037cc:	f47f af7c 	bne.w	80036c8 <__kernel_rem_pio2f+0x370>
 80037d0:	f10b 4180 	add.w	r1, fp, #1073741824	; 0x40000000
 80037d4:	3901      	subs	r1, #1
 80037d6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80037da:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 80037de:	3c01      	subs	r4, #1
 80037e0:	3a08      	subs	r2, #8
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d0f9      	beq.n	80037da <__kernel_rem_pio2f+0x482>
 80037e6:	e76f      	b.n	80036c8 <__kernel_rem_pio2f+0x370>
 80037e8:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 80037ea:	2a02      	cmp	r2, #2
 80037ec:	4663      	mov	r3, ip
 80037ee:	dc1b      	bgt.n	8003828 <__kernel_rem_pio2f+0x4d0>
 80037f0:	2a00      	cmp	r2, #0
 80037f2:	dc7a      	bgt.n	80038ea <__kernel_rem_pio2f+0x592>
 80037f4:	d10f      	bne.n	8003816 <__kernel_rem_pio2f+0x4be>
 80037f6:	aa32      	add	r2, sp, #200	; 0xc8
 80037f8:	eddf 7a75 	vldr	s15, [pc, #468]	; 80039d0 <__kernel_rem_pio2f+0x678>
 80037fc:	4411      	add	r1, r2
 80037fe:	ed31 7a01 	vldmdb	r1!, {s14}
 8003802:	4291      	cmp	r1, r2
 8003804:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003808:	d1f9      	bne.n	80037fe <__kernel_rem_pio2f+0x4a6>
 800380a:	4642      	mov	r2, r8
 800380c:	b10a      	cbz	r2, 8003812 <__kernel_rem_pio2f+0x4ba>
 800380e:	eef1 7a67 	vneg.f32	s15, s15
 8003812:	edc3 7a00 	vstr	s15, [r3]
 8003816:	ee19 3a90 	vmov	r3, s19
 800381a:	f003 0007 	and.w	r0, r3, #7
 800381e:	b05b      	add	sp, #364	; 0x16c
 8003820:	ecbd 8b04 	vpop	{d8-d9}
 8003824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003828:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 800382a:	2a03      	cmp	r2, #3
 800382c:	d1f3      	bne.n	8003816 <__kernel_rem_pio2f+0x4be>
 800382e:	2c00      	cmp	r4, #0
 8003830:	f000 80bc 	beq.w	80039ac <__kernel_rem_pio2f+0x654>
 8003834:	a932      	add	r1, sp, #200	; 0xc8
 8003836:	180d      	adds	r5, r1, r0
 8003838:	ed95 7a00 	vldr	s14, [r5]
 800383c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003840:	00a7      	lsls	r7, r4, #2
 8003842:	4606      	mov	r6, r0
 8003844:	ed56 7a01 	vldr	s15, [r6, #-4]
 8003848:	eef0 6a47 	vmov.f32	s13, s14
 800384c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003850:	4632      	mov	r2, r6
 8003852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003856:	3e04      	subs	r6, #4
 8003858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385c:	42b1      	cmp	r1, r6
 800385e:	edc2 7a00 	vstr	s15, [r2]
 8003862:	ed02 7a01 	vstr	s14, [r2, #-4]
 8003866:	d1ed      	bne.n	8003844 <__kernel_rem_pio2f+0x4ec>
 8003868:	2c01      	cmp	r4, #1
 800386a:	f000 809f 	beq.w	80039ac <__kernel_rem_pio2f+0x654>
 800386e:	ed95 7a00 	vldr	s14, [r5]
 8003872:	ed70 7a01 	vldmdb	r0!, {s15}
 8003876:	eef0 6a47 	vmov.f32	s13, s14
 800387a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800387e:	4282      	cmp	r2, r0
 8003880:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003884:	ed80 7a00 	vstr	s14, [r0]
 8003888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800388c:	edc0 7a01 	vstr	s15, [r0, #4]
 8003890:	d1ef      	bne.n	8003872 <__kernel_rem_pio2f+0x51a>
 8003892:	1d38      	adds	r0, r7, #4
 8003894:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80039d0 <__kernel_rem_pio2f+0x678>
 8003898:	4401      	add	r1, r0
 800389a:	3204      	adds	r2, #4
 800389c:	ed31 7a01 	vldmdb	r1!, {s14}
 80038a0:	428a      	cmp	r2, r1
 80038a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038a6:	d1f9      	bne.n	800389c <__kernel_rem_pio2f+0x544>
 80038a8:	4642      	mov	r2, r8
 80038aa:	2a00      	cmp	r2, #0
 80038ac:	d148      	bne.n	8003940 <__kernel_rem_pio2f+0x5e8>
 80038ae:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80038b0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80038b2:	6019      	str	r1, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	edc3 7a02 	vstr	s15, [r3, #8]
 80038ba:	e7ac      	b.n	8003816 <__kernel_rem_pio2f+0x4be>
 80038bc:	ee19 3a90 	vmov	r3, s19
 80038c0:	f1bb 0f00 	cmp.w	fp, #0
 80038c4:	f103 0301 	add.w	r3, r3, #1
 80038c8:	ee09 3a90 	vmov	s19, r3
 80038cc:	bfc8      	it	gt
 80038ce:	2102      	movgt	r1, #2
 80038d0:	f73f ae72 	bgt.w	80035b8 <__kernel_rem_pio2f+0x260>
 80038d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80038d8:	ee37 8ac8 	vsub.f32	s16, s15, s16
 80038dc:	2102      	movs	r1, #2
 80038de:	e602      	b.n	80034e6 <__kernel_rem_pio2f+0x18e>
 80038e0:	2208      	movs	r2, #8
 80038e2:	9206      	str	r2, [sp, #24]
 80038e4:	2200      	movs	r2, #0
 80038e6:	9203      	str	r2, [sp, #12]
 80038e8:	e552      	b.n	8003390 <__kernel_rem_pio2f+0x38>
 80038ea:	aa32      	add	r2, sp, #200	; 0xc8
 80038ec:	eddf 7a38 	vldr	s15, [pc, #224]	; 80039d0 <__kernel_rem_pio2f+0x678>
 80038f0:	4411      	add	r1, r2
 80038f2:	ed31 7a01 	vldmdb	r1!, {s14}
 80038f6:	428a      	cmp	r2, r1
 80038f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038fc:	d1f9      	bne.n	80038f2 <__kernel_rem_pio2f+0x59a>
 80038fe:	4642      	mov	r2, r8
 8003900:	bb7a      	cbnz	r2, 8003962 <__kernel_rem_pio2f+0x60a>
 8003902:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8003906:	edc3 7a00 	vstr	s15, [r3]
 800390a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800390e:	b164      	cbz	r4, 800392a <__kernel_rem_pio2f+0x5d2>
 8003910:	a933      	add	r1, sp, #204	; 0xcc
 8003912:	2201      	movs	r2, #1
 8003914:	ecb1 7a01 	vldmia	r1!, {s14}
 8003918:	3201      	adds	r2, #1
 800391a:	4294      	cmp	r4, r2
 800391c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003920:	daf8      	bge.n	8003914 <__kernel_rem_pio2f+0x5bc>
 8003922:	4642      	mov	r2, r8
 8003924:	b10a      	cbz	r2, 800392a <__kernel_rem_pio2f+0x5d2>
 8003926:	eef1 7a67 	vneg.f32	s15, s15
 800392a:	edc3 7a01 	vstr	s15, [r3, #4]
 800392e:	e772      	b.n	8003816 <__kernel_rem_pio2f+0x4be>
 8003930:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003934:	465c      	mov	r4, fp
 8003936:	ee17 1a90 	vmov	r1, s15
 800393a:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 800393e:	e6c3      	b.n	80036c8 <__kernel_rem_pio2f+0x370>
 8003940:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8003944:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8003948:	eef1 6a66 	vneg.f32	s13, s13
 800394c:	eeb1 7a47 	vneg.f32	s14, s14
 8003950:	eef1 7a67 	vneg.f32	s15, s15
 8003954:	edc3 6a00 	vstr	s13, [r3]
 8003958:	ed83 7a01 	vstr	s14, [r3, #4]
 800395c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003960:	e759      	b.n	8003816 <__kernel_rem_pio2f+0x4be>
 8003962:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8003966:	eeb1 7a67 	vneg.f32	s14, s15
 800396a:	ed83 7a00 	vstr	s14, [r3]
 800396e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003972:	2c00      	cmp	r4, #0
 8003974:	d1cc      	bne.n	8003910 <__kernel_rem_pio2f+0x5b8>
 8003976:	e7d6      	b.n	8003926 <__kernel_rem_pio2f+0x5ce>
 8003978:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 800397a:	2a02      	cmp	r2, #2
 800397c:	dc12      	bgt.n	80039a4 <__kernel_rem_pio2f+0x64c>
 800397e:	2a00      	cmp	r2, #0
 8003980:	dc17      	bgt.n	80039b2 <__kernel_rem_pio2f+0x65a>
 8003982:	f47f af48 	bne.w	8003816 <__kernel_rem_pio2f+0x4be>
 8003986:	eddf 7a12 	vldr	s15, [pc, #72]	; 80039d0 <__kernel_rem_pio2f+0x678>
 800398a:	e73e      	b.n	800380a <__kernel_rem_pio2f+0x4b2>
 800398c:	9804      	ldr	r0, [sp, #16]
 800398e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8003992:	e544      	b.n	800341e <__kernel_rem_pio2f+0xc6>
 8003994:	2902      	cmp	r1, #2
 8003996:	f47f ada6 	bne.w	80034e6 <__kernel_rem_pio2f+0x18e>
 800399a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800399e:	ee37 8ac8 	vsub.f32	s16, s15, s16
 80039a2:	e5a0      	b.n	80034e6 <__kernel_rem_pio2f+0x18e>
 80039a4:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 80039a6:	2a03      	cmp	r2, #3
 80039a8:	f47f af35 	bne.w	8003816 <__kernel_rem_pio2f+0x4be>
 80039ac:	eddf 7a08 	vldr	s15, [pc, #32]	; 80039d0 <__kernel_rem_pio2f+0x678>
 80039b0:	e77a      	b.n	80038a8 <__kernel_rem_pio2f+0x550>
 80039b2:	4642      	mov	r2, r8
 80039b4:	b922      	cbnz	r2, 80039c0 <__kernel_rem_pio2f+0x668>
 80039b6:	2200      	movs	r2, #0
 80039b8:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e7b4      	b.n	800392a <__kernel_rem_pio2f+0x5d2>
 80039c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039c4:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e7ac      	b.n	8003926 <__kernel_rem_pio2f+0x5ce>
 80039cc:	08003f80 	.word	0x08003f80
 80039d0:	00000000 	.word	0x00000000

080039d4 <scalbnf>:
 80039d4:	ee10 3a10 	vmov	r3, s0
 80039d8:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 80039dc:	461a      	mov	r2, r3
 80039de:	d027      	beq.n	8003a30 <scalbnf+0x5c>
 80039e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80039e4:	d221      	bcs.n	8003a2a <scalbnf+0x56>
 80039e6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80039ea:	d122      	bne.n	8003a32 <scalbnf+0x5e>
 80039ec:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003a9c <scalbnf+0xc8>
 80039f0:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <scalbnf+0xcc>)
 80039f2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80039f6:	4290      	cmp	r0, r2
 80039f8:	ee17 3a90 	vmov	r3, s15
 80039fc:	db33      	blt.n	8003a66 <scalbnf+0x92>
 80039fe:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8003a02:	f3c3 51c7 	ubfx	r1, r3, #23, #8
 8003a06:	4560      	cmp	r0, ip
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f1a1 0119 	sub.w	r1, r1, #25
 8003a0e:	dd16      	ble.n	8003a3e <scalbnf+0x6a>
 8003a10:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003aa4 <scalbnf+0xd0>
 8003a14:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003aa8 <scalbnf+0xd4>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	eeb0 7a67 	vmov.f32	s14, s15
 8003a1e:	bfb8      	it	lt
 8003a20:	eef0 7a66 	vmovlt.f32	s15, s13
 8003a24:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003a28:	4770      	bx	lr
 8003a2a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003a2e:	4770      	bx	lr
 8003a30:	4770      	bx	lr
 8003a32:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8003a36:	4560      	cmp	r0, ip
 8003a38:	ea4f 51d1 	mov.w	r1, r1, lsr #23
 8003a3c:	dce8      	bgt.n	8003a10 <scalbnf+0x3c>
 8003a3e:	4401      	add	r1, r0
 8003a40:	29fe      	cmp	r1, #254	; 0xfe
 8003a42:	dce5      	bgt.n	8003a10 <scalbnf+0x3c>
 8003a44:	2900      	cmp	r1, #0
 8003a46:	dc15      	bgt.n	8003a74 <scalbnf+0xa0>
 8003a48:	f111 0f16 	cmn.w	r1, #22
 8003a4c:	db19      	blt.n	8003a82 <scalbnf+0xae>
 8003a4e:	3119      	adds	r1, #25
 8003a50:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003a54:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8003a58:	ee07 2a90 	vmov	s15, r2
 8003a5c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003aac <scalbnf+0xd8>
 8003a60:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003a64:	4770      	bx	lr
 8003a66:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003ab0 <scalbnf+0xdc>
 8003a6a:	ee07 3a10 	vmov	s14, r3
 8003a6e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8003a72:	4770      	bx	lr
 8003a74:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003a78:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8003a7c:	ee00 3a10 	vmov	s0, r3
 8003a80:	4770      	bx	lr
 8003a82:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003ab0 <scalbnf+0xdc>
 8003a86:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003ab4 <scalbnf+0xe0>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	eeb0 7a67 	vmov.f32	s14, s15
 8003a90:	bfb8      	it	lt
 8003a92:	eef0 7a66 	vmovlt.f32	s15, s13
 8003a96:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003a9a:	4770      	bx	lr
 8003a9c:	4c000000 	.word	0x4c000000
 8003aa0:	ffff3cb0 	.word	0xffff3cb0
 8003aa4:	7149f2ca 	.word	0x7149f2ca
 8003aa8:	f149f2ca 	.word	0xf149f2ca
 8003aac:	33000000 	.word	0x33000000
 8003ab0:	0da24260 	.word	0x0da24260
 8003ab4:	8da24260 	.word	0x8da24260

08003ab8 <floorf>:
 8003ab8:	ee10 2a10 	vmov	r2, s0
 8003abc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003ac0:	3b7f      	subs	r3, #127	; 0x7f
 8003ac2:	2b16      	cmp	r3, #22
 8003ac4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8003ac8:	dc29      	bgt.n	8003b1e <floorf+0x66>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	4610      	mov	r0, r2
 8003ace:	db18      	blt.n	8003b02 <floorf+0x4a>
 8003ad0:	491a      	ldr	r1, [pc, #104]	; (8003b3c <floorf+0x84>)
 8003ad2:	4119      	asrs	r1, r3
 8003ad4:	420a      	tst	r2, r1
 8003ad6:	d021      	beq.n	8003b1c <floorf+0x64>
 8003ad8:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003b40 <floorf+0x88>
 8003adc:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	dd18      	ble.n	8003b1c <floorf+0x64>
 8003aea:	2a00      	cmp	r2, #0
 8003aec:	da04      	bge.n	8003af8 <floorf+0x40>
 8003aee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003af2:	fa42 f303 	asr.w	r3, r2, r3
 8003af6:	4418      	add	r0, r3
 8003af8:	ea20 0301 	bic.w	r3, r0, r1
 8003afc:	ee00 3a10 	vmov	s0, r3
 8003b00:	4770      	bx	lr
 8003b02:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003b40 <floorf+0x88>
 8003b06:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003b0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b12:	dd03      	ble.n	8003b1c <floorf+0x64>
 8003b14:	2a00      	cmp	r2, #0
 8003b16:	db08      	blt.n	8003b2a <floorf+0x72>
 8003b18:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003b44 <floorf+0x8c>
 8003b1c:	4770      	bx	lr
 8003b1e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003b22:	d3fb      	bcc.n	8003b1c <floorf+0x64>
 8003b24:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003b28:	4770      	bx	lr
 8003b2a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003b48 <floorf+0x90>
 8003b2e:	2900      	cmp	r1, #0
 8003b30:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003b34:	bf08      	it	eq
 8003b36:	eeb0 0a67 	vmoveq.f32	s0, s15
 8003b3a:	4770      	bx	lr
 8003b3c:	007fffff 	.word	0x007fffff
 8003b40:	7149f2ca 	.word	0x7149f2ca
 8003b44:	00000000 	.word	0x00000000
 8003b48:	80000000 	.word	0x80000000

08003b4c <__aeabi_f2lz>:
 8003b4c:	ee07 0a90 	vmov	s15, r0
 8003b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b58:	d401      	bmi.n	8003b5e <__aeabi_f2lz+0x12>
 8003b5a:	f000 b80b 	b.w	8003b74 <__aeabi_f2ulz>
 8003b5e:	eef1 7a67 	vneg.f32	s15, s15
 8003b62:	b508      	push	{r3, lr}
 8003b64:	ee17 0a90 	vmov	r0, s15
 8003b68:	f000 f804 	bl	8003b74 <__aeabi_f2ulz>
 8003b6c:	4240      	negs	r0, r0
 8003b6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003b72:	bd08      	pop	{r3, pc}

08003b74 <__aeabi_f2ulz>:
 8003b74:	b5d0      	push	{r4, r6, r7, lr}
 8003b76:	f7fc fc93 	bl	80004a0 <__aeabi_f2d>
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <__aeabi_f2ulz+0x38>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4606      	mov	r6, r0
 8003b80:	460f      	mov	r7, r1
 8003b82:	f7fc fe43 	bl	800080c <__aeabi_dmul>
 8003b86:	f7fc ff6b 	bl	8000a60 <__aeabi_d2uiz>
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	f7fc fc66 	bl	800045c <__aeabi_ui2d>
 8003b90:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <__aeabi_f2ulz+0x3c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	f7fc fe3a 	bl	800080c <__aeabi_dmul>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	4639      	mov	r1, r7
 8003ba0:	f7fc fb1e 	bl	80001e0 <__aeabi_dsub>
 8003ba4:	f7fc ff5c 	bl	8000a60 <__aeabi_d2uiz>
 8003ba8:	4621      	mov	r1, r4
 8003baa:	bdd0      	pop	{r4, r6, r7, pc}
 8003bac:	3df00000 	.word	0x3df00000
 8003bb0:	41f00000 	.word	0x41f00000
