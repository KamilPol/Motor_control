
build/BINARY.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_dmul>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80003fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000402:	bf1d      	ittte	ne
 8000404:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000408:	ea94 0f0c 	teqne	r4, ip
 800040c:	ea95 0f0c 	teqne	r5, ip
 8000410:	f000 f8de 	bleq	80005d0 <__aeabi_dmul+0x1dc>
 8000414:	442c      	add	r4, r5
 8000416:	ea81 0603 	eor.w	r6, r1, r3
 800041a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800041e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000422:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000426:	bf18      	it	ne
 8000428:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800042c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000434:	d038      	beq.n	80004a8 <__aeabi_dmul+0xb4>
 8000436:	fba0 ce02 	umull	ip, lr, r0, r2
 800043a:	f04f 0500 	mov.w	r5, #0
 800043e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000442:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000446:	fbe0 e503 	umlal	lr, r5, r0, r3
 800044a:	f04f 0600 	mov.w	r6, #0
 800044e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000452:	f09c 0f00 	teq	ip, #0
 8000456:	bf18      	it	ne
 8000458:	f04e 0e01 	orrne.w	lr, lr, #1
 800045c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000460:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000464:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000468:	d204      	bcs.n	8000474 <__aeabi_dmul+0x80>
 800046a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800046e:	416d      	adcs	r5, r5
 8000470:	eb46 0606 	adc.w	r6, r6, r6
 8000474:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000478:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800047c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000480:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000484:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000488:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800048c:	bf88      	it	hi
 800048e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000492:	d81e      	bhi.n	80004d2 <__aeabi_dmul+0xde>
 8000494:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000498:	bf08      	it	eq
 800049a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800049e:	f150 0000 	adcs.w	r0, r0, #0
 80004a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80004ac:	ea46 0101 	orr.w	r1, r6, r1
 80004b0:	ea40 0002 	orr.w	r0, r0, r2
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80004bc:	bfc2      	ittt	gt
 80004be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80004c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80004c6:	bd70      	popgt	{r4, r5, r6, pc}
 80004c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004cc:	f04f 0e00 	mov.w	lr, #0
 80004d0:	3c01      	subs	r4, #1
 80004d2:	f300 80ab 	bgt.w	800062c <__aeabi_dmul+0x238>
 80004d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80004da:	bfde      	ittt	le
 80004dc:	2000      	movle	r0, #0
 80004de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80004e2:	bd70      	pople	{r4, r5, r6, pc}
 80004e4:	f1c4 0400 	rsb	r4, r4, #0
 80004e8:	3c20      	subs	r4, #32
 80004ea:	da35      	bge.n	8000558 <__aeabi_dmul+0x164>
 80004ec:	340c      	adds	r4, #12
 80004ee:	dc1b      	bgt.n	8000528 <__aeabi_dmul+0x134>
 80004f0:	f104 0414 	add.w	r4, r4, #20
 80004f4:	f1c4 0520 	rsb	r5, r4, #32
 80004f8:	fa00 f305 	lsl.w	r3, r0, r5
 80004fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000500:	fa01 f205 	lsl.w	r2, r1, r5
 8000504:	ea40 0002 	orr.w	r0, r0, r2
 8000508:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000514:	fa21 f604 	lsr.w	r6, r1, r4
 8000518:	eb42 0106 	adc.w	r1, r2, r6
 800051c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000520:	bf08      	it	eq
 8000522:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	f1c4 040c 	rsb	r4, r4, #12
 800052c:	f1c4 0520 	rsb	r5, r4, #32
 8000530:	fa00 f304 	lsl.w	r3, r0, r4
 8000534:	fa20 f005 	lsr.w	r0, r0, r5
 8000538:	fa01 f204 	lsl.w	r2, r1, r4
 800053c:	ea40 0002 	orr.w	r0, r0, r2
 8000540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000544:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000548:	f141 0100 	adc.w	r1, r1, #0
 800054c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000550:	bf08      	it	eq
 8000552:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	f1c4 0520 	rsb	r5, r4, #32
 800055c:	fa00 f205 	lsl.w	r2, r0, r5
 8000560:	ea4e 0e02 	orr.w	lr, lr, r2
 8000564:	fa20 f304 	lsr.w	r3, r0, r4
 8000568:	fa01 f205 	lsl.w	r2, r1, r5
 800056c:	ea43 0302 	orr.w	r3, r3, r2
 8000570:	fa21 f004 	lsr.w	r0, r1, r4
 8000574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000578:	fa21 f204 	lsr.w	r2, r1, r4
 800057c:	ea20 0002 	bic.w	r0, r0, r2
 8000580:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000584:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000588:	bf08      	it	eq
 800058a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f094 0f00 	teq	r4, #0
 8000594:	d10f      	bne.n	80005b6 <__aeabi_dmul+0x1c2>
 8000596:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800059a:	0040      	lsls	r0, r0, #1
 800059c:	eb41 0101 	adc.w	r1, r1, r1
 80005a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80005a4:	bf08      	it	eq
 80005a6:	3c01      	subeq	r4, #1
 80005a8:	d0f7      	beq.n	800059a <__aeabi_dmul+0x1a6>
 80005aa:	ea41 0106 	orr.w	r1, r1, r6
 80005ae:	f095 0f00 	teq	r5, #0
 80005b2:	bf18      	it	ne
 80005b4:	4770      	bxne	lr
 80005b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80005ba:	0052      	lsls	r2, r2, #1
 80005bc:	eb43 0303 	adc.w	r3, r3, r3
 80005c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80005c4:	bf08      	it	eq
 80005c6:	3d01      	subeq	r5, #1
 80005c8:	d0f7      	beq.n	80005ba <__aeabi_dmul+0x1c6>
 80005ca:	ea43 0306 	orr.w	r3, r3, r6
 80005ce:	4770      	bx	lr
 80005d0:	ea94 0f0c 	teq	r4, ip
 80005d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80005d8:	bf18      	it	ne
 80005da:	ea95 0f0c 	teqne	r5, ip
 80005de:	d00c      	beq.n	80005fa <__aeabi_dmul+0x206>
 80005e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005e4:	bf18      	it	ne
 80005e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80005ea:	d1d1      	bne.n	8000590 <__aeabi_dmul+0x19c>
 80005ec:	ea81 0103 	eor.w	r1, r1, r3
 80005f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd70      	pop	{r4, r5, r6, pc}
 80005fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005fe:	bf06      	itte	eq
 8000600:	4610      	moveq	r0, r2
 8000602:	4619      	moveq	r1, r3
 8000604:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000608:	d019      	beq.n	800063e <__aeabi_dmul+0x24a>
 800060a:	ea94 0f0c 	teq	r4, ip
 800060e:	d102      	bne.n	8000616 <__aeabi_dmul+0x222>
 8000610:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000614:	d113      	bne.n	800063e <__aeabi_dmul+0x24a>
 8000616:	ea95 0f0c 	teq	r5, ip
 800061a:	d105      	bne.n	8000628 <__aeabi_dmul+0x234>
 800061c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000620:	bf1c      	itt	ne
 8000622:	4610      	movne	r0, r2
 8000624:	4619      	movne	r1, r3
 8000626:	d10a      	bne.n	800063e <__aeabi_dmul+0x24a>
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000630:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000634:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	bd70      	pop	{r4, r5, r6, pc}
 800063e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000642:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000646:	bd70      	pop	{r4, r5, r6, pc}

08000648 <__aeabi_drsub>:
 8000648:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800064c:	e002      	b.n	8000654 <__adddf3>
 800064e:	bf00      	nop

08000650 <__aeabi_dsub>:
 8000650:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000654 <__adddf3>:
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800065a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	bf1f      	itttt	ne
 800066a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800066e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000672:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000676:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800067a:	f000 80e2 	beq.w	8000842 <__adddf3+0x1ee>
 800067e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000682:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000686:	bfb8      	it	lt
 8000688:	426d      	neglt	r5, r5
 800068a:	dd0c      	ble.n	80006a6 <__adddf3+0x52>
 800068c:	442c      	add	r4, r5
 800068e:	ea80 0202 	eor.w	r2, r0, r2
 8000692:	ea81 0303 	eor.w	r3, r1, r3
 8000696:	ea82 0000 	eor.w	r0, r2, r0
 800069a:	ea83 0101 	eor.w	r1, r3, r1
 800069e:	ea80 0202 	eor.w	r2, r0, r2
 80006a2:	ea81 0303 	eor.w	r3, r1, r3
 80006a6:	2d36      	cmp	r5, #54	; 0x36
 80006a8:	bf88      	it	hi
 80006aa:	bd30      	pophi	{r4, r5, pc}
 80006ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80006b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80006b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80006bc:	d002      	beq.n	80006c4 <__adddf3+0x70>
 80006be:	4240      	negs	r0, r0
 80006c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80006c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80006cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80006d0:	d002      	beq.n	80006d8 <__adddf3+0x84>
 80006d2:	4252      	negs	r2, r2
 80006d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d8:	ea94 0f05 	teq	r4, r5
 80006dc:	f000 80a7 	beq.w	800082e <__adddf3+0x1da>
 80006e0:	f1a4 0401 	sub.w	r4, r4, #1
 80006e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80006e8:	db0d      	blt.n	8000706 <__adddf3+0xb2>
 80006ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80006ee:	fa22 f205 	lsr.w	r2, r2, r5
 80006f2:	1880      	adds	r0, r0, r2
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80006fc:	1880      	adds	r0, r0, r2
 80006fe:	fa43 f305 	asr.w	r3, r3, r5
 8000702:	4159      	adcs	r1, r3
 8000704:	e00e      	b.n	8000724 <__adddf3+0xd0>
 8000706:	f1a5 0520 	sub.w	r5, r5, #32
 800070a:	f10e 0e20 	add.w	lr, lr, #32
 800070e:	2a01      	cmp	r2, #1
 8000710:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000714:	bf28      	it	cs
 8000716:	f04c 0c02 	orrcs.w	ip, ip, #2
 800071a:	fa43 f305 	asr.w	r3, r3, r5
 800071e:	18c0      	adds	r0, r0, r3
 8000720:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	d507      	bpl.n	800073a <__adddf3+0xe6>
 800072a:	f04f 0e00 	mov.w	lr, #0
 800072e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000732:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000736:	eb6e 0101 	sbc.w	r1, lr, r1
 800073a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800073e:	d31b      	bcc.n	8000778 <__adddf3+0x124>
 8000740:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000744:	d30c      	bcc.n	8000760 <__adddf3+0x10c>
 8000746:	0849      	lsrs	r1, r1, #1
 8000748:	ea5f 0030 	movs.w	r0, r0, rrx
 800074c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000750:	f104 0401 	add.w	r4, r4, #1
 8000754:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000758:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800075c:	f080 809a 	bcs.w	8000894 <__adddf3+0x240>
 8000760:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000764:	bf08      	it	eq
 8000766:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800076a:	f150 0000 	adcs.w	r0, r0, #0
 800076e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000772:	ea41 0105 	orr.w	r1, r1, r5
 8000776:	bd30      	pop	{r4, r5, pc}
 8000778:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800077c:	4140      	adcs	r0, r0
 800077e:	eb41 0101 	adc.w	r1, r1, r1
 8000782:	3c01      	subs	r4, #1
 8000784:	bf28      	it	cs
 8000786:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800078a:	d2e9      	bcs.n	8000760 <__adddf3+0x10c>
 800078c:	f091 0f00 	teq	r1, #0
 8000790:	bf04      	itt	eq
 8000792:	4601      	moveq	r1, r0
 8000794:	2000      	moveq	r0, #0
 8000796:	fab1 f381 	clz	r3, r1
 800079a:	bf08      	it	eq
 800079c:	3320      	addeq	r3, #32
 800079e:	f1a3 030b 	sub.w	r3, r3, #11
 80007a2:	f1b3 0220 	subs.w	r2, r3, #32
 80007a6:	da0c      	bge.n	80007c2 <__adddf3+0x16e>
 80007a8:	320c      	adds	r2, #12
 80007aa:	dd08      	ble.n	80007be <__adddf3+0x16a>
 80007ac:	f102 0c14 	add.w	ip, r2, #20
 80007b0:	f1c2 020c 	rsb	r2, r2, #12
 80007b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80007b8:	fa21 f102 	lsr.w	r1, r1, r2
 80007bc:	e00c      	b.n	80007d8 <__adddf3+0x184>
 80007be:	f102 0214 	add.w	r2, r2, #20
 80007c2:	bfd8      	it	le
 80007c4:	f1c2 0c20 	rsble	ip, r2, #32
 80007c8:	fa01 f102 	lsl.w	r1, r1, r2
 80007cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007d0:	bfdc      	itt	le
 80007d2:	ea41 010c 	orrle.w	r1, r1, ip
 80007d6:	4090      	lslle	r0, r2
 80007d8:	1ae4      	subs	r4, r4, r3
 80007da:	bfa2      	ittt	ge
 80007dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80007e0:	4329      	orrge	r1, r5
 80007e2:	bd30      	popge	{r4, r5, pc}
 80007e4:	ea6f 0404 	mvn.w	r4, r4
 80007e8:	3c1f      	subs	r4, #31
 80007ea:	da1c      	bge.n	8000826 <__adddf3+0x1d2>
 80007ec:	340c      	adds	r4, #12
 80007ee:	dc0e      	bgt.n	800080e <__adddf3+0x1ba>
 80007f0:	f104 0414 	add.w	r4, r4, #20
 80007f4:	f1c4 0220 	rsb	r2, r4, #32
 80007f8:	fa20 f004 	lsr.w	r0, r0, r4
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	ea40 0003 	orr.w	r0, r0, r3
 8000804:	fa21 f304 	lsr.w	r3, r1, r4
 8000808:	ea45 0103 	orr.w	r1, r5, r3
 800080c:	bd30      	pop	{r4, r5, pc}
 800080e:	f1c4 040c 	rsb	r4, r4, #12
 8000812:	f1c4 0220 	rsb	r2, r4, #32
 8000816:	fa20 f002 	lsr.w	r0, r0, r2
 800081a:	fa01 f304 	lsl.w	r3, r1, r4
 800081e:	ea40 0003 	orr.w	r0, r0, r3
 8000822:	4629      	mov	r1, r5
 8000824:	bd30      	pop	{r4, r5, pc}
 8000826:	fa21 f004 	lsr.w	r0, r1, r4
 800082a:	4629      	mov	r1, r5
 800082c:	bd30      	pop	{r4, r5, pc}
 800082e:	f094 0f00 	teq	r4, #0
 8000832:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000836:	bf06      	itte	eq
 8000838:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800083c:	3401      	addeq	r4, #1
 800083e:	3d01      	subne	r5, #1
 8000840:	e74e      	b.n	80006e0 <__adddf3+0x8c>
 8000842:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000846:	bf18      	it	ne
 8000848:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800084c:	d029      	beq.n	80008a2 <__adddf3+0x24e>
 800084e:	ea94 0f05 	teq	r4, r5
 8000852:	bf08      	it	eq
 8000854:	ea90 0f02 	teqeq	r0, r2
 8000858:	d005      	beq.n	8000866 <__adddf3+0x212>
 800085a:	ea54 0c00 	orrs.w	ip, r4, r0
 800085e:	bf04      	itt	eq
 8000860:	4619      	moveq	r1, r3
 8000862:	4610      	moveq	r0, r2
 8000864:	bd30      	pop	{r4, r5, pc}
 8000866:	ea91 0f03 	teq	r1, r3
 800086a:	bf1e      	ittt	ne
 800086c:	2100      	movne	r1, #0
 800086e:	2000      	movne	r0, #0
 8000870:	bd30      	popne	{r4, r5, pc}
 8000872:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000876:	d105      	bne.n	8000884 <__adddf3+0x230>
 8000878:	0040      	lsls	r0, r0, #1
 800087a:	4149      	adcs	r1, r1
 800087c:	bf28      	it	cs
 800087e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000882:	bd30      	pop	{r4, r5, pc}
 8000884:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000888:	bf3c      	itt	cc
 800088a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800088e:	bd30      	popcc	{r4, r5, pc}
 8000890:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000894:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd30      	pop	{r4, r5, pc}
 80008a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008a6:	bf1a      	itte	ne
 80008a8:	4619      	movne	r1, r3
 80008aa:	4610      	movne	r0, r2
 80008ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80008b0:	bf1c      	itt	ne
 80008b2:	460b      	movne	r3, r1
 80008b4:	4602      	movne	r2, r0
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	bf06      	itte	eq
 80008bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80008c0:	ea91 0f03 	teqeq	r1, r3
 80008c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80008c8:	bd30      	pop	{r4, r5, pc}
 80008ca:	bf00      	nop

080008cc <__aeabi_ui2d>:
 80008cc:	f090 0f00 	teq	r0, #0
 80008d0:	bf04      	itt	eq
 80008d2:	2100      	moveq	r1, #0
 80008d4:	4770      	bxeq	lr
 80008d6:	b530      	push	{r4, r5, lr}
 80008d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008e0:	f04f 0500 	mov.w	r5, #0
 80008e4:	f04f 0100 	mov.w	r1, #0
 80008e8:	e750      	b.n	800078c <__adddf3+0x138>
 80008ea:	bf00      	nop

080008ec <__aeabi_i2d>:
 80008ec:	f090 0f00 	teq	r0, #0
 80008f0:	bf04      	itt	eq
 80008f2:	2100      	moveq	r1, #0
 80008f4:	4770      	bxeq	lr
 80008f6:	b530      	push	{r4, r5, lr}
 80008f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000900:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000904:	bf48      	it	mi
 8000906:	4240      	negmi	r0, r0
 8000908:	f04f 0100 	mov.w	r1, #0
 800090c:	e73e      	b.n	800078c <__adddf3+0x138>
 800090e:	bf00      	nop

08000910 <__aeabi_f2d>:
 8000910:	0042      	lsls	r2, r0, #1
 8000912:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000916:	ea4f 0131 	mov.w	r1, r1, rrx
 800091a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800091e:	bf1f      	itttt	ne
 8000920:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000924:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000928:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800092c:	4770      	bxne	lr
 800092e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000932:	bf08      	it	eq
 8000934:	4770      	bxeq	lr
 8000936:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800093a:	bf04      	itt	eq
 800093c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000940:	4770      	bxeq	lr
 8000942:	b530      	push	{r4, r5, lr}
 8000944:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000948:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800094c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000950:	e71c      	b.n	800078c <__adddf3+0x138>
 8000952:	bf00      	nop

08000954 <__aeabi_ul2d>:
 8000954:	ea50 0201 	orrs.w	r2, r0, r1
 8000958:	bf08      	it	eq
 800095a:	4770      	bxeq	lr
 800095c:	b530      	push	{r4, r5, lr}
 800095e:	f04f 0500 	mov.w	r5, #0
 8000962:	e00a      	b.n	800097a <__aeabi_l2d+0x16>

08000964 <__aeabi_l2d>:
 8000964:	ea50 0201 	orrs.w	r2, r0, r1
 8000968:	bf08      	it	eq
 800096a:	4770      	bxeq	lr
 800096c:	b530      	push	{r4, r5, lr}
 800096e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000972:	d502      	bpl.n	800097a <__aeabi_l2d+0x16>
 8000974:	4240      	negs	r0, r0
 8000976:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800097e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000982:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000986:	f43f aed8 	beq.w	800073a <__adddf3+0xe6>
 800098a:	f04f 0203 	mov.w	r2, #3
 800098e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000992:	bf18      	it	ne
 8000994:	3203      	addne	r2, #3
 8000996:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800099a:	bf18      	it	ne
 800099c:	3203      	addne	r2, #3
 800099e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80009a2:	f1c2 0320 	rsb	r3, r2, #32
 80009a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80009aa:	fa20 f002 	lsr.w	r0, r0, r2
 80009ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80009b2:	ea40 000e 	orr.w	r0, r0, lr
 80009b6:	fa21 f102 	lsr.w	r1, r1, r2
 80009ba:	4414      	add	r4, r2
 80009bc:	e6bd      	b.n	800073a <__adddf3+0xe6>
 80009be:	bf00      	nop

080009c0 <__aeabi_d2uiz>:
 80009c0:	004a      	lsls	r2, r1, #1
 80009c2:	d211      	bcs.n	80009e8 <__aeabi_d2uiz+0x28>
 80009c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c8:	d211      	bcs.n	80009ee <__aeabi_d2uiz+0x2e>
 80009ca:	d50d      	bpl.n	80009e8 <__aeabi_d2uiz+0x28>
 80009cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d4:	d40e      	bmi.n	80009f4 <__aeabi_d2uiz+0x34>
 80009d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f2:	d102      	bne.n	80009fa <__aeabi_d2uiz+0x3a>
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	4770      	bx	lr
 80009fa:	f04f 0000 	mov.w	r0, #0
 80009fe:	4770      	bx	lr

08000a00 <_ZN12ClockManager18internalFreqUpdateEm>:

void ClockManager::internalFreqUpdate(uint32_t _targetFreq)
{
	uint32_t flashDiv = 35000000;

	if (_targetFreq < 26000000)
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <_ZN12ClockManager18internalFreqUpdateEm+0x74>)
 8000a02:	4298      	cmp	r0, r3
{
 8000a04:	b430      	push	{r4, r5}
	if (_targetFreq < 26000000)
 8000a06:	d81d      	bhi.n	8000a44 <_ZN12ClockManager18internalFreqUpdateEm+0x44>
	{
		
		PWR->CR1 = 0x2 << PWR_CR1_VOS_Pos;
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <_ZN12ClockManager18internalFreqUpdateEm+0x78>)
 8000a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0e:	6013      	str	r3, [r2, #0]
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000a10:	6953      	ldr	r3, [r2, #20]
 8000a12:	0559      	lsls	r1, r3, #21
 8000a14:	d4fc      	bmi.n	8000a10 <_ZN12ClockManager18internalFreqUpdateEm+0x10>
		flashDiv = 12000000;
 8000a16:	4d19      	ldr	r5, [pc, #100]	; (8000a7c <_ZN12ClockManager18internalFreqUpdateEm+0x7c>)
		while(PWR->SR2 & PWR_SR2_VOSF);
		PWR->CR5 = 0;
		flashDiv = 34000000;
	}

	ahbClock = _targetFreq;
 8000a18:	4c19      	ldr	r4, [pc, #100]	; (8000a80 <_ZN12ClockManager18internalFreqUpdateEm+0x80>)

	uint32_t waitStates = ahbClock / flashDiv < 15 ? ahbClock / flashDiv : 15;
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000a1a:	491a      	ldr	r1, [pc, #104]	; (8000a84 <_ZN12ClockManager18internalFreqUpdateEm+0x84>)
	ahbClock = _targetFreq;
 8000a1c:	6020      	str	r0, [r4, #0]
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000a1e:	680a      	ldr	r2, [r1, #0]
	uint32_t waitStates = ahbClock / flashDiv < 15 ? ahbClock / flashDiv : 15;
 8000a20:	fbb0 f0f5 	udiv	r0, r0, r5
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000a24:	f022 020f 	bic.w	r2, r2, #15
 8000a28:	280f      	cmp	r0, #15
 8000a2a:	bf94      	ite	ls
 8000a2c:	4302      	orrls	r2, r0
 8000a2e:	f042 020f 	orrhi.w	r2, r2, #15
	
	FLASH->ACR = flashConf;
 8000a32:	600a      	str	r2, [r1, #0]
	while(FLASH->ACR != flashConf)
 8000a34:	680b      	ldr	r3, [r1, #0]
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d1fc      	bne.n	8000a34 <_ZN12ClockManager18internalFreqUpdateEm+0x34>
		;


	apbClock = ahbClock;
	timerClock = apbClock;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_ZN12ClockManager18internalFreqUpdateEm+0x88>)
 8000a3c:	6822      	ldr	r2, [r4, #0]
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bc30      	pop	{r4, r5}
 8000a42:	4770      	bx	lr
	else if (_targetFreq < 150000000)
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <_ZN12ClockManager18internalFreqUpdateEm+0x8c>)
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 8000a46:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <_ZN12ClockManager18internalFreqUpdateEm+0x78>)
	else if (_targetFreq < 150000000)
 8000a48:	4298      	cmp	r0, r3
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 8000a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a4e:	6013      	str	r3, [r2, #0]
	else if (_targetFreq < 150000000)
 8000a50:	d808      	bhi.n	8000a64 <_ZN12ClockManager18internalFreqUpdateEm+0x64>
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000a52:	6953      	ldr	r3, [r2, #20]
 8000a54:	055b      	lsls	r3, r3, #21
 8000a56:	d4fc      	bmi.n	8000a52 <_ZN12ClockManager18internalFreqUpdateEm+0x52>
		PWR->CR5 = PWR_CR5_R1MODE;
 8000a58:	f44f 7380 	mov.w	r3, #256	; 0x100
		flashDiv = 30000000;
 8000a5c:	4d0c      	ldr	r5, [pc, #48]	; (8000a90 <_ZN12ClockManager18internalFreqUpdateEm+0x90>)
		PWR->CR5 = PWR_CR5_R1MODE;
 8000a5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		flashDiv = 30000000;
 8000a62:	e7d9      	b.n	8000a18 <_ZN12ClockManager18internalFreqUpdateEm+0x18>
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000a64:	6953      	ldr	r3, [r2, #20]
 8000a66:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000a6a:	d1fb      	bne.n	8000a64 <_ZN12ClockManager18internalFreqUpdateEm+0x64>
		flashDiv = 34000000;
 8000a6c:	4d09      	ldr	r5, [pc, #36]	; (8000a94 <_ZN12ClockManager18internalFreqUpdateEm+0x94>)
		PWR->CR5 = 0;
 8000a6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		flashDiv = 34000000;
 8000a72:	e7d1      	b.n	8000a18 <_ZN12ClockManager18internalFreqUpdateEm+0x18>
 8000a74:	018cba7f 	.word	0x018cba7f
 8000a78:	40007000 	.word	0x40007000
 8000a7c:	00b71b00 	.word	0x00b71b00
 8000a80:	20000000 	.word	0x20000000
 8000a84:	40022000 	.word	0x40022000
 8000a88:	2000000c 	.word	0x2000000c
 8000a8c:	08f0d17f 	.word	0x08f0d17f
 8000a90:	01c9c380 	.word	0x01c9c380
 8000a94:	0206cc80 	.word	0x0206cc80

08000a98 <_ZN3PID4InitEv>:
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
	_lastInput = *_myInput;
 8000a98:	e9d0 3209 	ldrd	r3, r2, [r0, #36]	; 0x24
	
	if (_outputSum > _outMax)
 8000a9c:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
	_outputSum = *_myOutput;
 8000aa0:	edd2 7a00 	vldr	s15, [r2]
 8000aa4:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
	if (_outputSum > _outMax)
 8000aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
	_lastInput = *_myInput;
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6343      	str	r3, [r0, #52]	; 0x34
	if (_outputSum > _outMax)
 8000ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab4:	dc06      	bgt.n	8000ac4 <_ZN3PID4InitEv+0x2c>
	{
		_outputSum = _outMax;
	}
	else if (_outputSum < _outMin)
 8000ab6:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8000aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac2:	d501      	bpl.n	8000ac8 <_ZN3PID4InitEv+0x30>
	{
		_outputSum = _outMin;
 8000ac4:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
	}
	else { }
	
}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <_ZN3PID15SetOutputLimitsEff>:

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(float Min, float Max)
{
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8000acc:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8000ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad4:	da26      	bge.n	8000b24 <_ZN3PID15SetOutputLimitsEff+0x58>
	
	_outMin = Min;
	_outMax = Max;
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8000ad6:	7843      	ldrb	r3, [r0, #1]
	_outMin = Min;
 8000ad8:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
	_outMax = Max;
 8000adc:	edc0 0a0f 	vstr	s1, [r0, #60]	; 0x3c
	if (_inAuto)
 8000ae0:	b303      	cbz	r3, 8000b24 <_ZN3PID15SetOutputLimitsEff+0x58>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8000ae2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ae4:	edd3 7a00 	vldr	s15, [r3]
 8000ae8:	eef4 7ae0 	vcmpe.f32	s15, s1
 8000aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af0:	dc19      	bgt.n	8000b26 <_ZN3PID15SetOutputLimitsEff+0x5a>
		{
			*_myOutput = _outMax;
		}
		else if (*_myOutput < _outMin)
 8000af2:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			*_myOutput = _outMin;
 8000afa:	bf48      	it	mi
 8000afc:	ed83 0a00 	vstrmi	s0, [r3]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8000b00:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8000b04:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 8000b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b10:	dc06      	bgt.n	8000b20 <_ZN3PID15SetOutputLimitsEff+0x54>
		{
			_outputSum = _outMax;
		}
		else if (_outputSum < _outMin)
 8000b12:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8000b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b1e:	d501      	bpl.n	8000b24 <_ZN3PID15SetOutputLimitsEff+0x58>
		{
			_outputSum = _outMin;
 8000b20:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
		}
		else { }
		
	}
	
}
 8000b24:	4770      	bx	lr
			*_myOutput = _outMax;
 8000b26:	edc3 0a00 	vstr	s1, [r3]
 8000b2a:	e7e9      	b.n	8000b00 <_ZN3PID15SetOutputLimitsEff+0x34>

08000b2c <_ZN6Serial5printEi.constprop.0>:
		sendChar(*_string);
		_string++;
	}
}

void Serial::print(int _number)
 8000b2c:	b530      	push	{r4, r5, lr}
 8000b2e:	b085      	sub	sp, #20
{ 
	char charTab[11]={};
 8000b30:	2200      	movs	r2, #0
 8000b32:	e9cd 2201 	strd	r2, r2, [sp, #4]
#include "typeConverter.h"


void typeConverter::IntToString (int _number, char * _string){
int i=0;
bool negative = _number<0? true : false;
 8000b36:	0fc5      	lsrs	r5, r0, #31
 8000b38:	f8cd 200b 	str.w	r2, [sp, #11]
int absNumber = _number<0? -_number : _number;
	if (absNumber==0) 
 8000b3c:	b9e8      	cbnz	r0, 8000b7a <_ZN6Serial5printEi.constprop.0+0x4e>
	{
		_string[0]='0';
 8000b3e:	2330      	movs	r3, #48	; 0x30
 8000b40:	f88d 3004 	strb.w	r3, [sp, #4]
	while (absNumber)
	{
		_string[i++]=absNumber % 10 + '0';
		absNumber /= 10;
	}
	if (negative)
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	d14c      	bne.n	8000be2 <_ZN6Serial5printEi.constprop.0+0xb6>
		return number;
}

void typeConverter::reverseArray(char* _charTab, int _lenght)
{
	for (int i =0; i<_lenght/2; i++)
 8000b48:	f04f 0c01 	mov.w	ip, #1
	_string[i]='\0';
 8000b4c:	f10c 0310 	add.w	r3, ip, #16
 8000b50:	eb0d 0c03 	add.w	ip, sp, r3
 8000b54:	2300      	movs	r3, #0
 8000b56:	f80c 3c0c 	strb.w	r3, [ip, #-12]
	while (*_string)
 8000b5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000b5e:	b153      	cbz	r3, 8000b76 <_ZN6Serial5printEi.constprop.0+0x4a>
	USARTx->TDR = _char;
 8000b60:	4a25      	ldr	r2, [pc, #148]	; (8000bf8 <_ZN6Serial5printEi.constprop.0+0xcc>)
 8000b62:	6852      	ldr	r2, [r2, #4]
 8000b64:	a901      	add	r1, sp, #4
 8000b66:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8000b68:	69d3      	ldr	r3, [r2, #28]
 8000b6a:	065b      	lsls	r3, r3, #25
 8000b6c:	d5fc      	bpl.n	8000b68 <_ZN6Serial5printEi.constprop.0+0x3c>
	while (*_string)
 8000b6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f7      	bne.n	8000b66 <_ZN6Serial5printEi.constprop.0+0x3a>
	typeConverter::IntToString(_number, charTab);
	print(charTab);
}
 8000b76:	b005      	add	sp, #20
 8000b78:	bd30      	pop	{r4, r5, pc}
 8000b7a:	a901      	add	r1, sp, #4
int absNumber = _number<0? -_number : _number;
 8000b7c:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
		_string[i++]=absNumber % 10 + '0';
 8000b80:	4c1e      	ldr	r4, [pc, #120]	; (8000bfc <_ZN6Serial5printEi.constprop.0+0xd0>)
int absNumber = _number<0? -_number : _number;
 8000b82:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8000b86:	468e      	mov	lr, r1
int i=0;
 8000b88:	4694      	mov	ip, r2
		_string[i++]=absNumber % 10 + '0';
 8000b8a:	fba4 0203 	umull	r0, r2, r4, r3
 8000b8e:	08d2      	lsrs	r2, r2, #3
 8000b90:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8000b94:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8000b98:	3330      	adds	r3, #48	; 0x30
 8000b9a:	f80e 3b01 	strb.w	r3, [lr], #1
 8000b9e:	4660      	mov	r0, ip
	while (absNumber)
 8000ba0:	4613      	mov	r3, r2
		_string[i++]=absNumber % 10 + '0';
 8000ba2:	f10c 0c01 	add.w	ip, ip, #1
	while (absNumber)
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d1ef      	bne.n	8000b8a <_ZN6Serial5printEi.constprop.0+0x5e>
	if (negative)
 8000baa:	b1ad      	cbz	r5, 8000bd8 <_ZN6Serial5printEi.constprop.0+0xac>
		_string[i++]='-';
 8000bac:	f10c 0310 	add.w	r3, ip, #16
 8000bb0:	446b      	add	r3, sp
 8000bb2:	1c82      	adds	r2, r0, #2
 8000bb4:	202d      	movs	r0, #45	; 0x2d
	for (int i =0; i<_lenght/2; i++)
 8000bb6:	ea4f 0e62 	mov.w	lr, r2, asr #1
	_string[i]='\0';
 8000bba:	4694      	mov	ip, r2
		_string[i++]='-';
 8000bbc:	f803 0c0c 	strb.w	r0, [r3, #-12]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	440a      	add	r2, r1
 8000bc4:	448e      	add	lr, r1
	{
		char temp = _charTab[i];
		_charTab [i] = _charTab [_lenght-i -1];
 8000bc6:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
		char temp = _charTab[i];
 8000bca:	7819      	ldrb	r1, [r3, #0]
		_charTab [i] = _charTab [_lenght-i -1];
 8000bcc:	f803 0b01 	strb.w	r0, [r3], #1
	for (int i =0; i<_lenght/2; i++)
 8000bd0:	459e      	cmp	lr, r3
		_charTab [_lenght-i -1] = temp;
 8000bd2:	7011      	strb	r1, [r2, #0]
	for (int i =0; i<_lenght/2; i++)
 8000bd4:	d1f7      	bne.n	8000bc6 <_ZN6Serial5printEi.constprop.0+0x9a>
 8000bd6:	e7b9      	b.n	8000b4c <_ZN6Serial5printEi.constprop.0+0x20>
 8000bd8:	ea5f 0e6c 	movs.w	lr, ip, asr #1
 8000bdc:	d0b4      	beq.n	8000b48 <_ZN6Serial5printEi.constprop.0+0x1c>
		_string[i++]=absNumber % 10 + '0';
 8000bde:	4662      	mov	r2, ip
 8000be0:	e7ee      	b.n	8000bc0 <_ZN6Serial5printEi.constprop.0+0x94>
		_string[i++]='-';
 8000be2:	232d      	movs	r3, #45	; 0x2d
 8000be4:	f04f 0c02 	mov.w	ip, #2
 8000be8:	f88d 3005 	strb.w	r3, [sp, #5]
 8000bec:	f04f 0e01 	mov.w	lr, #1
 8000bf0:	4662      	mov	r2, ip
 8000bf2:	a901      	add	r1, sp, #4
 8000bf4:	e7e4      	b.n	8000bc0 <_ZN6Serial5printEi.constprop.0+0x94>
 8000bf6:	bf00      	nop
 8000bf8:	200001b4 	.word	0x200001b4
 8000bfc:	cccccccd 	.word	0xcccccccd

08000c00 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0>:
void typeConverter::fractionalToString (float _number, char * _string, uint8_t _precision)
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	4605      	mov	r5, r0
 8000c04:	ed2d 8b02 	vpush	{d8}
	int64_t integerPart = static_cast<int64_t>(_number);
 8000c08:	ee10 0a10 	vmov	r0, s0
void typeConverter::fractionalToString (float _number, char * _string, uint8_t _precision)
 8000c0c:	eeb0 8a40 	vmov.f32	s16, s0
	int64_t integerPart = static_cast<int64_t>(_number);
 8000c10:	f002 fa0a 	bl	8003028 <__aeabi_f2lz>
 8000c14:	4604      	mov	r4, r0
 8000c16:	460e      	mov	r6, r1
	fractionalPart =  _number - integerPart;
 8000c18:	f7ff fbae 	bl	8000378 <__aeabi_l2f>
 8000c1c:	ee07 0a10 	vmov	s14, r0
 8000c20:	ee78 7a47 	vsub.f32	s15, s16, s14
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000c24:	4623      	mov	r3, r4
	fractionalPart <0 ? fractionalPart = -fractionalPart : fractionalPart = fractionalPart;
 8000c26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2e:	bf48      	it	mi
 8000c30:	ee77 7a48 	vsubmi.f32	s15, s14, s16
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	db5b      	blt.n	8000cf0 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0xf0>
	if (absNumber==0) 
 8000c38:	b963      	cbnz	r3, 8000c54 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x54>
	if (negative)
 8000c3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		_string[0]='0';
 8000c3e:	2330      	movs	r3, #48	; 0x30
	if (negative)
 8000c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		_string[0]='0';
 8000c44:	702b      	strb	r3, [r5, #0]
	if (negative)
 8000c46:	d45f      	bmi.n	8000d08 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x108>
 8000c48:	2601      	movs	r6, #1
	_string[i++]='.';
 8000c4a:	232e      	movs	r3, #46	; 0x2e
 8000c4c:	55ab      	strb	r3, [r5, r6]
 8000c4e:	2405      	movs	r4, #5
 8000c50:	2202      	movs	r2, #2
 8000c52:	e031      	b.n	8000cb8 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0xb8>
 8000c54:	1e69      	subs	r1, r5, #1
		_string[i++]=absNumber % 10 + '0';
 8000c56:	4e31      	ldr	r6, [pc, #196]	; (8000d1c <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x11c>)
 8000c58:	4608      	mov	r0, r1
 8000c5a:	fb86 2403 	smull	r2, r4, r6, r3
 8000c5e:	17da      	asrs	r2, r3, #31
 8000c60:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8000c64:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8000c68:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8000c6c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000c70:	4684      	mov	ip, r0
	while (absNumber)
 8000c72:	4613      	mov	r3, r2
		_string[i++]=absNumber % 10 + '0';
 8000c74:	f800 4f01 	strb.w	r4, [r0, #1]!
	while (absNumber)
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d1ee      	bne.n	8000c5a <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x5a>
 8000c7c:	f1c5 0602 	rsb	r6, r5, #2
	if (negative)
 8000c80:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000c84:	4466      	add	r6, ip
 8000c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		_string[i++]=absNumber % 10 + '0';
 8000c8a:	4630      	mov	r0, r6
	if (negative)
 8000c8c:	d432      	bmi.n	8000cf4 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0xf4>
	for (int i =0; i<_lenght/2; i++)
 8000c8e:	ea5f 0e66 	movs.w	lr, r6, asr #1
		_string[i++]='-';
 8000c92:	f106 0201 	add.w	r2, r6, #1
	for (int j=i; j<_precision+i; j++)
 8000c96:	f106 0404 	add.w	r4, r6, #4
	for (int i =0; i<_lenght/2; i++)
 8000c9a:	d0d6      	beq.n	8000c4a <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x4a>
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	449e      	add	lr, r3
 8000ca0:	1829      	adds	r1, r5, r0
		char temp = _charTab[i];
 8000ca2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
		_charTab [i] = _charTab [_lenght-i -1];
 8000ca6:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8000caa:	f883 c000 	strb.w	ip, [r3]
	for (int i =0; i<_lenght/2; i++)
 8000cae:	459e      	cmp	lr, r3
		_charTab [_lenght-i -1] = temp;
 8000cb0:	7008      	strb	r0, [r1, #0]
	for (int i =0; i<_lenght/2; i++)
 8000cb2:	d1f6      	bne.n	8000ca2 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0xa2>
	_string[i++]='.';
 8000cb4:	232e      	movs	r3, #46	; 0x2e
 8000cb6:	55ab      	strb	r3, [r5, r6]
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000cbe:	442a      	add	r2, r5
		fractionalPart *=10;
 8000cc0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
		fractionalPart -= static_cast<int>(fractionalPart);
 8000cc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000cc8:	4613      	mov	r3, r2
 8000cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
	for (int j=i; j<_precision+i; j++)
 8000cce:	3302      	adds	r3, #2
		fractionalPart *=10;
 8000cd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
	for (int j=i; j<_precision+i; j++)
 8000cd4:	1b5b      	subs	r3, r3, r5
		_string[j]= static_cast<int>(fractionalPart) + '0';
 8000cd6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
	for (int j=i; j<_precision+i; j++)
 8000cda:	42a3      	cmp	r3, r4
		_string[j]= static_cast<int>(fractionalPart) + '0';
 8000cdc:	ee17 1a10 	vmov	r1, s14
 8000ce0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8000ce4:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (int j=i; j<_precision+i; j++)
 8000ce8:	dbec      	blt.n	8000cc4 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0xc4>
}
 8000cea:	ecbd 8b02 	vpop	{d8}
 8000cee:	bd70      	pop	{r4, r5, r6, pc}
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000cf0:	4263      	negs	r3, r4
 8000cf2:	e7a1      	b.n	8000c38 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x38>
		_string[i++]='-';
 8000cf4:	1c73      	adds	r3, r6, #1
 8000cf6:	222d      	movs	r2, #45	; 0x2d
 8000cf8:	55aa      	strb	r2, [r5, r6]
	for (int j=i; j<_precision+i; j++)
 8000cfa:	1d74      	adds	r4, r6, #5
	_string[i++]='.';
 8000cfc:	1cb2      	adds	r2, r6, #2
	for (int i =0; i<_lenght/2; i++)
 8000cfe:	ea4f 0e63 	mov.w	lr, r3, asr #1
		_string[i++]='-';
 8000d02:	461e      	mov	r6, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	e7c9      	b.n	8000c9c <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x9c>
 8000d08:	232d      	movs	r3, #45	; 0x2d
 8000d0a:	2602      	movs	r6, #2
 8000d0c:	706b      	strb	r3, [r5, #1]
 8000d0e:	2406      	movs	r4, #6
 8000d10:	f04f 0e01 	mov.w	lr, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	4630      	mov	r0, r6
 8000d18:	1e69      	subs	r1, r5, #1
 8000d1a:	e7bf      	b.n	8000c9c <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x9c>
 8000d1c:	66666667 	.word	0x66666667

08000d20 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>:
PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8000d20:	b538      	push	{r3, r4, r5, lr}
 8000d22:	4604      	mov	r4, r0
	_myOutput   = Output;
 8000d24:	6282      	str	r2, [r0, #40]	; 0x28
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8000d26:	2200      	movs	r2, #0
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8000d28:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000d64 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x44>
	_myInput    = Input;
 8000d2c:	6241      	str	r1, [r0, #36]	; 0x24
	_mySetpoint = Setpoint;
 8000d2e:	62c3      	str	r3, [r0, #44]	; 0x2c
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8000d30:	7042      	strb	r2, [r0, #1]
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8000d32:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8000d68 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x48>
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((float)_sampleTime) / 1000000;
	
	_kp = Kp;
	_ki = Ki * SampleTimeInSec;
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x4c>)
	_pOn    = POn;
 8000d38:	2201      	movs	r2, #1
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8000d3a:	f7ff fec7 	bl	8000acc <_ZN3PID15SetOutputLimitsEff>
	_sampleTime = _PID_SAMPLE_TIME_US_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000d3e:	2519      	movs	r5, #25
	_dispKp = Kp;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x50>)
	_dispKi = Ki;
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x54>)
	_pOn    = POn;
 8000d44:	8062      	strh	r2, [r4, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8000d46:	7022      	strb	r2, [r4, #0]
	_lastTime = GetTime() - _sampleTime;
 8000d48:	f06f 0218 	mvn.w	r2, #24
	_sampleTime = _PID_SAMPLE_TIME_US_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000d4c:	60a5      	str	r5, [r4, #8]
	_dispKp = Kp;
 8000d4e:	60e3      	str	r3, [r4, #12]
	_dispKi = Ki;
 8000d50:	6120      	str	r0, [r4, #16]
	_dispKd = Kd;
 8000d52:	ed84 0a05 	vstr	s0, [r4, #20]
	_kp = Kp;
 8000d56:	61a3      	str	r3, [r4, #24]
	_ki = Ki * SampleTimeInSec;
 8000d58:	61e1      	str	r1, [r4, #28]
	_kd = Kd / SampleTimeInSec;
 8000d5a:	ed84 0a08 	vstr	s0, [r4, #32]
	_lastTime = GetTime() - _sampleTime;
 8000d5e:	6062      	str	r2, [r4, #4]
}
 8000d60:	bd38      	pop	{r3, r4, r5, pc}
 8000d62:	bf00      	nop
 8000d64:	00000000 	.word	0x00000000
 8000d68:	437f0000 	.word	0x437f0000
 8000d6c:	340637bd 	.word	0x340637bd
 8000d70:	3c343958 	.word	0x3c343958
 8000d74:	3ba3d70a 	.word	0x3ba3d70a

08000d78 <adc_init.constprop.0.isra.0>:
#include "adc.h"

adcError_t adc_init(adcChannel_t* aIns)
{
    switch ((uint32_t)aIns->adc)
 8000d78:	4a59      	ldr	r2, [pc, #356]	; (8000ee0 <adc_init.constprop.0.isra.0+0x168>)
 8000d7a:	6803      	ldr	r3, [r0, #0]
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d008      	beq.n	8000d92 <adc_init.constprop.0.isra.0+0x1a>
 8000d80:	d97d      	bls.n	8000e7e <adc_init.constprop.0.isra.0+0x106>
 8000d82:	4a58      	ldr	r2, [pc, #352]	; (8000ee4 <adc_init.constprop.0.isra.0+0x16c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d004      	beq.n	8000d92 <adc_init.constprop.0.isra.0+0x1a>
 8000d88:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	f040 80a4 	bne.w	8000eda <adc_init.constprop.0.isra.0+0x162>
        case ADC4_BASE:
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
        break;
        case ADC5_BASE:
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
 8000d92:	4955      	ldr	r1, [pc, #340]	; (8000ee8 <adc_init.constprop.0.isra.0+0x170>)
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
 8000d94:	4a55      	ldr	r2, [pc, #340]	; (8000eec <adc_init.constprop.0.isra.0+0x174>)
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
 8000d96:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	64cb      	str	r3, [r1, #76]	; 0x4c
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
 8000d9e:	6893      	ldr	r3, [r2, #8]
 8000da0:	f443 0386 	orr.w	r3, r3, #4390912	; 0x430000
 8000da4:	6093      	str	r3, [r2, #8]
        default:
            return wrongADCmodule;
        break;
    }

	aIns->adc->CR |= ADC_CR_ADSTP;
 8000da6:	6802      	ldr	r2, [r0, #0]
 8000da8:	6893      	ldr	r3, [r2, #8]
 8000daa:	f043 0310 	orr.w	r3, r3, #16
 8000dae:	6093      	str	r3, [r2, #8]
	while((aIns->adc->ISR & ADC_ISR_ADRDY));	
 8000db0:	6802      	ldr	r2, [r0, #0]
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	f013 0301 	ands.w	r3, r3, #1
 8000db8:	d1fb      	bne.n	8000db2 <adc_init.constprop.0.isra.0+0x3a>
	aIns->adc->CR =0;
 8000dba:	6093      	str	r3, [r2, #8]
    aIns->adc->CFGR = 0x80000000;
 8000dbc:	6802      	ldr	r2, [r0, #0]
 8000dbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000dc2:	60d1      	str	r1, [r2, #12]
	aIns->adc->CFGR = ADC_CFGR_OVRMOD | aIns->triggerEdge<<ADC_CFGR_EXTEN_Pos | aIns->externalTriggerEvent<<ADC_CFGR_EXTSEL_Pos | ADC_CFGR_DMAEN | ADC_CFGR_DMACFG; // Set overrun mode, external trigger rising edge, TIM1_TRGO as trigger, DMA enable, DMA circular mode
 8000dc4:	6902      	ldr	r2, [r0, #16]
 8000dc6:	7b01      	ldrb	r1, [r0, #12]
 8000dc8:	0152      	lsls	r2, r2, #5
 8000dca:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000dce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000dd2:	6801      	ldr	r1, [r0, #0]
 8000dd4:	f042 0203 	orr.w	r2, r2, #3
 8000dd8:	60ca      	str	r2, [r1, #12]
	if (aIns->triggerEdge == noEXTtrigger)
 8000dda:	7b02      	ldrb	r2, [r0, #12]
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	d075      	beq.n	8000ecc <adc_init.constprop.0.isra.0+0x154>
    {
        aIns->adc->CFGR |= ADC_CFGR_CONT;
    }
    aIns->adc->CR |= ADC_CR_ADVREGEN;	
 8000de0:	6801      	ldr	r1, [r0, #0]
 8000de2:	688a      	ldr	r2, [r1, #8]
 8000de4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000de8:	608a      	str	r2, [r1, #8]
	aIns->adc->CR |= ADC_CR_ADCAL;
 8000dea:	6801      	ldr	r1, [r0, #0]
 8000dec:	688a      	ldr	r2, [r1, #8]
 8000dee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000df2:	608a      	str	r2, [r1, #8]
	while(aIns->adc->CR & ADC_CR_ADCAL);
 8000df4:	6801      	ldr	r1, [r0, #0]
 8000df6:	688a      	ldr	r2, [r1, #8]
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	dbfc      	blt.n	8000df6 <adc_init.constprop.0.isra.0+0x7e>

    if (aIns->channelsCount>16)
 8000dfc:	6842      	ldr	r2, [r0, #4]
 8000dfe:	2a10      	cmp	r2, #16
 8000e00:	d86a      	bhi.n	8000ed8 <adc_init.constprop.0.isra.0+0x160>
adcError_t adc_init(adcChannel_t* aIns)
 8000e02:	b530      	push	{r4, r5, lr}
       return channelCountErr;
	aIns->adc->SQR1 |= (aIns->channelsCount-1)<<ADC_SQR1_L_Pos; 
 8000e04:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8000e06:	3a01      	subs	r2, #1
 8000e08:	4322      	orrs	r2, r4
 8000e0a:	630a      	str	r2, [r1, #48]	; 0x30

    for (uint32_t i=0; i<aIns->channelsCount; i++)
 8000e0c:	6842      	ldr	r2, [r0, #4]
 8000e0e:	2a00      	cmp	r2, #0
 8000e10:	d047      	beq.n	8000ea2 <adc_init.constprop.0.isra.0+0x12a>
 8000e12:	2106      	movs	r1, #6
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e00e      	b.n	8000e38 <adc_init.constprop.0.isra.0+0xc0>
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
            return channelNumberErr;

        if (i<=4)
        {
            aIns->adc->SQR1 |= *(aIns->channels+i) << (6+i*6); 
 8000e1a:	6804      	ldr	r4, [r0, #0]
 8000e1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e1e:	ea4e 0202 	orr.w	r2, lr, r2
 8000e22:	6322      	str	r2, [r4, #48]	; 0x30
    for (uint32_t i=0; i<aIns->channelsCount; i++)
 8000e24:	6842      	ldr	r2, [r0, #4]
 8000e26:	4562      	cmp	r2, ip
 8000e28:	f10c 0401 	add.w	r4, ip, #1
 8000e2c:	f103 0301 	add.w	r3, r3, #1
 8000e30:	f101 0106 	add.w	r1, r1, #6
 8000e34:	d935      	bls.n	8000ea2 <adc_init.constprop.0.isra.0+0x12a>
 8000e36:	46a4      	mov	ip, r4
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
 8000e38:	6882      	ldr	r2, [r0, #8]
 8000e3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e3e:	1e54      	subs	r4, r2, #1
 8000e40:	2c0f      	cmp	r4, #15
            aIns->adc->SQR1 |= *(aIns->channels+i) << (6+i*6); 
 8000e42:	fa02 fe01 	lsl.w	lr, r2, r1
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
 8000e46:	d839      	bhi.n	8000ebc <adc_init.constprop.0.isra.0+0x144>
        if (i<=4)
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d9e6      	bls.n	8000e1a <adc_init.constprop.0.isra.0+0xa2>
        }else if(i<=9)
        {
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000e4c:	f1a1 0e24 	sub.w	lr, r1, #36	; 0x24
        }else if(i<=9)
 8000e50:	2b09      	cmp	r3, #9
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000e52:	fa02 fe0e 	lsl.w	lr, r2, lr
        }else if(i<=9)
 8000e56:	d805      	bhi.n	8000e64 <adc_init.constprop.0.isra.0+0xec>
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000e58:	6804      	ldr	r4, [r0, #0]
 8000e5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e5c:	ea4e 0202 	orr.w	r2, lr, r2
 8000e60:	6362      	str	r2, [r4, #52]	; 0x34
 8000e62:	e7df      	b.n	8000e24 <adc_init.constprop.0.isra.0+0xac>
        }else if (i<=14)
        {
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000e64:	f1a1 0442 	sub.w	r4, r1, #66	; 0x42
        }else if (i<=14)
 8000e68:	2b0e      	cmp	r3, #14
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000e6a:	fa02 f404 	lsl.w	r4, r2, r4
        }else 
        {
            aIns->adc->SQR4 |= *(aIns->channels+i) << ((i-15)*6);
 8000e6e:	f1a1 0e60 	sub.w	lr, r1, #96	; 0x60
        }else if (i<=14)
 8000e72:	d824      	bhi.n	8000ebe <adc_init.constprop.0.isra.0+0x146>
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000e74:	6802      	ldr	r2, [r0, #0]
 8000e76:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8000e78:	432c      	orrs	r4, r5
 8000e7a:	6394      	str	r4, [r2, #56]	; 0x38
 8000e7c:	e7d2      	b.n	8000e24 <adc_init.constprop.0.isra.0+0xac>
    switch ((uint32_t)aIns->adc)
 8000e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e82:	d003      	beq.n	8000e8c <adc_init.constprop.0.isra.0+0x114>
 8000e84:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d127      	bne.n	8000edc <adc_init.constprop.0.isra.0+0x164>
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8000e8c:	4916      	ldr	r1, [pc, #88]	; (8000ee8 <adc_init.constprop.0.isra.0+0x170>)
            ADC12_COMMON->CCR |= (0b01 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);	// Set ADC clock to HCLK/2 and enable VREFINT
 8000e8e:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <adc_init.constprop.0.isra.0+0x178>)
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8000e90:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000e92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e96:	64cb      	str	r3, [r1, #76]	; 0x4c
            ADC12_COMMON->CCR |= (0b01 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);	// Set ADC clock to HCLK/2 and enable VREFINT
 8000e98:	6893      	ldr	r3, [r2, #8]
 8000e9a:	f443 0382 	orr.w	r3, r3, #4259840	; 0x410000
 8000e9e:	6093      	str	r3, [r2, #8]
        break;
 8000ea0:	e781      	b.n	8000da6 <adc_init.constprop.0.isra.0+0x2e>
        }
    }
	aIns->adc->CR |= ADC_CR_ADEN;
 8000ea2:	6802      	ldr	r2, [r0, #0]
 8000ea4:	6893      	ldr	r3, [r2, #8]
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6093      	str	r3, [r2, #8]
	while(!(aIns->adc->ISR & ADC_ISR_ADRDY));
 8000eac:	6802      	ldr	r2, [r0, #0]
 8000eae:	6813      	ldr	r3, [r2, #0]
 8000eb0:	07db      	lsls	r3, r3, #31
 8000eb2:	d5fc      	bpl.n	8000eae <adc_init.constprop.0.isra.0+0x136>
	aIns->adc->CR |= ADC_CR_ADSTART;
 8000eb4:	6893      	ldr	r3, [r2, #8]
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6093      	str	r3, [r2, #8]
    
    return adcOk;  
 8000ebc:	bd30      	pop	{r4, r5, pc}
            aIns->adc->SQR4 |= *(aIns->channels+i) << ((i-15)*6);
 8000ebe:	6804      	ldr	r4, [r0, #0]
 8000ec0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000ec2:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ec6:	432a      	orrs	r2, r5
 8000ec8:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000eca:	e7ab      	b.n	8000e24 <adc_init.constprop.0.isra.0+0xac>
        aIns->adc->CFGR |= ADC_CFGR_CONT;
 8000ecc:	6801      	ldr	r1, [r0, #0]
 8000ece:	68ca      	ldr	r2, [r1, #12]
 8000ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ed4:	60ca      	str	r2, [r1, #12]
 8000ed6:	e783      	b.n	8000de0 <adc_init.constprop.0.isra.0+0x68>
 8000ed8:	4770      	bx	lr
 8000eda:	4770      	bx	lr
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	50000400 	.word	0x50000400
 8000ee4:	50000500 	.word	0x50000500
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	50000700 	.word	0x50000700
 8000ef0:	50000300 	.word	0x50000300

08000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>:
#include "gpio.h"

GPIO::GPIO (GPIO_TypeDef* _GPIOx, uint8_t _pin, GPIOmode _mode, GPIOtype _type, GPIOspeed _speed, GPIOpull _pull, uint8_t _AFnumber):
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
GPIOx(_GPIOx), pin(_pin)
{
	switch ((uint32_t) _GPIOx)
 8000ef6:	4e42      	ldr	r6, [pc, #264]	; (8001000 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x10c>)
GPIOx(_GPIOx), pin(_pin)
 8000ef8:	6001      	str	r1, [r0, #0]
	switch ((uint32_t) _GPIOx)
 8000efa:	42b1      	cmp	r1, r6
GPIOx(_GPIOx), pin(_pin)
 8000efc:	7102      	strb	r2, [r0, #4]
GPIO::GPIO (GPIO_TypeDef* _GPIOx, uint8_t _pin, GPIOmode _mode, GPIOtype _type, GPIOspeed _speed, GPIOpull _pull, uint8_t _AFnumber):
 8000efe:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8000f02:	f89d 001c 	ldrb.w	r0, [sp, #28]
	switch ((uint32_t) _GPIOx)
 8000f06:	d068      	beq.n	8000fda <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xe6>
 8000f08:	d850      	bhi.n	8000fac <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xb8>
 8000f0a:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
 8000f0e:	42b1      	cmp	r1, r6
 8000f10:	d069      	beq.n	8000fe6 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xf2>
 8000f12:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f16:	42b1      	cmp	r1, r6
 8000f18:	d13f      	bne.n	8000f9a <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xa6>
			break;
		case GPIOB_BASE:
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
			break;
		case GPIOC_BASE:
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000f1a:	4f3a      	ldr	r7, [pc, #232]	; (8001004 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000f1c:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000f1e:	f046 0604 	orr.w	r6, r6, #4
 8000f22:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
		default: 
		break;
	}

	GPIOx->MODER &= ~(0b11 << (pin*2));
 8000f24:	0056      	lsls	r6, r2, #1
	GPIOx->MODER |= (static_cast<int>(_mode) << (pin*2));
	GPIOx->OTYPER &= ~(1 << pin);
	GPIOx->OTYPER |= (static_cast<int>(_type) << pin);
 8000f26:	fa05 fe02 	lsl.w	lr, r5, r2
	GPIOx->MODER &= ~(0b11 << (pin*2));
 8000f2a:	f04f 0c03 	mov.w	ip, #3
 8000f2e:	680d      	ldr	r5, [r1, #0]
 8000f30:	fa0c fc06 	lsl.w	ip, ip, r6
 8000f34:	ea25 050c 	bic.w	r5, r5, ip
 8000f38:	600d      	str	r5, [r1, #0]
	GPIOx->MODER |= (static_cast<int>(_mode) << (pin*2));
 8000f3a:	680d      	ldr	r5, [r1, #0]
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	432b      	orrs	r3, r5
 8000f40:	600b      	str	r3, [r1, #0]
	GPIOx->OTYPER &= ~(1 << pin);
 8000f42:	684b      	ldr	r3, [r1, #4]
 8000f44:	2501      	movs	r5, #1
 8000f46:	4095      	lsls	r5, r2
 8000f48:	ea23 0305 	bic.w	r3, r3, r5
 8000f4c:	604b      	str	r3, [r1, #4]
	GPIOx->OTYPER |= (static_cast<int>(_type) << pin);
 8000f4e:	684b      	ldr	r3, [r1, #4]
 8000f50:	ea4e 0303 	orr.w	r3, lr, r3
 8000f54:	604b      	str	r3, [r1, #4]
	GPIOx->OSPEEDR &= ~(0b11 << (pin*2));
 8000f56:	688b      	ldr	r3, [r1, #8]
 8000f58:	ea23 030c 	bic.w	r3, r3, ip
 8000f5c:	608b      	str	r3, [r1, #8]
	GPIOx->OSPEEDR |= (static_cast<int>(_speed)<<(pin*2));
 8000f5e:	688b      	ldr	r3, [r1, #8]
 8000f60:	608b      	str	r3, [r1, #8]
	GPIOx->PUPDR &= ~(0b11 << (pin*2));
 8000f62:	68cb      	ldr	r3, [r1, #12]
 8000f64:	ea23 030c 	bic.w	r3, r3, ip
 8000f68:	60cb      	str	r3, [r1, #12]
	GPIOx->PUPDR |= (static_cast<int>(_pull)<<(pin*2));
 8000f6a:	68cb      	ldr	r3, [r1, #12]
 8000f6c:	40b4      	lsls	r4, r6
 8000f6e:	431c      	orrs	r4, r3
 8000f70:	08d3      	lsrs	r3, r2, #3
 8000f72:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000f76:	60cc      	str	r4, [r1, #12]
	GPIOx->AFR[pin/8] &= ~(0xF << ((pin % 8)*4));
 8000f78:	f002 0207 	and.w	r2, r2, #7
 8000f7c:	6a19      	ldr	r1, [r3, #32]
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	f04f 0c0f 	mov.w	ip, #15
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	ea21 010c 	bic.w	r1, r1, ip
 8000f8c:	6219      	str	r1, [r3, #32]
	GPIOx->AFR[pin/8] |= (_AFnumber << ((pin % 8)*4));
 8000f8e:	6a19      	ldr	r1, [r3, #32]
 8000f90:	fa00 f202 	lsl.w	r2, r0, r2
 8000f94:	430a      	orrs	r2, r1
 8000f96:	621a      	str	r2, [r3, #32]
}
 8000f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch ((uint32_t) _GPIOx)
 8000f9a:	f1b1 4f90 	cmp.w	r1, #1207959552	; 0x48000000
 8000f9e:	d1c1      	bne.n	8000f24 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000fa0:	4f18      	ldr	r7, [pc, #96]	; (8001004 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000fa2:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000fa4:	f046 0601 	orr.w	r6, r6, #1
 8000fa8:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8000faa:	e7bb      	b.n	8000f24 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
	switch ((uint32_t) _GPIOx)
 8000fac:	4e16      	ldr	r6, [pc, #88]	; (8001008 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x114>)
 8000fae:	42b1      	cmp	r1, r6
 8000fb0:	d01f      	beq.n	8000ff2 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xfe>
 8000fb2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000fb6:	42b1      	cmp	r1, r6
 8000fb8:	d105      	bne.n	8000fc6 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xd2>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
 8000fba:	4f12      	ldr	r7, [pc, #72]	; (8001004 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000fbc:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000fbe:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 8000fc2:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8000fc4:	e7ae      	b.n	8000f24 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
	switch ((uint32_t) _GPIOx)
 8000fc6:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
 8000fca:	42b1      	cmp	r1, r6
 8000fcc:	d1aa      	bne.n	8000f24 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
 8000fce:	4f0d      	ldr	r7, [pc, #52]	; (8001004 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000fd0:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000fd2:	f046 0610 	orr.w	r6, r6, #16
 8000fd6:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8000fd8:	e7a4      	b.n	8000f24 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 8000fda:	4f0a      	ldr	r7, [pc, #40]	; (8001004 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000fdc:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000fde:	f046 0608 	orr.w	r6, r6, #8
 8000fe2:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8000fe4:	e79e      	b.n	8000f24 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000fe6:	4f07      	ldr	r7, [pc, #28]	; (8001004 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000fe8:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000fea:	f046 0602 	orr.w	r6, r6, #2
 8000fee:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8000ff0:	e798      	b.n	8000f24 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOFEN;
 8000ff2:	4f04      	ldr	r7, [pc, #16]	; (8001004 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000ff4:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000ff6:	f046 0620 	orr.w	r6, r6, #32
 8000ffa:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8000ffc:	e792      	b.n	8000f24 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
 8000ffe:	bf00      	nop
 8001000:	48000c00 	.word	0x48000c00
 8001004:	40021000 	.word	0x40021000
 8001008:	48001400 	.word	0x48001400

0800100c <_ZN3PID7ComputeEv.isra.0>:
	if (!_inAuto)
 800100c:	7843      	ldrb	r3, [r0, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d049      	beq.n	80010a6 <_ZN3PID7ComputeEv.isra.0+0x9a>
		error   = *_mySetpoint - input;
 8001012:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		input   = *_myInput;
 8001014:	6a42      	ldr	r2, [r0, #36]	; 0x24
		error   = *_mySetpoint - input;
 8001016:	ed93 7a00 	vldr	s14, [r3]
		input   = *_myInput;
 800101a:	ed92 5a00 	vldr	s10, [r2]
		_outputSum += (_ki * error);
 800101e:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
 8001022:	ed90 6a07 	vldr	s12, [r0, #28]
		dInput  = (input - _lastInput);
 8001026:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
		if (!_pOnE)
 800102a:	7803      	ldrb	r3, [r0, #0]
		error   = *_mySetpoint - input;
 800102c:	ee37 7a45 	vsub.f32	s14, s14, s10
		dInput  = (input - _lastInput);
 8001030:	ee75 7a67 	vsub.f32	s15, s10, s15
		_outputSum += (_ki * error);
 8001034:	eee7 6a06 	vfma.f32	s13, s14, s12
 8001038:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
		if (!_pOnE)
 800103c:	bba3      	cbnz	r3, 80010a8 <_ZN3PID7ComputeEv.isra.0+0x9c>
			_outputSum -= _kp * dInput;
 800103e:	ed90 7a06 	vldr	s14, [r0, #24]
		if (_outputSum > _outMax)
 8001042:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
			_outputSum -= _kp * dInput;
 8001046:	eee7 6ac7 	vfms.f32	s13, s15, s14
 800104a:	eef1 5a67 	vneg.f32	s11, s15
		if (_outputSum > _outMax)
 800104e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			_outputSum -= _kp * dInput;
 8001056:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
		if (_outputSum > _outMax)
 800105a:	dc37      	bgt.n	80010cc <_ZN3PID7ComputeEv.isra.0+0xc0>
		else if (_outputSum < _outMin)
 800105c:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8001060:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d443      	bmi.n	80010f2 <_ZN3PID7ComputeEv.isra.0+0xe6>
			output = 0;
 800106a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8001100 <_ZN3PID7ComputeEv.isra.0+0xf4>
		output += _outputSum - _kd * dInput;
 800106e:	ed90 7a08 	vldr	s14, [r0, #32]
 8001072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001076:	eee7 7a25 	vfma.f32	s15, s14, s11
		if (output > _outMax)
 800107a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	dc08      	bgt.n	8001096 <_ZN3PID7ComputeEv.isra.0+0x8a>
 8001084:	ed90 6a0e 	vldr	s12, [r0, #56]	; 0x38
 8001088:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	bfb8      	it	lt
 8001092:	eeb0 6a67 	vmovlt.f32	s12, s15
		*_myOutput = output;
 8001096:	6a82      	ldr	r2, [r0, #40]	; 0x28
		_lastTime  = now;
 8001098:	2300      	movs	r3, #0
		*_myOutput = output;
 800109a:	ed82 6a00 	vstr	s12, [r2]
		_lastInput = input;
 800109e:	ed80 5a0d 	vstr	s10, [r0, #52]	; 0x34
		_lastTime  = now;
 80010a2:	6043      	str	r3, [r0, #4]
 80010a4:	4770      	bx	lr
}
 80010a6:	4770      	bx	lr
		if (_outputSum > _outMax)
 80010a8:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 80010ac:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d511      	bpl.n	80010da <_ZN3PID7ComputeEv.isra.0+0xce>
			_outputSum = _outMax;
 80010b6:	eef0 6a46 	vmov.f32	s13, s12
 80010ba:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
			output = _kp * error;
 80010be:	edd0 4a06 	vldr	s9, [r0, #24]
 80010c2:	eef1 5a67 	vneg.f32	s11, s15
 80010c6:	ee67 7a24 	vmul.f32	s15, s14, s9
 80010ca:	e7d0      	b.n	800106e <_ZN3PID7ComputeEv.isra.0+0x62>
			output = 0;
 80010cc:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001100 <_ZN3PID7ComputeEv.isra.0+0xf4>
			_outputSum = _outMax;
 80010d0:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
 80010d4:	eef0 6a46 	vmov.f32	s13, s12
 80010d8:	e7c9      	b.n	800106e <_ZN3PID7ComputeEv.isra.0+0x62>
		else if (_outputSum < _outMin)
 80010da:	edd0 5a0e 	vldr	s11, [r0, #56]	; 0x38
 80010de:	eef4 6ae5 	vcmpe.f32	s13, s11
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	d5ea      	bpl.n	80010be <_ZN3PID7ComputeEv.isra.0+0xb2>
			_outputSum = _outMin;
 80010e8:	eef0 6a65 	vmov.f32	s13, s11
 80010ec:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
 80010f0:	e7e5      	b.n	80010be <_ZN3PID7ComputeEv.isra.0+0xb2>
			output = 0;
 80010f2:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001100 <_ZN3PID7ComputeEv.isra.0+0xf4>
			_outputSum = _outMin;
 80010f6:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
 80010fa:	eef0 6a47 	vmov.f32	s13, s14
 80010fe:	e7b6      	b.n	800106e <_ZN3PID7ComputeEv.isra.0+0x62>
 8001100:	00000000 	.word	0x00000000

08001104 <main>:

motor_t motor = {0};
PID pidUd (&motor.FilteredIdqA[0],  &motor.Udq_pu[0], &setiD, 0.011f, 0.005f, 0.0f, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
PID pidUq (&motor.FilteredIdqA[1],  &motor.Udq_pu[1], &setiQ, 0.011f, 0.005f, 0.0f, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
int main(void)
{
 8001104:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
}

static inline void pwm_init (pwm_t* pwm)
{
    //NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  
 8001108:	4a74      	ldr	r2, [pc, #464]	; (80012dc <main+0x1d8>)
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 800110a:	4875      	ldr	r0, [pc, #468]	; (80012e0 <main+0x1dc>)
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  
 800110c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800110e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001112:	6613      	str	r3, [r2, #96]	; 0x60
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001114:	6803      	ldr	r3, [r0, #0]
	pwm->tim->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
	pwm->tim->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;
	pwm->tim->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;
	//TIM1->CR2 |= 0b010<<TIM_CR2_MMS_Pos;   // Set TRGO on Update Event
	pwm->tim->PSC = 0;  // tim_clk = cpu_clk
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 8001116:	4a73      	ldr	r2, [pc, #460]	; (80012e4 <main+0x1e0>)
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001118:	6999      	ldr	r1, [r3, #24]
 800111a:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 800111e:	6199      	str	r1, [r3, #24]
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC2M_Pos | TIM_CCMR1_OC2PE ; // PWM mode 1 channel 2
 8001120:	6999      	ldr	r1, [r3, #24]
 8001122:	f441 41d0 	orr.w	r1, r1, #26624	; 0x6800
 8001126:	6199      	str	r1, [r3, #24]
	pwm->tim->CCMR2 |= 0b110<< TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC3PE ; // PWM mode 1 channel 3
 8001128:	69d9      	ldr	r1, [r3, #28]
 800112a:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 800112e:	61d9      	str	r1, [r3, #28]
	pwm->tim->CCMR2 |= 0b0110<< TIM_CCMR2_OC4M_Pos;
 8001130:	69d9      	ldr	r1, [r3, #28]
 8001132:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8001136:	61d9      	str	r1, [r3, #28]
	pwm->tim->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
 8001138:	6a19      	ldr	r1, [r3, #32]
 800113a:	f041 0105 	orr.w	r1, r1, #5
 800113e:	6219      	str	r1, [r3, #32]
	pwm->tim->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;
 8001140:	6a19      	ldr	r1, [r3, #32]
 8001142:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8001146:	6219      	str	r1, [r3, #32]
	pwm->tim->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;
 8001148:	6a19      	ldr	r1, [r3, #32]
 800114a:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
 800114e:	6219      	str	r1, [r3, #32]
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 8001150:	6841      	ldr	r1, [r0, #4]
 8001152:	fbb2 f2f1 	udiv	r2, r2, r1
 8001156:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800115a:	bf28      	it	cs
 800115c:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8001160:	f04f 0800 	mov.w	r8, #0
	pwm->tim->PSC = 0;  // tim_clk = cpu_clk
 8001164:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
	pwm->tim->CCR1 = 0;
	pwm->tim->CCR2 = 0;
	pwm->tim->CCR3 = 0;
	pwm->tim->CCR4 = 1000;
 8001168:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->tim->CCR1 = 0;
 800116e:	2200      	movs	r2, #0
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 8001174:	63da      	str	r2, [r3, #60]	; 0x3c
	pwm->tim->CCR4 = 1000;
 8001176:	6419      	str	r1, [r3, #64]	; 0x40
	pwm->tim ->DIER |=  TIM_DIER_UIE; // interrupt enable
 8001178:	68da      	ldr	r2, [r3, #12]
	pwm->tim->CR2 = 0b0111<<TIM_CR2_MMS_Pos;   // Set TRGO on Compare 4
 800117a:	2170      	movs	r1, #112	; 0x70
	pwm->tim ->DIER |=  TIM_DIER_UIE; // interrupt enable
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	60da      	str	r2, [r3, #12]
	pwm->tim->CR2 = 0b0111<<TIM_CR2_MMS_Pos;   // Set TRGO on Compare 4
 8001182:	6059      	str	r1, [r3, #4]
	pwm->tim->CR1 |= TIM_CR1_ARPE | 0b01<<TIM_CR1_CMS_Pos;
 8001184:	681a      	ldr	r2, [r3, #0]
	pwm->tim->EGR |= TIM_EGR_UG;
 8001186:	4956      	ldr	r1, [pc, #344]	; (80012e0 <main+0x1dc>)
	pwm->tim->CR1 |= TIM_CR1_ARPE | 0b01<<TIM_CR1_CMS_Pos;
 8001188:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800118c:	601a      	str	r2, [r3, #0]
	pwm->tim->EGR |= TIM_EGR_UG;
 800118e:	680b      	ldr	r3, [r1, #0]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	615a      	str	r2, [r3, #20]
	pwm->tim->BDTR |= TIM_BDTR_MOE | 0b00100000<<TIM_BDTR_DTG_Pos; 
 8001198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800119a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800119e:	f042 0220 	orr.w	r2, r2, #32
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
	pwm->tim->CR1 |= TIM_CR1_CEN;
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
    pwm->autoReloadValue = pwm->tim->ARR;
 80011ac:	680a      	ldr	r2, [r1, #0]
 80011ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80011b0:	608b      	str	r3, [r1, #8]
    pwm->halfAutoReloadValue = pwm->autoReloadValue/2;
 80011b2:	085b      	lsrs	r3, r3, #1

    getAutoReloadValue (pwm);
	pwm->tim->CCR4= pwm->halfAutoReloadValue;
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
	if (!(RCC->CR & RCC_CR_HSERDY))
 80011b6:	4a49      	ldr	r2, [pc, #292]	; (80012dc <main+0x1d8>)
    pwm->halfAutoReloadValue = pwm->autoReloadValue/2;
 80011b8:	60cb      	str	r3, [r1, #12]
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	039b      	lsls	r3, r3, #14
 80011be:	b09b      	sub	sp, #108	; 0x6c
 80011c0:	d406      	bmi.n	80011d0 <main+0xcc>
		RCC->CR |= RCC_CR_HSEON;
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
		while(!(RCC->CR & RCC_CR_HSERDY));
 80011ca:	6813      	ldr	r3, [r2, #0]
 80011cc:	039f      	lsls	r7, r3, #14
 80011ce:	d5fc      	bpl.n	80011ca <main+0xc6>

void ClockManager::pllCfg([[maybe_unused]] int _pllNum, int _targetFreq, int _p, pllDiv _q, pllDiv _r)
{
	uint32_t sourceFreq;

	RCC->CR &= ~RCC_CR_PLLON;
 80011d0:	4a42      	ldr	r2, [pc, #264]	; (80012dc <main+0x1d8>)
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011d8:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLRDY);
 80011da:	6813      	ldr	r3, [r2, #0]
 80011dc:	019e      	lsls	r6, r3, #6
 80011de:	d4fc      	bmi.n	80011da <main+0xd6>
	if (RCC->CR & RCC_CR_HSERDY)
 80011e0:	6813      	ldr	r3, [r2, #0]
	else
		sourceFreq = RCC_PLLCFGR_PLLSRC_HSI;

	int m = sourceFreq / 4000000; //4 MHz input frequency

	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 80011e2:	eddf 6a41 	vldr	s13, [pc, #260]	; 80012e8 <main+0x1e4>
	if (RCC->CR & RCC_CR_HSERDY)
 80011e6:	039d      	lsls	r5, r3, #14
		RCC->PLLCFGR = RCC_PLLCFGR_PLLSRC_HSE;
 80011e8:	bf42      	ittt	mi
 80011ea:	2103      	movmi	r1, #3
 80011ec:	60d1      	strmi	r1, [r2, #12]
		sourceFreq = hseClock;
 80011ee:	4b3f      	ldrmi	r3, [pc, #252]	; (80012ec <main+0x1e8>)
	int m = sourceFreq / 4000000; //4 MHz input frequency
 80011f0:	4a3f      	ldr	r2, [pc, #252]	; (80012f0 <main+0x1ec>)
		sourceFreq = RCC_PLLCFGR_PLLSRC_HSI;
 80011f2:	bf58      	it	pl
 80011f4:	2302      	movpl	r3, #2
	int m = sourceFreq / 4000000; //4 MHz input frequency
 80011f6:	fba2 1203 	umull	r1, r2, r2, r3
 80011fa:	0d12      	lsrs	r2, r2, #20
	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 80011fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	int plln = (int)(targetDivider + 0.5f);

	RCC->PLLCFGR |= (m - 1) << RCC_PLLCFGR_PLLM_Pos;
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <main+0x1d8>)
	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 800120a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	RCC->PLLCFGR |= (m - 1) << RCC_PLLCFGR_PLLM_Pos;
 800120e:	68d9      	ldr	r1, [r3, #12]
 8001210:	3a01      	subs	r2, #1
 8001212:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
 8001216:	60da      	str	r2, [r3, #12]

	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 8001218:	68da      	ldr	r2, [r3, #12]
	int plln = (int)(targetDivider + 0.5f);
 800121a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		| static_cast<uint32_t>(_q) << RCC_PLLCFGR_PLLQ_Pos
		| static_cast<uint32_t>(_r) << RCC_PLLCFGR_PLLR_Pos
		| plln << RCC_PLLCFGR_PLLN_Pos;
 8001226:	ee17 1a90 	vmov	r1, s15
 800122a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 800122e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001232:	60da      	str	r2, [r3, #12]

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN;
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	f042 7288 	orr.w	r2, r2, #17825792	; 0x1100000
 800123a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800123e:	60da      	str	r2, [r3, #12]
	RCC->CR |= RCC_CR_PLLON;
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001246:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	0194      	lsls	r4, r2, #6
 800124c:	d5fc      	bpl.n	8001248 <main+0x144>
pllClk ClockManager::updatePll()
{
	pllClk pllClocks = {0, 0, 0, 0};
	uint32_t sourceFreq;

	if(!(RCC->CR & RCC_CR_PLLRDY))
 800124e:	681c      	ldr	r4, [r3, #0]
 8001250:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
 8001254:	d054      	beq.n	8001300 <main+0x1fc>
		return pllClocks;

	if (RCC->CR & RCC_CR_HSERDY)
 8001256:	6819      	ldr	r1, [r3, #0]
		sourceFreq = hseClock;
	else
		sourceFreq = hsiClock;

    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8001258:	4820      	ldr	r0, [pc, #128]	; (80012dc <main+0x1d8>)
		sourceFreq = hsiClock;
 800125a:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <main+0x1f0>)
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <main+0x1e8>)
	if(targetFreq > coreClock)
 800125e:	4d26      	ldr	r5, [pc, #152]	; (80012f8 <main+0x1f4>)
		sourceFreq = hsiClock;
 8001260:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001264:	bf08      	it	eq
 8001266:	4613      	moveq	r3, r2
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8001268:	68c2      	ldr	r2, [r0, #12]
	if(targetFreq > coreClock)
 800126a:	682e      	ldr	r6, [r5, #0]
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
    pllClocks.internal = sourceFreq * finalMult;
 800126c:	ee07 3a90 	vmov	s15, r3
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 8001270:	68c3      	ldr	r3, [r0, #12]
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 8001272:	68c1      	ldr	r1, [r0, #12]
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8001274:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllClocks.internal = sourceFreq * finalMult;
 8001278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 800127c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8001280:	ee07 2a90 	vmov	s15, r2
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 8001284:	3301      	adds	r3, #1
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8001286:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 8001292:	68c3      	ldr	r3, [r0, #12]
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 8001294:	68c4      	ldr	r4, [r0, #12]
	pllClock = updatePll();
 8001296:	4819      	ldr	r0, [pc, #100]	; (80012fc <main+0x1f8>)
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 8001298:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 800129c:	f3c4 6441 	ubfx	r4, r4, #25, #2
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80012a0:	f3c3 5341 	ubfx	r3, r3, #21, #2
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80012a4:	3401      	adds	r4, #1
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80012a6:	3301      	adds	r3, #1
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80012a8:	0064      	lsls	r4, r4, #1
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 80012aa:	0ec9      	lsrs	r1, r1, #27
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80012ac:	005b      	lsls	r3, r3, #1
    pllClocks.internal = sourceFreq * finalMult;
 80012ae:	ee66 7a07 	vmul.f32	s15, s12, s14
 80012b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b6:	ee17 2a90 	vmov	r2, s15
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80012ba:	fbb2 f4f4 	udiv	r4, r2, r4
	if(targetFreq > coreClock)
 80012be:	42a6      	cmp	r6, r4
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 80012c0:	fbb2 f1f1 	udiv	r1, r2, r1
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
	pllClock = updatePll();
 80012c8:	e9c0 2100 	strd	r2, r1, [r0]
 80012cc:	e9c0 3402 	strd	r3, r4, [r0, #8]
	if(targetFreq > coreClock)
 80012d0:	d21d      	bcs.n	800130e <main+0x20a>
		internalFreqUpdate(targetFreq);
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff fb94 	bl	8000a00 <_ZN12ClockManager18internalFreqUpdateEm>
 80012d8:	e019      	b.n	800130e <main+0x20a>
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	2000001c 	.word	0x2000001c
 80012e4:	04c4b400 	.word	0x04c4b400
 80012e8:	4d989680 	.word	0x4d989680
 80012ec:	016e3600 	.word	0x016e3600
 80012f0:	431bde83 	.word	0x431bde83
 80012f4:	00f42400 	.word	0x00f42400
 80012f8:	20000008 	.word	0x20000008
 80012fc:	200000d4 	.word	0x200000d4
	pllClock = updatePll();
 8001300:	4bb1      	ldr	r3, [pc, #708]	; (80015c8 <main+0x4c4>)
	if(targetFreq > coreClock)
 8001302:	4db2      	ldr	r5, [pc, #712]	; (80015cc <main+0x4c8>)
	pllClock = updatePll();
 8001304:	e9c3 4400 	strd	r4, r4, [r3]
 8001308:	e9c3 4402 	strd	r4, r4, [r3, #8]
	if(targetFreq > coreClock)
 800130c:	682e      	ldr	r6, [r5, #0]
	RCC->CFGR = (RCC->CFGR & ~0x7) | static_cast<uint32_t>(_src);
 800130e:	4ab0      	ldr	r2, [pc, #704]	; (80015d0 <main+0x4cc>)
 8001310:	6893      	ldr	r3, [r2, #8]
 8001312:	f023 0307 	bic.w	r3, r3, #7
 8001316:	f043 0303 	orr.w	r3, r3, #3
 800131a:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != static_cast<uint32_t>(_src) << RCC_CFGR_SWS_Pos);
 800131c:	6893      	ldr	r3, [r2, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d1fa      	bne.n	800131c <main+0x218>
	if(targetFreq < coreClock)
 8001326:	42b4      	cmp	r4, r6
 8001328:	f0c0 849a 	bcc.w	8001c60 <main+0xb5c>
    return result;
}

void ClockManager::enableClk(volatile uint32_t &_reg, uint32_t _bits)
{
	_reg |= _bits;
 800132c:	4ba8      	ldr	r3, [pc, #672]	; (80015d0 <main+0x4cc>)
	coreClock = targetFreq;
 800132e:	602c      	str	r4, [r5, #0]
	_reg |= _bits;
 8001330:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001332:	f042 0210 	orr.w	r2, r2, #16
 8001336:	659a      	str	r2, [r3, #88]	; 0x58
	while((_reg & _bits) != _bits)
 8001338:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800133a:	06d0      	lsls	r0, r2, #27
 800133c:	d5fc      	bpl.n	8001338 <main+0x234>
	int prescaler = timerClock / 1000000;
 800133e:	4ba5      	ldr	r3, [pc, #660]	; (80015d4 <main+0x4d0>)
 8001340:	4aa5      	ldr	r2, [pc, #660]	; (80015d8 <main+0x4d4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	0c9b      	lsrs	r3, r3, #18
	TIM6->PSC = prescaler - 1;
 800134a:	4aa4      	ldr	r2, [pc, #656]	; (80015dc <main+0x4d8>)
 800134c:	3b01      	subs	r3, #1
 800134e:	6293      	str	r3, [r2, #40]	; 0x28
	TIM6->ARR = 0x0FFF;
 8001350:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001354:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM6->CR1 = TIM_CR1_CEN;
 8001356:	2301      	movs	r3, #1
 8001358:	6013      	str	r3, [r2, #0]
    SysTick_Config(coreClock / 1000);
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	4aa0      	ldr	r2, [pc, #640]	; (80015e0 <main+0x4dc>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	3b01      	subs	r3, #1
 8001366:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800136a:	d20a      	bcs.n	8001382 <main+0x27e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	499c      	ldr	r1, [pc, #624]	; (80015e4 <main+0x4e0>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	23f0      	movs	r3, #240	; 0xf0
 8001376:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137a:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137e:	6191      	str	r1, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001380:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	4f99      	ldr	r7, [pc, #612]	; (80015e8 <main+0x4e4>)
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; 
 8001384:	4c92      	ldr	r4, [pc, #584]	; (80015d0 <main+0x4cc>)
 8001386:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	65a3      	str	r3, [r4, #88]	; 0x58
	TIM2->PSC = 15; // 160000000/16 = 10000000 Hz
 8001394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001398:	220f      	movs	r2, #15
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 49999; // 10000000/4999 = 2000 Hz
 800139c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 10;
 80013a2:	220a      	movs	r2, #10
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2 -> DIER |= TIM_DIER_UIE; // update interrupt enable
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	60da      	str	r2, [r3, #12]
	TIM2->CR1  |= TIM_CR1_ARPE;
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013b4:	601a      	str	r2, [r3, #0]
	TIM2->CR1  |= TIM_CR1_CEN;	
 80013b6:	6819      	ldr	r1, [r3, #0]
	adcChannelNumbers_t adc1Channels[3] = {1, 8, 9};
 80013b8:	4a8c      	ldr	r2, [pc, #560]	; (80015ec <main+0x4e8>)
	TIM2->CR1  |= TIM_CR1_CEN;	
 80013ba:	f041 0101 	orr.w	r1, r1, #1
 80013be:	6019      	str	r1, [r3, #0]
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 80013c0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80013c4:	910e      	str	r1, [sp, #56]	; 0x38
	adcChannelNumbers_t adc1Channels[3] = {1, 8, 9};
 80013c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013c8:	ab0b      	add	r3, sp, #44	; 0x2c
 80013ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 80013ce:	f04f 0901 	mov.w	r9, #1
 80013d2:	2500      	movs	r5, #0
 80013d4:	2603      	movs	r6, #3
 80013d6:	f04f 0a09 	mov.w	sl, #9
	adc_init(&adc);
 80013da:	a80e      	add	r0, sp, #56	; 0x38
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 80013dc:	9310      	str	r3, [sp, #64]	; 0x40
 80013de:	9511      	str	r5, [sp, #68]	; 0x44
 80013e0:	9513      	str	r5, [sp, #76]	; 0x4c
 80013e2:	960f      	str	r6, [sp, #60]	; 0x3c
 80013e4:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
 80013e8:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
	adc_init(&adc);
 80013ec:	f7ff fcc4 	bl	8000d78 <adc_init.constprop.0.isra.0>
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 80013f0:	4b7f      	ldr	r3, [pc, #508]	; (80015f0 <main+0x4ec>)
 80013f2:	9314      	str	r3, [sp, #80]	; 0x50
 80013f4:	ab08      	add	r3, sp, #32
	adcChannelNumbers_t adc2Channels[2] = {14 ,12};
 80013f6:	220e      	movs	r2, #14
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 80013f8:	f04f 0b02 	mov.w	fp, #2
 80013fc:	9316      	str	r3, [sp, #88]	; 0x58
	adc_init(&adc2);
 80013fe:	a814      	add	r0, sp, #80	; 0x50
	adcChannelNumbers_t adc2Channels[2] = {14 ,12};
 8001400:	230c      	movs	r3, #12
 8001402:	e9cd 2308 	strd	r2, r3, [sp, #32]
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 8001406:	9517      	str	r5, [sp, #92]	; 0x5c
 8001408:	e9cd a518 	strd	sl, r5, [sp, #96]	; 0x60
 800140c:	f88d 905c 	strb.w	r9, [sp, #92]	; 0x5c
 8001410:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
	adc_init(&adc2);
 8001414:	f7ff fcb0 	bl	8000d78 <adc_init.constprop.0.isra.0>
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 8001418:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	DMA1_Channel2->CPAR = (uint32_t) &(ADC2->DR);
 800141a:	4a76      	ldr	r2, [pc, #472]	; (80015f4 <main+0x4f0>)
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 800141c:	f043 0305 	orr.w	r3, r3, #5
 8001420:	64a3      	str	r3, [r4, #72]	; 0x48
	DMAMUX1_Channel1->CCR = 36; // dma request from ADC2
 8001422:	4b75      	ldr	r3, [pc, #468]	; (80015f8 <main+0x4f4>)
 8001424:	2124      	movs	r1, #36	; 0x24
 8001426:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
	DMA1_Channel2-> CCR = 0b01<<DMA_CCR_MSIZE_Pos | 0b10<<DMA_CCR_PSIZE_Pos | DMA_CCR_MINC | DMA_CCR_CIRC ; // 16 bit memory size, 32 bit peripheral size, memory increment mode, circular mode, transfer complete interrupt enable
 800142a:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
 800142e:	61d9      	str	r1, [r3, #28]
	DMA1_Channel2->CPAR = (uint32_t) &(ADC2->DR);
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
	DMA1_Channel2->CMAR = (uint32_t) Adc2DmaReadings;
 8001432:	4a72      	ldr	r2, [pc, #456]	; (80015fc <main+0x4f8>)
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
	DMA1_Channel2->CNDTR = 2;
 8001436:	f8c3 b020 	str.w	fp, [r3, #32]
	DMA1_Channel2->CCR |= DMA_CCR_EN;
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001440:	ea42 0209 	orr.w	r2, r2, r9
 8001444:	61da      	str	r2, [r3, #28]
 8001446:	6039      	str	r1, [r7, #0]
	DMAMUX1_Channel4->CCR = 5;
 8001448:	2105      	movs	r1, #5
 800144a:	f8c3 1810 	str.w	r1, [r3, #2064]	; 0x810
	DMA1_Channel5->CPAR = (uint32_t) &(ADC1->DR);
 800144e:	4a6c      	ldr	r2, [pc, #432]	; (8001600 <main+0x4fc>)
	DMA1_Channel5-> CCR = 0b01<<DMA_CCR_MSIZE_Pos | 0b10<<DMA_CCR_PSIZE_Pos | DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_TCIE; // 16 bit memory size, 32 bit peripheral size, memory increment mode, circular mode, transfer complete interrupt enable
 8001450:	f240 61a2 	movw	r1, #1698	; 0x6a2
 8001454:	6599      	str	r1, [r3, #88]	; 0x58
	DMA1_Channel5->CPAR = (uint32_t) &(ADC1->DR);
 8001456:	661a      	str	r2, [r3, #96]	; 0x60
	DMA1_Channel5->CMAR = (uint32_t) AdcDmaReadings;
 8001458:	4a6a      	ldr	r2, [pc, #424]	; (8001604 <main+0x500>)
 800145a:	665a      	str	r2, [r3, #100]	; 0x64
	DMA1_Channel5->CNDTR = 3;
 800145c:	65de      	str	r6, [r3, #92]	; 0x5c
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 800145e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001460:	ea42 0209 	orr.w	r2, r2, r9
 8001464:	659a      	str	r2, [r3, #88]	; 0x58
	RCC->AHB2ENR |=RCC_AHB2ENR_DAC1EN;
 8001466:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	64e3      	str	r3, [r4, #76]	; 0x4c
	DAC1->CR |= DAC_CR_EN1;
 800146e:	4b66      	ldr	r3, [pc, #408]	; (8001608 <main+0x504>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	ea42 0209 	orr.w	r2, r2, r9
 8001476:	601a      	str	r2, [r3, #0]
	while (!(DAC1->CR & DAC_CR_EN1));
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	f012 0201 	ands.w	r2, r2, #1
 800147e:	9206      	str	r2, [sp, #24]
 8001480:	d0fa      	beq.n	8001478 <main+0x374>
	// int i, j=0;
	static uint32_t prevMotorState=0;
	float offsetAngle = 0;
	//initSysTick();	
	Init();  
	pidUq.Init();
 8001482:	4c62      	ldr	r4, [pc, #392]	; (800160c <main+0x508>)
	DAC1->DHR12R1 = 4095;
 8001484:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001488:	609a      	str	r2, [r3, #8]
	pidUq.Init();
 800148a:	4620      	mov	r0, r4
	pidUq.SetOutputLimits(-1,1);
 800148c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001490:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	pidUq.Init();
 8001494:	f7ff fb00 	bl	8000a98 <_ZN3PID4InitEv>
	pidUq.SetOutputLimits(-1,1);
 8001498:	f7ff fb18 	bl	8000acc <_ZN3PID15SetOutputLimitsEff>
	if (newAuto && !_inAuto)
 800149c:	7863      	ldrb	r3, [r4, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 83db 	beq.w	8001c5a <main+0xb56>
	pidUq.SetMode(PIDMode_TypeDef::_PID_MODE_AUTOMATIC);

	pidUd.Init();
 80014a4:	495a      	ldr	r1, [pc, #360]	; (8001610 <main+0x50c>)
	_inAuto = (PIDMode_TypeDef)newAuto;
 80014a6:	2301      	movs	r3, #1
 80014a8:	4608      	mov	r0, r1
	pidUd.SetOutputLimits(-1,1);
 80014aa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80014ae:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80014b2:	7063      	strb	r3, [r4, #1]
	pidUd.Init();
 80014b4:	f7ff faf0 	bl	8000a98 <_ZN3PID4InitEv>
	pidUd.SetOutputLimits(-1,1);
 80014b8:	f7ff fb08 	bl	8000acc <_ZN3PID15SetOutputLimitsEff>
	if (newAuto && !_inAuto)
 80014bc:	784b      	ldrb	r3, [r1, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 83c8 	beq.w	8001c54 <main+0xb50>
	_inAuto = (PIDMode_TypeDef)newAuto;
 80014c4:	2301      	movs	r3, #1
 80014c6:	704b      	strb	r3, [r1, #1]
		// 	}

	
		

		if(milis-lastPrintTime>=serialPrintInterval)
 80014c8:	4b52      	ldr	r3, [pc, #328]	; (8001614 <main+0x510>)
			// // //static uint16_t filteredAngle;
			// // //filteredAngle += 0.8f * (Adc2DmaReadings[0] - filteredAngle);
			// // //uart.print(filteredAngle);
			// uart.print(",");
			uart.print("angleADC:");
			uart.println(Adc2DmaReadings[0]/11.21111111f);
 80014ca:	ed9f 8a53 	vldr	s16, [pc, #332]	; 8001618 <main+0x514>
		if(milis-lastPrintTime>=serialPrintInterval)
 80014ce:	f8d3 a000 	ldr.w	sl, [r3]
 80014d2:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8001648 <main+0x544>
 80014d6:	4f51      	ldr	r7, [pc, #324]	; (800161c <main+0x518>)
					motor.Udq_pu[1] = 0;
 80014d8:	eddf 8a51 	vldr	s17, [pc, #324]	; 8001620 <main+0x51c>
		if (milis-motorProcessLastTime>=slopeInterval)
 80014dc:	4654      	mov	r4, sl
 80014de:	f04f 0b00 	mov.w	fp, #0
 80014e2:	46c2      	mov	sl, r8
 80014e4:	494f      	ldr	r1, [pc, #316]	; (8001624 <main+0x520>)
 80014e6:	f899 c00b 	ldrb.w	ip, [r9, #11]
 80014ea:	f8d1 e000 	ldr.w	lr, [r1]
 80014ee:	494e      	ldr	r1, [pc, #312]	; (8001628 <main+0x524>)
 80014f0:	f899 300a 	ldrb.w	r3, [r9, #10]
 80014f4:	6808      	ldr	r0, [r1, #0]
 80014f6:	494d      	ldr	r1, [pc, #308]	; (800162c <main+0x528>)
 80014f8:	6809      	ldr	r1, [r1, #0]
 80014fa:	9101      	str	r1, [sp, #4]
 80014fc:	494c      	ldr	r1, [pc, #304]	; (8001630 <main+0x52c>)
 80014fe:	6809      	ldr	r1, [r1, #0]
 8001500:	9100      	str	r1, [sp, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	494b      	ldr	r1, [pc, #300]	; (8001634 <main+0x530>)
 8001506:	e9cd 2202 	strd	r2, r2, [sp, #8]
 800150a:	e9cd 2204 	strd	r2, r2, [sp, #16]
 800150e:	6809      	ldr	r1, [r1, #0]
 8001510:	4666      	mov	r6, ip
 8001512:	4690      	mov	r8, r2
 8001514:	46a4      	mov	ip, r4

public:
	char buffer [bSize];
	bool empty()
	{
		if (tail==head) 
 8001516:	f899 500d 	ldrb.w	r5, [r9, #13]
 800151a:	f899 400c 	ldrb.w	r4, [r9, #12]
 800151e:	42a5      	cmp	r5, r4
 8001520:	d029      	beq.n	8001576 <main+0x472>
bool Serial::readTillEOL (char *_line) // returns 1 if EOL is found, 0 if not, when EOL is found save read data to _line
{
	if (uart.available())
	{		
		
		if(count==0)
 8001522:	b933      	cbnz	r3, 8001532 <main+0x42e>
 8001524:	4c44      	ldr	r4, [pc, #272]	; (8001638 <main+0x534>)
 8001526:	1c65      	adds	r5, r4, #1
 8001528:	4435      	add	r5, r6
		{
				for (int i=0; i<=elementsToFlush; i++)
				{
					char* tempPtr =_line+i;
					*tempPtr = 0;				
 800152a:	f804 bb01 	strb.w	fp, [r4], #1
				for (int i=0; i<=elementsToFlush; i++)
 800152e:	42ac      	cmp	r4, r5
 8001530:	d1fb      	bne.n	800152a <main+0x426>
	return Buffer::status::ok;
	
}
	status read(char* _data)
	{
	if (tail==head) 
 8001532:	f899 500d 	ldrb.w	r5, [r9, #13]
 8001536:	f899 400c 	ldrb.w	r4, [r9, #12]
 800153a:	42a5      	cmp	r5, r4
 800153c:	d010      	beq.n	8001560 <main+0x45c>
		return Buffer::status::bufferEmpty;
		
	*_data=buffer[tail];
 800153e:	f899 400d 	ldrb.w	r4, [r9, #13]
 8001542:	444c      	add	r4, r9
 8001544:	f894 a00e 	ldrb.w	sl, [r4, #14]
	tail++;
 8001548:	f899 400d 	ldrb.w	r4, [r9, #13]
 800154c:	3401      	adds	r4, #1
 800154e:	b2e4      	uxtb	r4, r4
 8001550:	f889 400d 	strb.w	r4, [r9, #13]

	if ( tail == (bSize-1) )
 8001554:	f899 400d 	ldrb.w	r4, [r9, #13]
 8001558:	2cff      	cmp	r4, #255	; 0xff
		tail = 0;
 800155a:	bf08      	it	eq
 800155c:	f889 b00d 	strbeq.w	fp, [r9, #13]
				}							
		}		

		char c = uart.readChar();
		if (c == '\n')
 8001560:	f1ba 0f0a 	cmp.w	sl, #10
		{
			//GPIOA->ODR ^= GPIO_ODR_OD5;
			_line+=count;
			*_line=0;
 8001564:	4c34      	ldr	r4, [pc, #208]	; (8001638 <main+0x534>)
		if (c == '\n')
 8001566:	f000 81e4 	beq.w	8001932 <main+0x82e>
			return 1;
		}
		else
		{
			_line+=count;
			*_line=c;
 800156a:	f804 a003 	strb.w	sl, [r4, r3]
			count++;
 800156e:	3301      	adds	r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f04f 0801 	mov.w	r8, #1
 8001576:	683c      	ldr	r4, [r7, #0]
 8001578:	9d00      	ldr	r5, [sp, #0]
 800157a:	1a24      	subs	r4, r4, r0
 800157c:	42ac      	cmp	r4, r5
 800157e:	d317      	bcc.n	80015b0 <main+0x4ac>
			if (!motorState)
 8001580:	9a01      	ldr	r2, [sp, #4]
 8001582:	2a00      	cmp	r2, #0
 8001584:	f000 81c7 	beq.w	8001916 <main+0x812>
				if (prevMotorState == 0)
 8001588:	2900      	cmp	r1, #0
 800158a:	f000 8347 	beq.w	8001c1c <main+0xb18>
				if ((motorSpeed <setMotorSpeed))
 800158e:	482b      	ldr	r0, [pc, #172]	; (800163c <main+0x538>)
 8001590:	4a2b      	ldr	r2, [pc, #172]	; (8001640 <main+0x53c>)
 8001592:	6801      	ldr	r1, [r0, #0]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	4291      	cmp	r1, r2
 8001598:	f080 8314 	bcs.w	8001bc4 <main+0xac0>
					motorSpeed++;			
 800159c:	6802      	ldr	r2, [r0, #0]
 800159e:	3201      	adds	r2, #1
 80015a0:	6002      	str	r2, [r0, #0]
				prevMotorState = 1;
 80015a2:	9906      	ldr	r1, [sp, #24]
			TIM2loopFlag = false;
 80015a4:	4a27      	ldr	r2, [pc, #156]	; (8001644 <main+0x540>)
 80015a6:	f882 b000 	strb.w	fp, [r2]
			motorProcessLastTime = milis;
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	9202      	str	r2, [sp, #8]
		if(milis-lastPrintTime>=serialPrintInterval)
 80015b0:	683c      	ldr	r4, [r7, #0]
 80015b2:	eba4 040c 	sub.w	r4, r4, ip
 80015b6:	4574      	cmp	r4, lr
 80015b8:	d3ad      	bcc.n	8001516 <main+0x412>
 80015ba:	46b4      	mov	ip, r6
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d045      	beq.n	800164c <main+0x548>
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <main+0x530>)
 80015c2:	6011      	str	r1, [r2, #0]
 80015c4:	e042      	b.n	800164c <main+0x548>
 80015c6:	bf00      	nop
 80015c8:	200000d4 	.word	0x200000d4
 80015cc:	20000008 	.word	0x20000008
 80015d0:	40021000 	.word	0x40021000
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	40001000 	.word	0x40001000
 80015e0:	10624dd3 	.word	0x10624dd3
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	08003090 	.word	0x08003090
 80015f0:	50000100 	.word	0x50000100
 80015f4:	50000140 	.word	0x50000140
 80015f8:	40020000 	.word	0x40020000
 80015fc:	200000e8 	.word	0x200000e8
 8001600:	50000040 	.word	0x50000040
 8001604:	200000ec 	.word	0x200000ec
 8001608:	50000800 	.word	0x50000800
 800160c:	20000304 	.word	0x20000304
 8001610:	200002c4 	.word	0x200002c4
 8001614:	200000f4 	.word	0x200000f4
 8001618:	3db6ad09 	.word	0x3db6ad09
 800161c:	20000174 	.word	0x20000174
 8001620:	00000000 	.word	0x00000000
 8001624:	20000010 	.word	0x20000010
 8001628:	20000170 	.word	0x20000170
 800162c:	2000017c 	.word	0x2000017c
 8001630:	2000016c 	.word	0x2000016c
 8001634:	20000168 	.word	0x20000168
 8001638:	20000180 	.word	0x20000180
 800163c:	20000164 	.word	0x20000164
 8001640:	20000014 	.word	0x20000014
 8001644:	200000f8 	.word	0x200000f8
 8001648:	200001b4 	.word	0x200001b4
 800164c:	9a03      	ldr	r2, [sp, #12]
 800164e:	2a00      	cmp	r2, #0
 8001650:	f040 82f6 	bne.w	8001c40 <main+0xb3c>
 8001654:	9a02      	ldr	r2, [sp, #8]
 8001656:	b10a      	cbz	r2, 800165c <main+0x558>
 8001658:	4a94      	ldr	r2, [pc, #592]	; (80018ac <main+0x7a8>)
 800165a:	6010      	str	r0, [r2, #0]
 800165c:	9a05      	ldr	r2, [sp, #20]
 800165e:	b112      	cbz	r2, 8001666 <main+0x562>
 8001660:	4a93      	ldr	r2, [pc, #588]	; (80018b0 <main+0x7ac>)
 8001662:	9901      	ldr	r1, [sp, #4]
 8001664:	6011      	str	r1, [r2, #0]
 8001666:	9a04      	ldr	r2, [sp, #16]
 8001668:	b10a      	cbz	r2, 800166e <main+0x56a>
 800166a:	f889 c00b 	strb.w	ip, [r9, #11]
 800166e:	f1b8 0f00 	cmp.w	r8, #0
 8001672:	d001      	beq.n	8001678 <main+0x574>
 8001674:	f889 300a 	strb.w	r3, [r9, #10]
	I2Cx->CR1 |= I2C_CR1_PE; // Enable I2C2 peripheral
}

void I2C::sendByte(uint8_t *_byte, uint8_t _address)
{
	I2Cx->CR2 &= ~(0x1FFFF << 10);
 8001678:	4b8e      	ldr	r3, [pc, #568]	; (80018b4 <main+0x7b0>)
 800167a:	4a8f      	ldr	r2, [pc, #572]	; (80018b8 <main+0x7b4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	400a      	ands	r2, r1
 8001682:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= I2C_CR2_AUTOEND;
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800168a:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 = _address<<1;
 800168c:	226c      	movs	r2, #108	; 0x6c
 800168e:	605a      	str	r2, [r3, #4]
	I2Cx ->CR2 |= 1<<I2C_CR2_NBYTES_Pos; 
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001696:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_START; 
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800169e:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))); // check if TXDR is empty
 80016a0:	699a      	ldr	r2, [r3, #24]
 80016a2:	f012 0f12 	tst.w	r2, #18
 80016a6:	d0fb      	beq.n	80016a0 <main+0x59c>
	I2Cx->TXDR = *_byte; // Send data to I2C
 80016a8:	220e      	movs	r2, #14
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(I2Cx->ISR & I2C_ISR_TC));
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	0651      	lsls	r1, r2, #25
 80016b0:	d5fc      	bpl.n	80016ac <main+0x5a8>
	//I2Cx->CR2 |= I2C_CR2_STOP; // Generate stop condition //nie trzxa
}

uint8_t I2C::recieveByte (uint8_t _address)
{
	I2Cx -> CR2 = _address<<1;
 80016b2:	226c      	movs	r2, #108	; 0x6c
 80016b4:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= 1 << I2C_CR2_NBYTES_Pos; 
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016bc:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_RD_WRN | I2C_CR2_START;
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80016c4:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & I2C_ISR_RXNE)); 
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	0752      	lsls	r2, r2, #29
 80016ca:	d5fc      	bpl.n	80016c6 <main+0x5c2>
	uint8_t recievedByte = I2Cx->RXDR;
 80016cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	I2Cx -> CR2 = _address<<1;
 80016ce:	226c      	movs	r2, #108	; 0x6c
 80016d0:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= 1 << I2C_CR2_NBYTES_Pos; 
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016d8:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_RD_WRN | I2C_CR2_START;
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80016e0:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & I2C_ISR_RXNE)); 
 80016e2:	699a      	ldr	r2, [r3, #24]
 80016e4:	0756      	lsls	r6, r2, #29
 80016e6:	d5fc      	bpl.n	80016e2 <main+0x5de>
	USARTx->TDR = _char;
 80016e8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80016ec:	4973      	ldr	r1, [pc, #460]	; (80018bc <main+0x7b8>)
	uint8_t recievedByte = I2Cx->RXDR;
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	while (*_string)
 80016f0:	2374      	movs	r3, #116	; 0x74
	USARTx->TDR = _char;
 80016f2:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80016f4:	69d3      	ldr	r3, [r2, #28]
 80016f6:	065d      	lsls	r5, r3, #25
 80016f8:	d5fc      	bpl.n	80016f4 <main+0x5f0>
	while (*_string)
 80016fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f7      	bne.n	80016f2 <main+0x5ee>
			uart.print((int)milis);
 8001702:	6838      	ldr	r0, [r7, #0]
 8001704:	f7ff fa12 	bl	8000b2c <_ZN6Serial5printEi.constprop.0>
	USARTx->TDR = _char;
 8001708:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800170c:	222c      	movs	r2, #44	; 0x2c
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001710:	69da      	ldr	r2, [r3, #28]
 8001712:	0654      	lsls	r4, r2, #25
 8001714:	d5fc      	bpl.n	8001710 <main+0x60c>
 8001716:	496a      	ldr	r1, [pc, #424]	; (80018c0 <main+0x7bc>)
	while (*_string)
 8001718:	2273      	movs	r2, #115	; 0x73
	USARTx->TDR = _char;
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800171c:	69da      	ldr	r2, [r3, #28]
 800171e:	0650      	lsls	r0, r2, #25
 8001720:	d5fc      	bpl.n	800171c <main+0x618>
	while (*_string)
 8001722:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001726:	2a00      	cmp	r2, #0
 8001728:	d1f7      	bne.n	800171a <main+0x616>
			uart.print((int)motorSpeed);
 800172a:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <main+0x7c0>)
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	f7ff f9fd 	bl	8000b2c <_ZN6Serial5printEi.constprop.0>
	USARTx->TDR = _char;
 8001732:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001736:	222c      	movs	r2, #44	; 0x2c
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	0652      	lsls	r2, r2, #25
 800173e:	d5fc      	bpl.n	800173a <main+0x636>
 8001740:	4961      	ldr	r1, [pc, #388]	; (80018c8 <main+0x7c4>)
	while (*_string)
 8001742:	2266      	movs	r2, #102	; 0x66
	USARTx->TDR = _char;
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001746:	69da      	ldr	r2, [r3, #28]
 8001748:	0656      	lsls	r6, r2, #25
 800174a:	d5fc      	bpl.n	8001746 <main+0x642>
	while (*_string)
 800174c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001750:	2a00      	cmp	r2, #0
 8001752:	d1f7      	bne.n	8001744 <main+0x640>
	typeConverter::fractionalToString(_number, charTab, _percision);
 8001754:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <main+0x7c8>)
	char charTab[20]={};
 8001756:	9218      	str	r2, [sp, #96]	; 0x60
	typeConverter::fractionalToString(_number, charTab, _percision);
 8001758:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
 800175c:	a814      	add	r0, sp, #80	; 0x50
	char charTab[20]={};
 800175e:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 8001762:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
	typeConverter::fractionalToString(_number, charTab, _percision);
 8001766:	f7ff fa4b 	bl	8000c00 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0>
	while (*_string)
 800176a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
	USARTx->TDR = _char;
 800176e:	f8d9 3004 	ldr.w	r3, [r9, #4]
	while (*_string)
 8001772:	b142      	cbz	r2, 8001786 <main+0x682>
	USARTx->TDR = _char;
 8001774:	a914      	add	r1, sp, #80	; 0x50
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	0655      	lsls	r5, r2, #25
 800177c:	d5fc      	bpl.n	8001778 <main+0x674>
	while (*_string)
 800177e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001782:	2a00      	cmp	r2, #0
 8001784:	d1f7      	bne.n	8001776 <main+0x672>
	USARTx->TDR = _char;
 8001786:	222c      	movs	r2, #44	; 0x2c
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	0654      	lsls	r4, r2, #25
 800178e:	d5fc      	bpl.n	800178a <main+0x686>
 8001790:	494f      	ldr	r1, [pc, #316]	; (80018d0 <main+0x7cc>)
	while (*_string)
 8001792:	2266      	movs	r2, #102	; 0x66
	USARTx->TDR = _char;
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001796:	69da      	ldr	r2, [r3, #28]
 8001798:	0650      	lsls	r0, r2, #25
 800179a:	d5fc      	bpl.n	8001796 <main+0x692>
	while (*_string)
 800179c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d1f7      	bne.n	8001794 <main+0x690>
	typeConverter::fractionalToString(_number, charTab, _percision);
 80017a4:	4b49      	ldr	r3, [pc, #292]	; (80018cc <main+0x7c8>)
	char charTab[20]={};
 80017a6:	9218      	str	r2, [sp, #96]	; 0x60
	typeConverter::fractionalToString(_number, charTab, _percision);
 80017a8:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
 80017ac:	a814      	add	r0, sp, #80	; 0x50
	char charTab[20]={};
 80017ae:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 80017b2:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
	typeConverter::fractionalToString(_number, charTab, _percision);
 80017b6:	f7ff fa23 	bl	8000c00 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0>
	while (*_string)
 80017ba:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
	USARTx->TDR = _char;
 80017be:	f8d9 3004 	ldr.w	r3, [r9, #4]
	while (*_string)
 80017c2:	b142      	cbz	r2, 80017d6 <main+0x6d2>
	USARTx->TDR = _char;
 80017c4:	a914      	add	r1, sp, #80	; 0x50
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	0652      	lsls	r2, r2, #25
 80017cc:	d5fc      	bpl.n	80017c8 <main+0x6c4>
	while (*_string)
 80017ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d1f7      	bne.n	80017c6 <main+0x6c2>
	USARTx->TDR = _char;
 80017d6:	222c      	movs	r2, #44	; 0x2c
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	0656      	lsls	r6, r2, #25
 80017de:	d5fc      	bpl.n	80017da <main+0x6d6>
 80017e0:	493c      	ldr	r1, [pc, #240]	; (80018d4 <main+0x7d0>)
	while (*_string)
 80017e2:	2249      	movs	r2, #73	; 0x49
	USARTx->TDR = _char;
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80017e6:	69da      	ldr	r2, [r3, #28]
 80017e8:	0655      	lsls	r5, r2, #25
 80017ea:	d5fc      	bpl.n	80017e6 <main+0x6e2>
	while (*_string)
 80017ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80017f0:	2a00      	cmp	r2, #0
 80017f2:	d1f7      	bne.n	80017e4 <main+0x6e0>
			uart.print(AdcDmaReadings[0]);
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <main+0x7d4>)
 80017f6:	8818      	ldrh	r0, [r3, #0]
 80017f8:	b280      	uxth	r0, r0
 80017fa:	f7ff f997 	bl	8000b2c <_ZN6Serial5printEi.constprop.0>
	USARTx->TDR = _char;
 80017fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001802:	222c      	movs	r2, #44	; 0x2c
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	0654      	lsls	r4, r2, #25
 800180a:	d5fc      	bpl.n	8001806 <main+0x702>
 800180c:	4933      	ldr	r1, [pc, #204]	; (80018dc <main+0x7d8>)
	while (*_string)
 800180e:	2249      	movs	r2, #73	; 0x49
	USARTx->TDR = _char;
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001812:	69da      	ldr	r2, [r3, #28]
 8001814:	0650      	lsls	r0, r2, #25
 8001816:	d5fc      	bpl.n	8001812 <main+0x70e>
	while (*_string)
 8001818:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800181c:	2a00      	cmp	r2, #0
 800181e:	d1f7      	bne.n	8001810 <main+0x70c>
			uart.print(AdcDmaReadings[1]); 
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <main+0x7d4>)
 8001822:	8858      	ldrh	r0, [r3, #2]
 8001824:	b280      	uxth	r0, r0
 8001826:	f7ff f981 	bl	8000b2c <_ZN6Serial5printEi.constprop.0>
	USARTx->TDR = _char;
 800182a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800182e:	222c      	movs	r2, #44	; 0x2c
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	0652      	lsls	r2, r2, #25
 8001836:	d5fc      	bpl.n	8001832 <main+0x72e>
 8001838:	4929      	ldr	r1, [pc, #164]	; (80018e0 <main+0x7dc>)
	while (*_string)
 800183a:	2249      	movs	r2, #73	; 0x49
	USARTx->TDR = _char;
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	0656      	lsls	r6, r2, #25
 8001842:	d5fc      	bpl.n	800183e <main+0x73a>
	while (*_string)
 8001844:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001848:	2a00      	cmp	r2, #0
 800184a:	d1f7      	bne.n	800183c <main+0x738>
			uart.print(AdcDmaReadings[2]);
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <main+0x7d4>)
 800184e:	8898      	ldrh	r0, [r3, #4]
 8001850:	b280      	uxth	r0, r0
 8001852:	f7ff f96b 	bl	8000b2c <_ZN6Serial5printEi.constprop.0>
	USARTx->TDR = _char;
 8001856:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800185a:	222c      	movs	r2, #44	; 0x2c
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	0655      	lsls	r5, r2, #25
 8001862:	d5fc      	bpl.n	800185e <main+0x75a>
 8001864:	491f      	ldr	r1, [pc, #124]	; (80018e4 <main+0x7e0>)
	while (*_string)
 8001866:	2261      	movs	r2, #97	; 0x61
	USARTx->TDR = _char;
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800186a:	69da      	ldr	r2, [r3, #28]
 800186c:	0654      	lsls	r4, r2, #25
 800186e:	d5fc      	bpl.n	800186a <main+0x766>
	while (*_string)
 8001870:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001874:	2a00      	cmp	r2, #0
 8001876:	d1f7      	bne.n	8001868 <main+0x764>
			uart.println(Adc2DmaReadings[0]/11.21111111f);
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <main+0x7e4>)
	char charTab[20]={};
 800187a:	9218      	str	r2, [sp, #96]	; 0x60
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	typeConverter::fractionalToString(_number, charTab, _percision);
 8001888:	a814      	add	r0, sp, #80	; 0x50
 800188a:	ee20 0a08 	vmul.f32	s0, s0, s16
	char charTab[20]={};
 800188e:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 8001892:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
	typeConverter::fractionalToString(_number, charTab, _percision);
 8001896:	f7ff f9b3 	bl	8000c00 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0>
	while (*_string)
 800189a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
	USARTx->TDR = _char;
 800189e:	f8d9 3004 	ldr.w	r3, [r9, #4]
	while (*_string)
 80018a2:	b352      	cbz	r2, 80018fa <main+0x7f6>
	USARTx->TDR = _char;
 80018a4:	a914      	add	r1, sp, #80	; 0x50
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
 80018a8:	e020      	b.n	80018ec <main+0x7e8>
 80018aa:	bf00      	nop
 80018ac:	20000170 	.word	0x20000170
 80018b0:	2000017c 	.word	0x2000017c
 80018b4:	200000e4 	.word	0x200000e4
 80018b8:	f80003ff 	.word	0xf80003ff
 80018bc:	0800309c 	.word	0x0800309c
 80018c0:	080030a8 	.word	0x080030a8
 80018c4:	20000164 	.word	0x20000164
 80018c8:	080030b0 	.word	0x080030b0
 80018cc:	200000fc 	.word	0x200000fc
 80018d0:	080030bc 	.word	0x080030bc
 80018d4:	080030c8 	.word	0x080030c8
 80018d8:	200000ec 	.word	0x200000ec
 80018dc:	080030cc 	.word	0x080030cc
 80018e0:	080030d0 	.word	0x080030d0
 80018e4:	080030d4 	.word	0x080030d4
 80018e8:	200000e8 	.word	0x200000e8
	while(!(USARTx->ISR & USART_ISR_TC));
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	0650      	lsls	r0, r2, #25
 80018f0:	d5fc      	bpl.n	80018ec <main+0x7e8>
	while (*_string)
 80018f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80018f6:	2a00      	cmp	r2, #0
 80018f8:	d1d5      	bne.n	80018a6 <main+0x7a2>
	USARTx->TDR = _char;
 80018fa:	220a      	movs	r2, #10
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	0652      	lsls	r2, r2, #25
 8001902:	d5fc      	bpl.n	80018fe <main+0x7fa>
			// uart.print(angleEnc/11.375f);
			// uart.print(",");
			// uart.print("sumIabc:");
			// uart.println(motor.Iabc_A[0]+motor.Iabc_A[1]+motor.Iabc_A[2]);
			// led4.toggle();
			lastPrintTime = milis;		
 8001904:	4b9d      	ldr	r3, [pc, #628]	; (8001b7c <main+0xa78>)
 8001906:	683c      	ldr	r4, [r7, #0]
 8001908:	601c      	str	r4, [r3, #0]
 800190a:	e5eb      	b.n	80014e4 <main+0x3e0>
		if (milis-motorProcessLastTime>=slopeInterval)
 800190c:	2301      	movs	r3, #1
 800190e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001912:	4698      	mov	r8, r3
			count=0;
 8001914:	2300      	movs	r3, #0
				if (prevMotorState)
 8001916:	2900      	cmp	r1, #0
 8001918:	f040 8168 	bne.w	8001bec <main+0xae8>
				if (motorSpeed > 5)
 800191c:	4998      	ldr	r1, [pc, #608]	; (8001b80 <main+0xa7c>)
 800191e:	680a      	ldr	r2, [r1, #0]
 8001920:	2a05      	cmp	r2, #5
 8001922:	f240 815a 	bls.w	8001bda <main+0xad6>
					motorSpeed--;
 8001926:	680a      	ldr	r2, [r1, #0]
 8001928:	3a01      	subs	r2, #1
 800192a:	600a      	str	r2, [r1, #0]
 800192c:	2100      	movs	r1, #0
 800192e:	9101      	str	r1, [sp, #4]
 8001930:	e638      	b.n	80015a4 <main+0x4a0>
			*_line=0;
 8001932:	f804 b003 	strb.w	fp, [r4, r3]
			if (UARTrxData[0] == '0')
 8001936:	7824      	ldrb	r4, [r4, #0]
 8001938:	2c30      	cmp	r4, #48	; 0x30
 800193a:	f000 810f 	beq.w	8001b5c <main+0xa58>
			else if (UARTrxData[0] == '1')
 800193e:	3c31      	subs	r4, #49	; 0x31
 8001940:	2c46      	cmp	r4, #70	; 0x46
 8001942:	d857      	bhi.n	80019f4 <main+0x8f0>
 8001944:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001948:	005600fa 	.word	0x005600fa
 800194c:	00560056 	.word	0x00560056
 8001950:	00560056 	.word	0x00560056
 8001954:	00560056 	.word	0x00560056
 8001958:	00560056 	.word	0x00560056
 800195c:	00560056 	.word	0x00560056
 8001960:	00560056 	.word	0x00560056
 8001964:	00560056 	.word	0x00560056
 8001968:	00560056 	.word	0x00560056
 800196c:	00560056 	.word	0x00560056
 8001970:	00560056 	.word	0x00560056
 8001974:	00560056 	.word	0x00560056
 8001978:	00560056 	.word	0x00560056
 800197c:	00560056 	.word	0x00560056
 8001980:	00560056 	.word	0x00560056
 8001984:	00560056 	.word	0x00560056
 8001988:	00560056 	.word	0x00560056
 800198c:	00560056 	.word	0x00560056
 8001990:	00560056 	.word	0x00560056
 8001994:	00560056 	.word	0x00560056
 8001998:	00560056 	.word	0x00560056
 800199c:	00560056 	.word	0x00560056
 80019a0:	00560056 	.word	0x00560056
 80019a4:	00560056 	.word	0x00560056
 80019a8:	00560056 	.word	0x00560056
 80019ac:	00d70056 	.word	0x00d70056
 80019b0:	00560056 	.word	0x00560056
 80019b4:	00560056 	.word	0x00560056
 80019b8:	00560056 	.word	0x00560056
 80019bc:	00560056 	.word	0x00560056
 80019c0:	005600cd 	.word	0x005600cd
 80019c4:	00c30056 	.word	0x00c30056
 80019c8:	005600ab 	.word	0x005600ab
 80019cc:	008500a6 	.word	0x008500a6
 80019d0:	00660056 	.word	0x00660056
 80019d4:	005c      	.short	0x005c
			else if (*_string == '-')
 80019d6:	2d2d      	cmp	r5, #45	; 0x2d
 80019d8:	f000 80e5 	beq.w	8001ba6 <main+0xaa2>
		if (negative)
 80019dc:	9d04      	ldr	r5, [sp, #16]
 80019de:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80019e2:	b105      	cbz	r5, 80019e6 <main+0x8e2>
			return -number;
 80019e4:	4264      	negs	r4, r4
					setiQ = typeConverter::stringToInt(UARTrxData+1);
 80019e6:	ee07 4a90 	vmov	s15, r4
 80019ea:	4c66      	ldr	r4, [pc, #408]	; (8001b84 <main+0xa80>)
 80019ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f0:	edc4 7a00 	vstr	s15, [r4]
			elementsToFlush=count;
 80019f4:	461e      	mov	r6, r3
 80019f6:	2301      	movs	r3, #1
 80019f8:	9304      	str	r3, [sp, #16]
 80019fa:	4698      	mov	r8, r3
			count=0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e5ba      	b.n	8001576 <main+0x472>
					setMotorSpeed -= 5;
 8001a00:	4d61      	ldr	r5, [pc, #388]	; (8001b88 <main+0xa84>)
 8001a02:	682c      	ldr	r4, [r5, #0]
			elementsToFlush=count;
 8001a04:	461e      	mov	r6, r3
 8001a06:	3c05      	subs	r4, #5
 8001a08:	2301      	movs	r3, #1
 8001a0a:	9304      	str	r3, [sp, #16]
 8001a0c:	4698      	mov	r8, r3
 8001a0e:	602c      	str	r4, [r5, #0]
			count=0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e5b0      	b.n	8001576 <main+0x472>
		while (*_string && isNumber) 
 8001a14:	4c5d      	ldr	r4, [pc, #372]	; (8001b8c <main+0xa88>)
 8001a16:	7864      	ldrb	r4, [r4, #1]
		int number = 0;
 8001a18:	4625      	mov	r5, r4
		while (*_string && isNumber) 
 8001a1a:	b1bc      	cbz	r4, 8001a4c <main+0x948>
       	bool negative = false;
 8001a1c:	2500      	movs	r5, #0
		while (*_string && isNumber) 
 8001a1e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8001b98 <main+0xa94>
       	bool negative = false;
 8001a22:	9504      	str	r5, [sp, #16]
		int number = 0;
 8001a24:	f8cd c01c 	str.w	ip, [sp, #28]
			int digit = *_string - '0';
 8001a28:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
			if (digit>=0 && digit<=9)			
 8001a2c:	2e09      	cmp	r6, #9
				number = number * 10 + digit;
 8001a2e:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
			if (digit>=0 && digit<=9)			
 8001a32:	f200 80bb 	bhi.w	8001bac <main+0xaa8>
				number = number * 10 + digit;
 8001a36:	eb06 054c 	add.w	r5, r6, ip, lsl #1
		while (*_string && isNumber) 
 8001a3a:	f818 4f01 	ldrb.w	r4, [r8, #1]!
 8001a3e:	2c00      	cmp	r4, #0
 8001a40:	d1f2      	bne.n	8001a28 <main+0x924>
		if (negative)
 8001a42:	9c04      	ldr	r4, [sp, #16]
 8001a44:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8001a48:	b104      	cbz	r4, 8001a4c <main+0x948>
			return -number;
 8001a4a:	426d      	negs	r5, r5
					setMotorSpeed = typeConverter::stringToInt(UARTrxData+1);
 8001a4c:	4c4e      	ldr	r4, [pc, #312]	; (8001b88 <main+0xa84>)
 8001a4e:	6025      	str	r5, [r4, #0]
 8001a50:	e7d0      	b.n	80019f4 <main+0x8f0>
		while (*_string && isNumber) 
 8001a52:	4c4e      	ldr	r4, [pc, #312]	; (8001b8c <main+0xa88>)
 8001a54:	7864      	ldrb	r4, [r4, #1]
		int number = 0;
 8001a56:	46a6      	mov	lr, r4
		while (*_string && isNumber) 
 8001a58:	b1ac      	cbz	r4, 8001a86 <main+0x982>
       	bool negative = false;
 8001a5a:	2500      	movs	r5, #0
		while (*_string && isNumber) 
 8001a5c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8001b98 <main+0xa94>
       	bool negative = false;
 8001a60:	9503      	str	r5, [sp, #12]
		int number = 0;
 8001a62:	46ae      	mov	lr, r5
			int digit = *_string - '0';
 8001a64:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
			if (digit>=0 && digit<=9)			
 8001a68:	2d09      	cmp	r5, #9
				number = number * 10 + digit;
 8001a6a:	eb0e 068e 	add.w	r6, lr, lr, lsl #2
			if (digit>=0 && digit<=9)			
 8001a6e:	f200 80a3 	bhi.w	8001bb8 <main+0xab4>
				number = number * 10 + digit;
 8001a72:	eb05 0e46 	add.w	lr, r5, r6, lsl #1
		while (*_string && isNumber) 
 8001a76:	f818 4f01 	ldrb.w	r4, [r8, #1]!
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d1f2      	bne.n	8001a64 <main+0x960>
		if (negative)
 8001a7e:	9c03      	ldr	r4, [sp, #12]
 8001a80:	b10c      	cbz	r4, 8001a86 <main+0x982>
			return -number;
 8001a82:	f1ce 0e00 	rsb	lr, lr, #0
			elementsToFlush=count;
 8001a86:	461e      	mov	r6, r3
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001a8e:	4698      	mov	r8, r3
			count=0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e570      	b.n	8001576 <main+0x472>
					setMotorSpeed += 50;
 8001a94:	4d3c      	ldr	r5, [pc, #240]	; (8001b88 <main+0xa84>)
 8001a96:	682c      	ldr	r4, [r5, #0]
 8001a98:	3432      	adds	r4, #50	; 0x32
 8001a9a:	602c      	str	r4, [r5, #0]
 8001a9c:	e7aa      	b.n	80019f4 <main+0x8f0>
		while (*_string && isNumber) 
 8001a9e:	4c3b      	ldr	r4, [pc, #236]	; (8001b8c <main+0xa88>)
 8001aa0:	7865      	ldrb	r5, [r4, #1]
		int number = 0;
 8001aa2:	462c      	mov	r4, r5
		while (*_string && isNumber) 
 8001aa4:	2d00      	cmp	r5, #0
 8001aa6:	d09e      	beq.n	80019e6 <main+0x8e2>
       	bool negative = false;
 8001aa8:	2400      	movs	r4, #0
		while (*_string && isNumber) 
 8001aaa:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8001b98 <main+0xa94>
       	bool negative = false;
 8001aae:	9404      	str	r4, [sp, #16]
		int number = 0;
 8001ab0:	f8cd c01c 	str.w	ip, [sp, #28]
			int digit = *_string - '0';
 8001ab4:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
			if (digit>=0 && digit<=9)			
 8001ab8:	2e09      	cmp	r6, #9
				number = number * 10 + digit;
 8001aba:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
			if (digit>=0 && digit<=9)			
 8001abe:	d88a      	bhi.n	80019d6 <main+0x8d2>
				number = number * 10 + digit;
 8001ac0:	eb06 044c 	add.w	r4, r6, ip, lsl #1
		while (*_string && isNumber) 
 8001ac4:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8001ac8:	2d00      	cmp	r5, #0
 8001aca:	d1f3      	bne.n	8001ab4 <main+0x9b0>
 8001acc:	e786      	b.n	80019dc <main+0x8d8>
					setiQ +=1;
 8001ace:	4c2d      	ldr	r4, [pc, #180]	; (8001b84 <main+0xa80>)
 8001ad0:	edd4 7a00 	vldr	s15, [r4]
 8001ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ad8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001adc:	edc4 7a00 	vstr	s15, [r4]
 8001ae0:	e788      	b.n	80019f4 <main+0x8f0>
					setiQ -=1;
 8001ae2:	4c28      	ldr	r4, [pc, #160]	; (8001b84 <main+0xa80>)
 8001ae4:	edd4 7a00 	vldr	s15, [r4]
 8001ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001af0:	edc4 7a00 	vstr	s15, [r4]
 8001af4:	e77e      	b.n	80019f4 <main+0x8f0>
 8001af6:	4c25      	ldr	r4, [pc, #148]	; (8001b8c <main+0xa88>)
 8001af8:	7865      	ldrb	r5, [r4, #1]
		int number = 0;
 8001afa:	462c      	mov	r4, r5
		while (*_string && isNumber) 
 8001afc:	b1b5      	cbz	r5, 8001b2c <main+0xa28>
       	bool negative = false;
 8001afe:	2400      	movs	r4, #0
		while (*_string && isNumber) 
 8001b00:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001b98 <main+0xa94>
       	bool negative = false;
 8001b04:	9404      	str	r4, [sp, #16]
		int number = 0;
 8001b06:	f8cd c01c 	str.w	ip, [sp, #28]
			int digit = *_string - '0';
 8001b0a:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
			if (digit>=0 && digit<=9)			
 8001b0e:	2e09      	cmp	r6, #9
				number = number * 10 + digit;
 8001b10:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
			if (digit>=0 && digit<=9)			
 8001b14:	d842      	bhi.n	8001b9c <main+0xa98>
				number = number * 10 + digit;
 8001b16:	eb06 044c 	add.w	r4, r6, ip, lsl #1
		while (*_string && isNumber) 
 8001b1a:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8001b1e:	2d00      	cmp	r5, #0
 8001b20:	d1f3      	bne.n	8001b0a <main+0xa06>
		if (negative)
 8001b22:	9d04      	ldr	r5, [sp, #16]
 8001b24:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8001b28:	b105      	cbz	r5, 8001b2c <main+0xa28>
			return -number;
 8001b2a:	4264      	negs	r4, r4
					setiD = typeConverter::stringToInt(UARTrxData+1);
 8001b2c:	ee07 4a90 	vmov	s15, r4
 8001b30:	4c17      	ldr	r4, [pc, #92]	; (8001b90 <main+0xa8c>)
 8001b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b36:	edc4 7a00 	vstr	s15, [r4]
 8001b3a:	e75b      	b.n	80019f4 <main+0x8f0>
		if (milis-motorProcessLastTime>=slopeInterval)
 8001b3c:	4c15      	ldr	r4, [pc, #84]	; (8001b94 <main+0xa90>)
 8001b3e:	683d      	ldr	r5, [r7, #0]
 8001b40:	6824      	ldr	r4, [r4, #0]
 8001b42:	1a2d      	subs	r5, r5, r0
			elementsToFlush=count;
 8001b44:	461e      	mov	r6, r3
 8001b46:	42a5      	cmp	r5, r4
 8001b48:	f04f 0301 	mov.w	r3, #1
 8001b4c:	9305      	str	r3, [sp, #20]
 8001b4e:	d27b      	bcs.n	8001c48 <main+0xb44>
					motorState = 1;
 8001b50:	9c06      	ldr	r4, [sp, #24]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001b52:	9304      	str	r3, [sp, #16]
 8001b54:	4698      	mov	r8, r3
					motorState = 1;
 8001b56:	9401      	str	r4, [sp, #4]
			count=0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e529      	b.n	80015b0 <main+0x4ac>
		if (milis-motorProcessLastTime>=slopeInterval)
 8001b5c:	4c0d      	ldr	r4, [pc, #52]	; (8001b94 <main+0xa90>)
 8001b5e:	683d      	ldr	r5, [r7, #0]
 8001b60:	6824      	ldr	r4, [r4, #0]
 8001b62:	1a2d      	subs	r5, r5, r0
 8001b64:	42ac      	cmp	r4, r5
			elementsToFlush=count;
 8001b66:	461e      	mov	r6, r3
 8001b68:	f67f aed0 	bls.w	800190c <main+0x808>
 8001b6c:	2401      	movs	r4, #1
					motorState = 0;
 8001b6e:	2300      	movs	r3, #0
		if (milis-motorProcessLastTime>=slopeInterval)
 8001b70:	9405      	str	r4, [sp, #20]
					motorState = 0;
 8001b72:	9301      	str	r3, [sp, #4]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001b74:	9404      	str	r4, [sp, #16]
 8001b76:	46a0      	mov	r8, r4
 8001b78:	e51a      	b.n	80015b0 <main+0x4ac>
 8001b7a:	bf00      	nop
 8001b7c:	200000f4 	.word	0x200000f4
 8001b80:	20000164 	.word	0x20000164
 8001b84:	20000018 	.word	0x20000018
 8001b88:	20000014 	.word	0x20000014
 8001b8c:	20000180 	.word	0x20000180
 8001b90:	20000178 	.word	0x20000178
 8001b94:	2000016c 	.word	0x2000016c
 8001b98:	20000181 	.word	0x20000181
			else if (*_string == '-')
 8001b9c:	2d2d      	cmp	r5, #45	; 0x2d
 8001b9e:	d1c0      	bne.n	8001b22 <main+0xa1e>
				negative = true;
 8001ba0:	2501      	movs	r5, #1
 8001ba2:	9504      	str	r5, [sp, #16]
 8001ba4:	e7b9      	b.n	8001b1a <main+0xa16>
 8001ba6:	2501      	movs	r5, #1
 8001ba8:	9504      	str	r5, [sp, #16]
 8001baa:	e78b      	b.n	8001ac4 <main+0x9c0>
			else if (*_string == '-')
 8001bac:	2c2d      	cmp	r4, #45	; 0x2d
 8001bae:	f47f af48 	bne.w	8001a42 <main+0x93e>
				negative = true;
 8001bb2:	2401      	movs	r4, #1
 8001bb4:	9404      	str	r4, [sp, #16]
 8001bb6:	e740      	b.n	8001a3a <main+0x936>
			else if (*_string == '-')
 8001bb8:	2c2d      	cmp	r4, #45	; 0x2d
 8001bba:	f47f af60 	bne.w	8001a7e <main+0x97a>
				negative = true;
 8001bbe:	2401      	movs	r4, #1
 8001bc0:	9403      	str	r4, [sp, #12]
 8001bc2:	e758      	b.n	8001a76 <main+0x972>
				else if (motorSpeed > setMotorSpeed)
 8001bc4:	4829      	ldr	r0, [pc, #164]	; (8001c6c <main+0xb68>)
 8001bc6:	4a2a      	ldr	r2, [pc, #168]	; (8001c70 <main+0xb6c>)
 8001bc8:	6801      	ldr	r1, [r0, #0]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	4291      	cmp	r1, r2
 8001bce:	f67f ace8 	bls.w	80015a2 <main+0x49e>
					motorSpeed --;
 8001bd2:	6802      	ldr	r2, [r0, #0]
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	6002      	str	r2, [r0, #0]
 8001bd8:	e4e3      	b.n	80015a2 <main+0x49e>
					motor.Udq_pu[1] = 0;
 8001bda:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <main+0xb70>)
 8001bdc:	edc2 8a0d 	vstr	s17, [r2, #52]	; 0x34
					motor.Udq_pu[0] = 0;
 8001be0:	edc2 8a0c 	vstr	s17, [r2, #48]	; 0x30
					motorSpeed = 0;
 8001be4:	4a21      	ldr	r2, [pc, #132]	; (8001c6c <main+0xb68>)
 8001be6:	f8c2 b000 	str.w	fp, [r2]
 8001bea:	e69f      	b.n	800192c <main+0x828>
	// uint32_t Ub = -0.5f * Ualpha  + M_SQRT3_2 * Ubeta + 500;
	// uint32_t Uc = -0.5f * Ualpha - M_SQRT3_2 * Ubeta + 500;
}
static inline void pwmOutOff(pwm_t* pwm)
{
	pwm->tim->CCR1 = 0;
 8001bec:	4a22      	ldr	r2, [pc, #136]	; (8001c78 <main+0xb74>)
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	f8c2 b034 	str.w	fp, [r2, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 8001bf4:	f8c2 b038 	str.w	fp, [r2, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 8001bf8:	f8c2 b03c 	str.w	fp, [r2, #60]	; 0x3c
	pwm->tim->CCMR1 &= ~(0b1111<< TIM_CCMR1_OC1M_Pos);
 8001bfc:	6991      	ldr	r1, [r2, #24]
 8001bfe:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8001c02:	6191      	str	r1, [r2, #24]
	pwm->tim->CCMR1 &= ~(0b1111<< TIM_CCMR1_OC2M_Pos);
 8001c04:	6991      	ldr	r1, [r2, #24]
 8001c06:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8001c0a:	6191      	str	r1, [r2, #24]
	pwm->tim->CCMR2 &= ~(0b1111<< TIM_CCMR2_OC3M_Pos);
 8001c0c:	69d1      	ldr	r1, [r2, #28]
 8001c0e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8001c12:	61d1      	str	r1, [r2, #28]
					motorSpeed = 0;
 8001c14:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <main+0xb68>)
 8001c16:	f8c2 b000 	str.w	fp, [r2]
 8001c1a:	e67f      	b.n	800191c <main+0x818>
}
static inline void pwmOutOn(pwm_t* pwm)
{
	pwm->tim->CCR1 = 0;
 8001c1c:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <main+0xb74>)
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	6351      	str	r1, [r2, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 8001c22:	6391      	str	r1, [r2, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 8001c24:	63d1      	str	r1, [r2, #60]	; 0x3c
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001c26:	6991      	ldr	r1, [r2, #24]
 8001c28:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 8001c2c:	6191      	str	r1, [r2, #24]
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC2M_Pos | TIM_CCMR1_OC2PE ; // PWM mode 1 channel 2
 8001c2e:	6991      	ldr	r1, [r2, #24]
 8001c30:	f441 41d0 	orr.w	r1, r1, #26624	; 0x6800
 8001c34:	6191      	str	r1, [r2, #24]
	pwm->tim->CCMR2 |= 0b110<< TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC3PE ; // PWM mode 1 channel 3
 8001c36:	69d1      	ldr	r1, [r2, #28]
 8001c38:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 8001c3c:	61d1      	str	r1, [r2, #28]
}
 8001c3e:	e4a6      	b.n	800158e <main+0x48a>
 8001c40:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <main+0xb78>)
 8001c42:	f8c2 e000 	str.w	lr, [r2]
 8001c46:	e505      	b.n	8001654 <main+0x550>
					motorState = 1;
 8001c48:	9a06      	ldr	r2, [sp, #24]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001c4a:	9304      	str	r3, [sp, #16]
 8001c4c:	4698      	mov	r8, r3
					motorState = 1;
 8001c4e:	9201      	str	r2, [sp, #4]
			count=0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e499      	b.n	8001588 <main+0x484>
		Init();
 8001c54:	f7fe ff20 	bl	8000a98 <_ZN3PID4InitEv>
 8001c58:	e434      	b.n	80014c4 <main+0x3c0>
 8001c5a:	f7fe ff1d 	bl	8000a98 <_ZN3PID4InitEv>
 8001c5e:	e421      	b.n	80014a4 <main+0x3a0>
		internalFreqUpdate(targetFreq);
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7fe fecd 	bl	8000a00 <_ZN12ClockManager18internalFreqUpdateEm>
 8001c66:	f7ff bb61 	b.w	800132c <main+0x228>
 8001c6a:	bf00      	nop
 8001c6c:	20000164 	.word	0x20000164
 8001c70:	20000014 	.word	0x20000014
 8001c74:	200000fc 	.word	0x200000fc
 8001c78:	2000001c 	.word	0x2000001c
 8001c7c:	20000010 	.word	0x20000010

08001c80 <DMA1_Channel5_IRQHandler>:


extern "C"
{
	void DMA1_Channel5_IRQHandler() // New current readings ready
	{
 8001c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c82:	ed2d 8b08 	vpush	{d8-d11}
		if (DMA1->ISR & DMA_ISR_TCIF5)
 8001c86:	4b95      	ldr	r3, [pc, #596]	; (8001edc <DMA1_Channel5_IRQHandler+0x25c>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	0391      	lsls	r1, r2, #14
 8001c8c:	d402      	bmi.n	8001c94 <DMA1_Channel5_IRQHandler+0x14>
			pwm_set3Phase_pu(&inverterPWM, motor.Uabc_pu);
			// setPhaseVoltage(setUq, setUd, SetOLangle);	
			led1.reset();
			//setPhaseVoltage(0.5, 0.5, SetOLangle);
		}
	}
 8001c8e:	ecbd 8b08 	vpop	{d8-d11}
 8001c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			led1.set();
 8001c94:	4e92      	ldr	r6, [pc, #584]	; (8001ee0 <DMA1_Channel5_IRQHandler+0x260>)
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001c96:	ed9f 9a93 	vldr	s18, [pc, #588]	; 8001ee4 <DMA1_Channel5_IRQHandler+0x264>
 8001c9a:	6835      	ldr	r5, [r6, #0]
void GPIO::set()
{
	GPIOx->BSRR |= (1<<pin);
 8001c9c:	7930      	ldrb	r0, [r6, #4]
 8001c9e:	69a9      	ldr	r1, [r5, #24]
 8001ca0:	ed9f 6a91 	vldr	s12, [pc, #580]	; 8001ee8 <DMA1_Channel5_IRQHandler+0x268>
static inline void motor_clark (motor_t* motor)
{
	// motor->IalphaBeta_A[0] = motor->Iabc_A[0];
	// motor->IalphaBeta_A[1] = (M_1_SQRT3 * motor->IalphaBeta_A[0]) + (M_2_SQRT3 * motor->Iabc_A[1]);

	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001ca4:	ed9f ba91 	vldr	s22, [pc, #580]	; 8001eec <DMA1_Channel5_IRQHandler+0x26c>
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001ca8:	ed9f 5a91 	vldr	s10, [pc, #580]	; 8001ef0 <DMA1_Channel5_IRQHandler+0x270>
	motor->Iabc_A[0] = iA;
 8001cac:	4c91      	ldr	r4, [pc, #580]	; (8001ef4 <DMA1_Channel5_IRQHandler+0x274>)
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001cae:	eddf 5a92 	vldr	s11, [pc, #584]	; 8001ef8 <DMA1_Channel5_IRQHandler+0x278>
			motor_setThetaRef (&motor, SetOLangle);
 8001cb2:	4f92      	ldr	r7, [pc, #584]	; (8001efc <DMA1_Channel5_IRQHandler+0x27c>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4082      	lsls	r2, r0
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	61aa      	str	r2, [r5, #24]
			DMA1->IFCR |= DMA_IFCR_CTCIF5;
 8001cbc:	685a      	ldr	r2, [r3, #4]
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001cbe:	4990      	ldr	r1, [pc, #576]	; (8001f00 <DMA1_Channel5_IRQHandler+0x280>)
			DMA1->IFCR |= DMA_IFCR_CTCIF5;
 8001cc0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cc4:	605a      	str	r2, [r3, #4]
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001cc6:	880b      	ldrh	r3, [r1, #0]
			AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET,\
 8001cc8:	888a      	ldrh	r2, [r1, #4]
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	ee07 2a90 	vmov	s15, r2
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001cd0:	884a      	ldrh	r2, [r1, #2]
			DAC1->DHR12R1 = AdcDmaReadings[0];
 8001cd2:	8809      	ldrh	r1, [r1, #0]
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001cd4:	b292      	uxth	r2, r2
			AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET,\
 8001cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001cda:	ee07 2a90 	vmov	s15, r2
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001cde:	eef0 6a49 	vmov.f32	s13, s18
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001ce6:	eee7 6a06 	vfma.f32	s13, s14, s12
 8001cea:	b29b      	uxth	r3, r3
			DAC1->DHR12R1 = AdcDmaReadings[0];
 8001cec:	b289      	uxth	r1, r1
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001cee:	eeb0 7a49 	vmov.f32	s14, s18
 8001cf2:	eea7 7a86 	vfma.f32	s14, s15, s12
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001cfe:	ee76 9a87 	vadd.f32	s19, s13, s14
 8001d02:	eea7 9a86 	vfma.f32	s18, s15, s12
			DAC1->DHR12R1 = AdcDmaReadings[0];
 8001d06:	4b7f      	ldr	r3, [pc, #508]	; (8001f04 <DMA1_Channel5_IRQHandler+0x284>)
 8001d08:	eef0 aa69 	vmov.f32	s21, s19
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001d0c:	ee36 8ac7 	vsub.f32	s16, s13, s14
	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001d10:	eed9 aa0b 	vfnms.f32	s21, s18, s22
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001d14:	ee28 8a05 	vmul.f32	s16, s16, s10
	motor->Iabc_A[1] = iB;
 8001d18:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
	motor->Iabc_A[2] = iC;
 8001d1c:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001d20:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
	motor->Iabc_A[0] = iA;
 8001d24:	ed84 9a0e 	vstr	s18, [r4, #56]	; 0x38
	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001d28:	edc4 aa11 	vstr	s21, [r4, #68]	; 0x44
 8001d2c:	6099      	str	r1, [r3, #8]
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001d2e:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <DMA1_Channel5_IRQHandler+0x288>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
			motor_setThetaRef (&motor, SetOLangle);
 8001d32:	ed97 aa00 	vldr	s20, [r7]
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001d40:	eeb0 0a4a 	vmov.f32	s0, s20
 8001d44:	ee67 7aa5 	vmul.f32	s15, s15, s11
	// uint32_t Ub = -0.5f * Ualpha  + M_SQRT3_2 * Ubeta + 500;
	// uint32_t Uc = -0.5f * Ualpha - M_SQRT3_2 * Ubeta + 500;
}
static inline void motor_setThetaRef (motor_t *motor, float	thetaSet)
{
	motor->theta_Rad = thetaSet;
 8001d48:	ed84 aa17 	vstr	s20, [r4, #92]	; 0x5c
 8001d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001d50:	eee9 9a4b 	vfms.f32	s19, s18, s22
 8001d54:	ee17 3a90 	vmov	r3, s15
 8001d58:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8001d5c:	f000 faf6 	bl	800234c <cosf>
 8001d60:	eef0 8a40 	vmov.f32	s17, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001d64:	eeb0 0a4a 	vmov.f32	s0, s20
 8001d68:	f000 fb28 	bl	80023bc <sinf>
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001d6c:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <DMA1_Channel5_IRQHandler+0x28c>)
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001d6e:	eddf 3a68 	vldr	s7, [pc, #416]	; 8001f10 <DMA1_Channel5_IRQHandler+0x290>
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001d72:	edd3 4a00 	vldr	s9, [r3]
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001d76:	edd3 5a00 	vldr	s11, [r3]
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001d7a:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <DMA1_Channel5_IRQHandler+0x294>)
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001d7c:	edd4 6a15 	vldr	s13, [r4, #84]	; 0x54
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001d80:	edd3 7a00 	vldr	s15, [r3]
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001d84:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001d88:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <DMA1_Channel5_IRQHandler+0x298>)
 8001d8a:	ee28 6a28 	vmul.f32	s12, s16, s17
	motor->Idq_A[0] = motor->IalphaBeta_A[0] * cos(motor->theta_Rad) + motor->IalphaBeta_A[1] * sin(motor->theta_Rad);
 8001d8e:	ee28 8a00 	vmul.f32	s16, s16, s0
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001d92:	eea0 6a29 	vfma.f32	s12, s0, s19
	motor->Idq_A[0] = motor->IalphaBeta_A[0] * cos(motor->theta_Rad) + motor->IalphaBeta_A[1] * sin(motor->theta_Rad);
 8001d96:	eeaa 8aa8 	vfma.f32	s16, s21, s17
 8001d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001d9e:	ee38 4a66 	vsub.f32	s8, s16, s13
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001da2:	ee67 7aa3 	vmul.f32	s15, s15, s7
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001da6:	ee36 5a47 	vsub.f32	s10, s12, s14
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001daa:	edc3 7a00 	vstr	s15, [r3]
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001dae:	eea5 7a25 	vfma.f32	s14, s10, s11
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001db2:	eee4 6a24 	vfma.f32	s13, s8, s9
				if (SetOLangle < M_2PI * POLE_PAIRS) 
 8001db6:	edd7 5a00 	vldr	s11, [r7]
 8001dba:	eddf 7a58 	vldr	s15, [pc, #352]	; 8001f1c <DMA1_Channel5_IRQHandler+0x29c>
 8001dbe:	ed84 8a13 	vstr	s16, [r4, #76]	; 0x4c
 8001dc2:	eef4 5ae7 	vcmpe.f32	s11, s15
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001dca:	ed84 6a14 	vstr	s12, [r4, #80]	; 0x50
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001dce:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001dd2:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
				if (SetOLangle < M_2PI * POLE_PAIRS) 
 8001dd6:	d467      	bmi.n	8001ea8 <DMA1_Channel5_IRQHandler+0x228>
					SetOLangle = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	603b      	str	r3, [r7, #0]
			if (motorState )
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <DMA1_Channel5_IRQHandler+0x2a0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	b1b3      	cbz	r3, 8001e10 <DMA1_Channel5_IRQHandler+0x190>
				if (UART5->ISR & USART_ISR_ORE)
 8001de2:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <DMA1_Channel5_IRQHandler+0x2a4>)
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	0712      	lsls	r2, r2, #28
 8001de8:	d467      	bmi.n	8001eba <DMA1_Channel5_IRQHandler+0x23a>
			pidUq.Compute();
 8001dea:	484f      	ldr	r0, [pc, #316]	; (8001f28 <DMA1_Channel5_IRQHandler+0x2a8>)
 8001dec:	f7ff f90e 	bl	800100c <_ZN3PID7ComputeEv.isra.0>
			pidUd.Compute();				
 8001df0:	484e      	ldr	r0, [pc, #312]	; (8001f2c <DMA1_Channel5_IRQHandler+0x2ac>)
 8001df2:	f7ff f90b 	bl	800100c <_ZN3PID7ComputeEv.isra.0>
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001df6:	ed94 8a17 	vldr	s16, [r4, #92]	; 0x5c
  { return __builtin_cosf(__x); }
 8001dfa:	eeb0 0a48 	vmov.f32	s0, s16
 8001dfe:	f000 faa5 	bl	800234c <cosf>
 8001e02:	eef0 8a40 	vmov.f32	s17, s0
  { return __builtin_sinf(__x); }
 8001e06:	eeb0 0a48 	vmov.f32	s0, s16
 8001e0a:	f000 fad7 	bl	80023bc <sinf>
}
void GPIO::reset ()
{
	GPIOx->BSRR |= (1<<(pin+16));
 8001e0e:	6835      	ldr	r5, [r6, #0]
 8001e10:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8001e14:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e18:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001f30 <DMA1_Channel5_IRQHandler+0x2b0>
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001e1c:	4b45      	ldr	r3, [pc, #276]	; (8001f34 <DMA1_Channel5_IRQHandler+0x2b4>)
 8001e1e:	7932      	ldrb	r2, [r6, #4]
 8001e20:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001e26:	ee67 4aa8 	vmul.f32	s9, s15, s17
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001e2a:	ee60 7a67 	vnmul.f32	s15, s0, s15
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001e2e:	eee7 4a00 	vfma.f32	s9, s14, s0
 8001e32:	3210      	adds	r2, #16
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001e34:	eee7 7a28 	vfma.f32	s15, s14, s17
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e38:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8001e3c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001e40:	eeb0 4a66 	vmov.f32	s8, s13
 8001e44:	eea7 4a87 	vfma.f32	s8, s15, s14
	motor->Uabc_pu[2] = -0.5f * motor->UalphaBeta_pu[0] - M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e48:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8001e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e50:	eeb8 5a46 	vcvt.f32.u32	s10, s12
 8001e54:	ee74 5a07 	vadd.f32	s11, s8, s14
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001e58:	ee37 6a87 	vadd.f32	s12, s15, s14
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001e5c:	ee36 7a87 	vadd.f32	s14, s13, s14
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001e60:	ee65 5a85 	vmul.f32	s11, s11, s10
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001e64:	ee26 6a05 	vmul.f32	s12, s12, s10
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001e68:	ee27 7a05 	vmul.f32	s14, s14, s10
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001e6c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001e70:	eebc 6ac6 	vcvt.u32.f32	s12, s12
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001e74:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001e78:	edc3 5a0d 	vstr	s11, [r3, #52]	; 0x34
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001e7c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001e80:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001e84:	edc4 4a0b 	vstr	s9, [r4, #44]	; 0x2c
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001e88:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
	motor->Uabc_pu[0] = motor->UalphaBeta_pu[0];
 8001e8c:	edc4 7a07 	vstr	s15, [r4, #28]
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e90:	ed84 4a08 	vstr	s8, [r4, #32]
	motor->Uabc_pu[2] = -0.5f * motor->UalphaBeta_pu[0] - M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e94:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 8001e98:	69a9      	ldr	r1, [r5, #24]
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	430b      	orrs	r3, r1
 8001ea0:	61ab      	str	r3, [r5, #24]
	}
 8001ea2:	ecbd 8b08 	vpop	{d8-d11}
 8001ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					SetOLangle += velChange;
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ed97 7a00 	vldr	s14, [r7]
 8001eb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eb4:	edc7 7a00 	vstr	s15, [r7]
 8001eb8:	e790      	b.n	8001ddc <DMA1_Channel5_IRQHandler+0x15c>
					led5.set();
 8001eba:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <DMA1_Channel5_IRQHandler+0x2b8>)
 8001ebc:	6811      	ldr	r1, [r2, #0]
	GPIOx->BSRR |= (1<<pin);
 8001ebe:	7915      	ldrb	r5, [r2, #4]
 8001ec0:	6988      	ldr	r0, [r1, #24]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	40aa      	lsls	r2, r5
 8001ec6:	4302      	orrs	r2, r0
 8001ec8:	618a      	str	r2, [r1, #24]
					UART5->ICR |= USART_ICR_ORECF;
 8001eca:	6a1a      	ldr	r2, [r3, #32]
		head=0;
 8001ecc:	491b      	ldr	r1, [pc, #108]	; (8001f3c <DMA1_Channel5_IRQHandler+0x2bc>)
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	621a      	str	r2, [r3, #32]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	730b      	strb	r3, [r1, #12]
		tail=0;
 8001ed8:	734b      	strb	r3, [r1, #13]
}

void Serial::bufferFlush()
{
	buffer.flush();
}
 8001eda:	e786      	b.n	8001dea <DMA1_Channel5_IRQHandler+0x16a>
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	200000cc 	.word	0x200000cc
 8001ee4:	c2040000 	.word	0xc2040000
 8001ee8:	3c88828a 	.word	0x3c88828a
 8001eec:	3f2aaaab 	.word	0x3f2aaaab
 8001ef0:	3f13cd3a 	.word	0x3f13cd3a
 8001ef4:	200000fc 	.word	0x200000fc
 8001ef8:	3db6ad09 	.word	0x3db6ad09
 8001efc:	200000c8 	.word	0x200000c8
 8001f00:	200000ec 	.word	0x200000ec
 8001f04:	50000800 	.word	0x50000800
 8001f08:	200000e8 	.word	0x200000e8
 8001f0c:	20000004 	.word	0x20000004
 8001f10:	37f1933b 	.word	0x37f1933b
 8001f14:	20000164 	.word	0x20000164
 8001f18:	200000c4 	.word	0x200000c4
 8001f1c:	428a3ae7 	.word	0x428a3ae7
 8001f20:	2000017c 	.word	0x2000017c
 8001f24:	40005000 	.word	0x40005000
 8001f28:	20000304 	.word	0x20000304
 8001f2c:	200002c4 	.word	0x200002c4
 8001f30:	3f5db3d7 	.word	0x3f5db3d7
 8001f34:	2000001c 	.word	0x2000001c
 8001f38:	200000bc 	.word	0x200000bc
 8001f3c:	200001b4 	.word	0x200001b4

08001f40 <TIM2_IRQHandler>:
	
	void TIM2_IRQHandler()
	{
		if (TIM2->SR & TIM_SR_UIF)
 8001f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	07d2      	lsls	r2, r2, #31
 8001f48:	d506      	bpl.n	8001f58 <TIM2_IRQHandler+0x18>
		{
			TIM2->SR &= ~TIM_SR_UIF;
 8001f4a:	691a      	ldr	r2, [r3, #16]
			//led3.toggle();
			TIM2loopFlag = true;
 8001f4c:	4903      	ldr	r1, [pc, #12]	; (8001f5c <TIM2_IRQHandler+0x1c>)
			TIM2->SR &= ~TIM_SR_UIF;
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
			TIM2loopFlag = true;
 8001f52:	2001      	movs	r0, #1
			TIM2->SR &= ~TIM_SR_UIF;
 8001f54:	611a      	str	r2, [r3, #16]
			TIM2loopFlag = true;
 8001f56:	7008      	strb	r0, [r1, #0]
		}
	}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200000f8 	.word	0x200000f8

08001f60 <UART5_IRQHandler>:
		if (USARTx->ISR & USART_ISR_RXNE)
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <UART5_IRQHandler+0x38>)
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	69d1      	ldr	r1, [r2, #28]
 8001f66:	0689      	lsls	r1, r1, #26
 8001f68:	d400      	bmi.n	8001f6c <UART5_IRQHandler+0xc>
extern "C"
{
void UART5_IRQHandler()
	{
		uart.interrupt();
	}
 8001f6a:	4770      	bx	lr
			char c = USARTx->RDR;
 8001f6c:	6a51      	ldr	r1, [r2, #36]	; 0x24
	if ((head+1)==tail)
 8001f6e:	7b1a      	ldrb	r2, [r3, #12]
 8001f70:	7b58      	ldrb	r0, [r3, #13]
 8001f72:	3201      	adds	r2, #1
 8001f74:	4282      	cmp	r2, r0
 8001f76:	b2c9      	uxtb	r1, r1
 8001f78:	d0f7      	beq.n	8001f6a <UART5_IRQHandler+0xa>
	buffer[head] = _data;
 8001f7a:	7b18      	ldrb	r0, [r3, #12]
	head++;
 8001f7c:	7b1a      	ldrb	r2, [r3, #12]
 8001f7e:	3201      	adds	r2, #1
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	731a      	strb	r2, [r3, #12]
	if ( head == (bSize-1) )
 8001f84:	7b1a      	ldrb	r2, [r3, #12]
	buffer[head] = _data;
 8001f86:	4418      	add	r0, r3
	if ( head == (bSize-1) )
 8001f88:	2aff      	cmp	r2, #255	; 0xff
		head = 0;
 8001f8a:	bf08      	it	eq
 8001f8c:	2200      	moveq	r2, #0
	buffer[head] = _data;
 8001f8e:	7381      	strb	r1, [r0, #14]
		head = 0;
 8001f90:	bf08      	it	eq
 8001f92:	731a      	strbeq	r2, [r3, #12]
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	200001b4 	.word	0x200001b4

08001f9c <SysTick_Handler>:
		milis++;
 8001f9c:	4a03      	ldr	r2, [pc, #12]	; (8001fac <SysTick_Handler+0x10>)
		TIM6->EGR = TIM_EGR_UG;
 8001f9e:	4904      	ldr	r1, [pc, #16]	; (8001fb0 <SysTick_Handler+0x14>)
		milis++;
 8001fa0:	6813      	ldr	r3, [r2, #0]
		TIM6->EGR = TIM_EGR_UG;
 8001fa2:	2001      	movs	r0, #1
		milis++;
 8001fa4:	4403      	add	r3, r0
 8001fa6:	6013      	str	r3, [r2, #0]
		TIM6->EGR = TIM_EGR_UG;
 8001fa8:	6148      	str	r0, [r1, #20]
	}
 8001faa:	4770      	bx	lr
 8001fac:	20000174 	.word	0x20000174
 8001fb0:	40001000 	.word	0x40001000

08001fb4 <SystemInit>:

void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <SystemInit+0x30>)
	#else
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	#endif

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	DWT->CYCCNT = 0;
 8001fb6:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <SystemInit+0x34>)
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fb8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fbc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001fc4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc8:	6098      	str	r0, [r3, #8]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001fca:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
	DWT->CYCCNT = 0;
 8001fce:	2000      	movs	r0, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001fd0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001fd4:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
	DWT->CYCCNT = 0;
 8001fd8:	6050      	str	r0, [r2, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00
 8001fe8:	e0001000 	.word	0xe0001000

08001fec <_init>:
int __errno;
void *__dso_handle = (void *)&__dso_handle;

void _init(void) {}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop

08001ff0 <_sub_I_65535_0.0>:
 8001ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	2400      	movs	r4, #0
 8001ff8:	2601      	movs	r6, #1
 8001ffa:	4f86      	ldr	r7, [pc, #536]	; (8002214 <_sub_I_65535_0.0+0x224>)
 8001ffc:	9400      	str	r4, [sp, #0]
 8001ffe:	2302      	movs	r3, #2
 8002000:	f04f 0805 	mov.w	r8, #5
 8002004:	461d      	mov	r5, r3
 8002006:	e9cd 6801 	strd	r6, r8, [sp, #4]
 800200a:	461a      	mov	r2, r3
 800200c:	4982      	ldr	r1, [pc, #520]	; (8002218 <_sub_I_65535_0.0+0x228>)
 800200e:	4883      	ldr	r0, [pc, #524]	; (800221c <_sub_I_65535_0.0+0x22c>)
 8002010:	f7fe ff70 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002014:	e9cd 4500 	strd	r4, r5, [sp]
 8002018:	f8cd 8008 	str.w	r8, [sp, #8]
 800201c:	462b      	mov	r3, r5
 800201e:	f04f 0808 	mov.w	r8, #8
 8002022:	4639      	mov	r1, r7
 8002024:	487e      	ldr	r0, [pc, #504]	; (8002220 <_sub_I_65535_0.0+0x230>)
 8002026:	220c      	movs	r2, #12
 8002028:	f7fe ff64 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800202c:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8002030:	462b      	mov	r3, r5
 8002032:	4642      	mov	r2, r8
 8002034:	4639      	mov	r1, r7
 8002036:	487b      	ldr	r0, [pc, #492]	; (8002224 <_sub_I_65535_0.0+0x234>)
 8002038:	9600      	str	r6, [sp, #0]
 800203a:	f7fe ff5b 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800203e:	e9cd 6400 	strd	r6, r4, [sp]
 8002042:	f8cd 8008 	str.w	r8, [sp, #8]
 8002046:	462b      	mov	r3, r5
 8002048:	4639      	mov	r1, r7
 800204a:	4877      	ldr	r0, [pc, #476]	; (8002228 <_sub_I_65535_0.0+0x238>)
 800204c:	f8df 8254 	ldr.w	r8, [pc, #596]	; 80022a4 <_sub_I_65535_0.0+0x2b4>
 8002050:	2209      	movs	r2, #9
 8002052:	f7fe ff4f 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002056:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800205a:	462b      	mov	r3, r5
 800205c:	9400      	str	r4, [sp, #0]
 800205e:	4622      	mov	r2, r4
 8002060:	4872      	ldr	r0, [pc, #456]	; (800222c <_sub_I_65535_0.0+0x23c>)
 8002062:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002066:	f7fe ff45 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800206a:	f04f 0904 	mov.w	r9, #4
 800206e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002072:	462b      	mov	r3, r5
 8002074:	9400      	str	r4, [sp, #0]
 8002076:	4622      	mov	r2, r4
 8002078:	4639      	mov	r1, r7
 800207a:	486d      	ldr	r0, [pc, #436]	; (8002230 <_sub_I_65535_0.0+0x240>)
 800207c:	f7fe ff3a 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002080:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002084:	9400      	str	r4, [sp, #0]
 8002086:	462b      	mov	r3, r5
 8002088:	4639      	mov	r1, r7
 800208a:	486a      	ldr	r0, [pc, #424]	; (8002234 <_sub_I_65535_0.0+0x244>)
 800208c:	220d      	movs	r2, #13
 800208e:	f7fe ff31 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002092:	f04f 0a06 	mov.w	sl, #6
 8002096:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800209a:	9400      	str	r4, [sp, #0]
 800209c:	462b      	mov	r3, r5
 800209e:	4632      	mov	r2, r6
 80020a0:	4639      	mov	r1, r7
 80020a2:	4865      	ldr	r0, [pc, #404]	; (8002238 <_sub_I_65535_0.0+0x248>)
 80020a4:	f7fe ff26 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020a8:	e9cd 4400 	strd	r4, r4, [sp]
 80020ac:	462b      	mov	r3, r5
 80020ae:	4622      	mov	r2, r4
 80020b0:	4641      	mov	r1, r8
 80020b2:	4862      	ldr	r0, [pc, #392]	; (800223c <_sub_I_65535_0.0+0x24c>)
 80020b4:	f8cd a008 	str.w	sl, [sp, #8]
 80020b8:	f7fe ff1c 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020bc:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80020c0:	9400      	str	r4, [sp, #0]
 80020c2:	462b      	mov	r3, r5
 80020c4:	485e      	ldr	r0, [pc, #376]	; (8002240 <_sub_I_65535_0.0+0x250>)
 80020c6:	220a      	movs	r2, #10
 80020c8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80020cc:	f7fe ff12 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020d0:	230c      	movs	r3, #12
 80020d2:	e9cd 4400 	strd	r4, r4, [sp]
 80020d6:	9302      	str	r3, [sp, #8]
 80020d8:	4641      	mov	r1, r8
 80020da:	462b      	mov	r3, r5
 80020dc:	4859      	ldr	r0, [pc, #356]	; (8002244 <_sub_I_65535_0.0+0x254>)
 80020de:	2209      	movs	r2, #9
 80020e0:	f7fe ff08 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80020e8:	9400      	str	r4, [sp, #0]
 80020ea:	4622      	mov	r2, r4
 80020ec:	4856      	ldr	r0, [pc, #344]	; (8002248 <_sub_I_65535_0.0+0x258>)
 80020ee:	2303      	movs	r3, #3
 80020f0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80020f4:	f7fe fefe 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020f8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80020fc:	9400      	str	r4, [sp, #0]
 80020fe:	462a      	mov	r2, r5
 8002100:	4639      	mov	r1, r7
 8002102:	4852      	ldr	r0, [pc, #328]	; (800224c <_sub_I_65535_0.0+0x25c>)
 8002104:	2303      	movs	r3, #3
 8002106:	f7fe fef5 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800210a:	2303      	movs	r3, #3
 800210c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002110:	9400      	str	r4, [sp, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	4639      	mov	r1, r7
 8002116:	484e      	ldr	r0, [pc, #312]	; (8002250 <_sub_I_65535_0.0+0x260>)
 8002118:	f7fe feec 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800211c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002120:	462a      	mov	r2, r5
 8002122:	9400      	str	r4, [sp, #0]
 8002124:	4641      	mov	r1, r8
 8002126:	484b      	ldr	r0, [pc, #300]	; (8002254 <_sub_I_65535_0.0+0x264>)
 8002128:	2303      	movs	r3, #3
 800212a:	f7fe fee3 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800212e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002132:	9400      	str	r4, [sp, #0]
 8002134:	4641      	mov	r1, r8
 8002136:	4848      	ldr	r0, [pc, #288]	; (8002258 <_sub_I_65535_0.0+0x268>)
 8002138:	2303      	movs	r3, #3
 800213a:	220b      	movs	r2, #11
 800213c:	f7fe feda 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002140:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002144:	464a      	mov	r2, r9
 8002146:	9400      	str	r4, [sp, #0]
 8002148:	4633      	mov	r3, r6
 800214a:	4639      	mov	r1, r7
 800214c:	4843      	ldr	r0, [pc, #268]	; (800225c <_sub_I_65535_0.0+0x26c>)
 800214e:	f7fe fed1 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002152:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002156:	4633      	mov	r3, r6
 8002158:	9400      	str	r4, [sp, #0]
 800215a:	4641      	mov	r1, r8
 800215c:	4840      	ldr	r0, [pc, #256]	; (8002260 <_sub_I_65535_0.0+0x270>)
 800215e:	220a      	movs	r2, #10
 8002160:	f7fe fec8 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002164:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002168:	4633      	mov	r3, r6
 800216a:	4639      	mov	r1, r7
 800216c:	9400      	str	r4, [sp, #0]
 800216e:	483d      	ldr	r0, [pc, #244]	; (8002264 <_sub_I_65535_0.0+0x274>)
 8002170:	220b      	movs	r2, #11
 8002172:	f7fe febf 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002176:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800217a:	4633      	mov	r3, r6
 800217c:	4641      	mov	r1, r8
 800217e:	9400      	str	r4, [sp, #0]
 8002180:	4839      	ldr	r0, [pc, #228]	; (8002268 <_sub_I_65535_0.0+0x278>)
 8002182:	2207      	movs	r2, #7
 8002184:	f7fe feb6 	bl	8000ef4 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002188:	4a38      	ldr	r2, [pc, #224]	; (800226c <_sub_I_65535_0.0+0x27c>)
 800218a:	4939      	ldr	r1, [pc, #228]	; (8002270 <_sub_I_65535_0.0+0x280>)
 800218c:	6011      	str	r1, [r2, #0]
 800218e:	4939      	ldr	r1, [pc, #228]	; (8002274 <_sub_I_65535_0.0+0x284>)
 8002190:	4b39      	ldr	r3, [pc, #228]	; (8002278 <_sub_I_65535_0.0+0x288>)
 8002192:	7314      	strb	r4, [r2, #12]
 8002194:	e9c2 1401 	strd	r1, r4, [r2, #4]
 8002198:	7354      	strb	r4, [r2, #13]
 800219a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800219c:	4837      	ldr	r0, [pc, #220]	; (800227c <_sub_I_65535_0.0+0x28c>)
 800219e:	4c38      	ldr	r4, [pc, #224]	; (8002280 <_sub_I_65535_0.0+0x290>)
 80021a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021a4:	659a      	str	r2, [r3, #88]	; 0x58
 80021a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
 80021ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
 80021b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021ba:	6042      	str	r2, [r0, #4]
 80021bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021c0:	60ca      	str	r2, [r1, #12]
 80021c2:	680a      	ldr	r2, [r1, #0]
 80021c4:	482f      	ldr	r0, [pc, #188]	; (8002284 <_sub_I_65535_0.0+0x294>)
 80021c6:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 80021ca:	600a      	str	r2, [r1, #0]
 80021cc:	4a2e      	ldr	r2, [pc, #184]	; (8002288 <_sub_I_65535_0.0+0x298>)
 80021ce:	6002      	str	r2, [r0, #0]
 80021d0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80021d2:	482e      	ldr	r0, [pc, #184]	; (800228c <_sub_I_65535_0.0+0x29c>)
 80021d4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80021d8:	6599      	str	r1, [r3, #88]	; 0x58
 80021da:	6813      	ldr	r3, [r2, #0]
 80021dc:	492c      	ldr	r1, [pc, #176]	; (8002290 <_sub_I_65535_0.0+0x2a0>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	6110      	str	r0, [r2, #16]
 80021e6:	6813      	ldr	r3, [r2, #0]
 80021e8:	482a      	ldr	r0, [pc, #168]	; (8002294 <_sub_I_65535_0.0+0x2a4>)
 80021ea:	4333      	orrs	r3, r6
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	600e      	str	r6, [r1, #0]
 80021f0:	4622      	mov	r2, r4
 80021f2:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <_sub_I_65535_0.0+0x2a8>)
 80021f8:	f7fe fd92 	bl	8000d20 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <_sub_I_65535_0.0+0x2ac>)
 80021fe:	4828      	ldr	r0, [pc, #160]	; (80022a0 <_sub_I_65535_0.0+0x2b0>)
 8002200:	eb04 0209 	add.w	r2, r4, r9
 8002204:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002208:	b004      	add	sp, #16
 800220a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800220e:	f7fe bd87 	b.w	8000d20 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>
 8002212:	bf00      	nop
 8002214:	48000800 	.word	0x48000800
 8002218:	48000c00 	.word	0x48000c00
 800221c:	200000b4 	.word	0x200000b4
 8002220:	200000ac 	.word	0x200000ac
 8002224:	200000a4 	.word	0x200000a4
 8002228:	2000009c 	.word	0x2000009c
 800222c:	20000094 	.word	0x20000094
 8002230:	2000008c 	.word	0x2000008c
 8002234:	20000084 	.word	0x20000084
 8002238:	2000007c 	.word	0x2000007c
 800223c:	20000074 	.word	0x20000074
 8002240:	2000006c 	.word	0x2000006c
 8002244:	20000064 	.word	0x20000064
 8002248:	2000005c 	.word	0x2000005c
 800224c:	20000054 	.word	0x20000054
 8002250:	2000004c 	.word	0x2000004c
 8002254:	20000044 	.word	0x20000044
 8002258:	2000003c 	.word	0x2000003c
 800225c:	200000cc 	.word	0x200000cc
 8002260:	20000034 	.word	0x20000034
 8002264:	2000002c 	.word	0x2000002c
 8002268:	200000bc 	.word	0x200000bc
 800226c:	200001b4 	.word	0x200001b4
 8002270:	0007a120 	.word	0x0007a120
 8002274:	40005000 	.word	0x40005000
 8002278:	40021000 	.word	0x40021000
 800227c:	e000e100 	.word	0xe000e100
 8002280:	2000012c 	.word	0x2000012c
 8002284:	200000e4 	.word	0x200000e4
 8002288:	40007800 	.word	0x40007800
 800228c:	0070276b 	.word	0x0070276b
 8002290:	2000016c 	.word	0x2000016c
 8002294:	200002c4 	.word	0x200002c4
 8002298:	20000178 	.word	0x20000178
 800229c:	20000018 	.word	0x20000018
 80022a0:	20000304 	.word	0x20000304
 80022a4:	48000400 	.word	0x48000400

080022a8 <Reset_Handler>:
 80022a8:	480d      	ldr	r0, [pc, #52]	; (80022e0 <LoopForever+0x2>)
 80022aa:	4685      	mov	sp, r0
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <LoopForever+0x6>)
 80022ae:	490e      	ldr	r1, [pc, #56]	; (80022e8 <LoopForever+0xa>)
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <LoopForever+0xe>)
 80022b2:	2300      	movs	r3, #0
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:
 80022b6:	58d4      	ldr	r4, [r2, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:
 80022bc:	18c4      	adds	r4, r0, r3
 80022be:	428c      	cmp	r4, r1
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LoopForever+0x12>)
 80022c4:	4c0b      	ldr	r4, [pc, #44]	; (80022f4 <LoopForever+0x16>)
 80022c6:	2300      	movs	r3, #0
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:
 80022ce:	42a2      	cmp	r2, r4
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>
 80022d2:	f7ff fe6f 	bl	8001fb4 <SystemInit>
 80022d6:	f000 f811 	bl	80022fc <__libc_init_array>
 80022da:	f7fe ff13 	bl	8001104 <main>

080022de <LoopForever>:
 80022de:	e7fe      	b.n	80022de <LoopForever>
 80022e0:	20020000 	.word	0x20020000
 80022e4:	20000000 	.word	0x20000000
 80022e8:	2000002c 	.word	0x2000002c
 80022ec:	080034b4 	.word	0x080034b4
 80022f0:	2000002c 	.word	0x2000002c
 80022f4:	20000344 	.word	0x20000344

080022f8 <ADC1_2_IRQHandler>:
 80022f8:	e7fe      	b.n	80022f8 <ADC1_2_IRQHandler>
	...

080022fc <__libc_init_array>:
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <__libc_init_array+0x40>)
 8002300:	4d0f      	ldr	r5, [pc, #60]	; (8002340 <__libc_init_array+0x44>)
 8002302:	42ab      	cmp	r3, r5
 8002304:	eba3 0605 	sub.w	r6, r3, r5
 8002308:	d007      	beq.n	800231a <__libc_init_array+0x1e>
 800230a:	10b6      	asrs	r6, r6, #2
 800230c:	2400      	movs	r4, #0
 800230e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002312:	3401      	adds	r4, #1
 8002314:	4798      	blx	r3
 8002316:	42a6      	cmp	r6, r4
 8002318:	d8f9      	bhi.n	800230e <__libc_init_array+0x12>
 800231a:	f7ff fe67 	bl	8001fec <_init>
 800231e:	4d09      	ldr	r5, [pc, #36]	; (8002344 <__libc_init_array+0x48>)
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <__libc_init_array+0x4c>)
 8002322:	1b5e      	subs	r6, r3, r5
 8002324:	42ab      	cmp	r3, r5
 8002326:	ea4f 06a6 	mov.w	r6, r6, asr #2
 800232a:	d006      	beq.n	800233a <__libc_init_array+0x3e>
 800232c:	2400      	movs	r4, #0
 800232e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002332:	3401      	adds	r4, #1
 8002334:	4798      	blx	r3
 8002336:	42a6      	cmp	r6, r4
 8002338:	d8f9      	bhi.n	800232e <__libc_init_array+0x32>
 800233a:	bd70      	pop	{r4, r5, r6, pc}
 800233c:	080034b0 	.word	0x080034b0
 8002340:	080034b0 	.word	0x080034b0
 8002344:	080034b0 	.word	0x080034b0
 8002348:	080034b4 	.word	0x080034b4

0800234c <cosf>:
 800234c:	ee10 3a10 	vmov	r3, s0
 8002350:	4918      	ldr	r1, [pc, #96]	; (80023b4 <cosf+0x68>)
 8002352:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002356:	428a      	cmp	r2, r1
 8002358:	d91b      	bls.n	8002392 <cosf+0x46>
 800235a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800235e:	d302      	bcc.n	8002366 <cosf+0x1a>
 8002360:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002364:	4770      	bx	lr
 8002366:	b500      	push	{lr}
 8002368:	b083      	sub	sp, #12
 800236a:	4668      	mov	r0, sp
 800236c:	f000 f92a 	bl	80025c4 <__ieee754_rem_pio2f>
 8002370:	f000 0003 	and.w	r0, r0, #3
 8002374:	2801      	cmp	r0, #1
 8002376:	eddd 0a01 	vldr	s1, [sp, #4]
 800237a:	ed9d 0a00 	vldr	s0, [sp]
 800237e:	d00c      	beq.n	800239a <cosf+0x4e>
 8002380:	2802      	cmp	r0, #2
 8002382:	d012      	beq.n	80023aa <cosf+0x5e>
 8002384:	b170      	cbz	r0, 80023a4 <cosf+0x58>
 8002386:	2001      	movs	r0, #1
 8002388:	f000 f8d4 	bl	8002534 <__kernel_sinf>
 800238c:	b003      	add	sp, #12
 800238e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002392:	eddf 0a09 	vldr	s1, [pc, #36]	; 80023b8 <cosf+0x6c>
 8002396:	f000 b84b 	b.w	8002430 <__kernel_cosf>
 800239a:	f000 f8cb 	bl	8002534 <__kernel_sinf>
 800239e:	eeb1 0a40 	vneg.f32	s0, s0
 80023a2:	e7f3      	b.n	800238c <cosf+0x40>
 80023a4:	f000 f844 	bl	8002430 <__kernel_cosf>
 80023a8:	e7f0      	b.n	800238c <cosf+0x40>
 80023aa:	f000 f841 	bl	8002430 <__kernel_cosf>
 80023ae:	eeb1 0a40 	vneg.f32	s0, s0
 80023b2:	e7eb      	b.n	800238c <cosf+0x40>
 80023b4:	3f490fd8 	.word	0x3f490fd8
 80023b8:	00000000 	.word	0x00000000

080023bc <sinf>:
 80023bc:	ee10 3a10 	vmov	r3, s0
 80023c0:	4919      	ldr	r1, [pc, #100]	; (8002428 <sinf+0x6c>)
 80023c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023c6:	428a      	cmp	r2, r1
 80023c8:	d91c      	bls.n	8002404 <sinf+0x48>
 80023ca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80023ce:	d302      	bcc.n	80023d6 <sinf+0x1a>
 80023d0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80023d4:	4770      	bx	lr
 80023d6:	b500      	push	{lr}
 80023d8:	b083      	sub	sp, #12
 80023da:	4668      	mov	r0, sp
 80023dc:	f000 f8f2 	bl	80025c4 <__ieee754_rem_pio2f>
 80023e0:	f000 0003 	and.w	r0, r0, #3
 80023e4:	2801      	cmp	r0, #1
 80023e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80023ea:	ed9d 0a00 	vldr	s0, [sp]
 80023ee:	d00e      	beq.n	800240e <sinf+0x52>
 80023f0:	2802      	cmp	r0, #2
 80023f2:	d013      	beq.n	800241c <sinf+0x60>
 80023f4:	b170      	cbz	r0, 8002414 <sinf+0x58>
 80023f6:	f000 f81b 	bl	8002430 <__kernel_cosf>
 80023fa:	eeb1 0a40 	vneg.f32	s0, s0
 80023fe:	b003      	add	sp, #12
 8002400:	f85d fb04 	ldr.w	pc, [sp], #4
 8002404:	eddf 0a09 	vldr	s1, [pc, #36]	; 800242c <sinf+0x70>
 8002408:	2000      	movs	r0, #0
 800240a:	f000 b893 	b.w	8002534 <__kernel_sinf>
 800240e:	f000 f80f 	bl	8002430 <__kernel_cosf>
 8002412:	e7f4      	b.n	80023fe <sinf+0x42>
 8002414:	2001      	movs	r0, #1
 8002416:	f000 f88d 	bl	8002534 <__kernel_sinf>
 800241a:	e7f0      	b.n	80023fe <sinf+0x42>
 800241c:	2001      	movs	r0, #1
 800241e:	f000 f889 	bl	8002534 <__kernel_sinf>
 8002422:	eeb1 0a40 	vneg.f32	s0, s0
 8002426:	e7ea      	b.n	80023fe <sinf+0x42>
 8002428:	3f490fd8 	.word	0x3f490fd8
 800242c:	00000000 	.word	0x00000000

08002430 <__kernel_cosf>:
 8002430:	ee10 3a10 	vmov	r3, s0
 8002434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002438:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800243c:	d22c      	bcs.n	8002498 <__kernel_cosf+0x68>
 800243e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002442:	ee17 3a90 	vmov	r3, s15
 8002446:	2b00      	cmp	r3, #0
 8002448:	d060      	beq.n	800250c <__kernel_cosf+0xdc>
 800244a:	ee60 7a00 	vmul.f32	s15, s0, s0
 800244e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002514 <__kernel_cosf+0xe4>
 8002452:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8002518 <__kernel_cosf+0xe8>
 8002456:	eddf 5a31 	vldr	s11, [pc, #196]	; 800251c <__kernel_cosf+0xec>
 800245a:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8002520 <__kernel_cosf+0xf0>
 800245e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002524 <__kernel_cosf+0xf4>
 8002462:	eea7 5a87 	vfma.f32	s10, s15, s14
 8002466:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002528 <__kernel_cosf+0xf8>
 800246a:	eee5 5a27 	vfma.f32	s11, s10, s15
 800246e:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8002472:	eea7 7a86 	vfma.f32	s14, s15, s12
 8002476:	eee7 6a87 	vfma.f32	s13, s15, s14
 800247a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800247e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002482:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002486:	eee7 0aa6 	vfma.f32	s1, s15, s13
 800248a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800248e:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8002492:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002496:	4770      	bx	lr
 8002498:	ee60 7a00 	vmul.f32	s15, s0, s0
 800249c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002514 <__kernel_cosf+0xe4>
 80024a0:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8002518 <__kernel_cosf+0xe8>
 80024a4:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800251c <__kernel_cosf+0xec>
 80024a8:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8002520 <__kernel_cosf+0xf0>
 80024ac:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002524 <__kernel_cosf+0xf4>
 80024b0:	4a1e      	ldr	r2, [pc, #120]	; (800252c <__kernel_cosf+0xfc>)
 80024b2:	eea7 5a87 	vfma.f32	s10, s15, s14
 80024b6:	4293      	cmp	r3, r2
 80024b8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002528 <__kernel_cosf+0xf8>
 80024bc:	eee5 5a27 	vfma.f32	s11, s10, s15
 80024c0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80024c4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80024c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80024cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024d0:	d9d5      	bls.n	800247e <__kernel_cosf+0x4e>
 80024d2:	4a17      	ldr	r2, [pc, #92]	; (8002530 <__kernel_cosf+0x100>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d814      	bhi.n	8002502 <__kernel_cosf+0xd2>
 80024d8:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80024dc:	ee07 3a10 	vmov	s14, r3
 80024e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80024e4:	ee36 6a47 	vsub.f32	s12, s12, s14
 80024e8:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80024ec:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80024f0:	ee97 7aa5 	vfnms.f32	s14, s15, s11
 80024f4:	eee7 0aa6 	vfma.f32	s1, s15, s13
 80024f8:	ee37 7a60 	vsub.f32	s14, s14, s1
 80024fc:	ee36 0a47 	vsub.f32	s0, s12, s14
 8002500:	4770      	bx	lr
 8002502:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 8002506:	eeb5 7a02 	vmov.f32	s14, #82	; 0x3e900000  0.2812500
 800250a:	e7ed      	b.n	80024e8 <__kernel_cosf+0xb8>
 800250c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	ad47d74e 	.word	0xad47d74e
 8002518:	310f74f6 	.word	0x310f74f6
 800251c:	b493f27c 	.word	0xb493f27c
 8002520:	37d00d01 	.word	0x37d00d01
 8002524:	3d2aaaab 	.word	0x3d2aaaab
 8002528:	bab60b61 	.word	0xbab60b61
 800252c:	3e999999 	.word	0x3e999999
 8002530:	3f480000 	.word	0x3f480000

08002534 <__kernel_sinf>:
 8002534:	ee10 3a10 	vmov	r3, s0
 8002538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800253c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002540:	d204      	bcs.n	800254c <__kernel_sinf+0x18>
 8002542:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002546:	ee17 3a90 	vmov	r3, s15
 800254a:	b35b      	cbz	r3, 80025a4 <__kernel_sinf+0x70>
 800254c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002550:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80025a8 <__kernel_sinf+0x74>
 8002554:	eddf 5a15 	vldr	s11, [pc, #84]	; 80025ac <__kernel_sinf+0x78>
 8002558:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80025b0 <__kernel_sinf+0x7c>
 800255c:	eddf 6a15 	vldr	s13, [pc, #84]	; 80025b4 <__kernel_sinf+0x80>
 8002560:	eee7 5a87 	vfma.f32	s11, s15, s14
 8002564:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80025b8 <__kernel_sinf+0x84>
 8002568:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800256c:	ee20 5a27 	vmul.f32	s10, s0, s15
 8002570:	eee6 6a27 	vfma.f32	s13, s12, s15
 8002574:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002578:	b930      	cbnz	r0, 8002588 <__kernel_sinf+0x54>
 800257a:	eddf 6a10 	vldr	s13, [pc, #64]	; 80025bc <__kernel_sinf+0x88>
 800257e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002582:	eea6 0a85 	vfma.f32	s0, s13, s10
 8002586:	4770      	bx	lr
 8002588:	ee27 7a45 	vnmul.f32	s14, s14, s10
 800258c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002590:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8002594:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80025c0 <__kernel_sinf+0x8c>
 8002598:	eed7 0a27 	vfnms.f32	s1, s14, s15
 800259c:	eee5 0a26 	vfma.f32	s1, s10, s13
 80025a0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	2f2ec9d3 	.word	0x2f2ec9d3
 80025ac:	b2d72f34 	.word	0xb2d72f34
 80025b0:	3638ef1b 	.word	0x3638ef1b
 80025b4:	b9500d01 	.word	0xb9500d01
 80025b8:	3c088889 	.word	0x3c088889
 80025bc:	be2aaaab 	.word	0xbe2aaaab
 80025c0:	3e2aaaab 	.word	0x3e2aaaab

080025c4 <__ieee754_rem_pio2f>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	ee10 3a10 	vmov	r3, s0
 80025ca:	4a88      	ldr	r2, [pc, #544]	; (80027ec <__ieee754_rem_pio2f+0x228>)
 80025cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80025d0:	4294      	cmp	r4, r2
 80025d2:	b086      	sub	sp, #24
 80025d4:	4605      	mov	r5, r0
 80025d6:	d971      	bls.n	80026bc <__ieee754_rem_pio2f+0xf8>
 80025d8:	4a85      	ldr	r2, [pc, #532]	; (80027f0 <__ieee754_rem_pio2f+0x22c>)
 80025da:	4294      	cmp	r4, r2
 80025dc:	461e      	mov	r6, r3
 80025de:	d824      	bhi.n	800262a <__ieee754_rem_pio2f+0x66>
 80025e0:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	eddf 7a83 	vldr	s15, [pc, #524]	; 80027f4 <__ieee754_rem_pio2f+0x230>
 80025ea:	4a83      	ldr	r2, [pc, #524]	; (80027f8 <__ieee754_rem_pio2f+0x234>)
 80025ec:	f026 060f 	bic.w	r6, r6, #15
 80025f0:	eeb0 7a40 	vmov.f32	s14, s0
 80025f4:	f340 80e0 	ble.w	80027b8 <__ieee754_rem_pio2f+0x1f4>
 80025f8:	4296      	cmp	r6, r2
 80025fa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80025fe:	bf09      	itett	eq
 8002600:	ed9f 7a7e 	vldreq	s14, [pc, #504]	; 80027fc <__ieee754_rem_pio2f+0x238>
 8002604:	eddf 6a7e 	vldrne	s13, [pc, #504]	; 8002800 <__ieee754_rem_pio2f+0x23c>
 8002608:	eddf 6a7e 	vldreq	s13, [pc, #504]	; 8002804 <__ieee754_rem_pio2f+0x240>
 800260c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8002610:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8002614:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002618:	ed80 7a00 	vstr	s14, [r0]
 800261c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002620:	edc0 7a01 	vstr	s15, [r0, #4]
 8002624:	2001      	movs	r0, #1
 8002626:	b006      	add	sp, #24
 8002628:	bd70      	pop	{r4, r5, r6, pc}
 800262a:	4a77      	ldr	r2, [pc, #476]	; (8002808 <__ieee754_rem_pio2f+0x244>)
 800262c:	4294      	cmp	r4, r2
 800262e:	d952      	bls.n	80026d6 <__ieee754_rem_pio2f+0x112>
 8002630:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002634:	d248      	bcs.n	80026c8 <__ieee754_rem_pio2f+0x104>
 8002636:	15e2      	asrs	r2, r4, #23
 8002638:	3a86      	subs	r2, #134	; 0x86
 800263a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002646:	eddf 6a71 	vldr	s13, [pc, #452]	; 800280c <__ieee754_rem_pio2f+0x248>
 800264a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800264e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002652:	ed8d 7a03 	vstr	s14, [sp, #12]
 8002656:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800265a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800265e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002666:	ed8d 7a04 	vstr	s14, [sp, #16]
 800266a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800266e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	edcd 7a05 	vstr	s15, [sp, #20]
 800267a:	f040 8098 	bne.w	80027ae <__ieee754_rem_pio2f+0x1ea>
 800267e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2302      	movne	r3, #2
 800268c:	4960      	ldr	r1, [pc, #384]	; (8002810 <__ieee754_rem_pio2f+0x24c>)
 800268e:	9101      	str	r1, [sp, #4]
 8002690:	2102      	movs	r1, #2
 8002692:	9100      	str	r1, [sp, #0]
 8002694:	a803      	add	r0, sp, #12
 8002696:	4629      	mov	r1, r5
 8002698:	f000 f8cc 	bl	8002834 <__kernel_rem_pio2f>
 800269c:	2e00      	cmp	r6, #0
 800269e:	dac2      	bge.n	8002626 <__ieee754_rem_pio2f+0x62>
 80026a0:	ed95 7a00 	vldr	s14, [r5]
 80026a4:	edd5 7a01 	vldr	s15, [r5, #4]
 80026a8:	eeb1 7a47 	vneg.f32	s14, s14
 80026ac:	eef1 7a67 	vneg.f32	s15, s15
 80026b0:	ed85 7a00 	vstr	s14, [r5]
 80026b4:	edc5 7a01 	vstr	s15, [r5, #4]
 80026b8:	4240      	negs	r0, r0
 80026ba:	e7b4      	b.n	8002626 <__ieee754_rem_pio2f+0x62>
 80026bc:	2200      	movs	r2, #0
 80026be:	ed85 0a00 	vstr	s0, [r5]
 80026c2:	6042      	str	r2, [r0, #4]
 80026c4:	2000      	movs	r0, #0
 80026c6:	e7ae      	b.n	8002626 <__ieee754_rem_pio2f+0x62>
 80026c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80026cc:	edc0 7a01 	vstr	s15, [r0, #4]
 80026d0:	edc0 7a00 	vstr	s15, [r0]
 80026d4:	e7f6      	b.n	80026c4 <__ieee754_rem_pio2f+0x100>
 80026d6:	f000 f8a5 	bl	8002824 <fabsf>
 80026da:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002814 <__ieee754_rem_pio2f+0x250>
 80026de:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80027f4 <__ieee754_rem_pio2f+0x230>
 80026e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80026e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80026ea:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002800 <__ieee754_rem_pio2f+0x23c>
 80026ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f2:	ee17 0a90 	vmov	r0, s15
 80026f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026fa:	281f      	cmp	r0, #31
 80026fc:	eea6 0ac6 	vfms.f32	s0, s13, s12
 8002700:	ee66 7a87 	vmul.f32	s15, s13, s14
 8002704:	eeb1 6a66 	vneg.f32	s12, s13
 8002708:	dc20      	bgt.n	800274c <__ieee754_rem_pio2f+0x188>
 800270a:	4a43      	ldr	r2, [pc, #268]	; (8002818 <__ieee754_rem_pio2f+0x254>)
 800270c:	1e41      	subs	r1, r0, #1
 800270e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8002712:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800271a:	4293      	cmp	r3, r2
 800271c:	d016      	beq.n	800274c <__ieee754_rem_pio2f+0x188>
 800271e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002722:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002726:	2e00      	cmp	r6, #0
 8002728:	ee30 0a67 	vsub.f32	s0, s0, s15
 800272c:	ed85 7a00 	vstr	s14, [r5]
 8002730:	ed85 0a01 	vstr	s0, [r5, #4]
 8002734:	f6bf af77 	bge.w	8002626 <__ieee754_rem_pio2f+0x62>
 8002738:	eeb1 7a47 	vneg.f32	s14, s14
 800273c:	eeb1 0a40 	vneg.f32	s0, s0
 8002740:	ed85 7a00 	vstr	s14, [r5]
 8002744:	ed85 0a01 	vstr	s0, [r5, #4]
 8002748:	4240      	negs	r0, r0
 800274a:	e76c      	b.n	8002626 <__ieee754_rem_pio2f+0x62>
 800274c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002750:	15e2      	asrs	r2, r4, #23
 8002752:	ee17 3a10 	vmov	r3, s14
 8002756:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800275a:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 800275e:	2b08      	cmp	r3, #8
 8002760:	dddf      	ble.n	8002722 <__ieee754_rem_pio2f+0x15e>
 8002762:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80027fc <__ieee754_rem_pio2f+0x238>
 8002766:	ed9f 5a27 	vldr	s10, [pc, #156]	; 8002804 <__ieee754_rem_pio2f+0x240>
 800276a:	eef0 5a40 	vmov.f32	s11, s0
 800276e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8002772:	ee70 7a65 	vsub.f32	s15, s0, s11
 8002776:	eee6 7a07 	vfma.f32	s15, s12, s14
 800277a:	eed6 7a85 	vfnms.f32	s15, s13, s10
 800277e:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8002782:	ee17 3a10 	vmov	r3, s14
 8002786:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800278a:	1ad2      	subs	r2, r2, r3
 800278c:	2a19      	cmp	r2, #25
 800278e:	dd10      	ble.n	80027b2 <__ieee754_rem_pio2f+0x1ee>
 8002790:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800281c <__ieee754_rem_pio2f+0x258>
 8002794:	ed9f 5a22 	vldr	s10, [pc, #136]	; 8002820 <__ieee754_rem_pio2f+0x25c>
 8002798:	eeb0 0a65 	vmov.f32	s0, s11
 800279c:	eea6 0a07 	vfma.f32	s0, s12, s14
 80027a0:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80027a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80027a8:	eed6 7a85 	vfnms.f32	s15, s13, s10
 80027ac:	e7b7      	b.n	800271e <__ieee754_rem_pio2f+0x15a>
 80027ae:	2303      	movs	r3, #3
 80027b0:	e76c      	b.n	800268c <__ieee754_rem_pio2f+0xc8>
 80027b2:	eeb0 0a65 	vmov.f32	s0, s11
 80027b6:	e7b4      	b.n	8002722 <__ieee754_rem_pio2f+0x15e>
 80027b8:	4296      	cmp	r6, r2
 80027ba:	ee70 7a27 	vadd.f32	s15, s0, s15
 80027be:	bf09      	itett	eq
 80027c0:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 80027fc <__ieee754_rem_pio2f+0x238>
 80027c4:	eddf 6a0e 	vldrne	s13, [pc, #56]	; 8002800 <__ieee754_rem_pio2f+0x23c>
 80027c8:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 8002804 <__ieee754_rem_pio2f+0x240>
 80027cc:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80027d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80027d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027d8:	ed80 7a00 	vstr	s14, [r0]
 80027dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027e0:	edc0 7a01 	vstr	s15, [r0, #4]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	e71d      	b.n	8002626 <__ieee754_rem_pio2f+0x62>
 80027ea:	bf00      	nop
 80027ec:	3f490fd8 	.word	0x3f490fd8
 80027f0:	4016cbe3 	.word	0x4016cbe3
 80027f4:	3fc90f80 	.word	0x3fc90f80
 80027f8:	3fc90fd0 	.word	0x3fc90fd0
 80027fc:	37354400 	.word	0x37354400
 8002800:	37354443 	.word	0x37354443
 8002804:	2e85a308 	.word	0x2e85a308
 8002808:	43490f80 	.word	0x43490f80
 800280c:	43800000 	.word	0x43800000
 8002810:	08003160 	.word	0x08003160
 8002814:	3f22f984 	.word	0x3f22f984
 8002818:	080030e0 	.word	0x080030e0
 800281c:	2e85a300 	.word	0x2e85a300
 8002820:	248d3132 	.word	0x248d3132

08002824 <fabsf>:
 8002824:	ee10 3a10 	vmov	r3, s0
 8002828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800282c:	ee00 3a10 	vmov	s0, r3
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop

08002834 <__kernel_rem_pio2f>:
 8002834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002838:	ed2d 8b04 	vpush	{d8-d9}
 800283c:	b0db      	sub	sp, #364	; 0x16c
 800283e:	460c      	mov	r4, r1
 8002840:	4681      	mov	r9, r0
 8002842:	4611      	mov	r1, r2
 8002844:	9868      	ldr	r0, [sp, #416]	; 0x1a0
 8002846:	4a96      	ldr	r2, [pc, #600]	; (8002aa0 <__kernel_rem_pio2f+0x26c>)
 8002848:	9304      	str	r3, [sp, #16]
 800284a:	461e      	mov	r6, r3
 800284c:	4623      	mov	r3, r4
 800284e:	1d0c      	adds	r4, r1, #4
 8002850:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8002854:	f106 37ff 	add.w	r7, r6, #4294967295
 8002858:	f2c0 82b0 	blt.w	8002dbc <__kernel_rem_pio2f+0x588>
 800285c:	1eca      	subs	r2, r1, #3
 800285e:	bf48      	it	mi
 8002860:	1d0a      	addmi	r2, r1, #4
 8002862:	10d2      	asrs	r2, r2, #3
 8002864:	9203      	str	r2, [sp, #12]
 8002866:	3201      	adds	r2, #1
 8002868:	00d2      	lsls	r2, r2, #3
 800286a:	9206      	str	r2, [sp, #24]
 800286c:	9a06      	ldr	r2, [sp, #24]
 800286e:	9803      	ldr	r0, [sp, #12]
 8002870:	19ee      	adds	r6, r5, r7
 8002872:	eba1 0202 	sub.w	r2, r1, r2
 8002876:	eba0 0007 	sub.w	r0, r0, r7
 800287a:	d419      	bmi.n	80028b0 <__kernel_rem_pio2f+0x7c>
 800287c:	3601      	adds	r6, #1
 800287e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002aa4 <__kernel_rem_pio2f+0x270>
 8002882:	f8dd c1a4 	ldr.w	ip, [sp, #420]	; 0x1a4
 8002886:	4406      	add	r6, r0
 8002888:	ac1e      	add	r4, sp, #120	; 0x78
 800288a:	469e      	mov	lr, r3
 800288c:	2800      	cmp	r0, #0
 800288e:	bfa4      	itt	ge
 8002890:	f85c 3020 	ldrge.w	r3, [ip, r0, lsl #2]
 8002894:	ee07 3a90 	vmovge	s15, r3
 8002898:	f100 0001 	add.w	r0, r0, #1
 800289c:	bfac      	ite	ge
 800289e:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 80028a2:	eef0 7a47 	vmovlt.f32	s15, s14
 80028a6:	42b0      	cmp	r0, r6
 80028a8:	ece4 7a01 	vstmia	r4!, {s15}
 80028ac:	d1ee      	bne.n	800288c <__kernel_rem_pio2f+0x58>
 80028ae:	4673      	mov	r3, lr
 80028b0:	2d00      	cmp	r5, #0
 80028b2:	f2c0 82d9 	blt.w	8002e68 <__kernel_rem_pio2f+0x634>
 80028b6:	9804      	ldr	r0, [sp, #16]
 80028b8:	ac1e      	add	r4, sp, #120	; 0x78
 80028ba:	eb04 0680 	add.w	r6, r4, r0, lsl #2
 80028be:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80028c2:	eb05 0e00 	add.w	lr, r5, r0
 80028c6:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
 80028ca:	463c      	mov	r4, r7
 80028cc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80028d0:	2f00      	cmp	r7, #0
 80028d2:	eddf 7a74 	vldr	s15, [pc, #464]	; 8002aa4 <__kernel_rem_pio2f+0x270>
 80028d6:	db09      	blt.n	80028ec <__kernel_rem_pio2f+0xb8>
 80028d8:	46b3      	mov	fp, r6
 80028da:	46ca      	mov	sl, r9
 80028dc:	ecfa 6a01 	vldmia	sl!, {s13}
 80028e0:	ed3b 7a01 	vldmdb	fp!, {s14}
 80028e4:	4582      	cmp	sl, r0
 80028e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80028ea:	d1f7      	bne.n	80028dc <__kernel_rem_pio2f+0xa8>
 80028ec:	3401      	adds	r4, #1
 80028ee:	4574      	cmp	r4, lr
 80028f0:	ecec 7a01 	vstmia	ip!, {s15}
 80028f4:	f106 0604 	add.w	r6, r6, #4
 80028f8:	d1ea      	bne.n	80028d0 <__kernel_rem_pio2f+0x9c>
 80028fa:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 80028fe:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 8002902:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8002906:	3804      	subs	r0, #4
 8002908:	ed9f 9a68 	vldr	s18, [pc, #416]	; 8002aac <__kernel_rem_pio2f+0x278>
 800290c:	eddf 8a66 	vldr	s17, [pc, #408]	; 8002aa8 <__kernel_rem_pio2f+0x274>
 8002910:	9005      	str	r0, [sp, #20]
 8002912:	eb09 0408 	add.w	r4, r9, r8
 8002916:	46ab      	mov	fp, r5
 8002918:	eb0a 0885 	add.w	r8, sl, r5, lsl #2
 800291c:	ae46      	add	r6, sp, #280	; 0x118
 800291e:	9501      	str	r5, [sp, #4]
 8002920:	4610      	mov	r0, r2
 8002922:	ab5a      	add	r3, sp, #360	; 0x168
 8002924:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8002928:	f1bb 0f00 	cmp.w	fp, #0
 800292c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8002930:	dd16      	ble.n	8002960 <__kernel_rem_pio2f+0x12c>
 8002932:	eb06 038b 	add.w	r3, r6, fp, lsl #2
 8002936:	4652      	mov	r2, sl
 8002938:	ee60 7a09 	vmul.f32	s15, s0, s18
 800293c:	eeb0 7a40 	vmov.f32	s14, s0
 8002940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002944:	ed73 6a01 	vldmdb	r3!, {s13}
 8002948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294c:	42b3      	cmp	r3, r6
 800294e:	eea7 7ae8 	vfms.f32	s14, s15, s17
 8002952:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8002956:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800295a:	eca2 7a01 	vstmia	r2!, {s14}
 800295e:	d1eb      	bne.n	8002938 <__kernel_rem_pio2f+0x104>
 8002960:	9002      	str	r0, [sp, #8]
 8002962:	f000 faa5 	bl	8002eb0 <scalbnf>
 8002966:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 800296a:	eeb0 8a40 	vmov.f32	s16, s0
 800296e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002972:	f000 fb0f 	bl	8002f94 <floorf>
 8002976:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800297a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800297e:	9802      	ldr	r0, [sp, #8]
 8002980:	2800      	cmp	r0, #0
 8002982:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 8002986:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 800298a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800298e:	dd6e      	ble.n	8002a6e <__kernel_rem_pio2f+0x23a>
 8002990:	f10b 3cff 	add.w	ip, fp, #4294967295
 8002994:	f1c0 0308 	rsb	r3, r0, #8
 8002998:	f85a 202c 	ldr.w	r2, [sl, ip, lsl #2]
 800299c:	fa42 f503 	asr.w	r5, r2, r3
 80029a0:	fa05 f303 	lsl.w	r3, r5, r3
 80029a4:	1ad2      	subs	r2, r2, r3
 80029a6:	f1c0 0107 	rsb	r1, r0, #7
 80029aa:	ee19 3a90 	vmov	r3, s19
 80029ae:	fa42 f101 	asr.w	r1, r2, r1
 80029b2:	442b      	add	r3, r5
 80029b4:	2900      	cmp	r1, #0
 80029b6:	f84a 202c 	str.w	r2, [sl, ip, lsl #2]
 80029ba:	ee09 3a90 	vmov	s19, r3
 80029be:	f300 814b 	bgt.w	8002c58 <__kernel_rem_pio2f+0x424>
 80029c2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	f040 80ba 	bne.w	8002b42 <__kernel_rem_pio2f+0x30e>
 80029ce:	9b01      	ldr	r3, [sp, #4]
 80029d0:	459b      	cmp	fp, r3
 80029d2:	dd0b      	ble.n	80029ec <__kernel_rem_pio2f+0x1b8>
 80029d4:	eb0a 038b 	add.w	r3, sl, fp, lsl #2
 80029d8:	2200      	movs	r2, #0
 80029da:	f853 5d04 	ldr.w	r5, [r3, #-4]!
 80029de:	4543      	cmp	r3, r8
 80029e0:	ea42 0205 	orr.w	r2, r2, r5
 80029e4:	d1f9      	bne.n	80029da <__kernel_rem_pio2f+0x1a6>
 80029e6:	2a00      	cmp	r2, #0
 80029e8:	f040 8154 	bne.w	8002c94 <__kernel_rem_pio2f+0x460>
 80029ec:	9b01      	ldr	r3, [sp, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 8144 	bne.w	8002c82 <__kernel_rem_pio2f+0x44e>
 80029fa:	9b05      	ldr	r3, [sp, #20]
 80029fc:	2101      	movs	r1, #1
 80029fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002a02:	3101      	adds	r1, #1
 8002a04:	2a00      	cmp	r2, #0
 8002a06:	d0fa      	beq.n	80029fe <__kernel_rem_pio2f+0x1ca>
 8002a08:	f10b 0301 	add.w	r3, fp, #1
 8002a0c:	4459      	add	r1, fp
 8002a0e:	469c      	mov	ip, r3
 8002a10:	9d03      	ldr	r5, [sp, #12]
 8002a12:	9a04      	ldr	r2, [sp, #16]
 8002a14:	eb05 0e03 	add.w	lr, r5, r3
 8002a18:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8002a1c:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
 8002a1e:	445a      	add	r2, fp
 8002a20:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002a24:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 8002a28:	ab1e      	add	r3, sp, #120	; 0x78
 8002a2a:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8002a2e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8002a32:	edde 7a01 	vldr	s15, [lr, #4]
 8002a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3a:	2f00      	cmp	r7, #0
 8002a3c:	f10e 0e04 	add.w	lr, lr, #4
 8002a40:	ece5 7a01 	vstmia	r5!, {s15}
 8002a44:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002aa4 <__kernel_rem_pio2f+0x270>
 8002a48:	db09      	blt.n	8002a5e <__kernel_rem_pio2f+0x22a>
 8002a4a:	462a      	mov	r2, r5
 8002a4c:	464b      	mov	r3, r9
 8002a4e:	ecf3 6a01 	vldmia	r3!, {s13}
 8002a52:	ed32 7a01 	vldmdb	r2!, {s14}
 8002a56:	42a3      	cmp	r3, r4
 8002a58:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002a5c:	d1f7      	bne.n	8002a4e <__kernel_rem_pio2f+0x21a>
 8002a5e:	f10c 0c01 	add.w	ip, ip, #1
 8002a62:	4561      	cmp	r1, ip
 8002a64:	eceb 7a01 	vstmia	fp!, {s15}
 8002a68:	dae3      	bge.n	8002a32 <__kernel_rem_pio2f+0x1fe>
 8002a6a:	468b      	mov	fp, r1
 8002a6c:	e759      	b.n	8002922 <__kernel_rem_pio2f+0xee>
 8002a6e:	f040 80e9 	bne.w	8002c44 <__kernel_rem_pio2f+0x410>
 8002a72:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002a76:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8002a7a:	11c9      	asrs	r1, r1, #7
 8002a7c:	2900      	cmp	r1, #0
 8002a7e:	dda0      	ble.n	80029c2 <__kernel_rem_pio2f+0x18e>
 8002a80:	ee19 3a90 	vmov	r3, s19
 8002a84:	f1bb 0f00 	cmp.w	fp, #0
 8002a88:	f103 0301 	add.w	r3, r3, #1
 8002a8c:	ee09 3a90 	vmov	s19, r3
 8002a90:	f340 81ee 	ble.w	8002e70 <__kernel_rem_pio2f+0x63c>
 8002a94:	2500      	movs	r5, #0
 8002a96:	46d4      	mov	ip, sl
 8002a98:	462a      	mov	r2, r5
 8002a9a:	9102      	str	r1, [sp, #8]
 8002a9c:	4686      	mov	lr, r0
 8002a9e:	e019      	b.n	8002ad4 <__kernel_rem_pio2f+0x2a0>
 8002aa0:	080034a4 	.word	0x080034a4
 8002aa4:	00000000 	.word	0x00000000
 8002aa8:	43800000 	.word	0x43800000
 8002aac:	3b800000 	.word	0x3b800000
 8002ab0:	3501      	adds	r5, #1
 8002ab2:	45ab      	cmp	fp, r5
 8002ab4:	f841 0c04 	str.w	r0, [r1, #-4]
 8002ab8:	f340 80e8 	ble.w	8002c8c <__kernel_rem_pio2f+0x458>
 8002abc:	680b      	ldr	r3, [r1, #0]
 8002abe:	f10c 0c08 	add.w	ip, ip, #8
 8002ac2:	3501      	adds	r5, #1
 8002ac4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002ac8:	45ab      	cmp	fp, r5
 8002aca:	f04f 0201 	mov.w	r2, #1
 8002ace:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002ad2:	dd0d      	ble.n	8002af0 <__kernel_rem_pio2f+0x2bc>
 8002ad4:	4661      	mov	r1, ip
 8002ad6:	f851 3b04 	ldr.w	r3, [r1], #4
 8002ada:	2a00      	cmp	r2, #0
 8002adc:	f040 80b0 	bne.w	8002c40 <__kernel_rem_pio2f+0x40c>
 8002ae0:	f5c3 7080 	rsb	r0, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e3      	bne.n	8002ab0 <__kernel_rem_pio2f+0x27c>
 8002ae8:	3501      	adds	r5, #1
 8002aea:	45ab      	cmp	fp, r5
 8002aec:	468c      	mov	ip, r1
 8002aee:	dcf1      	bgt.n	8002ad4 <__kernel_rem_pio2f+0x2a0>
 8002af0:	9902      	ldr	r1, [sp, #8]
 8002af2:	4670      	mov	r0, lr
 8002af4:	2800      	cmp	r0, #0
 8002af6:	dd0c      	ble.n	8002b12 <__kernel_rem_pio2f+0x2de>
 8002af8:	2801      	cmp	r0, #1
 8002afa:	f000 80b9 	beq.w	8002c70 <__kernel_rem_pio2f+0x43c>
 8002afe:	2802      	cmp	r0, #2
 8002b00:	d107      	bne.n	8002b12 <__kernel_rem_pio2f+0x2de>
 8002b02:	f10b 35ff 	add.w	r5, fp, #4294967295
 8002b06:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8002b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b0e:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 8002b12:	2902      	cmp	r1, #2
 8002b14:	f47f af55 	bne.w	80029c2 <__kernel_rem_pio2f+0x18e>
 8002b18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b1c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002b20:	2a00      	cmp	r2, #0
 8002b22:	f43f af4e 	beq.w	80029c2 <__kernel_rem_pio2f+0x18e>
 8002b26:	9109      	str	r1, [sp, #36]	; 0x24
 8002b28:	9002      	str	r0, [sp, #8]
 8002b2a:	f000 f9c1 	bl	8002eb0 <scalbnf>
 8002b2e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002b32:	9802      	ldr	r0, [sp, #8]
 8002b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b36:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	f43f af46 	beq.w	80029ce <__kernel_rem_pio2f+0x19a>
 8002b42:	9b07      	ldr	r3, [sp, #28]
 8002b44:	9d01      	ldr	r5, [sp, #4]
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	4688      	mov	r8, r1
 8002b4a:	9b06      	ldr	r3, [sp, #24]
 8002b4c:	9908      	ldr	r1, [sp, #32]
 8002b4e:	9002      	str	r0, [sp, #8]
 8002b50:	eeb0 0a48 	vmov.f32	s0, s16
 8002b54:	1a58      	subs	r0, r3, r1
 8002b56:	f000 f9ab 	bl	8002eb0 <scalbnf>
 8002b5a:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 8002aa8 <__kernel_rem_pio2f+0x274>
 8002b5e:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8002b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b66:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8002b6a:	eef0 7a40 	vmov.f32	s15, s0
 8002b6e:	f2c0 814d 	blt.w	8002e0c <__kernel_rem_pio2f+0x5d8>
 8002b72:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8002aac <__kernel_rem_pio2f+0x278>
 8002b76:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002b7a:	f10b 0401 	add.w	r4, fp, #1
 8002b7e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002b82:	3208      	adds	r2, #8
 8002b84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b88:	eee7 7a66 	vfms.f32	s15, s14, s13
 8002b8c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b94:	ee17 1a90 	vmov	r1, s15
 8002b98:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 8002b9c:	ee17 1a10 	vmov	r1, s14
 8002ba0:	f84a 1024 	str.w	r1, [sl, r4, lsl #2]
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	f000 f980 	bl	8002eb0 <scalbnf>
 8002bb0:	2c00      	cmp	r4, #0
 8002bb2:	9b01      	ldr	r3, [sp, #4]
 8002bb4:	eeb0 7a40 	vmov.f32	s14, s0
 8002bb8:	f2c0 814c 	blt.w	8002e54 <__kernel_rem_pio2f+0x620>
 8002bbc:	1c60      	adds	r0, r4, #1
 8002bbe:	ae46      	add	r6, sp, #280	; 0x118
 8002bc0:	ed5f 6a46 	vldr	s13, [pc, #-280]	; 8002aac <__kernel_rem_pio2f+0x278>
 8002bc4:	0081      	lsls	r1, r0, #2
 8002bc6:	eb0a 0280 	add.w	r2, sl, r0, lsl #2
 8002bca:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8002bce:	ed72 7a01 	vldmdb	r2!, {s15}
 8002bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd6:	4552      	cmp	r2, sl
 8002bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bdc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002be0:	ed60 7a01 	vstmdb	r0!, {s15}
 8002be4:	d1f3      	bne.n	8002bce <__kernel_rem_pio2f+0x39a>
 8002be6:	1f0a      	subs	r2, r1, #4
 8002be8:	a846      	add	r0, sp, #280	; 0x118
 8002bea:	2d00      	cmp	r5, #0
 8002bec:	eb00 0702 	add.w	r7, r0, r2
 8002bf0:	f04f 0600 	mov.w	r6, #0
 8002bf4:	469c      	mov	ip, r3
 8002bf6:	db20      	blt.n	8002c3a <__kernel_rem_pio2f+0x406>
 8002bf8:	4bab      	ldr	r3, [pc, #684]	; (8002ea8 <__kernel_rem_pio2f+0x674>)
 8002bfa:	eddf 7aac 	vldr	s15, [pc, #688]	; 8002eac <__kernel_rem_pio2f+0x678>
 8002bfe:	4638      	mov	r0, r7
 8002c00:	2200      	movs	r2, #0
 8002c02:	e001      	b.n	8002c08 <__kernel_rem_pio2f+0x3d4>
 8002c04:	42b2      	cmp	r2, r6
 8002c06:	dc08      	bgt.n	8002c1a <__kernel_rem_pio2f+0x3e6>
 8002c08:	ecf3 6a01 	vldmia	r3!, {s13}
 8002c0c:	ecb0 7a01 	vldmia	r0!, {s14}
 8002c10:	3201      	adds	r2, #1
 8002c12:	4295      	cmp	r5, r2
 8002c14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002c18:	daf4      	bge.n	8002c04 <__kernel_rem_pio2f+0x3d0>
 8002c1a:	ab5a      	add	r3, sp, #360	; 0x168
 8002c1c:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 8002c20:	42a6      	cmp	r6, r4
 8002c22:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8002c26:	ea4f 0086 	mov.w	r0, r6, lsl #2
 8002c2a:	f106 0201 	add.w	r2, r6, #1
 8002c2e:	f1a7 0704 	sub.w	r7, r7, #4
 8002c32:	d047      	beq.n	8002cc4 <__kernel_rem_pio2f+0x490>
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	4616      	mov	r6, r2
 8002c38:	dade      	bge.n	8002bf8 <__kernel_rem_pio2f+0x3c4>
 8002c3a:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8002eac <__kernel_rem_pio2f+0x678>
 8002c3e:	e7ec      	b.n	8002c1a <__kernel_rem_pio2f+0x3e6>
 8002c40:	468c      	mov	ip, r1
 8002c42:	e73e      	b.n	8002ac2 <__kernel_rem_pio2f+0x28e>
 8002c44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002c48:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	f280 80a2 	bge.w	8002d98 <__kernel_rem_pio2f+0x564>
 8002c54:	2100      	movs	r1, #0
 8002c56:	e6b4      	b.n	80029c2 <__kernel_rem_pio2f+0x18e>
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f1bb 0f00 	cmp.w	fp, #0
 8002c5e:	ee09 3a90 	vmov	s19, r3
 8002c62:	bfd8      	it	le
 8002c64:	2200      	movle	r2, #0
 8002c66:	f73f af15 	bgt.w	8002a94 <__kernel_rem_pio2f+0x260>
 8002c6a:	2801      	cmp	r0, #1
 8002c6c:	f47f af47 	bne.w	8002afe <__kernel_rem_pio2f+0x2ca>
 8002c70:	f10b 35ff 	add.w	r5, fp, #4294967295
 8002c74:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8002c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c7c:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 8002c80:	e747      	b.n	8002b12 <__kernel_rem_pio2f+0x2de>
 8002c82:	f10b 0301 	add.w	r3, fp, #1
 8002c86:	469c      	mov	ip, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	e6c1      	b.n	8002a10 <__kernel_rem_pio2f+0x1dc>
 8002c8c:	9902      	ldr	r1, [sp, #8]
 8002c8e:	4670      	mov	r0, lr
 8002c90:	2201      	movs	r2, #1
 8002c92:	e72f      	b.n	8002af4 <__kernel_rem_pio2f+0x2c0>
 8002c94:	f10b 34ff 	add.w	r4, fp, #4294967295
 8002c98:	4688      	mov	r8, r1
 8002c9a:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8002c9e:	9d01      	ldr	r5, [sp, #4]
 8002ca0:	9b07      	ldr	r3, [sp, #28]
 8002ca2:	f1a0 0208 	sub.w	r2, r0, #8
 8002ca6:	2900      	cmp	r1, #0
 8002ca8:	f47f af7c 	bne.w	8002ba4 <__kernel_rem_pio2f+0x370>
 8002cac:	f10b 4180 	add.w	r1, fp, #1073741824	; 0x40000000
 8002cb0:	3901      	subs	r1, #1
 8002cb2:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8002cb6:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8002cba:	3c01      	subs	r4, #1
 8002cbc:	3a08      	subs	r2, #8
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	d0f9      	beq.n	8002cb6 <__kernel_rem_pio2f+0x482>
 8002cc2:	e76f      	b.n	8002ba4 <__kernel_rem_pio2f+0x370>
 8002cc4:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002cc6:	2a02      	cmp	r2, #2
 8002cc8:	4663      	mov	r3, ip
 8002cca:	dc1b      	bgt.n	8002d04 <__kernel_rem_pio2f+0x4d0>
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	dc7a      	bgt.n	8002dc6 <__kernel_rem_pio2f+0x592>
 8002cd0:	d10f      	bne.n	8002cf2 <__kernel_rem_pio2f+0x4be>
 8002cd2:	aa32      	add	r2, sp, #200	; 0xc8
 8002cd4:	eddf 7a75 	vldr	s15, [pc, #468]	; 8002eac <__kernel_rem_pio2f+0x678>
 8002cd8:	4411      	add	r1, r2
 8002cda:	ed31 7a01 	vldmdb	r1!, {s14}
 8002cde:	4291      	cmp	r1, r2
 8002ce0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ce4:	d1f9      	bne.n	8002cda <__kernel_rem_pio2f+0x4a6>
 8002ce6:	4642      	mov	r2, r8
 8002ce8:	b10a      	cbz	r2, 8002cee <__kernel_rem_pio2f+0x4ba>
 8002cea:	eef1 7a67 	vneg.f32	s15, s15
 8002cee:	edc3 7a00 	vstr	s15, [r3]
 8002cf2:	ee19 3a90 	vmov	r3, s19
 8002cf6:	f003 0007 	and.w	r0, r3, #7
 8002cfa:	b05b      	add	sp, #364	; 0x16c
 8002cfc:	ecbd 8b04 	vpop	{d8-d9}
 8002d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d04:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002d06:	2a03      	cmp	r2, #3
 8002d08:	d1f3      	bne.n	8002cf2 <__kernel_rem_pio2f+0x4be>
 8002d0a:	2c00      	cmp	r4, #0
 8002d0c:	f000 80bc 	beq.w	8002e88 <__kernel_rem_pio2f+0x654>
 8002d10:	a932      	add	r1, sp, #200	; 0xc8
 8002d12:	180d      	adds	r5, r1, r0
 8002d14:	ed95 7a00 	vldr	s14, [r5]
 8002d18:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8002d1c:	00a7      	lsls	r7, r4, #2
 8002d1e:	4606      	mov	r6, r0
 8002d20:	ed56 7a01 	vldr	s15, [r6, #-4]
 8002d24:	eef0 6a47 	vmov.f32	s13, s14
 8002d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d2c:	4632      	mov	r2, r6
 8002d2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d32:	3e04      	subs	r6, #4
 8002d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d38:	42b1      	cmp	r1, r6
 8002d3a:	edc2 7a00 	vstr	s15, [r2]
 8002d3e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8002d42:	d1ed      	bne.n	8002d20 <__kernel_rem_pio2f+0x4ec>
 8002d44:	2c01      	cmp	r4, #1
 8002d46:	f000 809f 	beq.w	8002e88 <__kernel_rem_pio2f+0x654>
 8002d4a:	ed95 7a00 	vldr	s14, [r5]
 8002d4e:	ed70 7a01 	vldmdb	r0!, {s15}
 8002d52:	eef0 6a47 	vmov.f32	s13, s14
 8002d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5a:	4282      	cmp	r2, r0
 8002d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d60:	ed80 7a00 	vstr	s14, [r0]
 8002d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d68:	edc0 7a01 	vstr	s15, [r0, #4]
 8002d6c:	d1ef      	bne.n	8002d4e <__kernel_rem_pio2f+0x51a>
 8002d6e:	1d38      	adds	r0, r7, #4
 8002d70:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8002eac <__kernel_rem_pio2f+0x678>
 8002d74:	4401      	add	r1, r0
 8002d76:	3204      	adds	r2, #4
 8002d78:	ed31 7a01 	vldmdb	r1!, {s14}
 8002d7c:	428a      	cmp	r2, r1
 8002d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d82:	d1f9      	bne.n	8002d78 <__kernel_rem_pio2f+0x544>
 8002d84:	4642      	mov	r2, r8
 8002d86:	2a00      	cmp	r2, #0
 8002d88:	d148      	bne.n	8002e1c <__kernel_rem_pio2f+0x5e8>
 8002d8a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8002d8c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8002d8e:	6019      	str	r1, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	edc3 7a02 	vstr	s15, [r3, #8]
 8002d96:	e7ac      	b.n	8002cf2 <__kernel_rem_pio2f+0x4be>
 8002d98:	ee19 3a90 	vmov	r3, s19
 8002d9c:	f1bb 0f00 	cmp.w	fp, #0
 8002da0:	f103 0301 	add.w	r3, r3, #1
 8002da4:	ee09 3a90 	vmov	s19, r3
 8002da8:	bfc8      	it	gt
 8002daa:	2102      	movgt	r1, #2
 8002dac:	f73f ae72 	bgt.w	8002a94 <__kernel_rem_pio2f+0x260>
 8002db0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002db4:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8002db8:	2102      	movs	r1, #2
 8002dba:	e602      	b.n	80029c2 <__kernel_rem_pio2f+0x18e>
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	9206      	str	r2, [sp, #24]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	9203      	str	r2, [sp, #12]
 8002dc4:	e552      	b.n	800286c <__kernel_rem_pio2f+0x38>
 8002dc6:	aa32      	add	r2, sp, #200	; 0xc8
 8002dc8:	eddf 7a38 	vldr	s15, [pc, #224]	; 8002eac <__kernel_rem_pio2f+0x678>
 8002dcc:	4411      	add	r1, r2
 8002dce:	ed31 7a01 	vldmdb	r1!, {s14}
 8002dd2:	428a      	cmp	r2, r1
 8002dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dd8:	d1f9      	bne.n	8002dce <__kernel_rem_pio2f+0x59a>
 8002dda:	4642      	mov	r2, r8
 8002ddc:	bb7a      	cbnz	r2, 8002e3e <__kernel_rem_pio2f+0x60a>
 8002dde:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8002de2:	edc3 7a00 	vstr	s15, [r3]
 8002de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dea:	b164      	cbz	r4, 8002e06 <__kernel_rem_pio2f+0x5d2>
 8002dec:	a933      	add	r1, sp, #204	; 0xcc
 8002dee:	2201      	movs	r2, #1
 8002df0:	ecb1 7a01 	vldmia	r1!, {s14}
 8002df4:	3201      	adds	r2, #1
 8002df6:	4294      	cmp	r4, r2
 8002df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dfc:	daf8      	bge.n	8002df0 <__kernel_rem_pio2f+0x5bc>
 8002dfe:	4642      	mov	r2, r8
 8002e00:	b10a      	cbz	r2, 8002e06 <__kernel_rem_pio2f+0x5d2>
 8002e02:	eef1 7a67 	vneg.f32	s15, s15
 8002e06:	edc3 7a01 	vstr	s15, [r3, #4]
 8002e0a:	e772      	b.n	8002cf2 <__kernel_rem_pio2f+0x4be>
 8002e0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002e10:	465c      	mov	r4, fp
 8002e12:	ee17 1a90 	vmov	r1, s15
 8002e16:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 8002e1a:	e6c3      	b.n	8002ba4 <__kernel_rem_pio2f+0x370>
 8002e1c:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8002e20:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8002e24:	eef1 6a66 	vneg.f32	s13, s13
 8002e28:	eeb1 7a47 	vneg.f32	s14, s14
 8002e2c:	eef1 7a67 	vneg.f32	s15, s15
 8002e30:	edc3 6a00 	vstr	s13, [r3]
 8002e34:	ed83 7a01 	vstr	s14, [r3, #4]
 8002e38:	edc3 7a02 	vstr	s15, [r3, #8]
 8002e3c:	e759      	b.n	8002cf2 <__kernel_rem_pio2f+0x4be>
 8002e3e:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8002e42:	eeb1 7a67 	vneg.f32	s14, s15
 8002e46:	ed83 7a00 	vstr	s14, [r3]
 8002e4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e4e:	2c00      	cmp	r4, #0
 8002e50:	d1cc      	bne.n	8002dec <__kernel_rem_pio2f+0x5b8>
 8002e52:	e7d6      	b.n	8002e02 <__kernel_rem_pio2f+0x5ce>
 8002e54:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002e56:	2a02      	cmp	r2, #2
 8002e58:	dc12      	bgt.n	8002e80 <__kernel_rem_pio2f+0x64c>
 8002e5a:	2a00      	cmp	r2, #0
 8002e5c:	dc17      	bgt.n	8002e8e <__kernel_rem_pio2f+0x65a>
 8002e5e:	f47f af48 	bne.w	8002cf2 <__kernel_rem_pio2f+0x4be>
 8002e62:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002eac <__kernel_rem_pio2f+0x678>
 8002e66:	e73e      	b.n	8002ce6 <__kernel_rem_pio2f+0x4b2>
 8002e68:	9804      	ldr	r0, [sp, #16]
 8002e6a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8002e6e:	e544      	b.n	80028fa <__kernel_rem_pio2f+0xc6>
 8002e70:	2902      	cmp	r1, #2
 8002e72:	f47f ada6 	bne.w	80029c2 <__kernel_rem_pio2f+0x18e>
 8002e76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002e7a:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8002e7e:	e5a0      	b.n	80029c2 <__kernel_rem_pio2f+0x18e>
 8002e80:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002e82:	2a03      	cmp	r2, #3
 8002e84:	f47f af35 	bne.w	8002cf2 <__kernel_rem_pio2f+0x4be>
 8002e88:	eddf 7a08 	vldr	s15, [pc, #32]	; 8002eac <__kernel_rem_pio2f+0x678>
 8002e8c:	e77a      	b.n	8002d84 <__kernel_rem_pio2f+0x550>
 8002e8e:	4642      	mov	r2, r8
 8002e90:	b922      	cbnz	r2, 8002e9c <__kernel_rem_pio2f+0x668>
 8002e92:	2200      	movs	r2, #0
 8002e94:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e7b4      	b.n	8002e06 <__kernel_rem_pio2f+0x5d2>
 8002e9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ea0:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e7ac      	b.n	8002e02 <__kernel_rem_pio2f+0x5ce>
 8002ea8:	08003478 	.word	0x08003478
 8002eac:	00000000 	.word	0x00000000

08002eb0 <scalbnf>:
 8002eb0:	ee10 3a10 	vmov	r3, s0
 8002eb4:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8002eb8:	461a      	mov	r2, r3
 8002eba:	d027      	beq.n	8002f0c <scalbnf+0x5c>
 8002ebc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002ec0:	d221      	bcs.n	8002f06 <scalbnf+0x56>
 8002ec2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8002ec6:	d122      	bne.n	8002f0e <scalbnf+0x5e>
 8002ec8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8002f78 <scalbnf+0xc8>
 8002ecc:	4a2b      	ldr	r2, [pc, #172]	; (8002f7c <scalbnf+0xcc>)
 8002ece:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002ed2:	4290      	cmp	r0, r2
 8002ed4:	ee17 3a90 	vmov	r3, s15
 8002ed8:	db33      	blt.n	8002f42 <scalbnf+0x92>
 8002eda:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8002ede:	f3c3 51c7 	ubfx	r1, r3, #23, #8
 8002ee2:	4560      	cmp	r0, ip
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f1a1 0119 	sub.w	r1, r1, #25
 8002eea:	dd16      	ble.n	8002f1a <scalbnf+0x6a>
 8002eec:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002f80 <scalbnf+0xd0>
 8002ef0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002f84 <scalbnf+0xd4>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	eeb0 7a67 	vmov.f32	s14, s15
 8002efa:	bfb8      	it	lt
 8002efc:	eef0 7a66 	vmovlt.f32	s15, s13
 8002f00:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002f04:	4770      	bx	lr
 8002f06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002f0a:	4770      	bx	lr
 8002f0c:	4770      	bx	lr
 8002f0e:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8002f12:	4560      	cmp	r0, ip
 8002f14:	ea4f 51d1 	mov.w	r1, r1, lsr #23
 8002f18:	dce8      	bgt.n	8002eec <scalbnf+0x3c>
 8002f1a:	4401      	add	r1, r0
 8002f1c:	29fe      	cmp	r1, #254	; 0xfe
 8002f1e:	dce5      	bgt.n	8002eec <scalbnf+0x3c>
 8002f20:	2900      	cmp	r1, #0
 8002f22:	dc15      	bgt.n	8002f50 <scalbnf+0xa0>
 8002f24:	f111 0f16 	cmn.w	r1, #22
 8002f28:	db19      	blt.n	8002f5e <scalbnf+0xae>
 8002f2a:	3119      	adds	r1, #25
 8002f2c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002f30:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8002f34:	ee07 2a90 	vmov	s15, r2
 8002f38:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002f88 <scalbnf+0xd8>
 8002f3c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002f40:	4770      	bx	lr
 8002f42:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002f8c <scalbnf+0xdc>
 8002f46:	ee07 3a10 	vmov	s14, r3
 8002f4a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8002f4e:	4770      	bx	lr
 8002f50:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002f54:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8002f58:	ee00 3a10 	vmov	s0, r3
 8002f5c:	4770      	bx	lr
 8002f5e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002f8c <scalbnf+0xdc>
 8002f62:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002f90 <scalbnf+0xe0>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	eeb0 7a67 	vmov.f32	s14, s15
 8002f6c:	bfb8      	it	lt
 8002f6e:	eef0 7a66 	vmovlt.f32	s15, s13
 8002f72:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002f76:	4770      	bx	lr
 8002f78:	4c000000 	.word	0x4c000000
 8002f7c:	ffff3cb0 	.word	0xffff3cb0
 8002f80:	7149f2ca 	.word	0x7149f2ca
 8002f84:	f149f2ca 	.word	0xf149f2ca
 8002f88:	33000000 	.word	0x33000000
 8002f8c:	0da24260 	.word	0x0da24260
 8002f90:	8da24260 	.word	0x8da24260

08002f94 <floorf>:
 8002f94:	ee10 2a10 	vmov	r2, s0
 8002f98:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8002f9c:	3b7f      	subs	r3, #127	; 0x7f
 8002f9e:	2b16      	cmp	r3, #22
 8002fa0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8002fa4:	dc29      	bgt.n	8002ffa <floorf+0x66>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	4610      	mov	r0, r2
 8002faa:	db18      	blt.n	8002fde <floorf+0x4a>
 8002fac:	491a      	ldr	r1, [pc, #104]	; (8003018 <floorf+0x84>)
 8002fae:	4119      	asrs	r1, r3
 8002fb0:	420a      	tst	r2, r1
 8002fb2:	d021      	beq.n	8002ff8 <floorf+0x64>
 8002fb4:	eddf 7a19 	vldr	s15, [pc, #100]	; 800301c <floorf+0x88>
 8002fb8:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002fbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc4:	dd18      	ble.n	8002ff8 <floorf+0x64>
 8002fc6:	2a00      	cmp	r2, #0
 8002fc8:	da04      	bge.n	8002fd4 <floorf+0x40>
 8002fca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fce:	fa42 f303 	asr.w	r3, r2, r3
 8002fd2:	4418      	add	r0, r3
 8002fd4:	ea20 0301 	bic.w	r3, r0, r1
 8002fd8:	ee00 3a10 	vmov	s0, r3
 8002fdc:	4770      	bx	lr
 8002fde:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800301c <floorf+0x88>
 8002fe2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	dd03      	ble.n	8002ff8 <floorf+0x64>
 8002ff0:	2a00      	cmp	r2, #0
 8002ff2:	db08      	blt.n	8003006 <floorf+0x72>
 8002ff4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003020 <floorf+0x8c>
 8002ff8:	4770      	bx	lr
 8002ffa:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002ffe:	d3fb      	bcc.n	8002ff8 <floorf+0x64>
 8003000:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003004:	4770      	bx	lr
 8003006:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003024 <floorf+0x90>
 800300a:	2900      	cmp	r1, #0
 800300c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003010:	bf08      	it	eq
 8003012:	eeb0 0a67 	vmoveq.f32	s0, s15
 8003016:	4770      	bx	lr
 8003018:	007fffff 	.word	0x007fffff
 800301c:	7149f2ca 	.word	0x7149f2ca
 8003020:	00000000 	.word	0x00000000
 8003024:	80000000 	.word	0x80000000

08003028 <__aeabi_f2lz>:
 8003028:	ee07 0a90 	vmov	s15, r0
 800302c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003034:	d401      	bmi.n	800303a <__aeabi_f2lz+0x12>
 8003036:	f000 b80b 	b.w	8003050 <__aeabi_f2ulz>
 800303a:	eef1 7a67 	vneg.f32	s15, s15
 800303e:	b508      	push	{r3, lr}
 8003040:	ee17 0a90 	vmov	r0, s15
 8003044:	f000 f804 	bl	8003050 <__aeabi_f2ulz>
 8003048:	4240      	negs	r0, r0
 800304a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800304e:	bd08      	pop	{r3, pc}

08003050 <__aeabi_f2ulz>:
 8003050:	b5d0      	push	{r4, r6, r7, lr}
 8003052:	f7fd fc5d 	bl	8000910 <__aeabi_f2d>
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <__aeabi_f2ulz+0x38>)
 8003058:	2200      	movs	r2, #0
 800305a:	4606      	mov	r6, r0
 800305c:	460f      	mov	r7, r1
 800305e:	f7fd f9c9 	bl	80003f4 <__aeabi_dmul>
 8003062:	f7fd fcad 	bl	80009c0 <__aeabi_d2uiz>
 8003066:	4604      	mov	r4, r0
 8003068:	f7fd fc30 	bl	80008cc <__aeabi_ui2d>
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <__aeabi_f2ulz+0x3c>)
 800306e:	2200      	movs	r2, #0
 8003070:	f7fd f9c0 	bl	80003f4 <__aeabi_dmul>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4630      	mov	r0, r6
 800307a:	4639      	mov	r1, r7
 800307c:	f7fd fae8 	bl	8000650 <__aeabi_dsub>
 8003080:	f7fd fc9e 	bl	80009c0 <__aeabi_d2uiz>
 8003084:	4621      	mov	r1, r4
 8003086:	bdd0      	pop	{r4, r6, r7, pc}
 8003088:	3df00000 	.word	0x3df00000
 800308c:	41f00000 	.word	0x41f00000
