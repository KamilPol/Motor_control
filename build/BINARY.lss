
build/BINARY.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_frsub>:
 80005f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	e002      	b.n	80005fc <__addsf3>
 80005f6:	bf00      	nop

080005f8 <__aeabi_fsub>:
 80005f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005fc <__addsf3>:
 80005fc:	0042      	lsls	r2, r0, #1
 80005fe:	bf1f      	itttt	ne
 8000600:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000604:	ea92 0f03 	teqne	r2, r3
 8000608:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800060c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000610:	d06a      	beq.n	80006e8 <__addsf3+0xec>
 8000612:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000616:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800061a:	bfc1      	itttt	gt
 800061c:	18d2      	addgt	r2, r2, r3
 800061e:	4041      	eorgt	r1, r0
 8000620:	4048      	eorgt	r0, r1
 8000622:	4041      	eorgt	r1, r0
 8000624:	bfb8      	it	lt
 8000626:	425b      	neglt	r3, r3
 8000628:	2b19      	cmp	r3, #25
 800062a:	bf88      	it	hi
 800062c:	4770      	bxhi	lr
 800062e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000636:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000642:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000646:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800064a:	bf18      	it	ne
 800064c:	4249      	negne	r1, r1
 800064e:	ea92 0f03 	teq	r2, r3
 8000652:	d03f      	beq.n	80006d4 <__addsf3+0xd8>
 8000654:	f1a2 0201 	sub.w	r2, r2, #1
 8000658:	fa41 fc03 	asr.w	ip, r1, r3
 800065c:	eb10 000c 	adds.w	r0, r0, ip
 8000660:	f1c3 0320 	rsb	r3, r3, #32
 8000664:	fa01 f103 	lsl.w	r1, r1, r3
 8000668:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800066c:	d502      	bpl.n	8000674 <__addsf3+0x78>
 800066e:	4249      	negs	r1, r1
 8000670:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000674:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000678:	d313      	bcc.n	80006a2 <__addsf3+0xa6>
 800067a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800067e:	d306      	bcc.n	800068e <__addsf3+0x92>
 8000680:	0840      	lsrs	r0, r0, #1
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	f102 0201 	add.w	r2, r2, #1
 800068a:	2afe      	cmp	r2, #254	; 0xfe
 800068c:	d251      	bcs.n	8000732 <__addsf3+0x136>
 800068e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000692:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000696:	bf08      	it	eq
 8000698:	f020 0001 	biceq.w	r0, r0, #1
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	4770      	bx	lr
 80006a2:	0049      	lsls	r1, r1, #1
 80006a4:	eb40 0000 	adc.w	r0, r0, r0
 80006a8:	3a01      	subs	r2, #1
 80006aa:	bf28      	it	cs
 80006ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006b0:	d2ed      	bcs.n	800068e <__addsf3+0x92>
 80006b2:	fab0 fc80 	clz	ip, r0
 80006b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80006ba:	ebb2 020c 	subs.w	r2, r2, ip
 80006be:	fa00 f00c 	lsl.w	r0, r0, ip
 80006c2:	bfaa      	itet	ge
 80006c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006c8:	4252      	neglt	r2, r2
 80006ca:	4318      	orrge	r0, r3
 80006cc:	bfbc      	itt	lt
 80006ce:	40d0      	lsrlt	r0, r2
 80006d0:	4318      	orrlt	r0, r3
 80006d2:	4770      	bx	lr
 80006d4:	f092 0f00 	teq	r2, #0
 80006d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006dc:	bf06      	itte	eq
 80006de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006e2:	3201      	addeq	r2, #1
 80006e4:	3b01      	subne	r3, #1
 80006e6:	e7b5      	b.n	8000654 <__addsf3+0x58>
 80006e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f0:	bf18      	it	ne
 80006f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f6:	d021      	beq.n	800073c <__addsf3+0x140>
 80006f8:	ea92 0f03 	teq	r2, r3
 80006fc:	d004      	beq.n	8000708 <__addsf3+0x10c>
 80006fe:	f092 0f00 	teq	r2, #0
 8000702:	bf08      	it	eq
 8000704:	4608      	moveq	r0, r1
 8000706:	4770      	bx	lr
 8000708:	ea90 0f01 	teq	r0, r1
 800070c:	bf1c      	itt	ne
 800070e:	2000      	movne	r0, #0
 8000710:	4770      	bxne	lr
 8000712:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000716:	d104      	bne.n	8000722 <__addsf3+0x126>
 8000718:	0040      	lsls	r0, r0, #1
 800071a:	bf28      	it	cs
 800071c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000720:	4770      	bx	lr
 8000722:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000726:	bf3c      	itt	cc
 8000728:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800072c:	4770      	bxcc	lr
 800072e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000732:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000736:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800073a:	4770      	bx	lr
 800073c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000740:	bf16      	itet	ne
 8000742:	4608      	movne	r0, r1
 8000744:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000748:	4601      	movne	r1, r0
 800074a:	0242      	lsls	r2, r0, #9
 800074c:	bf06      	itte	eq
 800074e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000752:	ea90 0f01 	teqeq	r0, r1
 8000756:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800075a:	4770      	bx	lr

0800075c <__aeabi_ui2f>:
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	e004      	b.n	800076c <__aeabi_i2f+0x8>
 8000762:	bf00      	nop

08000764 <__aeabi_i2f>:
 8000764:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000768:	bf48      	it	mi
 800076a:	4240      	negmi	r0, r0
 800076c:	ea5f 0c00 	movs.w	ip, r0
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000778:	4601      	mov	r1, r0
 800077a:	f04f 0000 	mov.w	r0, #0
 800077e:	e01c      	b.n	80007ba <__aeabi_l2f+0x2a>

08000780 <__aeabi_ul2f>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	f04f 0300 	mov.w	r3, #0
 800078c:	e00a      	b.n	80007a4 <__aeabi_l2f+0x14>
 800078e:	bf00      	nop

08000790 <__aeabi_l2f>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800079c:	d502      	bpl.n	80007a4 <__aeabi_l2f+0x14>
 800079e:	4240      	negs	r0, r0
 80007a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a4:	ea5f 0c01 	movs.w	ip, r1
 80007a8:	bf02      	ittt	eq
 80007aa:	4684      	moveq	ip, r0
 80007ac:	4601      	moveq	r1, r0
 80007ae:	2000      	moveq	r0, #0
 80007b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007b4:	bf08      	it	eq
 80007b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007be:	fabc f28c 	clz	r2, ip
 80007c2:	3a08      	subs	r2, #8
 80007c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007c8:	db10      	blt.n	80007ec <__aeabi_l2f+0x5c>
 80007ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ce:	4463      	add	r3, ip
 80007d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80007d4:	f1c2 0220 	rsb	r2, r2, #32
 80007d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007dc:	fa20 f202 	lsr.w	r2, r0, r2
 80007e0:	eb43 0002 	adc.w	r0, r3, r2
 80007e4:	bf08      	it	eq
 80007e6:	f020 0001 	biceq.w	r0, r0, #1
 80007ea:	4770      	bx	lr
 80007ec:	f102 0220 	add.w	r2, r2, #32
 80007f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80007f4:	f1c2 0220 	rsb	r2, r2, #32
 80007f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000800:	eb43 0002 	adc.w	r0, r3, r2
 8000804:	bf08      	it	eq
 8000806:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800080a:	4770      	bx	lr

0800080c <__aeabi_dmul>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8de 	bleq	80009e8 <__aeabi_dmul+0x1dc>
 800082c:	442c      	add	r4, r5
 800082e:	ea81 0603 	eor.w	r6, r1, r3
 8000832:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000836:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800083a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800083e:	bf18      	it	ne
 8000840:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800084c:	d038      	beq.n	80008c0 <__aeabi_dmul+0xb4>
 800084e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000852:	f04f 0500 	mov.w	r5, #0
 8000856:	fbe1 e502 	umlal	lr, r5, r1, r2
 800085a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800085e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000862:	f04f 0600 	mov.w	r6, #0
 8000866:	fbe1 5603 	umlal	r5, r6, r1, r3
 800086a:	f09c 0f00 	teq	ip, #0
 800086e:	bf18      	it	ne
 8000870:	f04e 0e01 	orrne.w	lr, lr, #1
 8000874:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000878:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800087c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000880:	d204      	bcs.n	800088c <__aeabi_dmul+0x80>
 8000882:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000886:	416d      	adcs	r5, r5
 8000888:	eb46 0606 	adc.w	r6, r6, r6
 800088c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000890:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000894:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000898:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800089c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008a4:	bf88      	it	hi
 80008a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008aa:	d81e      	bhi.n	80008ea <__aeabi_dmul+0xde>
 80008ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008b0:	bf08      	it	eq
 80008b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008b6:	f150 0000 	adcs.w	r0, r0, #0
 80008ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008be:	bd70      	pop	{r4, r5, r6, pc}
 80008c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008c4:	ea46 0101 	orr.w	r1, r6, r1
 80008c8:	ea40 0002 	orr.w	r0, r0, r2
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008d4:	bfc2      	ittt	gt
 80008d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008de:	bd70      	popgt	{r4, r5, r6, pc}
 80008e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008e4:	f04f 0e00 	mov.w	lr, #0
 80008e8:	3c01      	subs	r4, #1
 80008ea:	f300 80ab 	bgt.w	8000a44 <__aeabi_dmul+0x238>
 80008ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80008f2:	bfde      	ittt	le
 80008f4:	2000      	movle	r0, #0
 80008f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80008fa:	bd70      	pople	{r4, r5, r6, pc}
 80008fc:	f1c4 0400 	rsb	r4, r4, #0
 8000900:	3c20      	subs	r4, #32
 8000902:	da35      	bge.n	8000970 <__aeabi_dmul+0x164>
 8000904:	340c      	adds	r4, #12
 8000906:	dc1b      	bgt.n	8000940 <__aeabi_dmul+0x134>
 8000908:	f104 0414 	add.w	r4, r4, #20
 800090c:	f1c4 0520 	rsb	r5, r4, #32
 8000910:	fa00 f305 	lsl.w	r3, r0, r5
 8000914:	fa20 f004 	lsr.w	r0, r0, r4
 8000918:	fa01 f205 	lsl.w	r2, r1, r5
 800091c:	ea40 0002 	orr.w	r0, r0, r2
 8000920:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000924:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000928:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800092c:	fa21 f604 	lsr.w	r6, r1, r4
 8000930:	eb42 0106 	adc.w	r1, r2, r6
 8000934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000938:	bf08      	it	eq
 800093a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f1c4 040c 	rsb	r4, r4, #12
 8000944:	f1c4 0520 	rsb	r5, r4, #32
 8000948:	fa00 f304 	lsl.w	r3, r0, r4
 800094c:	fa20 f005 	lsr.w	r0, r0, r5
 8000950:	fa01 f204 	lsl.w	r2, r1, r4
 8000954:	ea40 0002 	orr.w	r0, r0, r2
 8000958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800095c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000960:	f141 0100 	adc.w	r1, r1, #0
 8000964:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000968:	bf08      	it	eq
 800096a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	f1c4 0520 	rsb	r5, r4, #32
 8000974:	fa00 f205 	lsl.w	r2, r0, r5
 8000978:	ea4e 0e02 	orr.w	lr, lr, r2
 800097c:	fa20 f304 	lsr.w	r3, r0, r4
 8000980:	fa01 f205 	lsl.w	r2, r1, r5
 8000984:	ea43 0302 	orr.w	r3, r3, r2
 8000988:	fa21 f004 	lsr.w	r0, r1, r4
 800098c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000990:	fa21 f204 	lsr.w	r2, r1, r4
 8000994:	ea20 0002 	bic.w	r0, r0, r2
 8000998:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800099c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a0:	bf08      	it	eq
 80009a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f094 0f00 	teq	r4, #0
 80009ac:	d10f      	bne.n	80009ce <__aeabi_dmul+0x1c2>
 80009ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009b2:	0040      	lsls	r0, r0, #1
 80009b4:	eb41 0101 	adc.w	r1, r1, r1
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf08      	it	eq
 80009be:	3c01      	subeq	r4, #1
 80009c0:	d0f7      	beq.n	80009b2 <__aeabi_dmul+0x1a6>
 80009c2:	ea41 0106 	orr.w	r1, r1, r6
 80009c6:	f095 0f00 	teq	r5, #0
 80009ca:	bf18      	it	ne
 80009cc:	4770      	bxne	lr
 80009ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009d2:	0052      	lsls	r2, r2, #1
 80009d4:	eb43 0303 	adc.w	r3, r3, r3
 80009d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009dc:	bf08      	it	eq
 80009de:	3d01      	subeq	r5, #1
 80009e0:	d0f7      	beq.n	80009d2 <__aeabi_dmul+0x1c6>
 80009e2:	ea43 0306 	orr.w	r3, r3, r6
 80009e6:	4770      	bx	lr
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f0:	bf18      	it	ne
 80009f2:	ea95 0f0c 	teqne	r5, ip
 80009f6:	d00c      	beq.n	8000a12 <__aeabi_dmul+0x206>
 80009f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009fc:	bf18      	it	ne
 80009fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a02:	d1d1      	bne.n	80009a8 <__aeabi_dmul+0x19c>
 8000a04:	ea81 0103 	eor.w	r1, r1, r3
 8000a08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	bd70      	pop	{r4, r5, r6, pc}
 8000a12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a16:	bf06      	itte	eq
 8000a18:	4610      	moveq	r0, r2
 8000a1a:	4619      	moveq	r1, r3
 8000a1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a20:	d019      	beq.n	8000a56 <__aeabi_dmul+0x24a>
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dmul+0x222>
 8000a28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a2c:	d113      	bne.n	8000a56 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	d105      	bne.n	8000a40 <__aeabi_dmul+0x234>
 8000a34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a38:	bf1c      	itt	ne
 8000a3a:	4610      	movne	r0, r2
 8000a3c:	4619      	movne	r1, r3
 8000a3e:	d10a      	bne.n	8000a56 <__aeabi_dmul+0x24a>
 8000a40:	ea81 0103 	eor.w	r1, r1, r3
 8000a44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
 8000a56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}

08000a60 <__aeabi_d2uiz>:
 8000a60:	004a      	lsls	r2, r1, #1
 8000a62:	d211      	bcs.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d211      	bcs.n	8000a8e <__aeabi_d2uiz+0x2e>
 8000a6a:	d50d      	bpl.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d40e      	bmi.n	8000a94 <__aeabi_d2uiz+0x34>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_d2uiz+0x3a>
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0000 	mov.w	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <_ZN12ClockManager18internalFreqUpdateEm>:

void ClockManager::internalFreqUpdate(uint32_t _targetFreq)
{
	uint32_t flashDiv = 35000000;

	if (_targetFreq < 26000000)
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <_ZN12ClockManager18internalFreqUpdateEm+0x74>)
 8000aa2:	4298      	cmp	r0, r3
{
 8000aa4:	b430      	push	{r4, r5}
	if (_targetFreq < 26000000)
 8000aa6:	d81d      	bhi.n	8000ae4 <_ZN12ClockManager18internalFreqUpdateEm+0x44>
	{
		
		PWR->CR1 = 0x2 << PWR_CR1_VOS_Pos;
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <_ZN12ClockManager18internalFreqUpdateEm+0x78>)
 8000aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aae:	6013      	str	r3, [r2, #0]
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000ab0:	6953      	ldr	r3, [r2, #20]
 8000ab2:	0559      	lsls	r1, r3, #21
 8000ab4:	d4fc      	bmi.n	8000ab0 <_ZN12ClockManager18internalFreqUpdateEm+0x10>
		flashDiv = 12000000;
 8000ab6:	4d19      	ldr	r5, [pc, #100]	; (8000b1c <_ZN12ClockManager18internalFreqUpdateEm+0x7c>)
		while(PWR->SR2 & PWR_SR2_VOSF);
		PWR->CR5 = 0;
		flashDiv = 34000000;
	}

	ahbClock = _targetFreq;
 8000ab8:	4c19      	ldr	r4, [pc, #100]	; (8000b20 <_ZN12ClockManager18internalFreqUpdateEm+0x80>)

	uint32_t waitStates = ahbClock / flashDiv < 15 ? ahbClock / flashDiv : 15;
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000aba:	491a      	ldr	r1, [pc, #104]	; (8000b24 <_ZN12ClockManager18internalFreqUpdateEm+0x84>)
	ahbClock = _targetFreq;
 8000abc:	6020      	str	r0, [r4, #0]
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000abe:	680a      	ldr	r2, [r1, #0]
	uint32_t waitStates = ahbClock / flashDiv < 15 ? ahbClock / flashDiv : 15;
 8000ac0:	fbb0 f0f5 	udiv	r0, r0, r5
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000ac4:	f022 020f 	bic.w	r2, r2, #15
 8000ac8:	280f      	cmp	r0, #15
 8000aca:	bf94      	ite	ls
 8000acc:	4302      	orrls	r2, r0
 8000ace:	f042 020f 	orrhi.w	r2, r2, #15
	
	FLASH->ACR = flashConf;
 8000ad2:	600a      	str	r2, [r1, #0]
	while(FLASH->ACR != flashConf)
 8000ad4:	680b      	ldr	r3, [r1, #0]
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d1fc      	bne.n	8000ad4 <_ZN12ClockManager18internalFreqUpdateEm+0x34>
		;


	apbClock = ahbClock;
	timerClock = apbClock;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <_ZN12ClockManager18internalFreqUpdateEm+0x88>)
 8000adc:	6822      	ldr	r2, [r4, #0]
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	bc30      	pop	{r4, r5}
 8000ae2:	4770      	bx	lr
	else if (_targetFreq < 150000000)
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <_ZN12ClockManager18internalFreqUpdateEm+0x8c>)
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 8000ae6:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <_ZN12ClockManager18internalFreqUpdateEm+0x78>)
	else if (_targetFreq < 150000000)
 8000ae8:	4298      	cmp	r0, r3
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 8000aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aee:	6013      	str	r3, [r2, #0]
	else if (_targetFreq < 150000000)
 8000af0:	d808      	bhi.n	8000b04 <_ZN12ClockManager18internalFreqUpdateEm+0x64>
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000af2:	6953      	ldr	r3, [r2, #20]
 8000af4:	055b      	lsls	r3, r3, #21
 8000af6:	d4fc      	bmi.n	8000af2 <_ZN12ClockManager18internalFreqUpdateEm+0x52>
		PWR->CR5 = PWR_CR5_R1MODE;
 8000af8:	f44f 7380 	mov.w	r3, #256	; 0x100
		flashDiv = 30000000;
 8000afc:	4d0c      	ldr	r5, [pc, #48]	; (8000b30 <_ZN12ClockManager18internalFreqUpdateEm+0x90>)
		PWR->CR5 = PWR_CR5_R1MODE;
 8000afe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		flashDiv = 30000000;
 8000b02:	e7d9      	b.n	8000ab8 <_ZN12ClockManager18internalFreqUpdateEm+0x18>
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000b04:	6953      	ldr	r3, [r2, #20]
 8000b06:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000b0a:	d1fb      	bne.n	8000b04 <_ZN12ClockManager18internalFreqUpdateEm+0x64>
		flashDiv = 34000000;
 8000b0c:	4d09      	ldr	r5, [pc, #36]	; (8000b34 <_ZN12ClockManager18internalFreqUpdateEm+0x94>)
		PWR->CR5 = 0;
 8000b0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		flashDiv = 34000000;
 8000b12:	e7d1      	b.n	8000ab8 <_ZN12ClockManager18internalFreqUpdateEm+0x18>
 8000b14:	018cba7f 	.word	0x018cba7f
 8000b18:	40007000 	.word	0x40007000
 8000b1c:	00b71b00 	.word	0x00b71b00
 8000b20:	20000000 	.word	0x20000000
 8000b24:	40022000 	.word	0x40022000
 8000b28:	2000000c 	.word	0x2000000c
 8000b2c:	08f0d17f 	.word	0x08f0d17f
 8000b30:	01c9c380 	.word	0x01c9c380
 8000b34:	0206cc80 	.word	0x0206cc80

08000b38 <_ZN3PID4InitEv>:
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
	_lastInput = *_myInput;
 8000b38:	e9d0 3209 	ldrd	r3, r2, [r0, #36]	; 0x24
	
	if (_outputSum > _outMax)
 8000b3c:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
	_outputSum = *_myOutput;
 8000b40:	edd2 7a00 	vldr	s15, [r2]
 8000b44:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
	if (_outputSum > _outMax)
 8000b48:	eef4 7ac7 	vcmpe.f32	s15, s14
	_lastInput = *_myInput;
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6343      	str	r3, [r0, #52]	; 0x34
	if (_outputSum > _outMax)
 8000b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b54:	dc06      	bgt.n	8000b64 <_ZN3PID4InitEv+0x2c>
	{
		_outputSum = _outMax;
	}
	else if (_outputSum < _outMin)
 8000b56:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8000b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b62:	d501      	bpl.n	8000b68 <_ZN3PID4InitEv+0x30>
	{
		_outputSum = _outMin;
 8000b64:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
	}
	else { }
	
}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <_ZN3PID15SetOutputLimitsEff>:

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(float Min, float Max)
{
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8000b6c:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8000b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b74:	da26      	bge.n	8000bc4 <_ZN3PID15SetOutputLimitsEff+0x58>
	
	_outMin = Min;
	_outMax = Max;
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8000b76:	7843      	ldrb	r3, [r0, #1]
	_outMin = Min;
 8000b78:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
	_outMax = Max;
 8000b7c:	edc0 0a0f 	vstr	s1, [r0, #60]	; 0x3c
	if (_inAuto)
 8000b80:	b303      	cbz	r3, 8000bc4 <_ZN3PID15SetOutputLimitsEff+0x58>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8000b82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b84:	edd3 7a00 	vldr	s15, [r3]
 8000b88:	eef4 7ae0 	vcmpe.f32	s15, s1
 8000b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b90:	dc19      	bgt.n	8000bc6 <_ZN3PID15SetOutputLimitsEff+0x5a>
		{
			*_myOutput = _outMax;
		}
		else if (*_myOutput < _outMin)
 8000b92:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			*_myOutput = _outMin;
 8000b9a:	bf48      	it	mi
 8000b9c:	ed83 0a00 	vstrmi	s0, [r3]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8000ba0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8000ba4:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 8000ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb0:	dc06      	bgt.n	8000bc0 <_ZN3PID15SetOutputLimitsEff+0x54>
		{
			_outputSum = _outMax;
		}
		else if (_outputSum < _outMin)
 8000bb2:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8000bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbe:	d501      	bpl.n	8000bc4 <_ZN3PID15SetOutputLimitsEff+0x58>
		{
			_outputSum = _outMin;
 8000bc0:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
		}
		else { }
		
	}
	
}
 8000bc4:	4770      	bx	lr
			*_myOutput = _outMax;
 8000bc6:	edc3 0a00 	vstr	s1, [r3]
 8000bca:	e7e9      	b.n	8000ba0 <_ZN3PID15SetOutputLimitsEff+0x34>

08000bcc <_ZN6Serial5printEdh.constprop.0>:
	char charTab[11]={};
	typeConverter::IntToString(_number, charTab);
	print(charTab);
}

void Serial::print(double _number, uint8_t _percision)
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	ed2d 8b02 	vpush	{d8}
 8000bd2:	b086      	sub	sp, #24
{
	char charTab[20]={};
 8000bd4:	2300      	movs	r3, #0
void Serial::print(double _number, uint8_t _percision)
 8000bd6:	ec51 0b10 	vmov	r0, r1, d0
	char charTab[20]={};
 8000bda:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000bde:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000be2:	9305      	str	r3, [sp, #20]
	typeConverter::fractionalToString(_number, charTab, _percision);
 8000be4:	f7ff fcb4 	bl	8000550 <__aeabi_d2f>
 8000be8:	ee08 0a10 	vmov	s16, r0

void typeConverter::fractionalToString (float _number, char * _string, uint8_t _precision)
{
	int i=0;
	bool negative = _number<0? true : false;
	int64_t integerPart = static_cast<int64_t>(_number);
 8000bec:	f002 f988 	bl	8002f00 <__aeabi_f2lz>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460d      	mov	r5, r1
	float fractionalPart;
	fractionalPart =  _number - integerPart;
 8000bf4:	f7ff fdcc 	bl	8000790 <__aeabi_l2f>
 8000bf8:	ee07 0a10 	vmov	s14, r0
 8000bfc:	ee78 7a47 	vsub.f32	s15, s16, s14
	fractionalPart <0 ? fractionalPart = -fractionalPart : fractionalPart = fractionalPart;
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000c00:	4623      	mov	r3, r4
	fractionalPart <0 ? fractionalPart = -fractionalPart : fractionalPart = fractionalPart;
 8000c02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0a:	bf48      	it	mi
 8000c0c:	ee77 7a48 	vsubmi.f32	s15, s14, s16
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	db6b      	blt.n	8000cec <_ZN6Serial5printEdh.constprop.0+0x120>
	
	if (absNumber==0) 
 8000c14:	b973      	cbnz	r3, 8000c34 <_ZN6Serial5printEdh.constprop.0+0x68>
	while (absNumber)
	{
		_string[i++]=absNumber % 10 + '0';
		absNumber /= 10;
	}
	if (negative)
 8000c16:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		_string[0]='0';
 8000c1a:	2330      	movs	r3, #48	; 0x30
	if (negative)
 8000c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		_string[0]='0';
 8000c20:	f88d 3004 	strb.w	r3, [sp, #4]
	if (negative)
 8000c24:	d475      	bmi.n	8000d12 <_ZN6Serial5printEdh.constprop.0+0x146>
 8000c26:	a801      	add	r0, sp, #4
		_string[i++]='-';
	reverseArray(_string, i);

	_string[i++]='.';
 8000c28:	232e      	movs	r3, #46	; 0x2e
 8000c2a:	f88d 3005 	strb.w	r3, [sp, #5]
 8000c2e:	2505      	movs	r5, #5
 8000c30:	2102      	movs	r1, #2
 8000c32:	e033      	b.n	8000c9c <_ZN6Serial5printEdh.constprop.0+0xd0>
 8000c34:	a801      	add	r0, sp, #4
		_string[i++]=absNumber % 10 + '0';
 8000c36:	4d3c      	ldr	r5, [pc, #240]	; (8000d28 <_ZN6Serial5printEdh.constprop.0+0x15c>)
 8000c38:	4604      	mov	r4, r0
	int i=0;
 8000c3a:	2200      	movs	r2, #0
		_string[i++]=absNumber % 10 + '0';
 8000c3c:	fb85 1c03 	smull	r1, ip, r5, r3
 8000c40:	17d9      	asrs	r1, r3, #31
 8000c42:	ebc1 01ac 	rsb	r1, r1, ip, asr #2
 8000c46:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8000c4a:	eba3 034c 	sub.w	r3, r3, ip, lsl #1
 8000c4e:	3330      	adds	r3, #48	; 0x30
 8000c50:	f804 3b01 	strb.w	r3, [r4], #1
 8000c54:	4694      	mov	ip, r2
	while (absNumber)
 8000c56:	460b      	mov	r3, r1
		_string[i++]=absNumber % 10 + '0';
 8000c58:	3201      	adds	r2, #1
	while (absNumber)
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d1ee      	bne.n	8000c3c <_ZN6Serial5printEdh.constprop.0+0x70>
	if (negative)
 8000c5e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c66:	d443      	bmi.n	8000cf0 <_ZN6Serial5printEdh.constprop.0+0x124>
		return number;
}

void typeConverter::reverseArray(char* _charTab, int _lenght)
{
	for (int i =0; i<_lenght/2; i++)
 8000c68:	ea5f 0e62 	movs.w	lr, r2, asr #1
		_string[i++]='-';
 8000c6c:	f10c 0102 	add.w	r1, ip, #2
 8000c70:	4616      	mov	r6, r2
	for (int j=i; j<_precision+i; j++)
 8000c72:	f10c 0505 	add.w	r5, ip, #5
	for (int i =0; i<_lenght/2; i++)
 8000c76:	d0d7      	beq.n	8000c28 <_ZN6Serial5printEdh.constprop.0+0x5c>
 8000c78:	4402      	add	r2, r0
 8000c7a:	4486      	add	lr, r0
 8000c7c:	4603      	mov	r3, r0
	{
		char temp = _charTab[i];
		_charTab [i] = _charTab [_lenght-i -1];
 8000c7e:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
		char temp = _charTab[i];
 8000c82:	781c      	ldrb	r4, [r3, #0]
		_charTab [i] = _charTab [_lenght-i -1];
 8000c84:	f803 cb01 	strb.w	ip, [r3], #1
	for (int i =0; i<_lenght/2; i++)
 8000c88:	459e      	cmp	lr, r3
		_charTab [_lenght-i -1] = temp;
 8000c8a:	7014      	strb	r4, [r2, #0]
	for (int i =0; i<_lenght/2; i++)
 8000c8c:	d1f7      	bne.n	8000c7e <_ZN6Serial5printEdh.constprop.0+0xb2>
	_string[i++]='.';
 8000c8e:	f106 0318 	add.w	r3, r6, #24
 8000c92:	eb0d 0603 	add.w	r6, sp, r3
 8000c96:	232e      	movs	r3, #46	; 0x2e
 8000c98:	f806 3c14 	strb.w	r3, [r6, #-20]
 8000c9c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000ca0:	1843      	adds	r3, r0, r1
		fractionalPart *=10;
 8000ca2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
		fractionalPart -= static_cast<int>(fractionalPart);
 8000ca6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	for (int j=i; j<_precision+i; j++)
 8000caa:	3101      	adds	r1, #1
		fractionalPart -= static_cast<int>(fractionalPart);
 8000cac:	ee77 7ac7 	vsub.f32	s15, s15, s14
	for (int j=i; j<_precision+i; j++)
 8000cb0:	42a9      	cmp	r1, r5
		fractionalPart *=10;
 8000cb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
		_string[j]= static_cast<int>(fractionalPart) + '0';
 8000cb6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000cba:	ee17 2a10 	vmov	r2, s14
 8000cbe:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000cc2:	f803 2b01 	strb.w	r2, [r3], #1
	for (int j=i; j<_precision+i; j++)
 8000cc6:	dbee      	blt.n	8000ca6 <_ZN6Serial5printEdh.constprop.0+0xda>
	while (*_string)
 8000cc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ccc:	b153      	cbz	r3, 8000ce4 <_ZN6Serial5printEdh.constprop.0+0x118>
	USARTx->TDR = _char;
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <_ZN6Serial5printEdh.constprop.0+0x160>)
 8000cd0:	6852      	ldr	r2, [r2, #4]
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8000cd6:	69d3      	ldr	r3, [r2, #28]
 8000cd8:	065b      	lsls	r3, r3, #25
 8000cda:	d5fc      	bpl.n	8000cd6 <_ZN6Serial5printEdh.constprop.0+0x10a>
	while (*_string)
 8000cdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1f7      	bne.n	8000cd4 <_ZN6Serial5printEdh.constprop.0+0x108>
	print(charTab);
}
 8000ce4:	b006      	add	sp, #24
 8000ce6:	ecbd 8b02 	vpop	{d8}
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000cec:	4263      	negs	r3, r4
 8000cee:	e791      	b.n	8000c14 <_ZN6Serial5printEdh.constprop.0+0x48>
		_string[i++]='-';
 8000cf0:	f102 0318 	add.w	r3, r2, #24
 8000cf4:	eb0d 0203 	add.w	r2, sp, r3
 8000cf8:	f10c 0602 	add.w	r6, ip, #2
 8000cfc:	232d      	movs	r3, #45	; 0x2d
 8000cfe:	f802 3c14 	strb.w	r3, [r2, #-20]
	for (int i =0; i<_lenght/2; i++)
 8000d02:	ea4f 0e66 	mov.w	lr, r6, asr #1
		_string[i++]='-';
 8000d06:	4632      	mov	r2, r6
	_string[i++]='.';
 8000d08:	f10c 0103 	add.w	r1, ip, #3
	for (int j=i; j<_precision+i; j++)
 8000d0c:	f10c 0506 	add.w	r5, ip, #6
 8000d10:	e7b2      	b.n	8000c78 <_ZN6Serial5printEdh.constprop.0+0xac>
		_string[i++]='-';
 8000d12:	232d      	movs	r3, #45	; 0x2d
 8000d14:	2602      	movs	r6, #2
 8000d16:	f88d 3005 	strb.w	r3, [sp, #5]
 8000d1a:	2506      	movs	r5, #6
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	f04f 0e01 	mov.w	lr, #1
 8000d22:	4632      	mov	r2, r6
 8000d24:	a801      	add	r0, sp, #4
 8000d26:	e7a7      	b.n	8000c78 <_ZN6Serial5printEdh.constprop.0+0xac>
 8000d28:	66666667 	.word	0x66666667
 8000d2c:	200001b0 	.word	0x200001b0

08000d30 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>:
	_myOutput   = Output;
 8000d30:	6282      	str	r2, [r0, #40]	; 0x28
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8000d32:	2200      	movs	r2, #0
PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8000d34:	b510      	push	{r4, lr}
	_mySetpoint = Setpoint;
 8000d36:	62c3      	str	r3, [r0, #44]	; 0x2c
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8000d38:	7042      	strb	r2, [r0, #1]
PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8000d3a:	eef0 6a40 	vmov.f32	s13, s0
 8000d3e:	eeb0 6a60 	vmov.f32	s12, s1
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8000d42:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8000dc8 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x98>
 8000d46:	eddf 0a21 	vldr	s1, [pc, #132]	; 8000dcc <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x9c>
	_myInput    = Input;
 8000d4a:	6241      	str	r1, [r0, #36]	; 0x24
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8000d4c:	f7ff ff0e 	bl	8000b6c <_ZN3PID15SetOutputLimitsEff>

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8000d50:	7843      	ldrb	r3, [r0, #1]
	_sampleTime = _PID_SAMPLE_TIME_US_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000d52:	2219      	movs	r2, #25
PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8000d54:	4604      	mov	r4, r0
	_sampleTime = _PID_SAMPLE_TIME_US_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000d56:	6082      	str	r2, [r0, #8]
	if ((_inAuto) && (Direction != _controllerDirection))
 8000d58:	b19b      	cbz	r3, 8000d82 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x52>
 8000d5a:	78c3      	ldrb	r3, [r0, #3]
 8000d5c:	b18b      	cbz	r3, 8000d82 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x52>
	{
		
		_kp = (0 - _kp);
 8000d5e:	edd0 5a06 	vldr	s11, [r0, #24]
		_ki = (0 - _ki);
 8000d62:	ed90 7a07 	vldr	s14, [r0, #28]
		_kd = (0 - _kd);
 8000d66:	edd0 7a08 	vldr	s15, [r0, #32]
		_kp = (0 - _kp);
 8000d6a:	eef1 5a65 	vneg.f32	s11, s11
		_ki = (0 - _ki);
 8000d6e:	eeb1 7a47 	vneg.f32	s14, s14
		_kd = (0 - _kd);
 8000d72:	eef1 7a67 	vneg.f32	s15, s15
		_kp = (0 - _kp);
 8000d76:	edc0 5a06 	vstr	s11, [r0, #24]
		_ki = (0 - _ki);
 8000d7a:	ed80 7a07 	vstr	s14, [r0, #28]
		_kd = (0 - _kd);
 8000d7e:	edc0 7a08 	vstr	s15, [r0, #32]
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8000d82:	eef5 6ac0 	vcmpe.f32	s13, #0.0
		
	}
	
	_controllerDirection = Direction;
 8000d86:	2300      	movs	r3, #0
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8000d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	_controllerDirection = Direction;
 8000d8c:	70e3      	strb	r3, [r4, #3]
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	d415      	bmi.n	8000dc0 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x90>
 8000d94:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8000d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9c:	d410      	bmi.n	8000dc0 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x90>
	_ki = Ki * SampleTimeInSec;
 8000d9e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000dd0 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0xa0>
	_dispKp = Kp;
 8000da2:	edc4 6a03 	vstr	s13, [r4, #12]
	_ki = Ki * SampleTimeInSec;
 8000da6:	ee66 7a27 	vmul.f32	s15, s12, s15
	_pOn    = POn;
 8000daa:	2201      	movs	r2, #1
 8000dac:	70a2      	strb	r2, [r4, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8000dae:	7022      	strb	r2, [r4, #0]
	_dispKi = Ki;
 8000db0:	ed84 6a04 	vstr	s12, [r4, #16]
	_dispKd = Kd;
 8000db4:	6163      	str	r3, [r4, #20]
	_kp = Kp;
 8000db6:	edc4 6a06 	vstr	s13, [r4, #24]
	_ki = Ki * SampleTimeInSec;
 8000dba:	edc4 7a07 	vstr	s15, [r4, #28]
	_kd = Kd / SampleTimeInSec;
 8000dbe:	6223      	str	r3, [r4, #32]
	_lastTime = GetTime() - _sampleTime;
 8000dc0:	f06f 0318 	mvn.w	r3, #24
 8000dc4:	6063      	str	r3, [r4, #4]
}
 8000dc6:	bd10      	pop	{r4, pc}
 8000dc8:	00000000 	.word	0x00000000
 8000dcc:	437f0000 	.word	0x437f0000
 8000dd0:	37d1b717 	.word	0x37d1b717

08000dd4 <adc_init.constprop.0.isra.0>:
#include "adc.h"

adcError_t adc_init(adcChannel_t* aIns)
{
    switch ((uint32_t)aIns->adc)
 8000dd4:	4a59      	ldr	r2, [pc, #356]	; (8000f3c <adc_init.constprop.0.isra.0+0x168>)
 8000dd6:	6803      	ldr	r3, [r0, #0]
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d008      	beq.n	8000dee <adc_init.constprop.0.isra.0+0x1a>
 8000ddc:	d97d      	bls.n	8000eda <adc_init.constprop.0.isra.0+0x106>
 8000dde:	4a58      	ldr	r2, [pc, #352]	; (8000f40 <adc_init.constprop.0.isra.0+0x16c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d004      	beq.n	8000dee <adc_init.constprop.0.isra.0+0x1a>
 8000de4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000de8:	4293      	cmp	r3, r2
 8000dea:	f040 80a4 	bne.w	8000f36 <adc_init.constprop.0.isra.0+0x162>
        case ADC4_BASE:
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
        break;
        case ADC5_BASE:
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
 8000dee:	4955      	ldr	r1, [pc, #340]	; (8000f44 <adc_init.constprop.0.isra.0+0x170>)
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
 8000df0:	4a55      	ldr	r2, [pc, #340]	; (8000f48 <adc_init.constprop.0.isra.0+0x174>)
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
 8000df2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	64cb      	str	r3, [r1, #76]	; 0x4c
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
 8000dfa:	6893      	ldr	r3, [r2, #8]
 8000dfc:	f443 0386 	orr.w	r3, r3, #4390912	; 0x430000
 8000e00:	6093      	str	r3, [r2, #8]
        default:
            return wrongADCmodule;
        break;
    }

	aIns->adc->CR |= ADC_CR_ADSTP;
 8000e02:	6802      	ldr	r2, [r0, #0]
 8000e04:	6893      	ldr	r3, [r2, #8]
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6093      	str	r3, [r2, #8]
	while((aIns->adc->ISR & ADC_ISR_ADRDY));	
 8000e0c:	6802      	ldr	r2, [r0, #0]
 8000e0e:	6813      	ldr	r3, [r2, #0]
 8000e10:	f013 0301 	ands.w	r3, r3, #1
 8000e14:	d1fb      	bne.n	8000e0e <adc_init.constprop.0.isra.0+0x3a>
	aIns->adc->CR =0;
 8000e16:	6093      	str	r3, [r2, #8]
    aIns->adc->CFGR = 0x80000000;
 8000e18:	6802      	ldr	r2, [r0, #0]
 8000e1a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000e1e:	60d1      	str	r1, [r2, #12]
	aIns->adc->CFGR = ADC_CFGR_OVRMOD | aIns->triggerEdge<<ADC_CFGR_EXTEN_Pos | aIns->externalTriggerEvent<<ADC_CFGR_EXTSEL_Pos | ADC_CFGR_DMAEN | ADC_CFGR_DMACFG; // Set overrun mode, external trigger rising edge, TIM1_TRGO as trigger, DMA enable, DMA circular mode
 8000e20:	6902      	ldr	r2, [r0, #16]
 8000e22:	7b01      	ldrb	r1, [r0, #12]
 8000e24:	0152      	lsls	r2, r2, #5
 8000e26:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000e2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e2e:	6801      	ldr	r1, [r0, #0]
 8000e30:	f042 0203 	orr.w	r2, r2, #3
 8000e34:	60ca      	str	r2, [r1, #12]
	if (aIns->triggerEdge == noEXTtrigger)
 8000e36:	7b02      	ldrb	r2, [r0, #12]
 8000e38:	2a00      	cmp	r2, #0
 8000e3a:	d075      	beq.n	8000f28 <adc_init.constprop.0.isra.0+0x154>
    {
        aIns->adc->CFGR |= ADC_CFGR_CONT;
    }
    aIns->adc->CR |= ADC_CR_ADVREGEN;	
 8000e3c:	6801      	ldr	r1, [r0, #0]
 8000e3e:	688a      	ldr	r2, [r1, #8]
 8000e40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e44:	608a      	str	r2, [r1, #8]
	aIns->adc->CR |= ADC_CR_ADCAL;
 8000e46:	6801      	ldr	r1, [r0, #0]
 8000e48:	688a      	ldr	r2, [r1, #8]
 8000e4a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e4e:	608a      	str	r2, [r1, #8]
	while(aIns->adc->CR & ADC_CR_ADCAL);
 8000e50:	6801      	ldr	r1, [r0, #0]
 8000e52:	688a      	ldr	r2, [r1, #8]
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	dbfc      	blt.n	8000e52 <adc_init.constprop.0.isra.0+0x7e>

    if (aIns->channelsCount>16)
 8000e58:	6842      	ldr	r2, [r0, #4]
 8000e5a:	2a10      	cmp	r2, #16
 8000e5c:	d86a      	bhi.n	8000f34 <adc_init.constprop.0.isra.0+0x160>
adcError_t adc_init(adcChannel_t* aIns)
 8000e5e:	b530      	push	{r4, r5, lr}
       return channelCountErr;
	aIns->adc->SQR1 |= (aIns->channelsCount-1)<<ADC_SQR1_L_Pos; 
 8000e60:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8000e62:	3a01      	subs	r2, #1
 8000e64:	4322      	orrs	r2, r4
 8000e66:	630a      	str	r2, [r1, #48]	; 0x30

    for (uint32_t i=0; i<aIns->channelsCount; i++)
 8000e68:	6842      	ldr	r2, [r0, #4]
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d047      	beq.n	8000efe <adc_init.constprop.0.isra.0+0x12a>
 8000e6e:	2106      	movs	r1, #6
 8000e70:	f04f 0c01 	mov.w	ip, #1
 8000e74:	e00e      	b.n	8000e94 <adc_init.constprop.0.isra.0+0xc0>
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
            return channelNumberErr;

        if (i<=4)
        {
            aIns->adc->SQR1 |= *(aIns->channels+i) << (6+i*6); 
 8000e76:	6804      	ldr	r4, [r0, #0]
 8000e78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e7a:	ea4e 0202 	orr.w	r2, lr, r2
 8000e7e:	6322      	str	r2, [r4, #48]	; 0x30
    for (uint32_t i=0; i<aIns->channelsCount; i++)
 8000e80:	6842      	ldr	r2, [r0, #4]
 8000e82:	4562      	cmp	r2, ip
 8000e84:	f10c 0401 	add.w	r4, ip, #1
 8000e88:	f103 0301 	add.w	r3, r3, #1
 8000e8c:	f101 0106 	add.w	r1, r1, #6
 8000e90:	d935      	bls.n	8000efe <adc_init.constprop.0.isra.0+0x12a>
 8000e92:	46a4      	mov	ip, r4
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
 8000e94:	6882      	ldr	r2, [r0, #8]
 8000e96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e9a:	1e54      	subs	r4, r2, #1
 8000e9c:	2c0f      	cmp	r4, #15
            aIns->adc->SQR1 |= *(aIns->channels+i) << (6+i*6); 
 8000e9e:	fa02 fe01 	lsl.w	lr, r2, r1
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
 8000ea2:	d839      	bhi.n	8000f18 <adc_init.constprop.0.isra.0+0x144>
        if (i<=4)
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d9e6      	bls.n	8000e76 <adc_init.constprop.0.isra.0+0xa2>
        }else if(i<=9)
        {
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000ea8:	f1a1 0e24 	sub.w	lr, r1, #36	; 0x24
        }else if(i<=9)
 8000eac:	2b09      	cmp	r3, #9
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000eae:	fa02 fe0e 	lsl.w	lr, r2, lr
        }else if(i<=9)
 8000eb2:	d805      	bhi.n	8000ec0 <adc_init.constprop.0.isra.0+0xec>
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000eb4:	6804      	ldr	r4, [r0, #0]
 8000eb6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000eb8:	ea4e 0202 	orr.w	r2, lr, r2
 8000ebc:	6362      	str	r2, [r4, #52]	; 0x34
 8000ebe:	e7df      	b.n	8000e80 <adc_init.constprop.0.isra.0+0xac>
        }else if (i<=14)
        {
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000ec0:	f1a1 0442 	sub.w	r4, r1, #66	; 0x42
        }else if (i<=14)
 8000ec4:	2b0e      	cmp	r3, #14
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000ec6:	fa02 f404 	lsl.w	r4, r2, r4
        }else 
        {
            aIns->adc->SQR4 |= *(aIns->channels+i) << ((i-15)*6);
 8000eca:	f1a1 0e60 	sub.w	lr, r1, #96	; 0x60
        }else if (i<=14)
 8000ece:	d824      	bhi.n	8000f1a <adc_init.constprop.0.isra.0+0x146>
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000ed0:	6802      	ldr	r2, [r0, #0]
 8000ed2:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8000ed4:	432c      	orrs	r4, r5
 8000ed6:	6394      	str	r4, [r2, #56]	; 0x38
 8000ed8:	e7d2      	b.n	8000e80 <adc_init.constprop.0.isra.0+0xac>
    switch ((uint32_t)aIns->adc)
 8000eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ede:	d003      	beq.n	8000ee8 <adc_init.constprop.0.isra.0+0x114>
 8000ee0:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d127      	bne.n	8000f38 <adc_init.constprop.0.isra.0+0x164>
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8000ee8:	4916      	ldr	r1, [pc, #88]	; (8000f44 <adc_init.constprop.0.isra.0+0x170>)
            ADC12_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);	// Set ADC clock to HCLK/2 and enable VREFINT
 8000eea:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <adc_init.constprop.0.isra.0+0x178>)
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8000eec:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000eee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ef2:	64cb      	str	r3, [r1, #76]	; 0x4c
            ADC12_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);	// Set ADC clock to HCLK/2 and enable VREFINT
 8000ef4:	6893      	ldr	r3, [r2, #8]
 8000ef6:	f443 0386 	orr.w	r3, r3, #4390912	; 0x430000
 8000efa:	6093      	str	r3, [r2, #8]
        break;
 8000efc:	e781      	b.n	8000e02 <adc_init.constprop.0.isra.0+0x2e>
        }
    }
	aIns->adc->CR |= ADC_CR_ADEN;
 8000efe:	6802      	ldr	r2, [r0, #0]
 8000f00:	6893      	ldr	r3, [r2, #8]
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6093      	str	r3, [r2, #8]
	while(!(aIns->adc->ISR & ADC_ISR_ADRDY));
 8000f08:	6802      	ldr	r2, [r0, #0]
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	07db      	lsls	r3, r3, #31
 8000f0e:	d5fc      	bpl.n	8000f0a <adc_init.constprop.0.isra.0+0x136>
	aIns->adc->CR |= ADC_CR_ADSTART;
 8000f10:	6893      	ldr	r3, [r2, #8]
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6093      	str	r3, [r2, #8]
    
    return adcOk;  
 8000f18:	bd30      	pop	{r4, r5, pc}
            aIns->adc->SQR4 |= *(aIns->channels+i) << ((i-15)*6);
 8000f1a:	6804      	ldr	r4, [r0, #0]
 8000f1c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000f1e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f22:	432a      	orrs	r2, r5
 8000f24:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000f26:	e7ab      	b.n	8000e80 <adc_init.constprop.0.isra.0+0xac>
        aIns->adc->CFGR |= ADC_CFGR_CONT;
 8000f28:	6801      	ldr	r1, [r0, #0]
 8000f2a:	68ca      	ldr	r2, [r1, #12]
 8000f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f30:	60ca      	str	r2, [r1, #12]
 8000f32:	e783      	b.n	8000e3c <adc_init.constprop.0.isra.0+0x68>
 8000f34:	4770      	bx	lr
 8000f36:	4770      	bx	lr
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	50000400 	.word	0x50000400
 8000f40:	50000500 	.word	0x50000500
 8000f44:	40021000 	.word	0x40021000
 8000f48:	50000700 	.word	0x50000700
 8000f4c:	50000300 	.word	0x50000300

08000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>:
#include "gpio.h"

GPIO::GPIO (GPIO_TypeDef* _GPIOx, uint8_t _pin, GPIOmode _mode, GPIOtype _type, GPIOspeed _speed, GPIOpull _pull, uint8_t _AFnumber):
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
GPIOx(_GPIOx), pin(_pin)
{
	switch ((uint32_t) _GPIOx)
 8000f52:	4e42      	ldr	r6, [pc, #264]	; (800105c <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x10c>)
GPIOx(_GPIOx), pin(_pin)
 8000f54:	6001      	str	r1, [r0, #0]
	switch ((uint32_t) _GPIOx)
 8000f56:	42b1      	cmp	r1, r6
GPIOx(_GPIOx), pin(_pin)
 8000f58:	7102      	strb	r2, [r0, #4]
GPIO::GPIO (GPIO_TypeDef* _GPIOx, uint8_t _pin, GPIOmode _mode, GPIOtype _type, GPIOspeed _speed, GPIOpull _pull, uint8_t _AFnumber):
 8000f5a:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8000f5e:	f89d 001c 	ldrb.w	r0, [sp, #28]
	switch ((uint32_t) _GPIOx)
 8000f62:	d068      	beq.n	8001036 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xe6>
 8000f64:	d850      	bhi.n	8001008 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xb8>
 8000f66:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
 8000f6a:	42b1      	cmp	r1, r6
 8000f6c:	d069      	beq.n	8001042 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xf2>
 8000f6e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f72:	42b1      	cmp	r1, r6
 8000f74:	d13f      	bne.n	8000ff6 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xa6>
			break;
		case GPIOB_BASE:
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
			break;
		case GPIOC_BASE:
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000f76:	4f3a      	ldr	r7, [pc, #232]	; (8001060 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000f78:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000f7a:	f046 0604 	orr.w	r6, r6, #4
 8000f7e:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
		default: 
		break;
	}

	GPIOx->MODER &= ~(0b11 << (pin*2));
 8000f80:	0056      	lsls	r6, r2, #1
	GPIOx->MODER |= (static_cast<int>(_mode) << (pin*2));
	GPIOx->OTYPER &= ~(1 << pin);
	GPIOx->OTYPER |= (static_cast<int>(_type) << pin);
 8000f82:	fa05 fe02 	lsl.w	lr, r5, r2
	GPIOx->MODER &= ~(0b11 << (pin*2));
 8000f86:	f04f 0c03 	mov.w	ip, #3
 8000f8a:	680d      	ldr	r5, [r1, #0]
 8000f8c:	fa0c fc06 	lsl.w	ip, ip, r6
 8000f90:	ea25 050c 	bic.w	r5, r5, ip
 8000f94:	600d      	str	r5, [r1, #0]
	GPIOx->MODER |= (static_cast<int>(_mode) << (pin*2));
 8000f96:	680d      	ldr	r5, [r1, #0]
 8000f98:	40b3      	lsls	r3, r6
 8000f9a:	432b      	orrs	r3, r5
 8000f9c:	600b      	str	r3, [r1, #0]
	GPIOx->OTYPER &= ~(1 << pin);
 8000f9e:	684b      	ldr	r3, [r1, #4]
 8000fa0:	2501      	movs	r5, #1
 8000fa2:	4095      	lsls	r5, r2
 8000fa4:	ea23 0305 	bic.w	r3, r3, r5
 8000fa8:	604b      	str	r3, [r1, #4]
	GPIOx->OTYPER |= (static_cast<int>(_type) << pin);
 8000faa:	684b      	ldr	r3, [r1, #4]
 8000fac:	ea4e 0303 	orr.w	r3, lr, r3
 8000fb0:	604b      	str	r3, [r1, #4]
	GPIOx->OSPEEDR &= ~(0b11 << (pin*2));
 8000fb2:	688b      	ldr	r3, [r1, #8]
 8000fb4:	ea23 030c 	bic.w	r3, r3, ip
 8000fb8:	608b      	str	r3, [r1, #8]
	GPIOx->OSPEEDR |= (static_cast<int>(_speed)<<(pin*2));
 8000fba:	688b      	ldr	r3, [r1, #8]
 8000fbc:	608b      	str	r3, [r1, #8]
	GPIOx->PUPDR &= ~(0b11 << (pin*2));
 8000fbe:	68cb      	ldr	r3, [r1, #12]
 8000fc0:	ea23 030c 	bic.w	r3, r3, ip
 8000fc4:	60cb      	str	r3, [r1, #12]
	GPIOx->PUPDR |= (static_cast<int>(_pull)<<(pin*2));
 8000fc6:	68cb      	ldr	r3, [r1, #12]
 8000fc8:	40b4      	lsls	r4, r6
 8000fca:	431c      	orrs	r4, r3
 8000fcc:	08d3      	lsrs	r3, r2, #3
 8000fce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000fd2:	60cc      	str	r4, [r1, #12]
	GPIOx->AFR[pin/8] &= ~(0xF << ((pin % 8)*4));
 8000fd4:	f002 0207 	and.w	r2, r2, #7
 8000fd8:	6a19      	ldr	r1, [r3, #32]
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	f04f 0c0f 	mov.w	ip, #15
 8000fe0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe4:	ea21 010c 	bic.w	r1, r1, ip
 8000fe8:	6219      	str	r1, [r3, #32]
	GPIOx->AFR[pin/8] |= (_AFnumber << ((pin % 8)*4));
 8000fea:	6a19      	ldr	r1, [r3, #32]
 8000fec:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	621a      	str	r2, [r3, #32]
}
 8000ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch ((uint32_t) _GPIOx)
 8000ff6:	f1b1 4f90 	cmp.w	r1, #1207959552	; 0x48000000
 8000ffa:	d1c1      	bne.n	8000f80 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000ffc:	4f18      	ldr	r7, [pc, #96]	; (8001060 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000ffe:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001000:	f046 0601 	orr.w	r6, r6, #1
 8001004:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001006:	e7bb      	b.n	8000f80 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
	switch ((uint32_t) _GPIOx)
 8001008:	4e16      	ldr	r6, [pc, #88]	; (8001064 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x114>)
 800100a:	42b1      	cmp	r1, r6
 800100c:	d01f      	beq.n	800104e <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xfe>
 800100e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001012:	42b1      	cmp	r1, r6
 8001014:	d105      	bne.n	8001022 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xd2>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
 8001016:	4f12      	ldr	r7, [pc, #72]	; (8001060 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001018:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800101a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 800101e:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001020:	e7ae      	b.n	8000f80 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
	switch ((uint32_t) _GPIOx)
 8001022:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
 8001026:	42b1      	cmp	r1, r6
 8001028:	d1aa      	bne.n	8000f80 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
 800102a:	4f0d      	ldr	r7, [pc, #52]	; (8001060 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 800102c:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800102e:	f046 0610 	orr.w	r6, r6, #16
 8001032:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001034:	e7a4      	b.n	8000f80 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 8001036:	4f0a      	ldr	r7, [pc, #40]	; (8001060 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001038:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800103a:	f046 0608 	orr.w	r6, r6, #8
 800103e:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001040:	e79e      	b.n	8000f80 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001042:	4f07      	ldr	r7, [pc, #28]	; (8001060 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001044:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001046:	f046 0602 	orr.w	r6, r6, #2
 800104a:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 800104c:	e798      	b.n	8000f80 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOFEN;
 800104e:	4f04      	ldr	r7, [pc, #16]	; (8001060 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001050:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001052:	f046 0620 	orr.w	r6, r6, #32
 8001056:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001058:	e792      	b.n	8000f80 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
 800105a:	bf00      	nop
 800105c:	48000c00 	.word	0x48000c00
 8001060:	40021000 	.word	0x40021000
 8001064:	48001400 	.word	0x48001400

08001068 <_ZN3PID7ComputeEv.isra.0>:
	if (!_inAuto)
 8001068:	7843      	ldrb	r3, [r0, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d049      	beq.n	8001102 <_ZN3PID7ComputeEv.isra.0+0x9a>
		error   = *_mySetpoint - input;
 800106e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		input   = *_myInput;
 8001070:	6a42      	ldr	r2, [r0, #36]	; 0x24
		error   = *_mySetpoint - input;
 8001072:	ed93 7a00 	vldr	s14, [r3]
		input   = *_myInput;
 8001076:	ed92 5a00 	vldr	s10, [r2]
		_outputSum += (_ki * error);
 800107a:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
 800107e:	ed90 6a07 	vldr	s12, [r0, #28]
		dInput  = (input - _lastInput);
 8001082:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
		if (!_pOnE)
 8001086:	7803      	ldrb	r3, [r0, #0]
		error   = *_mySetpoint - input;
 8001088:	ee37 7a45 	vsub.f32	s14, s14, s10
		dInput  = (input - _lastInput);
 800108c:	ee75 7a67 	vsub.f32	s15, s10, s15
		_outputSum += (_ki * error);
 8001090:	eee7 6a06 	vfma.f32	s13, s14, s12
 8001094:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
		if (!_pOnE)
 8001098:	bba3      	cbnz	r3, 8001104 <_ZN3PID7ComputeEv.isra.0+0x9c>
			_outputSum -= _kp * dInput;
 800109a:	ed90 7a06 	vldr	s14, [r0, #24]
		if (_outputSum > _outMax)
 800109e:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
			_outputSum -= _kp * dInput;
 80010a2:	eee7 6ac7 	vfms.f32	s13, s15, s14
 80010a6:	eef1 5a67 	vneg.f32	s11, s15
		if (_outputSum > _outMax)
 80010aa:	eef4 6ac6 	vcmpe.f32	s13, s12
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			_outputSum -= _kp * dInput;
 80010b2:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
		if (_outputSum > _outMax)
 80010b6:	dc37      	bgt.n	8001128 <_ZN3PID7ComputeEv.isra.0+0xc0>
		else if (_outputSum < _outMin)
 80010b8:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 80010bc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	d443      	bmi.n	800114e <_ZN3PID7ComputeEv.isra.0+0xe6>
			output = 0;
 80010c6:	eddf 7a25 	vldr	s15, [pc, #148]	; 800115c <_ZN3PID7ComputeEv.isra.0+0xf4>
		output += _outputSum - _kd * dInput;
 80010ca:	ed90 7a08 	vldr	s14, [r0, #32]
 80010ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010d2:	eee7 7a25 	vfma.f32	s15, s14, s11
		if (output > _outMax)
 80010d6:	eef4 7ac6 	vcmpe.f32	s15, s12
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	dc08      	bgt.n	80010f2 <_ZN3PID7ComputeEv.isra.0+0x8a>
 80010e0:	ed90 6a0e 	vldr	s12, [r0, #56]	; 0x38
 80010e4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	bfb8      	it	lt
 80010ee:	eeb0 6a67 	vmovlt.f32	s12, s15
		*_myOutput = output;
 80010f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
		_lastTime  = now;
 80010f4:	2300      	movs	r3, #0
		*_myOutput = output;
 80010f6:	ed82 6a00 	vstr	s12, [r2]
		_lastInput = input;
 80010fa:	ed80 5a0d 	vstr	s10, [r0, #52]	; 0x34
		_lastTime  = now;
 80010fe:	6043      	str	r3, [r0, #4]
 8001100:	4770      	bx	lr
}
 8001102:	4770      	bx	lr
		if (_outputSum > _outMax)
 8001104:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 8001108:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d511      	bpl.n	8001136 <_ZN3PID7ComputeEv.isra.0+0xce>
			_outputSum = _outMax;
 8001112:	eef0 6a46 	vmov.f32	s13, s12
 8001116:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
			output = _kp * error;
 800111a:	edd0 4a06 	vldr	s9, [r0, #24]
 800111e:	eef1 5a67 	vneg.f32	s11, s15
 8001122:	ee67 7a24 	vmul.f32	s15, s14, s9
 8001126:	e7d0      	b.n	80010ca <_ZN3PID7ComputeEv.isra.0+0x62>
			output = 0;
 8001128:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800115c <_ZN3PID7ComputeEv.isra.0+0xf4>
			_outputSum = _outMax;
 800112c:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
 8001130:	eef0 6a46 	vmov.f32	s13, s12
 8001134:	e7c9      	b.n	80010ca <_ZN3PID7ComputeEv.isra.0+0x62>
		else if (_outputSum < _outMin)
 8001136:	edd0 5a0e 	vldr	s11, [r0, #56]	; 0x38
 800113a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d5ea      	bpl.n	800111a <_ZN3PID7ComputeEv.isra.0+0xb2>
			_outputSum = _outMin;
 8001144:	eef0 6a65 	vmov.f32	s13, s11
 8001148:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
 800114c:	e7e5      	b.n	800111a <_ZN3PID7ComputeEv.isra.0+0xb2>
			output = 0;
 800114e:	eddf 7a03 	vldr	s15, [pc, #12]	; 800115c <_ZN3PID7ComputeEv.isra.0+0xf4>
			_outputSum = _outMin;
 8001152:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
 8001156:	eef0 6a47 	vmov.f32	s13, s14
 800115a:	e7b6      	b.n	80010ca <_ZN3PID7ComputeEv.isra.0+0x62>
 800115c:	00000000 	.word	0x00000000

08001160 <main>:

motor_t motor = {0};
PID pidUd (&motor.FilteredIdqA[0],  &motor.Udq_pu[0], &setiD, 0.01f, 0.15f, 0.0f, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
PID pidUq (&motor.FilteredIdqA[1],  &motor.Udq_pu[1], &setiQ, 0.001f, 0.015f, 0.0f, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
int main(void)
{
 8001160:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
}

static inline void pwm_init (pwm_t* pwm)
{
    //NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  
 8001164:	4a73      	ldr	r2, [pc, #460]	; (8001334 <main+0x1d4>)
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001166:	4c74      	ldr	r4, [pc, #464]	; (8001338 <main+0x1d8>)
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  
 8001168:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800116a:	b099      	sub	sp, #100	; 0x64
 800116c:	2000      	movs	r0, #0
 800116e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001172:	9001      	str	r0, [sp, #4]
 8001174:	6613      	str	r3, [r2, #96]	; 0x60
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001176:	6823      	ldr	r3, [r4, #0]
	pwm->tim->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
	pwm->tim->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;
	pwm->tim->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;
	//TIM1->CR2 |= 0b010<<TIM_CR2_MMS_Pos;   // Set TRGO on Update Event
	pwm->tim->PSC = 0;  // tim_clk = cpu_clk
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 8001178:	4a70      	ldr	r2, [pc, #448]	; (800133c <main+0x1dc>)
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 800117a:	6999      	ldr	r1, [r3, #24]
 800117c:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 8001180:	6199      	str	r1, [r3, #24]
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC2M_Pos | TIM_CCMR1_OC2PE ; // PWM mode 1 channel 2
 8001182:	6999      	ldr	r1, [r3, #24]
 8001184:	f441 41d0 	orr.w	r1, r1, #26624	; 0x6800
 8001188:	6199      	str	r1, [r3, #24]
	pwm->tim->CCMR2 |= 0b110<< TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC3PE ; // PWM mode 1 channel 3
 800118a:	69d9      	ldr	r1, [r3, #28]
 800118c:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 8001190:	61d9      	str	r1, [r3, #28]
	pwm->tim->CCMR2 |= 0b0110<< TIM_CCMR2_OC4M_Pos;
 8001192:	69d9      	ldr	r1, [r3, #28]
 8001194:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8001198:	61d9      	str	r1, [r3, #28]
	pwm->tim->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
 800119a:	6a19      	ldr	r1, [r3, #32]
 800119c:	f041 0105 	orr.w	r1, r1, #5
 80011a0:	6219      	str	r1, [r3, #32]
	pwm->tim->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;
 80011a2:	6a19      	ldr	r1, [r3, #32]
 80011a4:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80011a8:	6219      	str	r1, [r3, #32]
	pwm->tim->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;
 80011aa:	6a19      	ldr	r1, [r3, #32]
 80011ac:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
 80011b0:	6219      	str	r1, [r3, #32]
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 80011b2:	6861      	ldr	r1, [r4, #4]
 80011b4:	fbb2 f2f1 	udiv	r2, r2, r1
 80011b8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80011bc:	bf28      	it	cs
 80011be:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
	pwm->tim->PSC = 0;  // tim_clk = cpu_clk
 80011c2:	6298      	str	r0, [r3, #40]	; 0x28
	pwm->tim->CCR1 = 0;
	pwm->tim->CCR2 = 0;
	pwm->tim->CCR3 = 0;
	pwm->tim->CCR4 = 1000;
 80011c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->tim->CCR1 = 0;
 80011ca:	2200      	movs	r2, #0
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 80011ce:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 80011d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pwm->tim->CCR4 = 1000;
 80011d2:	6419      	str	r1, [r3, #64]	; 0x40
	pwm->tim ->DIER |=  TIM_DIER_UIE; // interrupt enable
 80011d4:	68da      	ldr	r2, [r3, #12]
	pwm->tim->CR2 = 0b0111<<TIM_CR2_MMS_Pos;   // Set TRGO on Compare 4
 80011d6:	2170      	movs	r1, #112	; 0x70
	pwm->tim ->DIER |=  TIM_DIER_UIE; // interrupt enable
 80011d8:	f042 0201 	orr.w	r2, r2, #1
 80011dc:	60da      	str	r2, [r3, #12]
	pwm->tim->CR2 = 0b0111<<TIM_CR2_MMS_Pos;   // Set TRGO on Compare 4
 80011de:	6059      	str	r1, [r3, #4]
	pwm->tim->CR1 |= TIM_CR1_ARPE | 0b01<<TIM_CR1_CMS_Pos;
 80011e0:	681a      	ldr	r2, [r3, #0]
	pwm->tim->EGR |= TIM_EGR_UG;
 80011e2:	4955      	ldr	r1, [pc, #340]	; (8001338 <main+0x1d8>)
	pwm->tim->CR1 |= TIM_CR1_ARPE | 0b01<<TIM_CR1_CMS_Pos;
 80011e4:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80011e8:	601a      	str	r2, [r3, #0]
	pwm->tim->EGR |= TIM_EGR_UG;
 80011ea:	680b      	ldr	r3, [r1, #0]
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	615a      	str	r2, [r3, #20]
	pwm->tim->BDTR |= TIM_BDTR_MOE | 0b00100000<<TIM_BDTR_DTG_Pos;
 80011f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011fa:	f042 0220 	orr.w	r2, r2, #32
 80011fe:	645a      	str	r2, [r3, #68]	; 0x44
	pwm->tim->CR1 |= TIM_CR1_CEN;
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	f042 0201 	orr.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]
    pwm->autoReloadValue = pwm->tim->ARR;
 8001208:	680a      	ldr	r2, [r1, #0]
 800120a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800120c:	608b      	str	r3, [r1, #8]
    pwm->halfAutoReloadValue = pwm->autoReloadValue/2;
 800120e:	085b      	lsrs	r3, r3, #1

    getAutoReloadValue (pwm);
	pwm->tim->CCR4= pwm->halfAutoReloadValue;
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
	if (!(RCC->CR & RCC_CR_HSERDY))
 8001212:	4a48      	ldr	r2, [pc, #288]	; (8001334 <main+0x1d4>)
    pwm->halfAutoReloadValue = pwm->autoReloadValue/2;
 8001214:	60cb      	str	r3, [r1, #12]
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	039e      	lsls	r6, r3, #14
 800121a:	d406      	bmi.n	800122a <main+0xca>
		RCC->CR |= RCC_CR_HSEON;
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
		while(!(RCC->CR & RCC_CR_HSERDY));
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	039d      	lsls	r5, r3, #14
 8001228:	d5fc      	bpl.n	8001224 <main+0xc4>

void ClockManager::pllCfg([[maybe_unused]] int _pllNum, int _targetFreq, int _p, pllDiv _q, pllDiv _r)
{
	uint32_t sourceFreq;

	RCC->CR &= ~RCC_CR_PLLON;
 800122a:	4a42      	ldr	r2, [pc, #264]	; (8001334 <main+0x1d4>)
 800122c:	6813      	ldr	r3, [r2, #0]
 800122e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001232:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLRDY);
 8001234:	6813      	ldr	r3, [r2, #0]
 8001236:	019c      	lsls	r4, r3, #6
 8001238:	d4fc      	bmi.n	8001234 <main+0xd4>
	if (RCC->CR & RCC_CR_HSERDY)
 800123a:	6813      	ldr	r3, [r2, #0]
	else
		sourceFreq = RCC_PLLCFGR_PLLSRC_HSI;

	int m = sourceFreq / 4000000; //4 MHz input frequency

	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 800123c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001340 <main+0x1e0>
	if (RCC->CR & RCC_CR_HSERDY)
 8001240:	0398      	lsls	r0, r3, #14
		RCC->PLLCFGR = RCC_PLLCFGR_PLLSRC_HSE;
 8001242:	bf42      	ittt	mi
 8001244:	2103      	movmi	r1, #3
 8001246:	60d1      	strmi	r1, [r2, #12]
		sourceFreq = hseClock;
 8001248:	4b3e      	ldrmi	r3, [pc, #248]	; (8001344 <main+0x1e4>)
	int m = sourceFreq / 4000000; //4 MHz input frequency
 800124a:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <main+0x1e8>)
		sourceFreq = RCC_PLLCFGR_PLLSRC_HSI;
 800124c:	bf58      	it	pl
 800124e:	2302      	movpl	r3, #2
	int m = sourceFreq / 4000000; //4 MHz input frequency
 8001250:	fba2 1203 	umull	r1, r2, r2, r3
 8001254:	0d12      	lsrs	r2, r2, #20
	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 8001256:	fbb3 f3f2 	udiv	r3, r3, r2
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	int plln = (int)(targetDivider + 0.5f);

	RCC->PLLCFGR |= (m - 1) << RCC_PLLCFGR_PLLM_Pos;
 8001262:	4b34      	ldr	r3, [pc, #208]	; (8001334 <main+0x1d4>)
	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 8001264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	RCC->PLLCFGR |= (m - 1) << RCC_PLLCFGR_PLLM_Pos;
 8001268:	68d9      	ldr	r1, [r3, #12]
 800126a:	3a01      	subs	r2, #1
 800126c:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
 8001270:	60da      	str	r2, [r3, #12]

	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 8001272:	68da      	ldr	r2, [r3, #12]
	int plln = (int)(targetDivider + 0.5f);
 8001274:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		| static_cast<uint32_t>(_q) << RCC_PLLCFGR_PLLQ_Pos
		| static_cast<uint32_t>(_r) << RCC_PLLCFGR_PLLR_Pos
		| plln << RCC_PLLCFGR_PLLN_Pos;
 8001280:	ee17 1a90 	vmov	r1, s15
 8001284:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 8001288:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800128c:	60da      	str	r2, [r3, #12]

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN;
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	f042 7288 	orr.w	r2, r2, #17825792	; 0x1100000
 8001294:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001298:	60da      	str	r2, [r3, #12]
	RCC->CR |= RCC_CR_PLLON;
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80012a0:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	0191      	lsls	r1, r2, #6
 80012a6:	d5fc      	bpl.n	80012a2 <main+0x142>
pllClk ClockManager::updatePll()
{
	pllClk pllClocks = {0, 0, 0, 0};
	uint32_t sourceFreq;

	if(!(RCC->CR & RCC_CR_PLLRDY))
 80012a8:	681c      	ldr	r4, [r3, #0]
 80012aa:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
 80012ae:	d053      	beq.n	8001358 <main+0x1f8>
		return pllClocks;

	if (RCC->CR & RCC_CR_HSERDY)
 80012b0:	6819      	ldr	r1, [r3, #0]
		sourceFreq = hseClock;
	else
		sourceFreq = hsiClock;

    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012b2:	4820      	ldr	r0, [pc, #128]	; (8001334 <main+0x1d4>)
		sourceFreq = hsiClock;
 80012b4:	4a25      	ldr	r2, [pc, #148]	; (800134c <main+0x1ec>)
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <main+0x1e4>)
	if(targetFreq > coreClock)
 80012b8:	4d25      	ldr	r5, [pc, #148]	; (8001350 <main+0x1f0>)
		sourceFreq = hsiClock;
 80012ba:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80012be:	bf08      	it	eq
 80012c0:	4613      	moveq	r3, r2
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012c2:	68c2      	ldr	r2, [r0, #12]
	if(targetFreq > coreClock)
 80012c4:	682e      	ldr	r6, [r5, #0]
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
    pllClocks.internal = sourceFreq * finalMult;
 80012c6:	ee07 3a90 	vmov	s15, r3
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012ca:	68c3      	ldr	r3, [r0, #12]
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 80012cc:	68c1      	ldr	r1, [r0, #12]
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012ce:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllClocks.internal = sourceFreq * finalMult;
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012da:	ee07 2a90 	vmov	s15, r2
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012de:	3301      	adds	r3, #1
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80012ec:	68c3      	ldr	r3, [r0, #12]
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80012ee:	68c4      	ldr	r4, [r0, #12]
	pllClock = updatePll();
 80012f0:	4818      	ldr	r0, [pc, #96]	; (8001354 <main+0x1f4>)
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012f2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80012f6:	f3c4 6441 	ubfx	r4, r4, #25, #2
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80012fa:	f3c3 5341 	ubfx	r3, r3, #21, #2
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80012fe:	3401      	adds	r4, #1
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 8001300:	3301      	adds	r3, #1
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 8001302:	0064      	lsls	r4, r4, #1
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 8001304:	0ec9      	lsrs	r1, r1, #27
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 8001306:	005b      	lsls	r3, r3, #1
    pllClocks.internal = sourceFreq * finalMult;
 8001308:	ee66 7a07 	vmul.f32	s15, s12, s14
 800130c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001310:	ee17 2a90 	vmov	r2, s15
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 8001314:	fbb2 f4f4 	udiv	r4, r2, r4
	if(targetFreq > coreClock)
 8001318:	42a6      	cmp	r6, r4
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 800131a:	fbb2 f1f1 	udiv	r1, r2, r1
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
	pllClock = updatePll();
 8001322:	e9c0 2100 	strd	r2, r1, [r0]
 8001326:	e9c0 3402 	strd	r3, r4, [r0, #8]
	if(targetFreq > coreClock)
 800132a:	d21c      	bcs.n	8001366 <main+0x206>
		internalFreqUpdate(targetFreq);
 800132c:	4620      	mov	r0, r4
 800132e:	f7ff fbb7 	bl	8000aa0 <_ZN12ClockManager18internalFreqUpdateEm>
 8001332:	e018      	b.n	8001366 <main+0x206>
 8001334:	40021000 	.word	0x40021000
 8001338:	20000018 	.word	0x20000018
 800133c:	04c4b400 	.word	0x04c4b400
 8001340:	4d989680 	.word	0x4d989680
 8001344:	016e3600 	.word	0x016e3600
 8001348:	431bde83 	.word	0x431bde83
 800134c:	00f42400 	.word	0x00f42400
 8001350:	20000008 	.word	0x20000008
 8001354:	200000cc 	.word	0x200000cc
	pllClock = updatePll();
 8001358:	4bae      	ldr	r3, [pc, #696]	; (8001614 <main+0x4b4>)
	if(targetFreq > coreClock)
 800135a:	4daf      	ldr	r5, [pc, #700]	; (8001618 <main+0x4b8>)
	pllClock = updatePll();
 800135c:	e9c3 4400 	strd	r4, r4, [r3]
 8001360:	e9c3 4402 	strd	r4, r4, [r3, #8]
	if(targetFreq > coreClock)
 8001364:	682e      	ldr	r6, [r5, #0]
	RCC->CFGR = (RCC->CFGR & ~0x7) | static_cast<uint32_t>(_src);
 8001366:	4aad      	ldr	r2, [pc, #692]	; (800161c <main+0x4bc>)
 8001368:	6893      	ldr	r3, [r2, #8]
 800136a:	f023 0307 	bic.w	r3, r3, #7
 800136e:	f043 0303 	orr.w	r3, r3, #3
 8001372:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != static_cast<uint32_t>(_src) << RCC_CFGR_SWS_Pos);
 8001374:	6893      	ldr	r3, [r2, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b0c      	cmp	r3, #12
 800137c:	d1fa      	bne.n	8001374 <main+0x214>
	if(targetFreq < coreClock)
 800137e:	42a6      	cmp	r6, r4
 8001380:	f200 83d5 	bhi.w	8001b2e <main+0x9ce>
    return result;
}

void ClockManager::enableClk(volatile uint32_t &_reg, uint32_t _bits)
{
	_reg |= _bits;
 8001384:	4ba5      	ldr	r3, [pc, #660]	; (800161c <main+0x4bc>)
	coreClock = targetFreq;
 8001386:	602c      	str	r4, [r5, #0]
	_reg |= _bits;
 8001388:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800138a:	f042 0210 	orr.w	r2, r2, #16
 800138e:	659a      	str	r2, [r3, #88]	; 0x58
	while((_reg & _bits) != _bits)
 8001390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001392:	06d2      	lsls	r2, r2, #27
 8001394:	d5fc      	bpl.n	8001390 <main+0x230>
	int prescaler = timerClock / 1000000;
 8001396:	4ba2      	ldr	r3, [pc, #648]	; (8001620 <main+0x4c0>)
 8001398:	4aa2      	ldr	r2, [pc, #648]	; (8001624 <main+0x4c4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	0c9b      	lsrs	r3, r3, #18
	TIM6->PSC = prescaler - 1;
 80013a2:	4aa1      	ldr	r2, [pc, #644]	; (8001628 <main+0x4c8>)
 80013a4:	3b01      	subs	r3, #1
 80013a6:	6293      	str	r3, [r2, #40]	; 0x28
	TIM6->ARR = 0x0FFF;
 80013a8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80013ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM6->CR1 = TIM_CR1_CEN;
 80013ae:	2301      	movs	r3, #1
 80013b0:	6013      	str	r3, [r2, #0]
    SysTick_Config(coreClock / 1000);
 80013b2:	682b      	ldr	r3, [r5, #0]
 80013b4:	4a9d      	ldr	r2, [pc, #628]	; (800162c <main+0x4cc>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	3b01      	subs	r3, #1
 80013be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c2:	d20a      	bcs.n	80013da <main+0x27a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	4999      	ldr	r1, [pc, #612]	; (8001630 <main+0x4d0>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	23f0      	movs	r3, #240	; 0xf0
 80013ce:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d2:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d6:	6191      	str	r1, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d8:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8001694 <main+0x534>
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; 
 80013de:	4c8f      	ldr	r4, [pc, #572]	; (800161c <main+0x4bc>)
	// int i, j=0;
	static uint32_t prevMotorState=0;
	float offsetAngle = 0;
	//initSysTick();	
	Init();  
	pidUq.Init();
 80013e0:	4e94      	ldr	r6, [pc, #592]	; (8001634 <main+0x4d4>)
 80013e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013e6:	f8c8 3000 	str.w	r3, [r8]
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; 
 80013ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	65a3      	str	r3, [r4, #88]	; 0x58
	TIM2->PSC = 15; // 160000000/16 = 10000000 Hz
 80013f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013f6:	220f      	movs	r2, #15
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 49999; // 10000000/4999 = 2000 Hz
 80013fa:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 10;
 8001400:	220a      	movs	r2, #10
 8001402:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2 -> DIER |= TIM_DIER_UIE; // update interrupt enable
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	60da      	str	r2, [r3, #12]
	TIM2->CR1  |= TIM_CR1_ARPE;
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001412:	601a      	str	r2, [r3, #0]
	TIM2->CR1  |= TIM_CR1_CEN;	
 8001414:	6819      	ldr	r1, [r3, #0]
	adcChannelNumbers_t adc1Channels[3] = {1, 8, 9};
 8001416:	4a88      	ldr	r2, [pc, #544]	; (8001638 <main+0x4d8>)
	TIM2->CR1  |= TIM_CR1_CEN;	
 8001418:	f041 0101 	orr.w	r1, r1, #1
 800141c:	6019      	str	r1, [r3, #0]
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 800141e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001422:	910c      	str	r1, [sp, #48]	; 0x30
	adcChannelNumbers_t adc1Channels[3] = {1, 8, 9};
 8001424:	ca07      	ldmia	r2, {r0, r1, r2}
 8001426:	ab09      	add	r3, sp, #36	; 0x24
 8001428:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 800142c:	2500      	movs	r5, #0
 800142e:	f04f 0a01 	mov.w	sl, #1
 8001432:	2703      	movs	r7, #3
 8001434:	f04f 0b09 	mov.w	fp, #9
	adc_init(&adc);
 8001438:	a80c      	add	r0, sp, #48	; 0x30
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 800143a:	930e      	str	r3, [sp, #56]	; 0x38
 800143c:	950f      	str	r5, [sp, #60]	; 0x3c
 800143e:	9511      	str	r5, [sp, #68]	; 0x44
 8001440:	970d      	str	r7, [sp, #52]	; 0x34
 8001442:	f88d a03c 	strb.w	sl, [sp, #60]	; 0x3c
 8001446:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
	adc_init(&adc);
 800144a:	f7ff fcc3 	bl	8000dd4 <adc_init.constprop.0.isra.0>
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 800144e:	4b7b      	ldr	r3, [pc, #492]	; (800163c <main+0x4dc>)
 8001450:	9312      	str	r3, [sp, #72]	; 0x48
 8001452:	ab06      	add	r3, sp, #24
	adcChannelNumbers_t adc2Channels[2] = {14 ,12};
 8001454:	220e      	movs	r2, #14
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 8001456:	f04f 0902 	mov.w	r9, #2
	adc_init(&adc2);
 800145a:	a812      	add	r0, sp, #72	; 0x48
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 800145c:	9314      	str	r3, [sp, #80]	; 0x50
	adcChannelNumbers_t adc2Channels[2] = {14 ,12};
 800145e:	230c      	movs	r3, #12
 8001460:	e9cd 2306 	strd	r2, r3, [sp, #24]
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 8001464:	9515      	str	r5, [sp, #84]	; 0x54
 8001466:	e9cd b516 	strd	fp, r5, [sp, #88]	; 0x58
 800146a:	f88d a054 	strb.w	sl, [sp, #84]	; 0x54
 800146e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
	adc_init(&adc2);
 8001472:	f7ff fcaf 	bl	8000dd4 <adc_init.constprop.0.isra.0>
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 8001476:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	DMA1_Channel2->CPAR = (uint32_t) &(ADC2->DR);
 8001478:	4a71      	ldr	r2, [pc, #452]	; (8001640 <main+0x4e0>)
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 800147a:	f043 0305 	orr.w	r3, r3, #5
 800147e:	64a3      	str	r3, [r4, #72]	; 0x48
	DMAMUX1_Channel1->CCR = 36; // dma request from ADC2
 8001480:	4b70      	ldr	r3, [pc, #448]	; (8001644 <main+0x4e4>)
 8001482:	2124      	movs	r1, #36	; 0x24
 8001484:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
	DMA1_Channel2-> CCR = 0b01<<DMA_CCR_MSIZE_Pos | 0b10<<DMA_CCR_PSIZE_Pos | DMA_CCR_MINC | DMA_CCR_CIRC ; // 16 bit memory size, 32 bit peripheral size, memory increment mode, circular mode, transfer complete interrupt enable
 8001488:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
 800148c:	61d9      	str	r1, [r3, #28]
	DMA1_Channel2->CPAR = (uint32_t) &(ADC2->DR);
 800148e:	625a      	str	r2, [r3, #36]	; 0x24
	DMA1_Channel2->CMAR = (uint32_t) Adc2DmaReadings;
 8001490:	4a6d      	ldr	r2, [pc, #436]	; (8001648 <main+0x4e8>)
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
	DMA1_Channel2->CNDTR = 2;
 8001494:	f8c3 9020 	str.w	r9, [r3, #32]
	DMA1_Channel2->CCR |= DMA_CCR_EN;
 8001498:	69da      	ldr	r2, [r3, #28]
	DMA1_Channel5->CPAR = (uint32_t) &(ADC1->DR);
 800149a:	496c      	ldr	r1, [pc, #432]	; (800164c <main+0x4ec>)
	DMA1_Channel2->CCR |= DMA_CCR_EN;
 800149c:	ea42 020a 	orr.w	r2, r2, sl
 80014a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014a4:	61da      	str	r2, [r3, #28]
 80014a6:	f8c8 0000 	str.w	r0, [r8]
	DMAMUX1_Channel4->CCR = 5;
 80014aa:	2005      	movs	r0, #5
 80014ac:	f8c3 0810 	str.w	r0, [r3, #2064]	; 0x810
	DMA1_Channel5->CMAR = (uint32_t) AdcDmaReadings;
 80014b0:	4a67      	ldr	r2, [pc, #412]	; (8001650 <main+0x4f0>)
	DMA1_Channel5-> CCR = 0b01<<DMA_CCR_MSIZE_Pos | 0b10<<DMA_CCR_PSIZE_Pos | DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_TCIE; // 16 bit memory size, 32 bit peripheral size, memory increment mode, circular mode, transfer complete interrupt enable
 80014b2:	f240 60a2 	movw	r0, #1698	; 0x6a2
 80014b6:	6598      	str	r0, [r3, #88]	; 0x58
	DMA1_Channel5->CPAR = (uint32_t) &(ADC1->DR);
 80014b8:	6619      	str	r1, [r3, #96]	; 0x60
	DMA1_Channel5->CMAR = (uint32_t) AdcDmaReadings;
 80014ba:	665a      	str	r2, [r3, #100]	; 0x64
	DMA1_Channel5->CNDTR = 3;
 80014bc:	65df      	str	r7, [r3, #92]	; 0x5c
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 80014be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014c0:	ea42 020a 	orr.w	r2, r2, sl
 80014c4:	659a      	str	r2, [r3, #88]	; 0x58
	pidUq.Init();
 80014c6:	4630      	mov	r0, r6
	pidUq.SetOutputLimits(-1,1);
 80014c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80014cc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	pidUq.Init();
 80014d0:	f7ff fb32 	bl	8000b38 <_ZN3PID4InitEv>
	pidUq.SetOutputLimits(-1,1);
 80014d4:	f7ff fb4a 	bl	8000b6c <_ZN3PID15SetOutputLimitsEff>
	if (newAuto && !_inAuto)
 80014d8:	7873      	ldrb	r3, [r6, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8324 	beq.w	8001b28 <main+0x9c8>
	pidUq.SetMode(PIDMode_TypeDef::_PID_MODE_AUTOMATIC);

	pidUd.Init();
 80014e0:	495c      	ldr	r1, [pc, #368]	; (8001654 <main+0x4f4>)
	_inAuto = (PIDMode_TypeDef)newAuto;
 80014e2:	2301      	movs	r3, #1
 80014e4:	4608      	mov	r0, r1
	pidUd.SetOutputLimits(-1,1);
 80014e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80014ea:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80014ee:	7073      	strb	r3, [r6, #1]
	pidUd.Init();
 80014f0:	f7ff fb22 	bl	8000b38 <_ZN3PID4InitEv>
	pidUd.SetOutputLimits(-1,1);
 80014f4:	f7ff fb3a 	bl	8000b6c <_ZN3PID15SetOutputLimitsEff>
	if (newAuto && !_inAuto)
 80014f8:	784b      	ldrb	r3, [r1, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8311 	beq.w	8001b22 <main+0x9c2>
	_inAuto = (PIDMode_TypeDef)newAuto;
 8001500:	2301      	movs	r3, #1
 8001502:	704b      	strb	r3, [r1, #1]
		// 	}

	
		

		if(milis-lastPrintTime>=1)
 8001504:	4b54      	ldr	r3, [pc, #336]	; (8001658 <main+0x4f8>)
			//static uint16_t filteredAngle;
			//filteredAngle += 0.8f * (Adc2DmaReadings[0] - filteredAngle);
			//uart.print(filteredAngle);
			//uart.print(",");
			uart.print("angleADC:");
			uart.print(Adc2DmaReadings[0]/11.21111111f);
 8001506:	eddf 8a55 	vldr	s17, [pc, #340]	; 800165c <main+0x4fc>
			uart.print(",");
			uart.print("angleI2c:");
			uart.print(angleEnc/11.375f);
 800150a:	ed9f 8a55 	vldr	s16, [pc, #340]	; 8001660 <main+0x500>
		if(milis-lastPrintTime>=1)
 800150e:	681f      	ldr	r7, [r3, #0]
 8001510:	4c54      	ldr	r4, [pc, #336]	; (8001664 <main+0x504>)
 8001512:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001698 <main+0x538>
 8001516:	f8df b184 	ldr.w	fp, [pc, #388]	; 800169c <main+0x53c>
					motor.Udq_pu[1] = 0;
 800151a:	ed9f 9a53 	vldr	s18, [pc, #332]	; 8001668 <main+0x508>
			uart.print(setiQ);			
 800151e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8001522:	f04f 0900 	mov.w	r9, #0
 8001526:	7ae3      	ldrb	r3, [r4, #11]
 8001528:	9302      	str	r3, [sp, #8]
 800152a:	4b50      	ldr	r3, [pc, #320]	; (800166c <main+0x50c>)
 800152c:	7aa5      	ldrb	r5, [r4, #10]
 800152e:	6819      	ldr	r1, [r3, #0]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001530:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <main+0x510>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	9303      	str	r3, [sp, #12]
			uart.print(setiQ);			
 8001536:	4b4f      	ldr	r3, [pc, #316]	; (8001674 <main+0x514>)
 8001538:	f8d3 e000 	ldr.w	lr, [r3]
 800153c:	4b4e      	ldr	r3, [pc, #312]	; (8001678 <main+0x518>)
 800153e:	2200      	movs	r2, #0
 8001540:	681e      	ldr	r6, [r3, #0]
 8001542:	9201      	str	r2, [sp, #4]
 8001544:	9204      	str	r2, [sp, #16]
 8001546:	4694      	mov	ip, r2

public:
	char buffer [bSize];
	bool empty()
	{
		if (tail==head) 
 8001548:	7b60      	ldrb	r0, [r4, #13]
 800154a:	7b23      	ldrb	r3, [r4, #12]
 800154c:	4298      	cmp	r0, r3
 800154e:	d027      	beq.n	80015a0 <main+0x440>
bool Serial::readTillEOL (char *_line) // returns 1 if EOL is found, 0 if not, when EOL is found save read data to _line
{
	if (uart.available())
	{		
		
		if(count==0)
 8001550:	b955      	cbnz	r5, 8001568 <main+0x408>
 8001552:	f8df c128 	ldr.w	ip, [pc, #296]	; 800167c <main+0x51c>
 8001556:	9b02      	ldr	r3, [sp, #8]
 8001558:	f10c 0001 	add.w	r0, ip, #1
 800155c:	4418      	add	r0, r3
 800155e:	4663      	mov	r3, ip
		{
				for (int i=0; i<=elementsToFlush; i++)
				{
					char* tempPtr =_line+i;
					*tempPtr = 0;				
 8001560:	f803 9b01 	strb.w	r9, [r3], #1
				for (int i=0; i<=elementsToFlush; i++)
 8001564:	4298      	cmp	r0, r3
 8001566:	d1fb      	bne.n	8001560 <main+0x400>
	return Buffer::status::ok;
	
}
	status read(char* _data)
	{
	if (tail==head) 
 8001568:	7b60      	ldrb	r0, [r4, #13]
 800156a:	7b23      	ldrb	r3, [r4, #12]
 800156c:	4298      	cmp	r0, r3
 800156e:	d00c      	beq.n	800158a <main+0x42a>
		return Buffer::status::bufferEmpty;
		
	*_data=buffer[tail];
 8001570:	7b63      	ldrb	r3, [r4, #13]
 8001572:	4423      	add	r3, r4
 8001574:	f893 a00e 	ldrb.w	sl, [r3, #14]
	tail++;
 8001578:	7b63      	ldrb	r3, [r4, #13]
 800157a:	3301      	adds	r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	7363      	strb	r3, [r4, #13]

	if ( tail == (bSize-1) )
 8001580:	7b63      	ldrb	r3, [r4, #13]
 8001582:	2bff      	cmp	r3, #255	; 0xff
		tail = 0;
 8001584:	bf08      	it	eq
 8001586:	f884 900d 	strbeq.w	r9, [r4, #13]
				}							
		}		

		char c = uart.readChar();
		if (c == '\n')
 800158a:	f1ba 0f0a 	cmp.w	sl, #10
		{
			//GPIOA->ODR ^= GPIO_ODR_OD5;
			_line+=count;
			*_line=0;
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <main+0x51c>)
		if (c == '\n')
 8001590:	f000 81cb 	beq.w	800192a <main+0x7ca>
			return 1;
		}
		else
		{
			_line+=count;
			*_line=c;
 8001594:	f803 a005 	strb.w	sl, [r3, r5]
			count++;
 8001598:	1c6b      	adds	r3, r5, #1
 800159a:	b2dd      	uxtb	r5, r3
 800159c:	f04f 0c01 	mov.w	ip, #1
		if (milis-motorProcessLastTime>=slopeInterval)
 80015a0:	f8d8 3000 	ldr.w	r3, [r8]
 80015a4:	9803      	ldr	r0, [sp, #12]
 80015a6:	1a5b      	subs	r3, r3, r1
 80015a8:	4283      	cmp	r3, r0
 80015aa:	d319      	bcc.n	80015e0 <main+0x480>
			if (!motorState)
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <main+0x520>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 81ad 	beq.w	8001910 <main+0x7b0>
				if (prevMotorState == 0)
 80015b6:	2e00      	cmp	r6, #0
 80015b8:	f000 8277 	beq.w	8001aaa <main+0x94a>
				if ((motorSpeed <setMotorSpeed))
 80015bc:	4931      	ldr	r1, [pc, #196]	; (8001684 <main+0x524>)
 80015be:	4b32      	ldr	r3, [pc, #200]	; (8001688 <main+0x528>)
 80015c0:	680a      	ldr	r2, [r1, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f080 8263 	bcs.w	8001a90 <main+0x930>
					motorSpeed++;			
 80015ca:	680b      	ldr	r3, [r1, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	600b      	str	r3, [r1, #0]
				prevMotorState = 1;
 80015d0:	2601      	movs	r6, #1
			TIM2loopFlag = false;
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <main+0x52c>)
 80015d4:	f883 9000 	strb.w	r9, [r3]
			motorProcessLastTime = milis;
 80015d8:	2201      	movs	r2, #1
 80015da:	f8d8 1000 	ldr.w	r1, [r8]
 80015de:	9201      	str	r2, [sp, #4]
		if(milis-lastPrintTime>=1)
 80015e0:	f8d8 3000 	ldr.w	r3, [r8]
 80015e4:	42bb      	cmp	r3, r7
 80015e6:	d0af      	beq.n	8001548 <main+0x3e8>
 80015e8:	4628      	mov	r0, r5
 80015ea:	b10a      	cbz	r2, 80015f0 <main+0x490>
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <main+0x518>)
 80015ee:	601e      	str	r6, [r3, #0]
 80015f0:	9b01      	ldr	r3, [sp, #4]
 80015f2:	b10b      	cbz	r3, 80015f8 <main+0x498>
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <main+0x50c>)
 80015f6:	6019      	str	r1, [r3, #0]
 80015f8:	9b04      	ldr	r3, [sp, #16]
 80015fa:	b10b      	cbz	r3, 8001600 <main+0x4a0>
 80015fc:	9b02      	ldr	r3, [sp, #8]
 80015fe:	72e3      	strb	r3, [r4, #11]
 8001600:	f1bc 0f00 	cmp.w	ip, #0
 8001604:	d000      	beq.n	8001608 <main+0x4a8>
 8001606:	72a0      	strb	r0, [r4, #10]
	I2Cx->CR1 |= I2C_CR1_PE; // Enable I2C2 peripheral
}

void I2C::sendByte(uint8_t *_byte, uint8_t _address)
{
	I2Cx->CR2 &= ~(0x1FFFF << 10);
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <main+0x530>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	f022 62ff 	bic.w	r2, r2, #133693440	; 0x7f80000
 8001612:	e045      	b.n	80016a0 <main+0x540>
 8001614:	200000cc 	.word	0x200000cc
 8001618:	20000008 	.word	0x20000008
 800161c:	40021000 	.word	0x40021000
 8001620:	2000000c 	.word	0x2000000c
 8001624:	431bde83 	.word	0x431bde83
 8001628:	40001000 	.word	0x40001000
 800162c:	10624dd3 	.word	0x10624dd3
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	20000300 	.word	0x20000300
 8001638:	08002f68 	.word	0x08002f68
 800163c:	50000100 	.word	0x50000100
 8001640:	50000140 	.word	0x50000140
 8001644:	40020000 	.word	0x40020000
 8001648:	200000f8 	.word	0x200000f8
 800164c:	50000040 	.word	0x50000040
 8001650:	200000dc 	.word	0x200000dc
 8001654:	200002c0 	.word	0x200002c0
 8001658:	200000f0 	.word	0x200000f0
 800165c:	3db6ad09 	.word	0x3db6ad09
 8001660:	3db40b41 	.word	0x3db40b41
 8001664:	200001b0 	.word	0x200001b0
 8001668:	00000000 	.word	0x00000000
 800166c:	20000170 	.word	0x20000170
 8001670:	2000016c 	.word	0x2000016c
 8001674:	20000014 	.word	0x20000014
 8001678:	20000168 	.word	0x20000168
 800167c:	2000017c 	.word	0x2000017c
 8001680:	20000178 	.word	0x20000178
 8001684:	200000fc 	.word	0x200000fc
 8001688:	20000010 	.word	0x20000010
 800168c:	200000f4 	.word	0x200000f4
 8001690:	200000e4 	.word	0x200000e4
 8001694:	e000e100 	.word	0xe000e100
 8001698:	20000174 	.word	0x20000174
 800169c:	20000100 	.word	0x20000100
 80016a0:	f422 22ff 	bic.w	r2, r2, #522240	; 0x7f800
 80016a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016a8:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= I2C_CR2_AUTOEND;
 80016aa:	685a      	ldr	r2, [r3, #4]
	I2Cx -> CR2 = _address<<1;
 80016ac:	216c      	movs	r1, #108	; 0x6c
	I2Cx->CR2 |= I2C_CR2_AUTOEND;
 80016ae:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80016b2:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 = _address<<1;
 80016b4:	6059      	str	r1, [r3, #4]
	I2Cx ->CR2 |= 1<<I2C_CR2_NBYTES_Pos; 
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016bc:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_START; 
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016c4:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))); // check if TXDR is empty
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	f012 0f12 	tst.w	r2, #18
 80016cc:	d0fb      	beq.n	80016c6 <main+0x566>
	I2Cx->TXDR = *_byte; // Send data to I2C
 80016ce:	220e      	movs	r2, #14
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(I2Cx->ISR & I2C_ISR_TC));
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	0657      	lsls	r7, r2, #25
 80016d6:	d5fc      	bpl.n	80016d2 <main+0x572>
	//I2Cx->CR2 |= I2C_CR2_STOP; // Generate stop condition //nie trzxa
}

uint8_t I2C::recieveByte (uint8_t _address)
{
	I2Cx -> CR2 = _address<<1;
 80016d8:	226c      	movs	r2, #108	; 0x6c
 80016da:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= 1 << I2C_CR2_NBYTES_Pos; 
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016e2:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_RD_WRN | I2C_CR2_START;
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80016ea:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & I2C_ISR_RXNE)); 
 80016ec:	699a      	ldr	r2, [r3, #24]
 80016ee:	0756      	lsls	r6, r2, #29
 80016f0:	d5fc      	bpl.n	80016ec <main+0x58c>
	I2Cx -> CR2 = _address<<1;
 80016f2:	226c      	movs	r2, #108	; 0x6c
	uint8_t recievedByte = I2Cx->RXDR;
 80016f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
	I2Cx -> CR2 = _address<<1;
 80016f6:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= 1 << I2C_CR2_NBYTES_Pos; 
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016fe:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_RD_WRN | I2C_CR2_START;
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001706:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & I2C_ISR_RXNE)); 
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	0755      	lsls	r5, r2, #29
 800170c:	d5fc      	bpl.n	8001708 <main+0x5a8>
	uint8_t recievedByte = I2Cx->RXDR;
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	USARTx->TDR = _char;
 8001710:	6862      	ldr	r2, [r4, #4]
			uint16_t angleEnc = (recieved << 8) | recieved1;
 8001712:	b2db      	uxtb	r3, r3
 8001714:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001718:	b29b      	uxth	r3, r3
 800171a:	499a      	ldr	r1, [pc, #616]	; (8001984 <main+0x824>)
 800171c:	ee09 3a90 	vmov	s19, r3
	while (*_string)
 8001720:	2373      	movs	r3, #115	; 0x73
	USARTx->TDR = _char;
 8001722:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001724:	69d3      	ldr	r3, [r2, #28]
 8001726:	0658      	lsls	r0, r3, #25
 8001728:	d5fc      	bpl.n	8001724 <main+0x5c4>
	while (*_string)
 800172a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f7      	bne.n	8001722 <main+0x5c2>
			uart.print(setiQ);			
 8001732:	4670      	mov	r0, lr
 8001734:	f7fe feb4 	bl	80004a0 <__aeabi_f2d>
 8001738:	ec41 0b10 	vmov	d0, r0, r1
 800173c:	f7ff fa46 	bl	8000bcc <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 8001740:	6863      	ldr	r3, [r4, #4]
 8001742:	222c      	movs	r2, #44	; 0x2c
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001746:	69da      	ldr	r2, [r3, #28]
 8001748:	0652      	lsls	r2, r2, #25
 800174a:	d5fc      	bpl.n	8001746 <main+0x5e6>
 800174c:	488e      	ldr	r0, [pc, #568]	; (8001988 <main+0x828>)
	while (*_string)
 800174e:	2173      	movs	r1, #115	; 0x73
	USARTx->TDR = _char;
 8001750:	6299      	str	r1, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001752:	69da      	ldr	r2, [r3, #28]
 8001754:	0657      	lsls	r7, r2, #25
 8001756:	d5fc      	bpl.n	8001752 <main+0x5f2>
	while (*_string)
 8001758:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800175c:	2900      	cmp	r1, #0
 800175e:	d1f7      	bne.n	8001750 <main+0x5f0>
			uart.print((int)motorSpeed);
 8001760:	4a8a      	ldr	r2, [pc, #552]	; (800198c <main+0x82c>)
 8001762:	6812      	ldr	r2, [r2, #0]
	char charTab[11]={};
 8001764:	e9cd 1112 	strd	r1, r1, [sp, #72]	; 0x48
bool negative = _number<0? true : false;
 8001768:	0fd7      	lsrs	r7, r2, #31
 800176a:	f8cd 104f 	str.w	r1, [sp, #79]	; 0x4f
	if (absNumber==0) 
 800176e:	2a00      	cmp	r2, #0
 8001770:	f040 8154 	bne.w	8001a1c <main+0x8bc>
		_string[0]='0';
 8001774:	2230      	movs	r2, #48	; 0x30
 8001776:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	if (negative)
 800177a:	2f00      	cmp	r7, #0
 800177c:	f000 8166 	beq.w	8001a4c <main+0x8ec>
		_string[i++]='-';
 8001780:	222d      	movs	r2, #45	; 0x2d
 8001782:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
 8001786:	2202      	movs	r2, #2
 8001788:	2701      	movs	r7, #1
 800178a:	4611      	mov	r1, r2
 800178c:	a812      	add	r0, sp, #72	; 0x48
 800178e:	4402      	add	r2, r0
 8001790:	4407      	add	r7, r0
		_charTab [i] = _charTab [_lenght-i -1];
 8001792:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
		char temp = _charTab[i];
 8001796:	7805      	ldrb	r5, [r0, #0]
		_charTab [i] = _charTab [_lenght-i -1];
 8001798:	f800 6b01 	strb.w	r6, [r0], #1
	for (int i =0; i<_lenght/2; i++)
 800179c:	42b8      	cmp	r0, r7
		_charTab [_lenght-i -1] = temp;
 800179e:	7015      	strb	r5, [r2, #0]
	for (int i =0; i<_lenght/2; i++)
 80017a0:	d1f7      	bne.n	8001792 <main+0x632>
	_string[i]='\0';
 80017a2:	f101 0260 	add.w	r2, r1, #96	; 0x60
 80017a6:	eb0d 0102 	add.w	r1, sp, r2
 80017aa:	f801 9c18 	strb.w	r9, [r1, #-24]
	while (*_string)
 80017ae:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80017b2:	a912      	add	r1, sp, #72	; 0x48
 80017b4:	b13a      	cbz	r2, 80017c6 <main+0x666>
	USARTx->TDR = _char;
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80017b8:	69da      	ldr	r2, [r3, #28]
 80017ba:	0656      	lsls	r6, r2, #25
 80017bc:	d5fc      	bpl.n	80017b8 <main+0x658>
	while (*_string)
 80017be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80017c2:	2a00      	cmp	r2, #0
 80017c4:	d1f7      	bne.n	80017b6 <main+0x656>
	USARTx->TDR = _char;
 80017c6:	222c      	movs	r2, #44	; 0x2c
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80017ca:	69da      	ldr	r2, [r3, #28]
 80017cc:	0655      	lsls	r5, r2, #25
 80017ce:	d5fc      	bpl.n	80017ca <main+0x66a>
 80017d0:	496f      	ldr	r1, [pc, #444]	; (8001990 <main+0x830>)
	while (*_string)
 80017d2:	2266      	movs	r2, #102	; 0x66
	USARTx->TDR = _char;
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80017d6:	69da      	ldr	r2, [r3, #28]
 80017d8:	0650      	lsls	r0, r2, #25
 80017da:	d5fc      	bpl.n	80017d6 <main+0x676>
	while (*_string)
 80017dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	d1f7      	bne.n	80017d4 <main+0x674>
			uart.print(motor.FilteredIdqA[1]);
 80017e4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 80017e8:	f7fe fe5a 	bl	80004a0 <__aeabi_f2d>
 80017ec:	ec41 0b10 	vmov	d0, r0, r1
 80017f0:	f7ff f9ec 	bl	8000bcc <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 80017f4:	6863      	ldr	r3, [r4, #4]
 80017f6:	222c      	movs	r2, #44	; 0x2c
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80017fa:	69da      	ldr	r2, [r3, #28]
 80017fc:	0651      	lsls	r1, r2, #25
 80017fe:	d5fc      	bpl.n	80017fa <main+0x69a>
 8001800:	4964      	ldr	r1, [pc, #400]	; (8001994 <main+0x834>)
	while (*_string)
 8001802:	2266      	movs	r2, #102	; 0x66
	USARTx->TDR = _char;
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	0652      	lsls	r2, r2, #25
 800180a:	d5fc      	bpl.n	8001806 <main+0x6a6>
	while (*_string)
 800180c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001810:	2a00      	cmp	r2, #0
 8001812:	d1f7      	bne.n	8001804 <main+0x6a4>
			uart.print(motor.FilteredIdqA[0]);
 8001814:	f8db 0054 	ldr.w	r0, [fp, #84]	; 0x54
 8001818:	f7fe fe42 	bl	80004a0 <__aeabi_f2d>
 800181c:	ec41 0b10 	vmov	d0, r0, r1
 8001820:	f7ff f9d4 	bl	8000bcc <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 8001824:	6863      	ldr	r3, [r4, #4]
 8001826:	222c      	movs	r2, #44	; 0x2c
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	0657      	lsls	r7, r2, #25
 800182e:	d5fc      	bpl.n	800182a <main+0x6ca>
 8001830:	4959      	ldr	r1, [pc, #356]	; (8001998 <main+0x838>)
	while (*_string)
 8001832:	2261      	movs	r2, #97	; 0x61
	USARTx->TDR = _char;
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	0656      	lsls	r6, r2, #25
 800183a:	d5fc      	bpl.n	8001836 <main+0x6d6>
	while (*_string)
 800183c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001840:	2a00      	cmp	r2, #0
 8001842:	d1f7      	bne.n	8001834 <main+0x6d4>
			uart.print(Adc2DmaReadings[0]/11.21111111f);
 8001844:	4b55      	ldr	r3, [pc, #340]	; (800199c <main+0x83c>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001850:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8001854:	ee17 0a90 	vmov	r0, s15
 8001858:	f7fe fe22 	bl	80004a0 <__aeabi_f2d>
 800185c:	ec41 0b10 	vmov	d0, r0, r1
 8001860:	f7ff f9b4 	bl	8000bcc <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 8001864:	6863      	ldr	r3, [r4, #4]
 8001866:	222c      	movs	r2, #44	; 0x2c
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800186a:	69da      	ldr	r2, [r3, #28]
 800186c:	0655      	lsls	r5, r2, #25
 800186e:	d5fc      	bpl.n	800186a <main+0x70a>
 8001870:	494b      	ldr	r1, [pc, #300]	; (80019a0 <main+0x840>)
	while (*_string)
 8001872:	2261      	movs	r2, #97	; 0x61
	USARTx->TDR = _char;
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	0650      	lsls	r0, r2, #25
 800187a:	d5fc      	bpl.n	8001876 <main+0x716>
	while (*_string)
 800187c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001880:	2a00      	cmp	r2, #0
 8001882:	d1f7      	bne.n	8001874 <main+0x714>
			uart.print(angleEnc/11.375f);
 8001884:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8001888:	ee67 7a88 	vmul.f32	s15, s15, s16
 800188c:	ee17 0a90 	vmov	r0, s15
 8001890:	f7fe fe06 	bl	80004a0 <__aeabi_f2d>
 8001894:	ec41 0b10 	vmov	d0, r0, r1
 8001898:	f7ff f998 	bl	8000bcc <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 800189c:	6863      	ldr	r3, [r4, #4]
 800189e:	222c      	movs	r2, #44	; 0x2c
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80018a2:	69da      	ldr	r2, [r3, #28]
 80018a4:	0651      	lsls	r1, r2, #25
 80018a6:	d5fc      	bpl.n	80018a2 <main+0x742>
 80018a8:	493e      	ldr	r1, [pc, #248]	; (80019a4 <main+0x844>)
	while (*_string)
 80018aa:	2273      	movs	r2, #115	; 0x73
	USARTx->TDR = _char;
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80018ae:	69da      	ldr	r2, [r3, #28]
 80018b0:	0652      	lsls	r2, r2, #25
 80018b2:	d5fc      	bpl.n	80018ae <main+0x74e>
	while (*_string)
 80018b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	d1f7      	bne.n	80018ac <main+0x74c>
			uart.print(",");
			uart.print("sumIabc:");
			uart.println(motor.Iabc_A[0]+motor.Iabc_A[1]+motor.Iabc_A[2]);
 80018bc:	eddb 6a0f 	vldr	s13, [fp, #60]	; 0x3c
 80018c0:	eddb 7a0e 	vldr	s15, [fp, #56]	; 0x38
 80018c4:	ed9b 7a10 	vldr	s14, [fp, #64]	; 0x40
 80018c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018d0:	ee17 0a90 	vmov	r0, s15
 80018d4:	f7fe fde4 	bl	80004a0 <__aeabi_f2d>
	print(_number, _percision);
 80018d8:	ec41 0b10 	vmov	d0, r0, r1
 80018dc:	f7ff f976 	bl	8000bcc <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 80018e0:	6862      	ldr	r2, [r4, #4]
 80018e2:	230a      	movs	r3, #10
 80018e4:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80018e6:	69d3      	ldr	r3, [r2, #28]
 80018e8:	065b      	lsls	r3, r3, #25
 80018ea:	d5fc      	bpl.n	80018e6 <main+0x786>
			led4.toggle();
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <main+0x848>)
 80018ee:	681a      	ldr	r2, [r3, #0]
	GPIOx->BSRR |= (1<<(pin+16));

}
void GPIO::toggle()
{
	GPIOx->ODR ^= (1<<pin);
 80018f0:	7918      	ldrb	r0, [r3, #4]
 80018f2:	6951      	ldr	r1, [r2, #20]
 80018f4:	2301      	movs	r3, #1
 80018f6:	4083      	lsls	r3, r0
 80018f8:	404b      	eors	r3, r1
 80018fa:	6153      	str	r3, [r2, #20]
			lastPrintTime = milis;		
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <main+0x84c>)
 80018fe:	f8d8 7000 	ldr.w	r7, [r8]
 8001902:	601f      	str	r7, [r3, #0]
 8001904:	e60f      	b.n	8001526 <main+0x3c6>
		if (milis-motorProcessLastTime>=slopeInterval)
 8001906:	2301      	movs	r3, #1
			elementsToFlush=count;
 8001908:	9502      	str	r5, [sp, #8]
 800190a:	9304      	str	r3, [sp, #16]
 800190c:	469c      	mov	ip, r3
			count=0;
 800190e:	2500      	movs	r5, #0
				if (prevMotorState)
 8001910:	2e00      	cmp	r6, #0
 8001912:	f040 80dc 	bne.w	8001ace <main+0x96e>
				if (motorSpeed > 5)
 8001916:	4a1d      	ldr	r2, [pc, #116]	; (800198c <main+0x82c>)
 8001918:	6813      	ldr	r3, [r2, #0]
 800191a:	2b05      	cmp	r3, #5
 800191c:	f240 80bb 	bls.w	8001a96 <main+0x936>
					motorSpeed--;
 8001920:	6813      	ldr	r3, [r2, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	2600      	movs	r6, #0
 8001928:	e653      	b.n	80015d2 <main+0x472>
			*_line=0;
 800192a:	f803 9005 	strb.w	r9, [r3, r5]
			if (UARTrxData[0] == '0')
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b30      	cmp	r3, #48	; 0x30
 8001932:	f000 809c 	beq.w	8001a6e <main+0x90e>
			else if (UARTrxData[0] == '1')
 8001936:	2b31      	cmp	r3, #49	; 0x31
 8001938:	f000 80e1 	beq.w	8001afe <main+0x99e>
 800193c:	3b6d      	subs	r3, #109	; 0x6d
 800193e:	b2d8      	uxtb	r0, r3
 8001940:	280a      	cmp	r0, #10
 8001942:	d813      	bhi.n	800196c <main+0x80c>
 8001944:	2b0a      	cmp	r3, #10
 8001946:	d811      	bhi.n	800196c <main+0x80c>
 8001948:	e8df f003 	tbb	[pc, r3]
 800194c:	50101061 	.word	0x50101061
 8001950:	104c1010 	.word	0x104c1010
 8001954:	3410      	.short	0x3410
 8001956:	16          	.byte	0x16
 8001957:	00          	.byte	0x00
			else if (*_string == '-')
 8001958:	2b2d      	cmp	r3, #45	; 0x2d
 800195a:	f000 8085 	beq.w	8001a68 <main+0x908>
		if (negative)
 800195e:	9b02      	ldr	r3, [sp, #8]
 8001960:	e9dd 7104 	ldrd	r7, r1, [sp, #16]
 8001964:	b103      	cbz	r3, 8001968 <main+0x808>
			return -number;
 8001966:	4240      	negs	r0, r0
					setMotorSpeed = typeConverter::stringToInt(UARTrxData+1);
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <main+0x850>)
 800196a:	6018      	str	r0, [r3, #0]
			elementsToFlush=count;
 800196c:	2301      	movs	r3, #1
 800196e:	9502      	str	r5, [sp, #8]
 8001970:	9304      	str	r3, [sp, #16]
 8001972:	469c      	mov	ip, r3
			count=0;
 8001974:	2500      	movs	r5, #0
 8001976:	e613      	b.n	80015a0 <main+0x440>
					setMotorSpeed -= 5;
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <main+0x850>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3b05      	subs	r3, #5
					setMotorSpeed += 50;
 800197e:	480c      	ldr	r0, [pc, #48]	; (80019b0 <main+0x850>)
 8001980:	6003      	str	r3, [r0, #0]
 8001982:	e7f3      	b.n	800196c <main+0x80c>
 8001984:	08002f74 	.word	0x08002f74
 8001988:	08002f7c 	.word	0x08002f7c
 800198c:	200000fc 	.word	0x200000fc
 8001990:	08002f84 	.word	0x08002f84
 8001994:	08002f90 	.word	0x08002f90
 8001998:	08002f9c 	.word	0x08002f9c
 800199c:	200000f8 	.word	0x200000f8
 80019a0:	08002fa8 	.word	0x08002fa8
 80019a4:	08002fb4 	.word	0x08002fb4
 80019a8:	200000e8 	.word	0x200000e8
 80019ac:	200000f0 	.word	0x200000f0
 80019b0:	20000010 	.word	0x20000010
		while (*_string && isNumber) 
 80019b4:	4b60      	ldr	r3, [pc, #384]	; (8001b38 <main+0x9d8>)
 80019b6:	785b      	ldrb	r3, [r3, #1]
		int number = 0;
 80019b8:	4618      	mov	r0, r3
		while (*_string && isNumber) 
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0d4      	beq.n	8001968 <main+0x808>
		int number = 0;
 80019be:	e9cd 7104 	strd	r7, r1, [sp, #16]
       	bool negative = false;
 80019c2:	2000      	movs	r0, #0
		while (*_string && isNumber) 
 80019c4:	f8df c190 	ldr.w	ip, [pc, #400]	; 8001b58 <main+0x9f8>
       	bool negative = false;
 80019c8:	9002      	str	r0, [sp, #8]
			int digit = *_string - '0';
 80019ca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
			if (digit>=0 && digit<=9)			
 80019ce:	2909      	cmp	r1, #9
				number = number * 10 + digit;
 80019d0:	eb00 0780 	add.w	r7, r0, r0, lsl #2
			if (digit>=0 && digit<=9)			
 80019d4:	d8c0      	bhi.n	8001958 <main+0x7f8>
				number = number * 10 + digit;
 80019d6:	eb01 0047 	add.w	r0, r1, r7, lsl #1
		while (*_string && isNumber) 
 80019da:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f3      	bne.n	80019ca <main+0x86a>
 80019e2:	e7bc      	b.n	800195e <main+0x7fe>
 80019e4:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <main+0x9dc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3332      	adds	r3, #50	; 0x32
 80019ea:	e7c8      	b.n	800197e <main+0x81e>
					setiQ +=1;
 80019ec:	ee07 ea10 	vmov	s14, lr
 80019f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
					setiQ -=1;
 80019f8:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <main+0x9e0>)
			elementsToFlush=count;
 80019fa:	9502      	str	r5, [sp, #8]
 80019fc:	edc3 7a00 	vstr	s15, [r3]
 8001a00:	2301      	movs	r3, #1
 8001a02:	ee17 ea90 	vmov	lr, s15
 8001a06:	9304      	str	r3, [sp, #16]
 8001a08:	469c      	mov	ip, r3
			count=0;
 8001a0a:	2500      	movs	r5, #0
 8001a0c:	e5c8      	b.n	80015a0 <main+0x440>
 8001a0e:	ee07 ea10 	vmov	s14, lr
 8001a12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1a:	e7ed      	b.n	80019f8 <main+0x898>
int absNumber = _number<0? -_number : _number;
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	bfb8      	it	lt
 8001a20:	4252      	neglt	r2, r2
		_string[i++]=absNumber % 10 + '0';
 8001a22:	4e48      	ldr	r6, [pc, #288]	; (8001b44 <main+0x9e4>)
 8001a24:	ad12      	add	r5, sp, #72	; 0x48
 8001a26:	4696      	mov	lr, r2
 8001a28:	fba6 200e 	umull	r2, r0, r6, lr
 8001a2c:	08c0      	lsrs	r0, r0, #3
 8001a2e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8001a32:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
 8001a36:	3230      	adds	r2, #48	; 0x30
 8001a38:	468c      	mov	ip, r1
 8001a3a:	f805 2b01 	strb.w	r2, [r5], #1
 8001a3e:	3101      	adds	r1, #1
	while (absNumber)
 8001a40:	4686      	mov	lr, r0
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d1f0      	bne.n	8001a28 <main+0x8c8>
	if (negative)
 8001a46:	b91f      	cbnz	r7, 8001a50 <main+0x8f0>
	for (int i =0; i<_lenght/2; i++)
 8001a48:	104f      	asrs	r7, r1, #1
 8001a4a:	d12c      	bne.n	8001aa6 <main+0x946>
		_string[i++]='-';
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	e6a8      	b.n	80017a2 <main+0x642>
 8001a50:	f101 0260 	add.w	r2, r1, #96	; 0x60
 8001a54:	eb0d 0102 	add.w	r1, sp, r2
 8001a58:	202d      	movs	r0, #45	; 0x2d
 8001a5a:	f10c 0202 	add.w	r2, ip, #2
 8001a5e:	f801 0c18 	strb.w	r0, [r1, #-24]
	for (int i =0; i<_lenght/2; i++)
 8001a62:	1057      	asrs	r7, r2, #1
	_string[i]='\0';
 8001a64:	4611      	mov	r1, r2
	for (int i =0; i<_lenght/2; i++)
 8001a66:	e691      	b.n	800178c <main+0x62c>
				negative = true;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	e7b5      	b.n	80019da <main+0x87a>
				motorState = 0;
 8001a6e:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <main+0x9e8>)
		if (milis-motorProcessLastTime>=slopeInterval)
 8001a70:	f8d8 0000 	ldr.w	r0, [r8]
				motorState = 0;
 8001a74:	f8c3 9000 	str.w	r9, [r3]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <main+0x9ec>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	1a40      	subs	r0, r0, r1
 8001a7e:	4298      	cmp	r0, r3
 8001a80:	f4bf af41 	bcs.w	8001906 <main+0x7a6>
			elementsToFlush=count;
 8001a84:	2301      	movs	r3, #1
 8001a86:	9502      	str	r5, [sp, #8]
 8001a88:	9304      	str	r3, [sp, #16]
 8001a8a:	469c      	mov	ip, r3
			count=0;
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	e5a7      	b.n	80015e0 <main+0x480>
					motorSpeed =setMotorSpeed;
 8001a90:	4a2f      	ldr	r2, [pc, #188]	; (8001b50 <main+0x9f0>)
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e59c      	b.n	80015d0 <main+0x470>
					motorSpeed = 0;
 8001a96:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <main+0x9f0>)
					motor.Udq_pu[1] = 0;
 8001a98:	ed8b 9a0d 	vstr	s18, [fp, #52]	; 0x34
					motor.Udq_pu[0] = 0;
 8001a9c:	ed8b 9a0c 	vstr	s18, [fp, #48]	; 0x30
					motorSpeed = 0;
 8001aa0:	f8c3 9000 	str.w	r9, [r3]
 8001aa4:	e73f      	b.n	8001926 <main+0x7c6>
		_string[i++]=absNumber % 10 + '0';
 8001aa6:	460a      	mov	r2, r1
 8001aa8:	e670      	b.n	800178c <main+0x62c>
	pwm->tim->CCMR1 &= ~(0b1111<< TIM_CCMR1_OC2M_Pos);
	pwm->tim->CCMR2 &= ~(0b1111<< TIM_CCMR2_OC3M_Pos);
}
static inline void pwmOutOn(pwm_t* pwm)
{
	pwm->tim->CCR1 = 0;
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <main+0x9f4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	635e      	str	r6, [r3, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 8001ab0:	639e      	str	r6, [r3, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 8001ab2:	63de      	str	r6, [r3, #60]	; 0x3c
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8001aba:	619a      	str	r2, [r3, #24]
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC2M_Pos | TIM_CCMR1_OC2PE ; // PWM mode 1 channel 2
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	f442 42d0 	orr.w	r2, r2, #26624	; 0x6800
 8001ac2:	619a      	str	r2, [r3, #24]
	pwm->tim->CCMR2 |= 0b110<< TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC3PE ; // PWM mode 1 channel 3
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8001aca:	61da      	str	r2, [r3, #28]
}
 8001acc:	e576      	b.n	80015bc <main+0x45c>
	pwm->tim->CCR1 = 0;
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <main+0x9f4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 8001ad6:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 8001ada:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
	pwm->tim->CCMR1 &= ~(0b1111<< TIM_CCMR1_OC1M_Pos);
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ae4:	619a      	str	r2, [r3, #24]
	pwm->tim->CCMR1 &= ~(0b1111<< TIM_CCMR1_OC2M_Pos);
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8001aec:	619a      	str	r2, [r3, #24]
	pwm->tim->CCMR2 &= ~(0b1111<< TIM_CCMR2_OC3M_Pos);
 8001aee:	69da      	ldr	r2, [r3, #28]
 8001af0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001af4:	61da      	str	r2, [r3, #28]
					motorSpeed = 0;
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <main+0x9f0>)
 8001af8:	f8c3 9000 	str.w	r9, [r3]
 8001afc:	e70b      	b.n	8001916 <main+0x7b6>
		if (milis-motorProcessLastTime>=slopeInterval)
 8001afe:	f8d8 3000 	ldr.w	r3, [r8]
 8001b02:	eba3 0c01 	sub.w	ip, r3, r1
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <main+0x9ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	9302      	str	r3, [sp, #8]
					motorState = 1;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <main+0x9e8>)
 8001b0e:	2001      	movs	r0, #1
 8001b10:	6018      	str	r0, [r3, #0]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001b12:	9b02      	ldr	r3, [sp, #8]
 8001b14:	4563      	cmp	r3, ip
 8001b16:	d8b5      	bhi.n	8001a84 <main+0x924>
			elementsToFlush=count;
 8001b18:	9502      	str	r5, [sp, #8]
 8001b1a:	9004      	str	r0, [sp, #16]
 8001b1c:	4684      	mov	ip, r0
			count=0;
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e549      	b.n	80015b6 <main+0x456>
		Init();
 8001b22:	f7ff f809 	bl	8000b38 <_ZN3PID4InitEv>
 8001b26:	e4eb      	b.n	8001500 <main+0x3a0>
 8001b28:	f7ff f806 	bl	8000b38 <_ZN3PID4InitEv>
 8001b2c:	e4d8      	b.n	80014e0 <main+0x380>
		internalFreqUpdate(targetFreq);
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7fe ffb6 	bl	8000aa0 <_ZN12ClockManager18internalFreqUpdateEm>
 8001b34:	e426      	b.n	8001384 <main+0x224>
 8001b36:	bf00      	nop
 8001b38:	2000017c 	.word	0x2000017c
 8001b3c:	20000010 	.word	0x20000010
 8001b40:	20000014 	.word	0x20000014
 8001b44:	cccccccd 	.word	0xcccccccd
 8001b48:	20000178 	.word	0x20000178
 8001b4c:	2000016c 	.word	0x2000016c
 8001b50:	200000fc 	.word	0x200000fc
 8001b54:	20000018 	.word	0x20000018
 8001b58:	2000017d 	.word	0x2000017d

08001b5c <DMA1_Channel5_IRQHandler>:


extern "C"
{
	void DMA1_Channel5_IRQHandler() // New current readings ready
	{
 8001b5c:	b538      	push	{r3, r4, r5, lr}
 8001b5e:	ed2d 8b08 	vpush	{d8-d11}
		if (DMA1->ISR & DMA_ISR_TCIF5)
 8001b62:	4b8d      	ldr	r3, [pc, #564]	; (8001d98 <DMA1_Channel5_IRQHandler+0x23c>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	0391      	lsls	r1, r2, #14
 8001b68:	d402      	bmi.n	8001b70 <DMA1_Channel5_IRQHandler+0x14>
			pwm_set3Phase_pu(&inverterPWM, motor.Uabc_pu);
			// setPhaseVoltage(setUq, setUd, SetOLangle);	
			led1.toggle();
			//setPhaseVoltage(0.5, 0.5, SetOLangle);
		}
	}
 8001b6a:	ecbd 8b08 	vpop	{d8-d11}
 8001b6e:	bd38      	pop	{r3, r4, r5, pc}
			DMA1->IFCR |= DMA_IFCR_CTCIF5;
 8001b70:	6859      	ldr	r1, [r3, #4]
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001b72:	4a8a      	ldr	r2, [pc, #552]	; (8001d9c <DMA1_Channel5_IRQHandler+0x240>)
 8001b74:	ed9f 9a8a 	vldr	s18, [pc, #552]	; 8001da0 <DMA1_Channel5_IRQHandler+0x244>
 8001b78:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8001da4 <DMA1_Channel5_IRQHandler+0x248>
static inline void motor_clark (motor_t* motor)
{
	// motor->IalphaBeta_A[0] = motor->Iabc_A[0];
	// motor->IalphaBeta_A[1] = (M_1_SQRT3 * motor->IalphaBeta_A[0]) + (M_2_SQRT3 * motor->Iabc_A[1]);

	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001b7c:	ed9f ba8a 	vldr	s22, [pc, #552]	; 8001da8 <DMA1_Channel5_IRQHandler+0x24c>
			motor_setThetaRef (&motor, SetOLangle);
 8001b80:	4d8a      	ldr	r5, [pc, #552]	; (8001dac <DMA1_Channel5_IRQHandler+0x250>)
	motor->Iabc_A[0] = iA;
 8001b82:	4c8b      	ldr	r4, [pc, #556]	; (8001db0 <DMA1_Channel5_IRQHandler+0x254>)
			DMA1->IFCR |= DMA_IFCR_CTCIF5;
 8001b84:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001b88:	6059      	str	r1, [r3, #4]
			AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET,\
 8001b8a:	8893      	ldrh	r3, [r2, #4]
			motor_setThetaRef (&motor, SetOLangle);
 8001b8c:	ed95 aa00 	vldr	s20, [r5]
			AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET,\
 8001b90:	ee08 3a10 	vmov	s16, r3
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001b94:	8853      	ldrh	r3, [r2, #2]
	// uint32_t Ub = -0.5f * Ualpha  + M_SQRT3_2 * Ubeta + 500;
	// uint32_t Uc = -0.5f * Ualpha - M_SQRT3_2 * Ubeta + 500;
}
static inline void motor_setThetaRef (motor_t *motor, float	thetaSet)
{
	motor->theta_Rad = thetaSet;
 8001b96:	ed84 aa17 	vstr	s20, [r4, #92]	; 0x5c
 8001b9a:	ee07 3a10 	vmov	s14, r3
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001b9e:	8813      	ldrh	r3, [r2, #0]
 8001ba0:	ee06 3a90 	vmov	s13, r3
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001ba4:	4b83      	ldr	r3, [pc, #524]	; (8001db4 <DMA1_Channel5_IRQHandler+0x258>)
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001ba6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET,\
 8001baa:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001bae:	881b      	ldrh	r3, [r3, #0]
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001bb0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001bb4:	eef0 5a49 	vmov.f32	s11, s18
 8001bb8:	eeb0 6a49 	vmov.f32	s12, s18
 8001bbc:	eee8 5a27 	vfma.f32	s11, s16, s15
 8001bc0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8001bc4:	eea6 9aa7 	vfma.f32	s18, s13, s15
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8001db8 <DMA1_Channel5_IRQHandler+0x25c>
	motor->Iabc_A[1] = iB;
 8001bd0:	edc4 5a0f 	vstr	s11, [r4, #60]	; 0x3c
 8001bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001bd8:	ee75 9a86 	vadd.f32	s19, s11, s12
 8001bdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001be0:	eef0 aa69 	vmov.f32	s21, s19
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	eed9 aa0b 	vfnms.f32	s21, s18, s22
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001bec:	ee38 8a47 	vsub.f32	s16, s16, s14
 8001bf0:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001dbc <DMA1_Channel5_IRQHandler+0x260>
	motor->Iabc_A[2] = iC;
 8001bf4:	ed84 6a10 	vstr	s12, [r4, #64]	; 0x40
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001bf8:	ee28 8a07 	vmul.f32	s16, s16, s14
 8001bfc:	ee17 3a90 	vmov	r3, s15
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001c00:	eeb0 0a4a 	vmov.f32	s0, s20
 8001c04:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8001c08:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
	motor->Iabc_A[0] = iA;
 8001c0c:	ed84 9a0e 	vstr	s18, [r4, #56]	; 0x38
	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001c10:	edc4 aa11 	vstr	s21, [r4, #68]	; 0x44
 8001c14:	f000 fb06 	bl	8002224 <cosf>
 8001c18:	eef0 8a40 	vmov.f32	s17, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001c1c:	eeb0 0a4a 	vmov.f32	s0, s20
 8001c20:	f000 fb38 	bl	8002294 <sinf>
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001c24:	eee9 9a4b 	vfms.f32	s19, s18, s22
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001c28:	4b65      	ldr	r3, [pc, #404]	; (8001dc0 <DMA1_Channel5_IRQHandler+0x264>)
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001c2a:	4a66      	ldr	r2, [pc, #408]	; (8001dc4 <DMA1_Channel5_IRQHandler+0x268>)
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001c2c:	edd3 4a00 	vldr	s9, [r3]
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001c30:	edd3 5a00 	vldr	s11, [r3]
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001c34:	edd2 7a00 	vldr	s15, [r2]
 8001c38:	eddf 3a63 	vldr	s7, [pc, #396]	; 8001dc8 <DMA1_Channel5_IRQHandler+0x26c>
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001c3c:	edd4 6a15 	vldr	s13, [r4, #84]	; 0x54
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001c40:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001c44:	4b61      	ldr	r3, [pc, #388]	; (8001dcc <DMA1_Channel5_IRQHandler+0x270>)
 8001c46:	ee28 6a28 	vmul.f32	s12, s16, s17
	motor->Idq_A[0] = motor->IalphaBeta_A[0] * cos(motor->theta_Rad) + motor->IalphaBeta_A[1] * sin(motor->theta_Rad);
 8001c4a:	ee28 8a00 	vmul.f32	s16, s16, s0
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001c4e:	eea0 6a29 	vfma.f32	s12, s0, s19
	motor->Idq_A[0] = motor->IalphaBeta_A[0] * cos(motor->theta_Rad) + motor->IalphaBeta_A[1] * sin(motor->theta_Rad);
 8001c52:	eeaa 8aa8 	vfma.f32	s16, s21, s17
 8001c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001c5a:	ee38 4a66 	vsub.f32	s8, s16, s13
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001c5e:	ee67 7aa3 	vmul.f32	s15, s15, s7
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001c62:	ee36 5a47 	vsub.f32	s10, s12, s14
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001c66:	edc3 7a00 	vstr	s15, [r3]
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001c6a:	eea5 7a25 	vfma.f32	s14, s10, s11
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001c6e:	eee4 6a24 	vfma.f32	s13, s8, s9
				if (SetOLangle < M_2PI * POLE_PAIRS) 
 8001c72:	edd5 5a00 	vldr	s11, [r5]
 8001c76:	eddf 7a56 	vldr	s15, [pc, #344]	; 8001dd0 <DMA1_Channel5_IRQHandler+0x274>
 8001c7a:	ed84 8a13 	vstr	s16, [r4, #76]	; 0x4c
 8001c7e:	eef4 5ae7 	vcmpe.f32	s11, s15
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001c86:	ed84 6a14 	vstr	s12, [r4, #80]	; 0x50
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001c8a:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001c8e:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
				if (SetOLangle < M_2PI * POLE_PAIRS) 
 8001c92:	d467      	bmi.n	8001d64 <DMA1_Channel5_IRQHandler+0x208>
					SetOLangle = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	602b      	str	r3, [r5, #0]
			if (motorState )
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <DMA1_Channel5_IRQHandler+0x278>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b1ab      	cbz	r3, 8001cca <DMA1_Channel5_IRQHandler+0x16e>
				if (UART5->ISR & USART_ISR_ORE)
 8001c9e:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <DMA1_Channel5_IRQHandler+0x27c>)
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	0712      	lsls	r2, r2, #28
 8001ca4:	d467      	bmi.n	8001d76 <DMA1_Channel5_IRQHandler+0x21a>
			pidUq.Compute();
 8001ca6:	484d      	ldr	r0, [pc, #308]	; (8001ddc <DMA1_Channel5_IRQHandler+0x280>)
 8001ca8:	f7ff f9de 	bl	8001068 <_ZN3PID7ComputeEv.isra.0>
			pidUd.Compute();				
 8001cac:	484c      	ldr	r0, [pc, #304]	; (8001de0 <DMA1_Channel5_IRQHandler+0x284>)
 8001cae:	f7ff f9db 	bl	8001068 <_ZN3PID7ComputeEv.isra.0>
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001cb2:	ed94 8a17 	vldr	s16, [r4, #92]	; 0x5c
  { return __builtin_cosf(__x); }
 8001cb6:	eeb0 0a48 	vmov.f32	s0, s16
 8001cba:	f000 fab3 	bl	8002224 <cosf>
 8001cbe:	eef0 8a40 	vmov.f32	s17, s0
  { return __builtin_sinf(__x); }
 8001cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8001cc6:	f000 fae5 	bl	8002294 <sinf>
 8001cca:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8001cce:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001cd2:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001de4 <DMA1_Channel5_IRQHandler+0x288>
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001cd6:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <DMA1_Channel5_IRQHandler+0x28c>)
 8001cd8:	4944      	ldr	r1, [pc, #272]	; (8001dec <DMA1_Channel5_IRQHandler+0x290>)
 8001cda:	ed93 6a03 	vldr	s12, [r3, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	680a      	ldr	r2, [r1, #0]
 8001ce2:	7908      	ldrb	r0, [r1, #4]
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001ce4:	ee67 4aa8 	vmul.f32	s9, s15, s17
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001ce8:	ee60 7a67 	vnmul.f32	s15, s0, s15
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001cec:	eee7 4a00 	vfma.f32	s9, s14, s0
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001cf0:	eee7 7a28 	vfma.f32	s15, s14, s17
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001cf4:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8001cf8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001cfc:	eeb0 4a66 	vmov.f32	s8, s13
 8001d00:	eea7 4a87 	vfma.f32	s8, s15, s14
	motor->Uabc_pu[2] = -0.5f * motor->UalphaBeta_pu[0] - M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001d04:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8001d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d0c:	eeb8 5a46 	vcvt.f32.u32	s10, s12
 8001d10:	ee74 5a07 	vadd.f32	s11, s8, s14
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001d14:	ee37 6a87 	vadd.f32	s12, s15, s14
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001d18:	ee36 7a87 	vadd.f32	s14, s13, s14
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001d1c:	ee65 5a85 	vmul.f32	s11, s11, s10
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001d20:	ee26 6a05 	vmul.f32	s12, s12, s10
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001d24:	ee27 7a05 	vmul.f32	s14, s14, s10
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001d28:	eefc 5ae5 	vcvt.u32.f32	s11, s11
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001d2c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001d30:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001d34:	edc3 5a0d 	vstr	s11, [r3, #52]	; 0x34
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001d38:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001d3c:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001d40:	edc4 4a0b 	vstr	s9, [r4, #44]	; 0x2c
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001d44:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
	motor->Uabc_pu[0] = motor->UalphaBeta_pu[0];
 8001d48:	edc4 7a07 	vstr	s15, [r4, #28]
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001d4c:	ed84 4a08 	vstr	s8, [r4, #32]
	motor->Uabc_pu[2] = -0.5f * motor->UalphaBeta_pu[0] - M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001d50:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 8001d54:	6951      	ldr	r1, [r2, #20]
 8001d56:	2301      	movs	r3, #1
 8001d58:	4083      	lsls	r3, r0
 8001d5a:	404b      	eors	r3, r1
 8001d5c:	6153      	str	r3, [r2, #20]
	}
 8001d5e:	ecbd 8b08 	vpop	{d8-d11}
 8001d62:	bd38      	pop	{r3, r4, r5, pc}
					SetOLangle += velChange;
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	ed95 7a00 	vldr	s14, [r5]
 8001d6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d70:	edc5 7a00 	vstr	s15, [r5]
 8001d74:	e790      	b.n	8001c98 <DMA1_Channel5_IRQHandler+0x13c>
	GPIOx->BSRR |= (1<<pin);
 8001d76:	4a1e      	ldr	r2, [pc, #120]	; (8001df0 <DMA1_Channel5_IRQHandler+0x294>)
 8001d78:	6811      	ldr	r1, [r2, #0]
 8001d7a:	7915      	ldrb	r5, [r2, #4]
 8001d7c:	6988      	ldr	r0, [r1, #24]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	40aa      	lsls	r2, r5
 8001d82:	4302      	orrs	r2, r0
 8001d84:	618a      	str	r2, [r1, #24]
					UART5->ICR |= USART_ICR_ORECF;
 8001d86:	6a1a      	ldr	r2, [r3, #32]
		head=0;
 8001d88:	491a      	ldr	r1, [pc, #104]	; (8001df4 <DMA1_Channel5_IRQHandler+0x298>)
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f042 0208 	orr.w	r2, r2, #8
 8001d90:	621a      	str	r2, [r3, #32]
 8001d92:	7308      	strb	r0, [r1, #12]
		tail=0;
 8001d94:	7348      	strb	r0, [r1, #13]
}

void Serial::bufferFlush()
{
	buffer.flush();
}
 8001d96:	e786      	b.n	8001ca6 <DMA1_Channel5_IRQHandler+0x14a>
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	200000dc 	.word	0x200000dc
 8001da0:	c2040000 	.word	0xc2040000
 8001da4:	3c88828a 	.word	0x3c88828a
 8001da8:	3f2aaaab 	.word	0x3f2aaaab
 8001dac:	200000c8 	.word	0x200000c8
 8001db0:	20000100 	.word	0x20000100
 8001db4:	200000f8 	.word	0x200000f8
 8001db8:	3db6ad09 	.word	0x3db6ad09
 8001dbc:	3c1da0c9 	.word	0x3c1da0c9
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	200000fc 	.word	0x200000fc
 8001dc8:	37f1933b 	.word	0x37f1933b
 8001dcc:	200000c4 	.word	0x200000c4
 8001dd0:	428a3ae7 	.word	0x428a3ae7
 8001dd4:	20000178 	.word	0x20000178
 8001dd8:	40005000 	.word	0x40005000
 8001ddc:	20000300 	.word	0x20000300
 8001de0:	200002c0 	.word	0x200002c0
 8001de4:	3f5db3d7 	.word	0x3f5db3d7
 8001de8:	20000018 	.word	0x20000018
 8001dec:	200000bc 	.word	0x200000bc
 8001df0:	200000b4 	.word	0x200000b4
 8001df4:	200001b0 	.word	0x200001b0

08001df8 <TIM2_IRQHandler>:
	
	void TIM2_IRQHandler()
	{
		if (TIM2->SR & TIM_SR_UIF)
 8001df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	07d2      	lsls	r2, r2, #31
 8001e00:	d506      	bpl.n	8001e10 <TIM2_IRQHandler+0x18>
		{
			TIM2->SR &= ~TIM_SR_UIF;
 8001e02:	691a      	ldr	r2, [r3, #16]
			//led3.toggle();
			TIM2loopFlag = true;
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <TIM2_IRQHandler+0x1c>)
			TIM2->SR &= ~TIM_SR_UIF;
 8001e06:	f022 0201 	bic.w	r2, r2, #1
			TIM2loopFlag = true;
 8001e0a:	2001      	movs	r0, #1
			TIM2->SR &= ~TIM_SR_UIF;
 8001e0c:	611a      	str	r2, [r3, #16]
			TIM2loopFlag = true;
 8001e0e:	7008      	strb	r0, [r1, #0]
		}
	}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	200000f4 	.word	0x200000f4

08001e18 <UART5_IRQHandler>:
		if (USARTx->ISR & USART_ISR_RXNE)
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <UART5_IRQHandler+0x38>)
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	69d1      	ldr	r1, [r2, #28]
 8001e1e:	0689      	lsls	r1, r1, #26
 8001e20:	d400      	bmi.n	8001e24 <UART5_IRQHandler+0xc>
extern "C"
{
void UART5_IRQHandler()
	{
		uart.interrupt();
	}
 8001e22:	4770      	bx	lr
			char c = USARTx->RDR;
 8001e24:	6a51      	ldr	r1, [r2, #36]	; 0x24
	if ((head+1)==tail)
 8001e26:	7b1a      	ldrb	r2, [r3, #12]
 8001e28:	7b58      	ldrb	r0, [r3, #13]
 8001e2a:	3201      	adds	r2, #1
 8001e2c:	4282      	cmp	r2, r0
 8001e2e:	b2c9      	uxtb	r1, r1
 8001e30:	d0f7      	beq.n	8001e22 <UART5_IRQHandler+0xa>
	buffer[head] = _data;
 8001e32:	7b18      	ldrb	r0, [r3, #12]
	head++;
 8001e34:	7b1a      	ldrb	r2, [r3, #12]
 8001e36:	3201      	adds	r2, #1
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	731a      	strb	r2, [r3, #12]
	if ( head == (bSize-1) )
 8001e3c:	7b1a      	ldrb	r2, [r3, #12]
	buffer[head] = _data;
 8001e3e:	4418      	add	r0, r3
	if ( head == (bSize-1) )
 8001e40:	2aff      	cmp	r2, #255	; 0xff
		head = 0;
 8001e42:	bf08      	it	eq
 8001e44:	2200      	moveq	r2, #0
	buffer[head] = _data;
 8001e46:	7381      	strb	r1, [r0, #14]
		head = 0;
 8001e48:	bf08      	it	eq
 8001e4a:	731a      	strbeq	r2, [r3, #12]
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200001b0 	.word	0x200001b0

08001e54 <SysTick_Handler>:
		milis++;
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <SysTick_Handler+0x10>)
		TIM6->EGR = TIM_EGR_UG;
 8001e56:	4904      	ldr	r1, [pc, #16]	; (8001e68 <SysTick_Handler+0x14>)
		milis++;
 8001e58:	6813      	ldr	r3, [r2, #0]
		TIM6->EGR = TIM_EGR_UG;
 8001e5a:	2001      	movs	r0, #1
		milis++;
 8001e5c:	4403      	add	r3, r0
 8001e5e:	6013      	str	r3, [r2, #0]
		TIM6->EGR = TIM_EGR_UG;
 8001e60:	6148      	str	r0, [r1, #20]
	}
 8001e62:	4770      	bx	lr
 8001e64:	20000174 	.word	0x20000174
 8001e68:	40001000 	.word	0x40001000

08001e6c <SystemInit>:

void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <SystemInit+0x30>)
	#else
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	#endif

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	DWT->CYCCNT = 0;
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <SystemInit+0x34>)
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e70:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e74:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001e7c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e80:	6098      	str	r0, [r3, #8]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e82:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
	DWT->CYCCNT = 0;
 8001e86:	2000      	movs	r0, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e88:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001e8c:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
	DWT->CYCCNT = 0;
 8001e90:	6050      	str	r0, [r2, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001e92:	6813      	ldr	r3, [r2, #0]
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00
 8001ea0:	e0001000 	.word	0xe0001000

08001ea4 <_init>:
int __errno;
void *__dso_handle = (void *)&__dso_handle;

void _init(void) {}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop

08001ea8 <_sub_I_65535_0.0>:
 8001ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	2400      	movs	r4, #0
 8001eb0:	2601      	movs	r6, #1
 8001eb2:	4f8a      	ldr	r7, [pc, #552]	; (80020dc <_sub_I_65535_0.0+0x234>)
 8001eb4:	9400      	str	r4, [sp, #0]
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f04f 0805 	mov.w	r8, #5
 8001ebc:	461d      	mov	r5, r3
 8001ebe:	e9cd 6801 	strd	r6, r8, [sp, #4]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4986      	ldr	r1, [pc, #536]	; (80020e0 <_sub_I_65535_0.0+0x238>)
 8001ec6:	4887      	ldr	r0, [pc, #540]	; (80020e4 <_sub_I_65535_0.0+0x23c>)
 8001ec8:	eddf 0a87 	vldr	s1, [pc, #540]	; 80020e8 <_sub_I_65535_0.0+0x240>
 8001ecc:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80020ec <_sub_I_65535_0.0+0x244>
 8001ed0:	f7ff f83e 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001ed4:	e9cd 4500 	strd	r4, r5, [sp]
 8001ed8:	f8cd 8008 	str.w	r8, [sp, #8]
 8001edc:	462b      	mov	r3, r5
 8001ede:	f04f 0808 	mov.w	r8, #8
 8001ee2:	4639      	mov	r1, r7
 8001ee4:	4882      	ldr	r0, [pc, #520]	; (80020f0 <_sub_I_65535_0.0+0x248>)
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	f7ff f832 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001eec:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8001ef0:	462b      	mov	r3, r5
 8001ef2:	4642      	mov	r2, r8
 8001ef4:	4639      	mov	r1, r7
 8001ef6:	487f      	ldr	r0, [pc, #508]	; (80020f4 <_sub_I_65535_0.0+0x24c>)
 8001ef8:	9600      	str	r6, [sp, #0]
 8001efa:	f7ff f829 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001efe:	e9cd 6400 	strd	r6, r4, [sp]
 8001f02:	f8cd 8008 	str.w	r8, [sp, #8]
 8001f06:	462b      	mov	r3, r5
 8001f08:	4639      	mov	r1, r7
 8001f0a:	487b      	ldr	r0, [pc, #492]	; (80020f8 <_sub_I_65535_0.0+0x250>)
 8001f0c:	f8df 826c 	ldr.w	r8, [pc, #620]	; 800217c <_sub_I_65535_0.0+0x2d4>
 8001f10:	2209      	movs	r2, #9
 8001f12:	f7ff f81d 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001f16:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001f1a:	462b      	mov	r3, r5
 8001f1c:	9400      	str	r4, [sp, #0]
 8001f1e:	4622      	mov	r2, r4
 8001f20:	4876      	ldr	r0, [pc, #472]	; (80020fc <_sub_I_65535_0.0+0x254>)
 8001f22:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001f26:	f7ff f813 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001f2a:	f04f 0904 	mov.w	r9, #4
 8001f2e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001f32:	462b      	mov	r3, r5
 8001f34:	9400      	str	r4, [sp, #0]
 8001f36:	4622      	mov	r2, r4
 8001f38:	4639      	mov	r1, r7
 8001f3a:	4871      	ldr	r0, [pc, #452]	; (8002100 <_sub_I_65535_0.0+0x258>)
 8001f3c:	f7ff f808 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001f40:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8001f44:	9400      	str	r4, [sp, #0]
 8001f46:	462b      	mov	r3, r5
 8001f48:	4639      	mov	r1, r7
 8001f4a:	486e      	ldr	r0, [pc, #440]	; (8002104 <_sub_I_65535_0.0+0x25c>)
 8001f4c:	220d      	movs	r2, #13
 8001f4e:	f7fe ffff 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001f52:	f04f 0a06 	mov.w	sl, #6
 8001f56:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001f5a:	9400      	str	r4, [sp, #0]
 8001f5c:	462b      	mov	r3, r5
 8001f5e:	4632      	mov	r2, r6
 8001f60:	4639      	mov	r1, r7
 8001f62:	4869      	ldr	r0, [pc, #420]	; (8002108 <_sub_I_65535_0.0+0x260>)
 8001f64:	f7fe fff4 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001f68:	e9cd 4400 	strd	r4, r4, [sp]
 8001f6c:	462b      	mov	r3, r5
 8001f6e:	4622      	mov	r2, r4
 8001f70:	4641      	mov	r1, r8
 8001f72:	4866      	ldr	r0, [pc, #408]	; (800210c <_sub_I_65535_0.0+0x264>)
 8001f74:	f8cd a008 	str.w	sl, [sp, #8]
 8001f78:	f7fe ffea 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001f7c:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8001f80:	9400      	str	r4, [sp, #0]
 8001f82:	462b      	mov	r3, r5
 8001f84:	4862      	ldr	r0, [pc, #392]	; (8002110 <_sub_I_65535_0.0+0x268>)
 8001f86:	220a      	movs	r2, #10
 8001f88:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001f8c:	f7fe ffe0 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001f90:	230c      	movs	r3, #12
 8001f92:	e9cd 4400 	strd	r4, r4, [sp]
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	4641      	mov	r1, r8
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	485d      	ldr	r0, [pc, #372]	; (8002114 <_sub_I_65535_0.0+0x26c>)
 8001f9e:	2209      	movs	r2, #9
 8001fa0:	f7fe ffd6 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001fa4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001fa8:	9400      	str	r4, [sp, #0]
 8001faa:	4622      	mov	r2, r4
 8001fac:	485a      	ldr	r0, [pc, #360]	; (8002118 <_sub_I_65535_0.0+0x270>)
 8001fae:	2303      	movs	r3, #3
 8001fb0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001fb4:	f7fe ffcc 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001fb8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001fbc:	9400      	str	r4, [sp, #0]
 8001fbe:	462a      	mov	r2, r5
 8001fc0:	4639      	mov	r1, r7
 8001fc2:	4856      	ldr	r0, [pc, #344]	; (800211c <_sub_I_65535_0.0+0x274>)
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	f7fe ffc3 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001fd0:	9400      	str	r4, [sp, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4639      	mov	r1, r7
 8001fd6:	4852      	ldr	r0, [pc, #328]	; (8002120 <_sub_I_65535_0.0+0x278>)
 8001fd8:	f7fe ffba 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001fdc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001fe0:	462a      	mov	r2, r5
 8001fe2:	9400      	str	r4, [sp, #0]
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	484f      	ldr	r0, [pc, #316]	; (8002124 <_sub_I_65535_0.0+0x27c>)
 8001fe8:	2303      	movs	r3, #3
 8001fea:	f7fe ffb1 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8001fee:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001ff2:	9400      	str	r4, [sp, #0]
 8001ff4:	4641      	mov	r1, r8
 8001ff6:	484c      	ldr	r0, [pc, #304]	; (8002128 <_sub_I_65535_0.0+0x280>)
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	220b      	movs	r2, #11
 8001ffc:	f7fe ffa8 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002000:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002004:	464a      	mov	r2, r9
 8002006:	9400      	str	r4, [sp, #0]
 8002008:	4633      	mov	r3, r6
 800200a:	4639      	mov	r1, r7
 800200c:	4847      	ldr	r0, [pc, #284]	; (800212c <_sub_I_65535_0.0+0x284>)
 800200e:	f7fe ff9f 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002012:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002016:	4633      	mov	r3, r6
 8002018:	9400      	str	r4, [sp, #0]
 800201a:	4641      	mov	r1, r8
 800201c:	4844      	ldr	r0, [pc, #272]	; (8002130 <_sub_I_65535_0.0+0x288>)
 800201e:	220a      	movs	r2, #10
 8002020:	f7fe ff96 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002024:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002028:	4633      	mov	r3, r6
 800202a:	4639      	mov	r1, r7
 800202c:	9400      	str	r4, [sp, #0]
 800202e:	4841      	ldr	r0, [pc, #260]	; (8002134 <_sub_I_65535_0.0+0x28c>)
 8002030:	220b      	movs	r2, #11
 8002032:	f7fe ff8d 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002036:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800203a:	4633      	mov	r3, r6
 800203c:	4641      	mov	r1, r8
 800203e:	9400      	str	r4, [sp, #0]
 8002040:	483d      	ldr	r0, [pc, #244]	; (8002138 <_sub_I_65535_0.0+0x290>)
 8002042:	2207      	movs	r2, #7
 8002044:	f7fe ff84 	bl	8000f50 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002048:	4a3c      	ldr	r2, [pc, #240]	; (800213c <_sub_I_65535_0.0+0x294>)
 800204a:	493d      	ldr	r1, [pc, #244]	; (8002140 <_sub_I_65535_0.0+0x298>)
 800204c:	6011      	str	r1, [r2, #0]
 800204e:	493d      	ldr	r1, [pc, #244]	; (8002144 <_sub_I_65535_0.0+0x29c>)
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <_sub_I_65535_0.0+0x2a0>)
 8002052:	7314      	strb	r4, [r2, #12]
 8002054:	e9c2 1401 	strd	r1, r4, [r2, #4]
 8002058:	7354      	strb	r4, [r2, #13]
 800205a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800205c:	483b      	ldr	r0, [pc, #236]	; (800214c <_sub_I_65535_0.0+0x2a4>)
 800205e:	4c3c      	ldr	r4, [pc, #240]	; (8002150 <_sub_I_65535_0.0+0x2a8>)
 8002060:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002064:	659a      	str	r2, [r3, #88]	; 0x58
 8002066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002068:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800206c:	639a      	str	r2, [r3, #56]	; 0x38
 800206e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002070:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002074:	639a      	str	r2, [r3, #56]	; 0x38
 8002076:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800207a:	6042      	str	r2, [r0, #4]
 800207c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002080:	60ca      	str	r2, [r1, #12]
 8002082:	680a      	ldr	r2, [r1, #0]
 8002084:	4833      	ldr	r0, [pc, #204]	; (8002154 <_sub_I_65535_0.0+0x2ac>)
 8002086:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 800208a:	600a      	str	r2, [r1, #0]
 800208c:	4a32      	ldr	r2, [pc, #200]	; (8002158 <_sub_I_65535_0.0+0x2b0>)
 800208e:	6002      	str	r2, [r0, #0]
 8002090:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002092:	4832      	ldr	r0, [pc, #200]	; (800215c <_sub_I_65535_0.0+0x2b4>)
 8002094:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002098:	6599      	str	r1, [r3, #88]	; 0x58
 800209a:	6813      	ldr	r3, [r2, #0]
 800209c:	4930      	ldr	r1, [pc, #192]	; (8002160 <_sub_I_65535_0.0+0x2b8>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	6110      	str	r0, [r2, #16]
 80020a6:	6813      	ldr	r3, [r2, #0]
 80020a8:	482e      	ldr	r0, [pc, #184]	; (8002164 <_sub_I_65535_0.0+0x2bc>)
 80020aa:	4333      	orrs	r3, r6
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	600e      	str	r6, [r1, #0]
 80020b0:	4622      	mov	r2, r4
 80020b2:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <_sub_I_65535_0.0+0x2c0>)
 80020b8:	f7fe fe3a 	bl	8000d30 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>
 80020bc:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800216c <_sub_I_65535_0.0+0x2c4>
 80020c0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8002170 <_sub_I_65535_0.0+0x2c8>
 80020c4:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <_sub_I_65535_0.0+0x2cc>)
 80020c6:	482c      	ldr	r0, [pc, #176]	; (8002178 <_sub_I_65535_0.0+0x2d0>)
 80020c8:	eb04 0209 	add.w	r2, r4, r9
 80020cc:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80020d0:	b004      	add	sp, #16
 80020d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020d6:	f7fe be2b 	b.w	8000d30 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>
 80020da:	bf00      	nop
 80020dc:	48000800 	.word	0x48000800
 80020e0:	48000c00 	.word	0x48000c00
 80020e4:	200000a8 	.word	0x200000a8
 80020e8:	3e19999a 	.word	0x3e19999a
 80020ec:	3c23d70a 	.word	0x3c23d70a
 80020f0:	200000a0 	.word	0x200000a0
 80020f4:	20000098 	.word	0x20000098
 80020f8:	20000090 	.word	0x20000090
 80020fc:	20000088 	.word	0x20000088
 8002100:	20000080 	.word	0x20000080
 8002104:	20000078 	.word	0x20000078
 8002108:	20000070 	.word	0x20000070
 800210c:	20000068 	.word	0x20000068
 8002110:	20000060 	.word	0x20000060
 8002114:	20000058 	.word	0x20000058
 8002118:	20000050 	.word	0x20000050
 800211c:	20000048 	.word	0x20000048
 8002120:	20000040 	.word	0x20000040
 8002124:	20000038 	.word	0x20000038
 8002128:	20000030 	.word	0x20000030
 800212c:	200000bc 	.word	0x200000bc
 8002130:	20000028 	.word	0x20000028
 8002134:	200000e8 	.word	0x200000e8
 8002138:	200000b4 	.word	0x200000b4
 800213c:	200001b0 	.word	0x200001b0
 8002140:	0007a120 	.word	0x0007a120
 8002144:	40005000 	.word	0x40005000
 8002148:	40021000 	.word	0x40021000
 800214c:	e000e100 	.word	0xe000e100
 8002150:	20000130 	.word	0x20000130
 8002154:	200000e4 	.word	0x200000e4
 8002158:	40007800 	.word	0x40007800
 800215c:	0070276b 	.word	0x0070276b
 8002160:	2000016c 	.word	0x2000016c
 8002164:	200002c0 	.word	0x200002c0
 8002168:	200000b0 	.word	0x200000b0
 800216c:	3c75c28f 	.word	0x3c75c28f
 8002170:	3a83126f 	.word	0x3a83126f
 8002174:	20000014 	.word	0x20000014
 8002178:	20000300 	.word	0x20000300
 800217c:	48000400 	.word	0x48000400

08002180 <Reset_Handler>:
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <LoopForever+0x2>)
 8002182:	4685      	mov	sp, r0
 8002184:	480d      	ldr	r0, [pc, #52]	; (80021bc <LoopForever+0x6>)
 8002186:	490e      	ldr	r1, [pc, #56]	; (80021c0 <LoopForever+0xa>)
 8002188:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <LoopForever+0xe>)
 800218a:	2300      	movs	r3, #0
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:
 800218e:	58d4      	ldr	r4, [r2, r3]
 8002190:	50c4      	str	r4, [r0, r3]
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:
 8002194:	18c4      	adds	r4, r0, r3
 8002196:	428c      	cmp	r4, r1
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
 800219a:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <LoopForever+0x12>)
 800219c:	4c0b      	ldr	r4, [pc, #44]	; (80021cc <LoopForever+0x16>)
 800219e:	2300      	movs	r3, #0
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:
 80021a6:	42a2      	cmp	r2, r4
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>
 80021aa:	f7ff fe5f 	bl	8001e6c <SystemInit>
 80021ae:	f000 f811 	bl	80021d4 <__libc_init_array>
 80021b2:	f7fe ffd5 	bl	8001160 <main>

080021b6 <LoopForever>:
 80021b6:	e7fe      	b.n	80021b6 <LoopForever>
 80021b8:	20020000 	.word	0x20020000
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000028 	.word	0x20000028
 80021c4:	08003394 	.word	0x08003394
 80021c8:	20000028 	.word	0x20000028
 80021cc:	20000340 	.word	0x20000340

080021d0 <ADC1_2_IRQHandler>:
 80021d0:	e7fe      	b.n	80021d0 <ADC1_2_IRQHandler>
	...

080021d4 <__libc_init_array>:
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <__libc_init_array+0x40>)
 80021d8:	4d0f      	ldr	r5, [pc, #60]	; (8002218 <__libc_init_array+0x44>)
 80021da:	42ab      	cmp	r3, r5
 80021dc:	eba3 0605 	sub.w	r6, r3, r5
 80021e0:	d007      	beq.n	80021f2 <__libc_init_array+0x1e>
 80021e2:	10b6      	asrs	r6, r6, #2
 80021e4:	2400      	movs	r4, #0
 80021e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ea:	3401      	adds	r4, #1
 80021ec:	4798      	blx	r3
 80021ee:	42a6      	cmp	r6, r4
 80021f0:	d8f9      	bhi.n	80021e6 <__libc_init_array+0x12>
 80021f2:	f7ff fe57 	bl	8001ea4 <_init>
 80021f6:	4d09      	ldr	r5, [pc, #36]	; (800221c <__libc_init_array+0x48>)
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <__libc_init_array+0x4c>)
 80021fa:	1b5e      	subs	r6, r3, r5
 80021fc:	42ab      	cmp	r3, r5
 80021fe:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8002202:	d006      	beq.n	8002212 <__libc_init_array+0x3e>
 8002204:	2400      	movs	r4, #0
 8002206:	f855 3b04 	ldr.w	r3, [r5], #4
 800220a:	3401      	adds	r4, #1
 800220c:	4798      	blx	r3
 800220e:	42a6      	cmp	r6, r4
 8002210:	d8f9      	bhi.n	8002206 <__libc_init_array+0x32>
 8002212:	bd70      	pop	{r4, r5, r6, pc}
 8002214:	08003390 	.word	0x08003390
 8002218:	08003390 	.word	0x08003390
 800221c:	08003390 	.word	0x08003390
 8002220:	08003394 	.word	0x08003394

08002224 <cosf>:
 8002224:	ee10 3a10 	vmov	r3, s0
 8002228:	4918      	ldr	r1, [pc, #96]	; (800228c <cosf+0x68>)
 800222a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800222e:	428a      	cmp	r2, r1
 8002230:	d91b      	bls.n	800226a <cosf+0x46>
 8002232:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8002236:	d302      	bcc.n	800223e <cosf+0x1a>
 8002238:	ee30 0a40 	vsub.f32	s0, s0, s0
 800223c:	4770      	bx	lr
 800223e:	b500      	push	{lr}
 8002240:	b083      	sub	sp, #12
 8002242:	4668      	mov	r0, sp
 8002244:	f000 f92a 	bl	800249c <__ieee754_rem_pio2f>
 8002248:	f000 0003 	and.w	r0, r0, #3
 800224c:	2801      	cmp	r0, #1
 800224e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002252:	ed9d 0a00 	vldr	s0, [sp]
 8002256:	d00c      	beq.n	8002272 <cosf+0x4e>
 8002258:	2802      	cmp	r0, #2
 800225a:	d012      	beq.n	8002282 <cosf+0x5e>
 800225c:	b170      	cbz	r0, 800227c <cosf+0x58>
 800225e:	2001      	movs	r0, #1
 8002260:	f000 f8d4 	bl	800240c <__kernel_sinf>
 8002264:	b003      	add	sp, #12
 8002266:	f85d fb04 	ldr.w	pc, [sp], #4
 800226a:	eddf 0a09 	vldr	s1, [pc, #36]	; 8002290 <cosf+0x6c>
 800226e:	f000 b84b 	b.w	8002308 <__kernel_cosf>
 8002272:	f000 f8cb 	bl	800240c <__kernel_sinf>
 8002276:	eeb1 0a40 	vneg.f32	s0, s0
 800227a:	e7f3      	b.n	8002264 <cosf+0x40>
 800227c:	f000 f844 	bl	8002308 <__kernel_cosf>
 8002280:	e7f0      	b.n	8002264 <cosf+0x40>
 8002282:	f000 f841 	bl	8002308 <__kernel_cosf>
 8002286:	eeb1 0a40 	vneg.f32	s0, s0
 800228a:	e7eb      	b.n	8002264 <cosf+0x40>
 800228c:	3f490fd8 	.word	0x3f490fd8
 8002290:	00000000 	.word	0x00000000

08002294 <sinf>:
 8002294:	ee10 3a10 	vmov	r3, s0
 8002298:	4919      	ldr	r1, [pc, #100]	; (8002300 <sinf+0x6c>)
 800229a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800229e:	428a      	cmp	r2, r1
 80022a0:	d91c      	bls.n	80022dc <sinf+0x48>
 80022a2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80022a6:	d302      	bcc.n	80022ae <sinf+0x1a>
 80022a8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80022ac:	4770      	bx	lr
 80022ae:	b500      	push	{lr}
 80022b0:	b083      	sub	sp, #12
 80022b2:	4668      	mov	r0, sp
 80022b4:	f000 f8f2 	bl	800249c <__ieee754_rem_pio2f>
 80022b8:	f000 0003 	and.w	r0, r0, #3
 80022bc:	2801      	cmp	r0, #1
 80022be:	eddd 0a01 	vldr	s1, [sp, #4]
 80022c2:	ed9d 0a00 	vldr	s0, [sp]
 80022c6:	d00e      	beq.n	80022e6 <sinf+0x52>
 80022c8:	2802      	cmp	r0, #2
 80022ca:	d013      	beq.n	80022f4 <sinf+0x60>
 80022cc:	b170      	cbz	r0, 80022ec <sinf+0x58>
 80022ce:	f000 f81b 	bl	8002308 <__kernel_cosf>
 80022d2:	eeb1 0a40 	vneg.f32	s0, s0
 80022d6:	b003      	add	sp, #12
 80022d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80022dc:	eddf 0a09 	vldr	s1, [pc, #36]	; 8002304 <sinf+0x70>
 80022e0:	2000      	movs	r0, #0
 80022e2:	f000 b893 	b.w	800240c <__kernel_sinf>
 80022e6:	f000 f80f 	bl	8002308 <__kernel_cosf>
 80022ea:	e7f4      	b.n	80022d6 <sinf+0x42>
 80022ec:	2001      	movs	r0, #1
 80022ee:	f000 f88d 	bl	800240c <__kernel_sinf>
 80022f2:	e7f0      	b.n	80022d6 <sinf+0x42>
 80022f4:	2001      	movs	r0, #1
 80022f6:	f000 f889 	bl	800240c <__kernel_sinf>
 80022fa:	eeb1 0a40 	vneg.f32	s0, s0
 80022fe:	e7ea      	b.n	80022d6 <sinf+0x42>
 8002300:	3f490fd8 	.word	0x3f490fd8
 8002304:	00000000 	.word	0x00000000

08002308 <__kernel_cosf>:
 8002308:	ee10 3a10 	vmov	r3, s0
 800230c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002310:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002314:	d22c      	bcs.n	8002370 <__kernel_cosf+0x68>
 8002316:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800231a:	ee17 3a90 	vmov	r3, s15
 800231e:	2b00      	cmp	r3, #0
 8002320:	d060      	beq.n	80023e4 <__kernel_cosf+0xdc>
 8002322:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002326:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80023ec <__kernel_cosf+0xe4>
 800232a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80023f0 <__kernel_cosf+0xe8>
 800232e:	eddf 5a31 	vldr	s11, [pc, #196]	; 80023f4 <__kernel_cosf+0xec>
 8002332:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80023f8 <__kernel_cosf+0xf0>
 8002336:	eddf 6a31 	vldr	s13, [pc, #196]	; 80023fc <__kernel_cosf+0xf4>
 800233a:	eea7 5a87 	vfma.f32	s10, s15, s14
 800233e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002400 <__kernel_cosf+0xf8>
 8002342:	eee5 5a27 	vfma.f32	s11, s10, s15
 8002346:	eea7 6aa5 	vfma.f32	s12, s15, s11
 800234a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800234e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002352:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002356:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800235a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800235e:	eee7 0aa6 	vfma.f32	s1, s15, s13
 8002362:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002366:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800236a:	ee30 0a60 	vsub.f32	s0, s0, s1
 800236e:	4770      	bx	lr
 8002370:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002374:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80023ec <__kernel_cosf+0xe4>
 8002378:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 80023f0 <__kernel_cosf+0xe8>
 800237c:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023f4 <__kernel_cosf+0xec>
 8002380:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80023f8 <__kernel_cosf+0xf0>
 8002384:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80023fc <__kernel_cosf+0xf4>
 8002388:	4a1e      	ldr	r2, [pc, #120]	; (8002404 <__kernel_cosf+0xfc>)
 800238a:	eea7 5a87 	vfma.f32	s10, s15, s14
 800238e:	4293      	cmp	r3, r2
 8002390:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002400 <__kernel_cosf+0xf8>
 8002394:	eee5 5a27 	vfma.f32	s11, s10, s15
 8002398:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800239c:	eea6 7a27 	vfma.f32	s14, s12, s15
 80023a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80023a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023a8:	d9d5      	bls.n	8002356 <__kernel_cosf+0x4e>
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <__kernel_cosf+0x100>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d814      	bhi.n	80023da <__kernel_cosf+0xd2>
 80023b0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80023b4:	ee07 3a10 	vmov	s14, r3
 80023b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80023bc:	ee36 6a47 	vsub.f32	s12, s12, s14
 80023c0:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80023c4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80023c8:	ee97 7aa5 	vfnms.f32	s14, s15, s11
 80023cc:	eee7 0aa6 	vfma.f32	s1, s15, s13
 80023d0:	ee37 7a60 	vsub.f32	s14, s14, s1
 80023d4:	ee36 0a47 	vsub.f32	s0, s12, s14
 80023d8:	4770      	bx	lr
 80023da:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 80023de:	eeb5 7a02 	vmov.f32	s14, #82	; 0x3e900000  0.2812500
 80023e2:	e7ed      	b.n	80023c0 <__kernel_cosf+0xb8>
 80023e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	ad47d74e 	.word	0xad47d74e
 80023f0:	310f74f6 	.word	0x310f74f6
 80023f4:	b493f27c 	.word	0xb493f27c
 80023f8:	37d00d01 	.word	0x37d00d01
 80023fc:	3d2aaaab 	.word	0x3d2aaaab
 8002400:	bab60b61 	.word	0xbab60b61
 8002404:	3e999999 	.word	0x3e999999
 8002408:	3f480000 	.word	0x3f480000

0800240c <__kernel_sinf>:
 800240c:	ee10 3a10 	vmov	r3, s0
 8002410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002414:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002418:	d204      	bcs.n	8002424 <__kernel_sinf+0x18>
 800241a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800241e:	ee17 3a90 	vmov	r3, s15
 8002422:	b35b      	cbz	r3, 800247c <__kernel_sinf+0x70>
 8002424:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002428:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002480 <__kernel_sinf+0x74>
 800242c:	eddf 5a15 	vldr	s11, [pc, #84]	; 8002484 <__kernel_sinf+0x78>
 8002430:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8002488 <__kernel_sinf+0x7c>
 8002434:	eddf 6a15 	vldr	s13, [pc, #84]	; 800248c <__kernel_sinf+0x80>
 8002438:	eee7 5a87 	vfma.f32	s11, s15, s14
 800243c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002490 <__kernel_sinf+0x84>
 8002440:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8002444:	ee20 5a27 	vmul.f32	s10, s0, s15
 8002448:	eee6 6a27 	vfma.f32	s13, s12, s15
 800244c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002450:	b930      	cbnz	r0, 8002460 <__kernel_sinf+0x54>
 8002452:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002494 <__kernel_sinf+0x88>
 8002456:	eee7 6a87 	vfma.f32	s13, s15, s14
 800245a:	eea6 0a85 	vfma.f32	s0, s13, s10
 800245e:	4770      	bx	lr
 8002460:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8002464:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002468:	eea0 7aa6 	vfma.f32	s14, s1, s13
 800246c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002498 <__kernel_sinf+0x8c>
 8002470:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8002474:	eee5 0a26 	vfma.f32	s1, s10, s13
 8002478:	ee30 0a60 	vsub.f32	s0, s0, s1
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	2f2ec9d3 	.word	0x2f2ec9d3
 8002484:	b2d72f34 	.word	0xb2d72f34
 8002488:	3638ef1b 	.word	0x3638ef1b
 800248c:	b9500d01 	.word	0xb9500d01
 8002490:	3c088889 	.word	0x3c088889
 8002494:	be2aaaab 	.word	0xbe2aaaab
 8002498:	3e2aaaab 	.word	0x3e2aaaab

0800249c <__ieee754_rem_pio2f>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	ee10 3a10 	vmov	r3, s0
 80024a2:	4a88      	ldr	r2, [pc, #544]	; (80026c4 <__ieee754_rem_pio2f+0x228>)
 80024a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80024a8:	4294      	cmp	r4, r2
 80024aa:	b086      	sub	sp, #24
 80024ac:	4605      	mov	r5, r0
 80024ae:	d971      	bls.n	8002594 <__ieee754_rem_pio2f+0xf8>
 80024b0:	4a85      	ldr	r2, [pc, #532]	; (80026c8 <__ieee754_rem_pio2f+0x22c>)
 80024b2:	4294      	cmp	r4, r2
 80024b4:	461e      	mov	r6, r3
 80024b6:	d824      	bhi.n	8002502 <__ieee754_rem_pio2f+0x66>
 80024b8:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	eddf 7a83 	vldr	s15, [pc, #524]	; 80026cc <__ieee754_rem_pio2f+0x230>
 80024c2:	4a83      	ldr	r2, [pc, #524]	; (80026d0 <__ieee754_rem_pio2f+0x234>)
 80024c4:	f026 060f 	bic.w	r6, r6, #15
 80024c8:	eeb0 7a40 	vmov.f32	s14, s0
 80024cc:	f340 80e0 	ble.w	8002690 <__ieee754_rem_pio2f+0x1f4>
 80024d0:	4296      	cmp	r6, r2
 80024d2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80024d6:	bf09      	itett	eq
 80024d8:	ed9f 7a7e 	vldreq	s14, [pc, #504]	; 80026d4 <__ieee754_rem_pio2f+0x238>
 80024dc:	eddf 6a7e 	vldrne	s13, [pc, #504]	; 80026d8 <__ieee754_rem_pio2f+0x23c>
 80024e0:	eddf 6a7e 	vldreq	s13, [pc, #504]	; 80026dc <__ieee754_rem_pio2f+0x240>
 80024e4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80024e8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80024ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024f0:	ed80 7a00 	vstr	s14, [r0]
 80024f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80024f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80024fc:	2001      	movs	r0, #1
 80024fe:	b006      	add	sp, #24
 8002500:	bd70      	pop	{r4, r5, r6, pc}
 8002502:	4a77      	ldr	r2, [pc, #476]	; (80026e0 <__ieee754_rem_pio2f+0x244>)
 8002504:	4294      	cmp	r4, r2
 8002506:	d952      	bls.n	80025ae <__ieee754_rem_pio2f+0x112>
 8002508:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800250c:	d248      	bcs.n	80025a0 <__ieee754_rem_pio2f+0x104>
 800250e:	15e2      	asrs	r2, r4, #23
 8002510:	3a86      	subs	r2, #134	; 0x86
 8002512:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800251e:	eddf 6a71 	vldr	s13, [pc, #452]	; 80026e4 <__ieee754_rem_pio2f+0x248>
 8002522:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800252a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800252e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002532:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002536:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800253a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800253e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8002542:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002546:	eef5 7a40 	vcmp.f32	s15, #0.0
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	edcd 7a05 	vstr	s15, [sp, #20]
 8002552:	f040 8098 	bne.w	8002686 <__ieee754_rem_pio2f+0x1ea>
 8002556:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2302      	movne	r3, #2
 8002564:	4960      	ldr	r1, [pc, #384]	; (80026e8 <__ieee754_rem_pio2f+0x24c>)
 8002566:	9101      	str	r1, [sp, #4]
 8002568:	2102      	movs	r1, #2
 800256a:	9100      	str	r1, [sp, #0]
 800256c:	a803      	add	r0, sp, #12
 800256e:	4629      	mov	r1, r5
 8002570:	f000 f8cc 	bl	800270c <__kernel_rem_pio2f>
 8002574:	2e00      	cmp	r6, #0
 8002576:	dac2      	bge.n	80024fe <__ieee754_rem_pio2f+0x62>
 8002578:	ed95 7a00 	vldr	s14, [r5]
 800257c:	edd5 7a01 	vldr	s15, [r5, #4]
 8002580:	eeb1 7a47 	vneg.f32	s14, s14
 8002584:	eef1 7a67 	vneg.f32	s15, s15
 8002588:	ed85 7a00 	vstr	s14, [r5]
 800258c:	edc5 7a01 	vstr	s15, [r5, #4]
 8002590:	4240      	negs	r0, r0
 8002592:	e7b4      	b.n	80024fe <__ieee754_rem_pio2f+0x62>
 8002594:	2200      	movs	r2, #0
 8002596:	ed85 0a00 	vstr	s0, [r5]
 800259a:	6042      	str	r2, [r0, #4]
 800259c:	2000      	movs	r0, #0
 800259e:	e7ae      	b.n	80024fe <__ieee754_rem_pio2f+0x62>
 80025a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80025a4:	edc0 7a01 	vstr	s15, [r0, #4]
 80025a8:	edc0 7a00 	vstr	s15, [r0]
 80025ac:	e7f6      	b.n	800259c <__ieee754_rem_pio2f+0x100>
 80025ae:	f000 f8a5 	bl	80026fc <fabsf>
 80025b2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80026ec <__ieee754_rem_pio2f+0x250>
 80025b6:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80026cc <__ieee754_rem_pio2f+0x230>
 80025ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80025be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80025c2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80026d8 <__ieee754_rem_pio2f+0x23c>
 80025c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ca:	ee17 0a90 	vmov	r0, s15
 80025ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025d2:	281f      	cmp	r0, #31
 80025d4:	eea6 0ac6 	vfms.f32	s0, s13, s12
 80025d8:	ee66 7a87 	vmul.f32	s15, s13, s14
 80025dc:	eeb1 6a66 	vneg.f32	s12, s13
 80025e0:	dc20      	bgt.n	8002624 <__ieee754_rem_pio2f+0x188>
 80025e2:	4a43      	ldr	r2, [pc, #268]	; (80026f0 <__ieee754_rem_pio2f+0x254>)
 80025e4:	1e41      	subs	r1, r0, #1
 80025e6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80025ea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80025ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d016      	beq.n	8002624 <__ieee754_rem_pio2f+0x188>
 80025f6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80025fa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80025fe:	2e00      	cmp	r6, #0
 8002600:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002604:	ed85 7a00 	vstr	s14, [r5]
 8002608:	ed85 0a01 	vstr	s0, [r5, #4]
 800260c:	f6bf af77 	bge.w	80024fe <__ieee754_rem_pio2f+0x62>
 8002610:	eeb1 7a47 	vneg.f32	s14, s14
 8002614:	eeb1 0a40 	vneg.f32	s0, s0
 8002618:	ed85 7a00 	vstr	s14, [r5]
 800261c:	ed85 0a01 	vstr	s0, [r5, #4]
 8002620:	4240      	negs	r0, r0
 8002622:	e76c      	b.n	80024fe <__ieee754_rem_pio2f+0x62>
 8002624:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002628:	15e2      	asrs	r2, r4, #23
 800262a:	ee17 3a10 	vmov	r3, s14
 800262e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8002632:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 8002636:	2b08      	cmp	r3, #8
 8002638:	dddf      	ble.n	80025fa <__ieee754_rem_pio2f+0x15e>
 800263a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80026d4 <__ieee754_rem_pio2f+0x238>
 800263e:	ed9f 5a27 	vldr	s10, [pc, #156]	; 80026dc <__ieee754_rem_pio2f+0x240>
 8002642:	eef0 5a40 	vmov.f32	s11, s0
 8002646:	eee6 5a07 	vfma.f32	s11, s12, s14
 800264a:	ee70 7a65 	vsub.f32	s15, s0, s11
 800264e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002652:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8002656:	ee35 7ae7 	vsub.f32	s14, s11, s15
 800265a:	ee17 3a10 	vmov	r3, s14
 800265e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	2a19      	cmp	r2, #25
 8002666:	dd10      	ble.n	800268a <__ieee754_rem_pio2f+0x1ee>
 8002668:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80026f4 <__ieee754_rem_pio2f+0x258>
 800266c:	ed9f 5a22 	vldr	s10, [pc, #136]	; 80026f8 <__ieee754_rem_pio2f+0x25c>
 8002670:	eeb0 0a65 	vmov.f32	s0, s11
 8002674:	eea6 0a07 	vfma.f32	s0, s12, s14
 8002678:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800267c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002680:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8002684:	e7b7      	b.n	80025f6 <__ieee754_rem_pio2f+0x15a>
 8002686:	2303      	movs	r3, #3
 8002688:	e76c      	b.n	8002564 <__ieee754_rem_pio2f+0xc8>
 800268a:	eeb0 0a65 	vmov.f32	s0, s11
 800268e:	e7b4      	b.n	80025fa <__ieee754_rem_pio2f+0x15e>
 8002690:	4296      	cmp	r6, r2
 8002692:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002696:	bf09      	itett	eq
 8002698:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 80026d4 <__ieee754_rem_pio2f+0x238>
 800269c:	eddf 6a0e 	vldrne	s13, [pc, #56]	; 80026d8 <__ieee754_rem_pio2f+0x23c>
 80026a0:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 80026dc <__ieee754_rem_pio2f+0x240>
 80026a4:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80026a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80026ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026b0:	ed80 7a00 	vstr	s14, [r0]
 80026b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026b8:	edc0 7a01 	vstr	s15, [r0, #4]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	e71d      	b.n	80024fe <__ieee754_rem_pio2f+0x62>
 80026c2:	bf00      	nop
 80026c4:	3f490fd8 	.word	0x3f490fd8
 80026c8:	4016cbe3 	.word	0x4016cbe3
 80026cc:	3fc90f80 	.word	0x3fc90f80
 80026d0:	3fc90fd0 	.word	0x3fc90fd0
 80026d4:	37354400 	.word	0x37354400
 80026d8:	37354443 	.word	0x37354443
 80026dc:	2e85a308 	.word	0x2e85a308
 80026e0:	43490f80 	.word	0x43490f80
 80026e4:	43800000 	.word	0x43800000
 80026e8:	08003040 	.word	0x08003040
 80026ec:	3f22f984 	.word	0x3f22f984
 80026f0:	08002fc0 	.word	0x08002fc0
 80026f4:	2e85a300 	.word	0x2e85a300
 80026f8:	248d3132 	.word	0x248d3132

080026fc <fabsf>:
 80026fc:	ee10 3a10 	vmov	r3, s0
 8002700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002704:	ee00 3a10 	vmov	s0, r3
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop

0800270c <__kernel_rem_pio2f>:
 800270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002710:	ed2d 8b04 	vpush	{d8-d9}
 8002714:	b0db      	sub	sp, #364	; 0x16c
 8002716:	460c      	mov	r4, r1
 8002718:	4681      	mov	r9, r0
 800271a:	4611      	mov	r1, r2
 800271c:	9868      	ldr	r0, [sp, #416]	; 0x1a0
 800271e:	4a96      	ldr	r2, [pc, #600]	; (8002978 <__kernel_rem_pio2f+0x26c>)
 8002720:	9304      	str	r3, [sp, #16]
 8002722:	461e      	mov	r6, r3
 8002724:	4623      	mov	r3, r4
 8002726:	1d0c      	adds	r4, r1, #4
 8002728:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800272c:	f106 37ff 	add.w	r7, r6, #4294967295
 8002730:	f2c0 82b0 	blt.w	8002c94 <__kernel_rem_pio2f+0x588>
 8002734:	1eca      	subs	r2, r1, #3
 8002736:	bf48      	it	mi
 8002738:	1d0a      	addmi	r2, r1, #4
 800273a:	10d2      	asrs	r2, r2, #3
 800273c:	9203      	str	r2, [sp, #12]
 800273e:	3201      	adds	r2, #1
 8002740:	00d2      	lsls	r2, r2, #3
 8002742:	9206      	str	r2, [sp, #24]
 8002744:	9a06      	ldr	r2, [sp, #24]
 8002746:	9803      	ldr	r0, [sp, #12]
 8002748:	19ee      	adds	r6, r5, r7
 800274a:	eba1 0202 	sub.w	r2, r1, r2
 800274e:	eba0 0007 	sub.w	r0, r0, r7
 8002752:	d419      	bmi.n	8002788 <__kernel_rem_pio2f+0x7c>
 8002754:	3601      	adds	r6, #1
 8002756:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800297c <__kernel_rem_pio2f+0x270>
 800275a:	f8dd c1a4 	ldr.w	ip, [sp, #420]	; 0x1a4
 800275e:	4406      	add	r6, r0
 8002760:	ac1e      	add	r4, sp, #120	; 0x78
 8002762:	469e      	mov	lr, r3
 8002764:	2800      	cmp	r0, #0
 8002766:	bfa4      	itt	ge
 8002768:	f85c 3020 	ldrge.w	r3, [ip, r0, lsl #2]
 800276c:	ee07 3a90 	vmovge	s15, r3
 8002770:	f100 0001 	add.w	r0, r0, #1
 8002774:	bfac      	ite	ge
 8002776:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 800277a:	eef0 7a47 	vmovlt.f32	s15, s14
 800277e:	42b0      	cmp	r0, r6
 8002780:	ece4 7a01 	vstmia	r4!, {s15}
 8002784:	d1ee      	bne.n	8002764 <__kernel_rem_pio2f+0x58>
 8002786:	4673      	mov	r3, lr
 8002788:	2d00      	cmp	r5, #0
 800278a:	f2c0 82d9 	blt.w	8002d40 <__kernel_rem_pio2f+0x634>
 800278e:	9804      	ldr	r0, [sp, #16]
 8002790:	ac1e      	add	r4, sp, #120	; 0x78
 8002792:	eb04 0680 	add.w	r6, r4, r0, lsl #2
 8002796:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800279a:	eb05 0e00 	add.w	lr, r5, r0
 800279e:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
 80027a2:	463c      	mov	r4, r7
 80027a4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80027a8:	2f00      	cmp	r7, #0
 80027aa:	eddf 7a74 	vldr	s15, [pc, #464]	; 800297c <__kernel_rem_pio2f+0x270>
 80027ae:	db09      	blt.n	80027c4 <__kernel_rem_pio2f+0xb8>
 80027b0:	46b3      	mov	fp, r6
 80027b2:	46ca      	mov	sl, r9
 80027b4:	ecfa 6a01 	vldmia	sl!, {s13}
 80027b8:	ed3b 7a01 	vldmdb	fp!, {s14}
 80027bc:	4582      	cmp	sl, r0
 80027be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80027c2:	d1f7      	bne.n	80027b4 <__kernel_rem_pio2f+0xa8>
 80027c4:	3401      	adds	r4, #1
 80027c6:	4574      	cmp	r4, lr
 80027c8:	ecec 7a01 	vstmia	ip!, {s15}
 80027cc:	f106 0604 	add.w	r6, r6, #4
 80027d0:	d1ea      	bne.n	80027a8 <__kernel_rem_pio2f+0x9c>
 80027d2:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 80027d6:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 80027da:	e9cd 3107 	strd	r3, r1, [sp, #28]
 80027de:	3804      	subs	r0, #4
 80027e0:	ed9f 9a68 	vldr	s18, [pc, #416]	; 8002984 <__kernel_rem_pio2f+0x278>
 80027e4:	eddf 8a66 	vldr	s17, [pc, #408]	; 8002980 <__kernel_rem_pio2f+0x274>
 80027e8:	9005      	str	r0, [sp, #20]
 80027ea:	eb09 0408 	add.w	r4, r9, r8
 80027ee:	46ab      	mov	fp, r5
 80027f0:	eb0a 0885 	add.w	r8, sl, r5, lsl #2
 80027f4:	ae46      	add	r6, sp, #280	; 0x118
 80027f6:	9501      	str	r5, [sp, #4]
 80027f8:	4610      	mov	r0, r2
 80027fa:	ab5a      	add	r3, sp, #360	; 0x168
 80027fc:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8002800:	f1bb 0f00 	cmp.w	fp, #0
 8002804:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8002808:	dd16      	ble.n	8002838 <__kernel_rem_pio2f+0x12c>
 800280a:	eb06 038b 	add.w	r3, r6, fp, lsl #2
 800280e:	4652      	mov	r2, sl
 8002810:	ee60 7a09 	vmul.f32	s15, s0, s18
 8002814:	eeb0 7a40 	vmov.f32	s14, s0
 8002818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281c:	ed73 6a01 	vldmdb	r3!, {s13}
 8002820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002824:	42b3      	cmp	r3, r6
 8002826:	eea7 7ae8 	vfms.f32	s14, s15, s17
 800282a:	ee37 0aa6 	vadd.f32	s0, s15, s13
 800282e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002832:	eca2 7a01 	vstmia	r2!, {s14}
 8002836:	d1eb      	bne.n	8002810 <__kernel_rem_pio2f+0x104>
 8002838:	9002      	str	r0, [sp, #8]
 800283a:	f000 faa5 	bl	8002d88 <scalbnf>
 800283e:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 8002842:	eeb0 8a40 	vmov.f32	s16, s0
 8002846:	ee20 0a27 	vmul.f32	s0, s0, s15
 800284a:	f000 fb0f 	bl	8002e6c <floorf>
 800284e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8002852:	eea0 8a67 	vfms.f32	s16, s0, s15
 8002856:	9802      	ldr	r0, [sp, #8]
 8002858:	2800      	cmp	r0, #0
 800285a:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 800285e:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8002862:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002866:	dd6e      	ble.n	8002946 <__kernel_rem_pio2f+0x23a>
 8002868:	f10b 3cff 	add.w	ip, fp, #4294967295
 800286c:	f1c0 0308 	rsb	r3, r0, #8
 8002870:	f85a 202c 	ldr.w	r2, [sl, ip, lsl #2]
 8002874:	fa42 f503 	asr.w	r5, r2, r3
 8002878:	fa05 f303 	lsl.w	r3, r5, r3
 800287c:	1ad2      	subs	r2, r2, r3
 800287e:	f1c0 0107 	rsb	r1, r0, #7
 8002882:	ee19 3a90 	vmov	r3, s19
 8002886:	fa42 f101 	asr.w	r1, r2, r1
 800288a:	442b      	add	r3, r5
 800288c:	2900      	cmp	r1, #0
 800288e:	f84a 202c 	str.w	r2, [sl, ip, lsl #2]
 8002892:	ee09 3a90 	vmov	s19, r3
 8002896:	f300 814b 	bgt.w	8002b30 <__kernel_rem_pio2f+0x424>
 800289a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800289e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a2:	f040 80ba 	bne.w	8002a1a <__kernel_rem_pio2f+0x30e>
 80028a6:	9b01      	ldr	r3, [sp, #4]
 80028a8:	459b      	cmp	fp, r3
 80028aa:	dd0b      	ble.n	80028c4 <__kernel_rem_pio2f+0x1b8>
 80028ac:	eb0a 038b 	add.w	r3, sl, fp, lsl #2
 80028b0:	2200      	movs	r2, #0
 80028b2:	f853 5d04 	ldr.w	r5, [r3, #-4]!
 80028b6:	4543      	cmp	r3, r8
 80028b8:	ea42 0205 	orr.w	r2, r2, r5
 80028bc:	d1f9      	bne.n	80028b2 <__kernel_rem_pio2f+0x1a6>
 80028be:	2a00      	cmp	r2, #0
 80028c0:	f040 8154 	bne.w	8002b6c <__kernel_rem_pio2f+0x460>
 80028c4:	9b01      	ldr	r3, [sp, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 8144 	bne.w	8002b5a <__kernel_rem_pio2f+0x44e>
 80028d2:	9b05      	ldr	r3, [sp, #20]
 80028d4:	2101      	movs	r1, #1
 80028d6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80028da:	3101      	adds	r1, #1
 80028dc:	2a00      	cmp	r2, #0
 80028de:	d0fa      	beq.n	80028d6 <__kernel_rem_pio2f+0x1ca>
 80028e0:	f10b 0301 	add.w	r3, fp, #1
 80028e4:	4459      	add	r1, fp
 80028e6:	469c      	mov	ip, r3
 80028e8:	9d03      	ldr	r5, [sp, #12]
 80028ea:	9a04      	ldr	r2, [sp, #16]
 80028ec:	eb05 0e03 	add.w	lr, r5, r3
 80028f0:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80028f4:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
 80028f6:	445a      	add	r2, fp
 80028f8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80028fc:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 8002900:	ab1e      	add	r3, sp, #120	; 0x78
 8002902:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8002906:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800290a:	edde 7a01 	vldr	s15, [lr, #4]
 800290e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002912:	2f00      	cmp	r7, #0
 8002914:	f10e 0e04 	add.w	lr, lr, #4
 8002918:	ece5 7a01 	vstmia	r5!, {s15}
 800291c:	eddf 7a17 	vldr	s15, [pc, #92]	; 800297c <__kernel_rem_pio2f+0x270>
 8002920:	db09      	blt.n	8002936 <__kernel_rem_pio2f+0x22a>
 8002922:	462a      	mov	r2, r5
 8002924:	464b      	mov	r3, r9
 8002926:	ecf3 6a01 	vldmia	r3!, {s13}
 800292a:	ed32 7a01 	vldmdb	r2!, {s14}
 800292e:	42a3      	cmp	r3, r4
 8002930:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002934:	d1f7      	bne.n	8002926 <__kernel_rem_pio2f+0x21a>
 8002936:	f10c 0c01 	add.w	ip, ip, #1
 800293a:	4561      	cmp	r1, ip
 800293c:	eceb 7a01 	vstmia	fp!, {s15}
 8002940:	dae3      	bge.n	800290a <__kernel_rem_pio2f+0x1fe>
 8002942:	468b      	mov	fp, r1
 8002944:	e759      	b.n	80027fa <__kernel_rem_pio2f+0xee>
 8002946:	f040 80e9 	bne.w	8002b1c <__kernel_rem_pio2f+0x410>
 800294a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800294e:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8002952:	11c9      	asrs	r1, r1, #7
 8002954:	2900      	cmp	r1, #0
 8002956:	dda0      	ble.n	800289a <__kernel_rem_pio2f+0x18e>
 8002958:	ee19 3a90 	vmov	r3, s19
 800295c:	f1bb 0f00 	cmp.w	fp, #0
 8002960:	f103 0301 	add.w	r3, r3, #1
 8002964:	ee09 3a90 	vmov	s19, r3
 8002968:	f340 81ee 	ble.w	8002d48 <__kernel_rem_pio2f+0x63c>
 800296c:	2500      	movs	r5, #0
 800296e:	46d4      	mov	ip, sl
 8002970:	462a      	mov	r2, r5
 8002972:	9102      	str	r1, [sp, #8]
 8002974:	4686      	mov	lr, r0
 8002976:	e019      	b.n	80029ac <__kernel_rem_pio2f+0x2a0>
 8002978:	08003384 	.word	0x08003384
 800297c:	00000000 	.word	0x00000000
 8002980:	43800000 	.word	0x43800000
 8002984:	3b800000 	.word	0x3b800000
 8002988:	3501      	adds	r5, #1
 800298a:	45ab      	cmp	fp, r5
 800298c:	f841 0c04 	str.w	r0, [r1, #-4]
 8002990:	f340 80e8 	ble.w	8002b64 <__kernel_rem_pio2f+0x458>
 8002994:	680b      	ldr	r3, [r1, #0]
 8002996:	f10c 0c08 	add.w	ip, ip, #8
 800299a:	3501      	adds	r5, #1
 800299c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80029a0:	45ab      	cmp	fp, r5
 80029a2:	f04f 0201 	mov.w	r2, #1
 80029a6:	f84c 3c04 	str.w	r3, [ip, #-4]
 80029aa:	dd0d      	ble.n	80029c8 <__kernel_rem_pio2f+0x2bc>
 80029ac:	4661      	mov	r1, ip
 80029ae:	f851 3b04 	ldr.w	r3, [r1], #4
 80029b2:	2a00      	cmp	r2, #0
 80029b4:	f040 80b0 	bne.w	8002b18 <__kernel_rem_pio2f+0x40c>
 80029b8:	f5c3 7080 	rsb	r0, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e3      	bne.n	8002988 <__kernel_rem_pio2f+0x27c>
 80029c0:	3501      	adds	r5, #1
 80029c2:	45ab      	cmp	fp, r5
 80029c4:	468c      	mov	ip, r1
 80029c6:	dcf1      	bgt.n	80029ac <__kernel_rem_pio2f+0x2a0>
 80029c8:	9902      	ldr	r1, [sp, #8]
 80029ca:	4670      	mov	r0, lr
 80029cc:	2800      	cmp	r0, #0
 80029ce:	dd0c      	ble.n	80029ea <__kernel_rem_pio2f+0x2de>
 80029d0:	2801      	cmp	r0, #1
 80029d2:	f000 80b9 	beq.w	8002b48 <__kernel_rem_pio2f+0x43c>
 80029d6:	2802      	cmp	r0, #2
 80029d8:	d107      	bne.n	80029ea <__kernel_rem_pio2f+0x2de>
 80029da:	f10b 35ff 	add.w	r5, fp, #4294967295
 80029de:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80029e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e6:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 80029ea:	2902      	cmp	r1, #2
 80029ec:	f47f af55 	bne.w	800289a <__kernel_rem_pio2f+0x18e>
 80029f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80029f4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80029f8:	2a00      	cmp	r2, #0
 80029fa:	f43f af4e 	beq.w	800289a <__kernel_rem_pio2f+0x18e>
 80029fe:	9109      	str	r1, [sp, #36]	; 0x24
 8002a00:	9002      	str	r0, [sp, #8]
 8002a02:	f000 f9c1 	bl	8002d88 <scalbnf>
 8002a06:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002a0a:	9802      	ldr	r0, [sp, #8]
 8002a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a0e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a16:	f43f af46 	beq.w	80028a6 <__kernel_rem_pio2f+0x19a>
 8002a1a:	9b07      	ldr	r3, [sp, #28]
 8002a1c:	9d01      	ldr	r5, [sp, #4]
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	4688      	mov	r8, r1
 8002a22:	9b06      	ldr	r3, [sp, #24]
 8002a24:	9908      	ldr	r1, [sp, #32]
 8002a26:	9002      	str	r0, [sp, #8]
 8002a28:	eeb0 0a48 	vmov.f32	s0, s16
 8002a2c:	1a58      	subs	r0, r3, r1
 8002a2e:	f000 f9ab 	bl	8002d88 <scalbnf>
 8002a32:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 8002980 <__kernel_rem_pio2f+0x274>
 8002a36:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8002a42:	eef0 7a40 	vmov.f32	s15, s0
 8002a46:	f2c0 814d 	blt.w	8002ce4 <__kernel_rem_pio2f+0x5d8>
 8002a4a:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8002984 <__kernel_rem_pio2f+0x278>
 8002a4e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002a52:	f10b 0401 	add.w	r4, fp, #1
 8002a56:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002a5a:	3208      	adds	r2, #8
 8002a5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a60:	eee7 7a66 	vfms.f32	s15, s14, s13
 8002a64:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a6c:	ee17 1a90 	vmov	r1, s15
 8002a70:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 8002a74:	ee17 1a10 	vmov	r1, s14
 8002a78:	f84a 1024 	str.w	r1, [sl, r4, lsl #2]
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	f000 f980 	bl	8002d88 <scalbnf>
 8002a88:	2c00      	cmp	r4, #0
 8002a8a:	9b01      	ldr	r3, [sp, #4]
 8002a8c:	eeb0 7a40 	vmov.f32	s14, s0
 8002a90:	f2c0 814c 	blt.w	8002d2c <__kernel_rem_pio2f+0x620>
 8002a94:	1c60      	adds	r0, r4, #1
 8002a96:	ae46      	add	r6, sp, #280	; 0x118
 8002a98:	ed5f 6a46 	vldr	s13, [pc, #-280]	; 8002984 <__kernel_rem_pio2f+0x278>
 8002a9c:	0081      	lsls	r1, r0, #2
 8002a9e:	eb0a 0280 	add.w	r2, sl, r0, lsl #2
 8002aa2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8002aa6:	ed72 7a01 	vldmdb	r2!, {s15}
 8002aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aae:	4552      	cmp	r2, sl
 8002ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002ab8:	ed60 7a01 	vstmdb	r0!, {s15}
 8002abc:	d1f3      	bne.n	8002aa6 <__kernel_rem_pio2f+0x39a>
 8002abe:	1f0a      	subs	r2, r1, #4
 8002ac0:	a846      	add	r0, sp, #280	; 0x118
 8002ac2:	2d00      	cmp	r5, #0
 8002ac4:	eb00 0702 	add.w	r7, r0, r2
 8002ac8:	f04f 0600 	mov.w	r6, #0
 8002acc:	469c      	mov	ip, r3
 8002ace:	db20      	blt.n	8002b12 <__kernel_rem_pio2f+0x406>
 8002ad0:	4bab      	ldr	r3, [pc, #684]	; (8002d80 <__kernel_rem_pio2f+0x674>)
 8002ad2:	eddf 7aac 	vldr	s15, [pc, #688]	; 8002d84 <__kernel_rem_pio2f+0x678>
 8002ad6:	4638      	mov	r0, r7
 8002ad8:	2200      	movs	r2, #0
 8002ada:	e001      	b.n	8002ae0 <__kernel_rem_pio2f+0x3d4>
 8002adc:	42b2      	cmp	r2, r6
 8002ade:	dc08      	bgt.n	8002af2 <__kernel_rem_pio2f+0x3e6>
 8002ae0:	ecf3 6a01 	vldmia	r3!, {s13}
 8002ae4:	ecb0 7a01 	vldmia	r0!, {s14}
 8002ae8:	3201      	adds	r2, #1
 8002aea:	4295      	cmp	r5, r2
 8002aec:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002af0:	daf4      	bge.n	8002adc <__kernel_rem_pio2f+0x3d0>
 8002af2:	ab5a      	add	r3, sp, #360	; 0x168
 8002af4:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 8002af8:	42a6      	cmp	r6, r4
 8002afa:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8002afe:	ea4f 0086 	mov.w	r0, r6, lsl #2
 8002b02:	f106 0201 	add.w	r2, r6, #1
 8002b06:	f1a7 0704 	sub.w	r7, r7, #4
 8002b0a:	d047      	beq.n	8002b9c <__kernel_rem_pio2f+0x490>
 8002b0c:	2d00      	cmp	r5, #0
 8002b0e:	4616      	mov	r6, r2
 8002b10:	dade      	bge.n	8002ad0 <__kernel_rem_pio2f+0x3c4>
 8002b12:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8002d84 <__kernel_rem_pio2f+0x678>
 8002b16:	e7ec      	b.n	8002af2 <__kernel_rem_pio2f+0x3e6>
 8002b18:	468c      	mov	ip, r1
 8002b1a:	e73e      	b.n	800299a <__kernel_rem_pio2f+0x28e>
 8002b1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002b20:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b28:	f280 80a2 	bge.w	8002c70 <__kernel_rem_pio2f+0x564>
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	e6b4      	b.n	800289a <__kernel_rem_pio2f+0x18e>
 8002b30:	3301      	adds	r3, #1
 8002b32:	f1bb 0f00 	cmp.w	fp, #0
 8002b36:	ee09 3a90 	vmov	s19, r3
 8002b3a:	bfd8      	it	le
 8002b3c:	2200      	movle	r2, #0
 8002b3e:	f73f af15 	bgt.w	800296c <__kernel_rem_pio2f+0x260>
 8002b42:	2801      	cmp	r0, #1
 8002b44:	f47f af47 	bne.w	80029d6 <__kernel_rem_pio2f+0x2ca>
 8002b48:	f10b 35ff 	add.w	r5, fp, #4294967295
 8002b4c:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8002b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b54:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 8002b58:	e747      	b.n	80029ea <__kernel_rem_pio2f+0x2de>
 8002b5a:	f10b 0301 	add.w	r3, fp, #1
 8002b5e:	469c      	mov	ip, r3
 8002b60:	4619      	mov	r1, r3
 8002b62:	e6c1      	b.n	80028e8 <__kernel_rem_pio2f+0x1dc>
 8002b64:	9902      	ldr	r1, [sp, #8]
 8002b66:	4670      	mov	r0, lr
 8002b68:	2201      	movs	r2, #1
 8002b6a:	e72f      	b.n	80029cc <__kernel_rem_pio2f+0x2c0>
 8002b6c:	f10b 34ff 	add.w	r4, fp, #4294967295
 8002b70:	4688      	mov	r8, r1
 8002b72:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8002b76:	9d01      	ldr	r5, [sp, #4]
 8002b78:	9b07      	ldr	r3, [sp, #28]
 8002b7a:	f1a0 0208 	sub.w	r2, r0, #8
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	f47f af7c 	bne.w	8002a7c <__kernel_rem_pio2f+0x370>
 8002b84:	f10b 4180 	add.w	r1, fp, #1073741824	; 0x40000000
 8002b88:	3901      	subs	r1, #1
 8002b8a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8002b8e:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8002b92:	3c01      	subs	r4, #1
 8002b94:	3a08      	subs	r2, #8
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d0f9      	beq.n	8002b8e <__kernel_rem_pio2f+0x482>
 8002b9a:	e76f      	b.n	8002a7c <__kernel_rem_pio2f+0x370>
 8002b9c:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002b9e:	2a02      	cmp	r2, #2
 8002ba0:	4663      	mov	r3, ip
 8002ba2:	dc1b      	bgt.n	8002bdc <__kernel_rem_pio2f+0x4d0>
 8002ba4:	2a00      	cmp	r2, #0
 8002ba6:	dc7a      	bgt.n	8002c9e <__kernel_rem_pio2f+0x592>
 8002ba8:	d10f      	bne.n	8002bca <__kernel_rem_pio2f+0x4be>
 8002baa:	aa32      	add	r2, sp, #200	; 0xc8
 8002bac:	eddf 7a75 	vldr	s15, [pc, #468]	; 8002d84 <__kernel_rem_pio2f+0x678>
 8002bb0:	4411      	add	r1, r2
 8002bb2:	ed31 7a01 	vldmdb	r1!, {s14}
 8002bb6:	4291      	cmp	r1, r2
 8002bb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bbc:	d1f9      	bne.n	8002bb2 <__kernel_rem_pio2f+0x4a6>
 8002bbe:	4642      	mov	r2, r8
 8002bc0:	b10a      	cbz	r2, 8002bc6 <__kernel_rem_pio2f+0x4ba>
 8002bc2:	eef1 7a67 	vneg.f32	s15, s15
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
 8002bca:	ee19 3a90 	vmov	r3, s19
 8002bce:	f003 0007 	and.w	r0, r3, #7
 8002bd2:	b05b      	add	sp, #364	; 0x16c
 8002bd4:	ecbd 8b04 	vpop	{d8-d9}
 8002bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bdc:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002bde:	2a03      	cmp	r2, #3
 8002be0:	d1f3      	bne.n	8002bca <__kernel_rem_pio2f+0x4be>
 8002be2:	2c00      	cmp	r4, #0
 8002be4:	f000 80bc 	beq.w	8002d60 <__kernel_rem_pio2f+0x654>
 8002be8:	a932      	add	r1, sp, #200	; 0xc8
 8002bea:	180d      	adds	r5, r1, r0
 8002bec:	ed95 7a00 	vldr	s14, [r5]
 8002bf0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8002bf4:	00a7      	lsls	r7, r4, #2
 8002bf6:	4606      	mov	r6, r0
 8002bf8:	ed56 7a01 	vldr	s15, [r6, #-4]
 8002bfc:	eef0 6a47 	vmov.f32	s13, s14
 8002c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c04:	4632      	mov	r2, r6
 8002c06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c0a:	3e04      	subs	r6, #4
 8002c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c10:	42b1      	cmp	r1, r6
 8002c12:	edc2 7a00 	vstr	s15, [r2]
 8002c16:	ed02 7a01 	vstr	s14, [r2, #-4]
 8002c1a:	d1ed      	bne.n	8002bf8 <__kernel_rem_pio2f+0x4ec>
 8002c1c:	2c01      	cmp	r4, #1
 8002c1e:	f000 809f 	beq.w	8002d60 <__kernel_rem_pio2f+0x654>
 8002c22:	ed95 7a00 	vldr	s14, [r5]
 8002c26:	ed70 7a01 	vldmdb	r0!, {s15}
 8002c2a:	eef0 6a47 	vmov.f32	s13, s14
 8002c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c32:	4282      	cmp	r2, r0
 8002c34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c38:	ed80 7a00 	vstr	s14, [r0]
 8002c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c40:	edc0 7a01 	vstr	s15, [r0, #4]
 8002c44:	d1ef      	bne.n	8002c26 <__kernel_rem_pio2f+0x51a>
 8002c46:	1d38      	adds	r0, r7, #4
 8002c48:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8002d84 <__kernel_rem_pio2f+0x678>
 8002c4c:	4401      	add	r1, r0
 8002c4e:	3204      	adds	r2, #4
 8002c50:	ed31 7a01 	vldmdb	r1!, {s14}
 8002c54:	428a      	cmp	r2, r1
 8002c56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c5a:	d1f9      	bne.n	8002c50 <__kernel_rem_pio2f+0x544>
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	2a00      	cmp	r2, #0
 8002c60:	d148      	bne.n	8002cf4 <__kernel_rem_pio2f+0x5e8>
 8002c62:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8002c64:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8002c66:	6019      	str	r1, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	edc3 7a02 	vstr	s15, [r3, #8]
 8002c6e:	e7ac      	b.n	8002bca <__kernel_rem_pio2f+0x4be>
 8002c70:	ee19 3a90 	vmov	r3, s19
 8002c74:	f1bb 0f00 	cmp.w	fp, #0
 8002c78:	f103 0301 	add.w	r3, r3, #1
 8002c7c:	ee09 3a90 	vmov	s19, r3
 8002c80:	bfc8      	it	gt
 8002c82:	2102      	movgt	r1, #2
 8002c84:	f73f ae72 	bgt.w	800296c <__kernel_rem_pio2f+0x260>
 8002c88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002c8c:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8002c90:	2102      	movs	r1, #2
 8002c92:	e602      	b.n	800289a <__kernel_rem_pio2f+0x18e>
 8002c94:	2208      	movs	r2, #8
 8002c96:	9206      	str	r2, [sp, #24]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	9203      	str	r2, [sp, #12]
 8002c9c:	e552      	b.n	8002744 <__kernel_rem_pio2f+0x38>
 8002c9e:	aa32      	add	r2, sp, #200	; 0xc8
 8002ca0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8002d84 <__kernel_rem_pio2f+0x678>
 8002ca4:	4411      	add	r1, r2
 8002ca6:	ed31 7a01 	vldmdb	r1!, {s14}
 8002caa:	428a      	cmp	r2, r1
 8002cac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cb0:	d1f9      	bne.n	8002ca6 <__kernel_rem_pio2f+0x59a>
 8002cb2:	4642      	mov	r2, r8
 8002cb4:	bb7a      	cbnz	r2, 8002d16 <__kernel_rem_pio2f+0x60a>
 8002cb6:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8002cba:	edc3 7a00 	vstr	s15, [r3]
 8002cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc2:	b164      	cbz	r4, 8002cde <__kernel_rem_pio2f+0x5d2>
 8002cc4:	a933      	add	r1, sp, #204	; 0xcc
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	ecb1 7a01 	vldmia	r1!, {s14}
 8002ccc:	3201      	adds	r2, #1
 8002cce:	4294      	cmp	r4, r2
 8002cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cd4:	daf8      	bge.n	8002cc8 <__kernel_rem_pio2f+0x5bc>
 8002cd6:	4642      	mov	r2, r8
 8002cd8:	b10a      	cbz	r2, 8002cde <__kernel_rem_pio2f+0x5d2>
 8002cda:	eef1 7a67 	vneg.f32	s15, s15
 8002cde:	edc3 7a01 	vstr	s15, [r3, #4]
 8002ce2:	e772      	b.n	8002bca <__kernel_rem_pio2f+0x4be>
 8002ce4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002ce8:	465c      	mov	r4, fp
 8002cea:	ee17 1a90 	vmov	r1, s15
 8002cee:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 8002cf2:	e6c3      	b.n	8002a7c <__kernel_rem_pio2f+0x370>
 8002cf4:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8002cf8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8002cfc:	eef1 6a66 	vneg.f32	s13, s13
 8002d00:	eeb1 7a47 	vneg.f32	s14, s14
 8002d04:	eef1 7a67 	vneg.f32	s15, s15
 8002d08:	edc3 6a00 	vstr	s13, [r3]
 8002d0c:	ed83 7a01 	vstr	s14, [r3, #4]
 8002d10:	edc3 7a02 	vstr	s15, [r3, #8]
 8002d14:	e759      	b.n	8002bca <__kernel_rem_pio2f+0x4be>
 8002d16:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8002d1a:	eeb1 7a67 	vneg.f32	s14, s15
 8002d1e:	ed83 7a00 	vstr	s14, [r3]
 8002d22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d26:	2c00      	cmp	r4, #0
 8002d28:	d1cc      	bne.n	8002cc4 <__kernel_rem_pio2f+0x5b8>
 8002d2a:	e7d6      	b.n	8002cda <__kernel_rem_pio2f+0x5ce>
 8002d2c:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002d2e:	2a02      	cmp	r2, #2
 8002d30:	dc12      	bgt.n	8002d58 <__kernel_rem_pio2f+0x64c>
 8002d32:	2a00      	cmp	r2, #0
 8002d34:	dc17      	bgt.n	8002d66 <__kernel_rem_pio2f+0x65a>
 8002d36:	f47f af48 	bne.w	8002bca <__kernel_rem_pio2f+0x4be>
 8002d3a:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002d84 <__kernel_rem_pio2f+0x678>
 8002d3e:	e73e      	b.n	8002bbe <__kernel_rem_pio2f+0x4b2>
 8002d40:	9804      	ldr	r0, [sp, #16]
 8002d42:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8002d46:	e544      	b.n	80027d2 <__kernel_rem_pio2f+0xc6>
 8002d48:	2902      	cmp	r1, #2
 8002d4a:	f47f ada6 	bne.w	800289a <__kernel_rem_pio2f+0x18e>
 8002d4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002d52:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8002d56:	e5a0      	b.n	800289a <__kernel_rem_pio2f+0x18e>
 8002d58:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002d5a:	2a03      	cmp	r2, #3
 8002d5c:	f47f af35 	bne.w	8002bca <__kernel_rem_pio2f+0x4be>
 8002d60:	eddf 7a08 	vldr	s15, [pc, #32]	; 8002d84 <__kernel_rem_pio2f+0x678>
 8002d64:	e77a      	b.n	8002c5c <__kernel_rem_pio2f+0x550>
 8002d66:	4642      	mov	r2, r8
 8002d68:	b922      	cbnz	r2, 8002d74 <__kernel_rem_pio2f+0x668>
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e7b4      	b.n	8002cde <__kernel_rem_pio2f+0x5d2>
 8002d74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d78:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e7ac      	b.n	8002cda <__kernel_rem_pio2f+0x5ce>
 8002d80:	08003358 	.word	0x08003358
 8002d84:	00000000 	.word	0x00000000

08002d88 <scalbnf>:
 8002d88:	ee10 3a10 	vmov	r3, s0
 8002d8c:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8002d90:	461a      	mov	r2, r3
 8002d92:	d027      	beq.n	8002de4 <scalbnf+0x5c>
 8002d94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002d98:	d221      	bcs.n	8002dde <scalbnf+0x56>
 8002d9a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8002d9e:	d122      	bne.n	8002de6 <scalbnf+0x5e>
 8002da0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8002e50 <scalbnf+0xc8>
 8002da4:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <scalbnf+0xcc>)
 8002da6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002daa:	4290      	cmp	r0, r2
 8002dac:	ee17 3a90 	vmov	r3, s15
 8002db0:	db33      	blt.n	8002e1a <scalbnf+0x92>
 8002db2:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8002db6:	f3c3 51c7 	ubfx	r1, r3, #23, #8
 8002dba:	4560      	cmp	r0, ip
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f1a1 0119 	sub.w	r1, r1, #25
 8002dc2:	dd16      	ble.n	8002df2 <scalbnf+0x6a>
 8002dc4:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002e58 <scalbnf+0xd0>
 8002dc8:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002e5c <scalbnf+0xd4>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	eeb0 7a67 	vmov.f32	s14, s15
 8002dd2:	bfb8      	it	lt
 8002dd4:	eef0 7a66 	vmovlt.f32	s15, s13
 8002dd8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002ddc:	4770      	bx	lr
 8002dde:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002de2:	4770      	bx	lr
 8002de4:	4770      	bx	lr
 8002de6:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8002dea:	4560      	cmp	r0, ip
 8002dec:	ea4f 51d1 	mov.w	r1, r1, lsr #23
 8002df0:	dce8      	bgt.n	8002dc4 <scalbnf+0x3c>
 8002df2:	4401      	add	r1, r0
 8002df4:	29fe      	cmp	r1, #254	; 0xfe
 8002df6:	dce5      	bgt.n	8002dc4 <scalbnf+0x3c>
 8002df8:	2900      	cmp	r1, #0
 8002dfa:	dc15      	bgt.n	8002e28 <scalbnf+0xa0>
 8002dfc:	f111 0f16 	cmn.w	r1, #22
 8002e00:	db19      	blt.n	8002e36 <scalbnf+0xae>
 8002e02:	3119      	adds	r1, #25
 8002e04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002e08:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8002e0c:	ee07 2a90 	vmov	s15, r2
 8002e10:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002e60 <scalbnf+0xd8>
 8002e14:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002e18:	4770      	bx	lr
 8002e1a:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002e64 <scalbnf+0xdc>
 8002e1e:	ee07 3a10 	vmov	s14, r3
 8002e22:	ee27 0a27 	vmul.f32	s0, s14, s15
 8002e26:	4770      	bx	lr
 8002e28:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002e2c:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8002e30:	ee00 3a10 	vmov	s0, r3
 8002e34:	4770      	bx	lr
 8002e36:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002e64 <scalbnf+0xdc>
 8002e3a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002e68 <scalbnf+0xe0>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	eeb0 7a67 	vmov.f32	s14, s15
 8002e44:	bfb8      	it	lt
 8002e46:	eef0 7a66 	vmovlt.f32	s15, s13
 8002e4a:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002e4e:	4770      	bx	lr
 8002e50:	4c000000 	.word	0x4c000000
 8002e54:	ffff3cb0 	.word	0xffff3cb0
 8002e58:	7149f2ca 	.word	0x7149f2ca
 8002e5c:	f149f2ca 	.word	0xf149f2ca
 8002e60:	33000000 	.word	0x33000000
 8002e64:	0da24260 	.word	0x0da24260
 8002e68:	8da24260 	.word	0x8da24260

08002e6c <floorf>:
 8002e6c:	ee10 2a10 	vmov	r2, s0
 8002e70:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8002e74:	3b7f      	subs	r3, #127	; 0x7f
 8002e76:	2b16      	cmp	r3, #22
 8002e78:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8002e7c:	dc29      	bgt.n	8002ed2 <floorf+0x66>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	4610      	mov	r0, r2
 8002e82:	db18      	blt.n	8002eb6 <floorf+0x4a>
 8002e84:	491a      	ldr	r1, [pc, #104]	; (8002ef0 <floorf+0x84>)
 8002e86:	4119      	asrs	r1, r3
 8002e88:	420a      	tst	r2, r1
 8002e8a:	d021      	beq.n	8002ed0 <floorf+0x64>
 8002e8c:	eddf 7a19 	vldr	s15, [pc, #100]	; 8002ef4 <floorf+0x88>
 8002e90:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002e94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9c:	dd18      	ble.n	8002ed0 <floorf+0x64>
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	da04      	bge.n	8002eac <floorf+0x40>
 8002ea2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ea6:	fa42 f303 	asr.w	r3, r2, r3
 8002eaa:	4418      	add	r0, r3
 8002eac:	ea20 0301 	bic.w	r3, r0, r1
 8002eb0:	ee00 3a10 	vmov	s0, r3
 8002eb4:	4770      	bx	lr
 8002eb6:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002ef4 <floorf+0x88>
 8002eba:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	dd03      	ble.n	8002ed0 <floorf+0x64>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	db08      	blt.n	8002ede <floorf+0x72>
 8002ecc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002ef8 <floorf+0x8c>
 8002ed0:	4770      	bx	lr
 8002ed2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002ed6:	d3fb      	bcc.n	8002ed0 <floorf+0x64>
 8002ed8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002edc:	4770      	bx	lr
 8002ede:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002efc <floorf+0x90>
 8002ee2:	2900      	cmp	r1, #0
 8002ee4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002ee8:	bf08      	it	eq
 8002eea:	eeb0 0a67 	vmoveq.f32	s0, s15
 8002eee:	4770      	bx	lr
 8002ef0:	007fffff 	.word	0x007fffff
 8002ef4:	7149f2ca 	.word	0x7149f2ca
 8002ef8:	00000000 	.word	0x00000000
 8002efc:	80000000 	.word	0x80000000

08002f00 <__aeabi_f2lz>:
 8002f00:	ee07 0a90 	vmov	s15, r0
 8002f04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	d401      	bmi.n	8002f12 <__aeabi_f2lz+0x12>
 8002f0e:	f000 b80b 	b.w	8002f28 <__aeabi_f2ulz>
 8002f12:	eef1 7a67 	vneg.f32	s15, s15
 8002f16:	b508      	push	{r3, lr}
 8002f18:	ee17 0a90 	vmov	r0, s15
 8002f1c:	f000 f804 	bl	8002f28 <__aeabi_f2ulz>
 8002f20:	4240      	negs	r0, r0
 8002f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002f26:	bd08      	pop	{r3, pc}

08002f28 <__aeabi_f2ulz>:
 8002f28:	b5d0      	push	{r4, r6, r7, lr}
 8002f2a:	f7fd fab9 	bl	80004a0 <__aeabi_f2d>
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <__aeabi_f2ulz+0x38>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	4606      	mov	r6, r0
 8002f34:	460f      	mov	r7, r1
 8002f36:	f7fd fc69 	bl	800080c <__aeabi_dmul>
 8002f3a:	f7fd fd91 	bl	8000a60 <__aeabi_d2uiz>
 8002f3e:	4604      	mov	r4, r0
 8002f40:	f7fd fa8c 	bl	800045c <__aeabi_ui2d>
 8002f44:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <__aeabi_f2ulz+0x3c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	f7fd fc60 	bl	800080c <__aeabi_dmul>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4630      	mov	r0, r6
 8002f52:	4639      	mov	r1, r7
 8002f54:	f7fd f944 	bl	80001e0 <__aeabi_dsub>
 8002f58:	f7fd fd82 	bl	8000a60 <__aeabi_d2uiz>
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	bdd0      	pop	{r4, r6, r7, pc}
 8002f60:	3df00000 	.word	0x3df00000
 8002f64:	41f00000 	.word	0x41f00000
