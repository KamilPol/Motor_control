
build/BINARY.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_dmul>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80003fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000402:	bf1d      	ittte	ne
 8000404:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000408:	ea94 0f0c 	teqne	r4, ip
 800040c:	ea95 0f0c 	teqne	r5, ip
 8000410:	f000 f8de 	bleq	80005d0 <__aeabi_dmul+0x1dc>
 8000414:	442c      	add	r4, r5
 8000416:	ea81 0603 	eor.w	r6, r1, r3
 800041a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800041e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000422:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000426:	bf18      	it	ne
 8000428:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800042c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000434:	d038      	beq.n	80004a8 <__aeabi_dmul+0xb4>
 8000436:	fba0 ce02 	umull	ip, lr, r0, r2
 800043a:	f04f 0500 	mov.w	r5, #0
 800043e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000442:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000446:	fbe0 e503 	umlal	lr, r5, r0, r3
 800044a:	f04f 0600 	mov.w	r6, #0
 800044e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000452:	f09c 0f00 	teq	ip, #0
 8000456:	bf18      	it	ne
 8000458:	f04e 0e01 	orrne.w	lr, lr, #1
 800045c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000460:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000464:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000468:	d204      	bcs.n	8000474 <__aeabi_dmul+0x80>
 800046a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800046e:	416d      	adcs	r5, r5
 8000470:	eb46 0606 	adc.w	r6, r6, r6
 8000474:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000478:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800047c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000480:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000484:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000488:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800048c:	bf88      	it	hi
 800048e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000492:	d81e      	bhi.n	80004d2 <__aeabi_dmul+0xde>
 8000494:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000498:	bf08      	it	eq
 800049a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800049e:	f150 0000 	adcs.w	r0, r0, #0
 80004a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80004ac:	ea46 0101 	orr.w	r1, r6, r1
 80004b0:	ea40 0002 	orr.w	r0, r0, r2
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80004bc:	bfc2      	ittt	gt
 80004be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80004c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80004c6:	bd70      	popgt	{r4, r5, r6, pc}
 80004c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004cc:	f04f 0e00 	mov.w	lr, #0
 80004d0:	3c01      	subs	r4, #1
 80004d2:	f300 80ab 	bgt.w	800062c <__aeabi_dmul+0x238>
 80004d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80004da:	bfde      	ittt	le
 80004dc:	2000      	movle	r0, #0
 80004de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80004e2:	bd70      	pople	{r4, r5, r6, pc}
 80004e4:	f1c4 0400 	rsb	r4, r4, #0
 80004e8:	3c20      	subs	r4, #32
 80004ea:	da35      	bge.n	8000558 <__aeabi_dmul+0x164>
 80004ec:	340c      	adds	r4, #12
 80004ee:	dc1b      	bgt.n	8000528 <__aeabi_dmul+0x134>
 80004f0:	f104 0414 	add.w	r4, r4, #20
 80004f4:	f1c4 0520 	rsb	r5, r4, #32
 80004f8:	fa00 f305 	lsl.w	r3, r0, r5
 80004fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000500:	fa01 f205 	lsl.w	r2, r1, r5
 8000504:	ea40 0002 	orr.w	r0, r0, r2
 8000508:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000514:	fa21 f604 	lsr.w	r6, r1, r4
 8000518:	eb42 0106 	adc.w	r1, r2, r6
 800051c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000520:	bf08      	it	eq
 8000522:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	f1c4 040c 	rsb	r4, r4, #12
 800052c:	f1c4 0520 	rsb	r5, r4, #32
 8000530:	fa00 f304 	lsl.w	r3, r0, r4
 8000534:	fa20 f005 	lsr.w	r0, r0, r5
 8000538:	fa01 f204 	lsl.w	r2, r1, r4
 800053c:	ea40 0002 	orr.w	r0, r0, r2
 8000540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000544:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000548:	f141 0100 	adc.w	r1, r1, #0
 800054c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000550:	bf08      	it	eq
 8000552:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	f1c4 0520 	rsb	r5, r4, #32
 800055c:	fa00 f205 	lsl.w	r2, r0, r5
 8000560:	ea4e 0e02 	orr.w	lr, lr, r2
 8000564:	fa20 f304 	lsr.w	r3, r0, r4
 8000568:	fa01 f205 	lsl.w	r2, r1, r5
 800056c:	ea43 0302 	orr.w	r3, r3, r2
 8000570:	fa21 f004 	lsr.w	r0, r1, r4
 8000574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000578:	fa21 f204 	lsr.w	r2, r1, r4
 800057c:	ea20 0002 	bic.w	r0, r0, r2
 8000580:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000584:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000588:	bf08      	it	eq
 800058a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f094 0f00 	teq	r4, #0
 8000594:	d10f      	bne.n	80005b6 <__aeabi_dmul+0x1c2>
 8000596:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800059a:	0040      	lsls	r0, r0, #1
 800059c:	eb41 0101 	adc.w	r1, r1, r1
 80005a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80005a4:	bf08      	it	eq
 80005a6:	3c01      	subeq	r4, #1
 80005a8:	d0f7      	beq.n	800059a <__aeabi_dmul+0x1a6>
 80005aa:	ea41 0106 	orr.w	r1, r1, r6
 80005ae:	f095 0f00 	teq	r5, #0
 80005b2:	bf18      	it	ne
 80005b4:	4770      	bxne	lr
 80005b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80005ba:	0052      	lsls	r2, r2, #1
 80005bc:	eb43 0303 	adc.w	r3, r3, r3
 80005c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80005c4:	bf08      	it	eq
 80005c6:	3d01      	subeq	r5, #1
 80005c8:	d0f7      	beq.n	80005ba <__aeabi_dmul+0x1c6>
 80005ca:	ea43 0306 	orr.w	r3, r3, r6
 80005ce:	4770      	bx	lr
 80005d0:	ea94 0f0c 	teq	r4, ip
 80005d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80005d8:	bf18      	it	ne
 80005da:	ea95 0f0c 	teqne	r5, ip
 80005de:	d00c      	beq.n	80005fa <__aeabi_dmul+0x206>
 80005e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005e4:	bf18      	it	ne
 80005e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80005ea:	d1d1      	bne.n	8000590 <__aeabi_dmul+0x19c>
 80005ec:	ea81 0103 	eor.w	r1, r1, r3
 80005f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd70      	pop	{r4, r5, r6, pc}
 80005fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005fe:	bf06      	itte	eq
 8000600:	4610      	moveq	r0, r2
 8000602:	4619      	moveq	r1, r3
 8000604:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000608:	d019      	beq.n	800063e <__aeabi_dmul+0x24a>
 800060a:	ea94 0f0c 	teq	r4, ip
 800060e:	d102      	bne.n	8000616 <__aeabi_dmul+0x222>
 8000610:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000614:	d113      	bne.n	800063e <__aeabi_dmul+0x24a>
 8000616:	ea95 0f0c 	teq	r5, ip
 800061a:	d105      	bne.n	8000628 <__aeabi_dmul+0x234>
 800061c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000620:	bf1c      	itt	ne
 8000622:	4610      	movne	r0, r2
 8000624:	4619      	movne	r1, r3
 8000626:	d10a      	bne.n	800063e <__aeabi_dmul+0x24a>
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000630:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000634:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	bd70      	pop	{r4, r5, r6, pc}
 800063e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000642:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000646:	bd70      	pop	{r4, r5, r6, pc}

08000648 <__aeabi_drsub>:
 8000648:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800064c:	e002      	b.n	8000654 <__adddf3>
 800064e:	bf00      	nop

08000650 <__aeabi_dsub>:
 8000650:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000654 <__adddf3>:
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800065a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	bf1f      	itttt	ne
 800066a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800066e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000672:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000676:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800067a:	f000 80e2 	beq.w	8000842 <__adddf3+0x1ee>
 800067e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000682:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000686:	bfb8      	it	lt
 8000688:	426d      	neglt	r5, r5
 800068a:	dd0c      	ble.n	80006a6 <__adddf3+0x52>
 800068c:	442c      	add	r4, r5
 800068e:	ea80 0202 	eor.w	r2, r0, r2
 8000692:	ea81 0303 	eor.w	r3, r1, r3
 8000696:	ea82 0000 	eor.w	r0, r2, r0
 800069a:	ea83 0101 	eor.w	r1, r3, r1
 800069e:	ea80 0202 	eor.w	r2, r0, r2
 80006a2:	ea81 0303 	eor.w	r3, r1, r3
 80006a6:	2d36      	cmp	r5, #54	; 0x36
 80006a8:	bf88      	it	hi
 80006aa:	bd30      	pophi	{r4, r5, pc}
 80006ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80006b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80006b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80006bc:	d002      	beq.n	80006c4 <__adddf3+0x70>
 80006be:	4240      	negs	r0, r0
 80006c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80006c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80006cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80006d0:	d002      	beq.n	80006d8 <__adddf3+0x84>
 80006d2:	4252      	negs	r2, r2
 80006d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d8:	ea94 0f05 	teq	r4, r5
 80006dc:	f000 80a7 	beq.w	800082e <__adddf3+0x1da>
 80006e0:	f1a4 0401 	sub.w	r4, r4, #1
 80006e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80006e8:	db0d      	blt.n	8000706 <__adddf3+0xb2>
 80006ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80006ee:	fa22 f205 	lsr.w	r2, r2, r5
 80006f2:	1880      	adds	r0, r0, r2
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80006fc:	1880      	adds	r0, r0, r2
 80006fe:	fa43 f305 	asr.w	r3, r3, r5
 8000702:	4159      	adcs	r1, r3
 8000704:	e00e      	b.n	8000724 <__adddf3+0xd0>
 8000706:	f1a5 0520 	sub.w	r5, r5, #32
 800070a:	f10e 0e20 	add.w	lr, lr, #32
 800070e:	2a01      	cmp	r2, #1
 8000710:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000714:	bf28      	it	cs
 8000716:	f04c 0c02 	orrcs.w	ip, ip, #2
 800071a:	fa43 f305 	asr.w	r3, r3, r5
 800071e:	18c0      	adds	r0, r0, r3
 8000720:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	d507      	bpl.n	800073a <__adddf3+0xe6>
 800072a:	f04f 0e00 	mov.w	lr, #0
 800072e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000732:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000736:	eb6e 0101 	sbc.w	r1, lr, r1
 800073a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800073e:	d31b      	bcc.n	8000778 <__adddf3+0x124>
 8000740:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000744:	d30c      	bcc.n	8000760 <__adddf3+0x10c>
 8000746:	0849      	lsrs	r1, r1, #1
 8000748:	ea5f 0030 	movs.w	r0, r0, rrx
 800074c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000750:	f104 0401 	add.w	r4, r4, #1
 8000754:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000758:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800075c:	f080 809a 	bcs.w	8000894 <__adddf3+0x240>
 8000760:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000764:	bf08      	it	eq
 8000766:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800076a:	f150 0000 	adcs.w	r0, r0, #0
 800076e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000772:	ea41 0105 	orr.w	r1, r1, r5
 8000776:	bd30      	pop	{r4, r5, pc}
 8000778:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800077c:	4140      	adcs	r0, r0
 800077e:	eb41 0101 	adc.w	r1, r1, r1
 8000782:	3c01      	subs	r4, #1
 8000784:	bf28      	it	cs
 8000786:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800078a:	d2e9      	bcs.n	8000760 <__adddf3+0x10c>
 800078c:	f091 0f00 	teq	r1, #0
 8000790:	bf04      	itt	eq
 8000792:	4601      	moveq	r1, r0
 8000794:	2000      	moveq	r0, #0
 8000796:	fab1 f381 	clz	r3, r1
 800079a:	bf08      	it	eq
 800079c:	3320      	addeq	r3, #32
 800079e:	f1a3 030b 	sub.w	r3, r3, #11
 80007a2:	f1b3 0220 	subs.w	r2, r3, #32
 80007a6:	da0c      	bge.n	80007c2 <__adddf3+0x16e>
 80007a8:	320c      	adds	r2, #12
 80007aa:	dd08      	ble.n	80007be <__adddf3+0x16a>
 80007ac:	f102 0c14 	add.w	ip, r2, #20
 80007b0:	f1c2 020c 	rsb	r2, r2, #12
 80007b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80007b8:	fa21 f102 	lsr.w	r1, r1, r2
 80007bc:	e00c      	b.n	80007d8 <__adddf3+0x184>
 80007be:	f102 0214 	add.w	r2, r2, #20
 80007c2:	bfd8      	it	le
 80007c4:	f1c2 0c20 	rsble	ip, r2, #32
 80007c8:	fa01 f102 	lsl.w	r1, r1, r2
 80007cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007d0:	bfdc      	itt	le
 80007d2:	ea41 010c 	orrle.w	r1, r1, ip
 80007d6:	4090      	lslle	r0, r2
 80007d8:	1ae4      	subs	r4, r4, r3
 80007da:	bfa2      	ittt	ge
 80007dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80007e0:	4329      	orrge	r1, r5
 80007e2:	bd30      	popge	{r4, r5, pc}
 80007e4:	ea6f 0404 	mvn.w	r4, r4
 80007e8:	3c1f      	subs	r4, #31
 80007ea:	da1c      	bge.n	8000826 <__adddf3+0x1d2>
 80007ec:	340c      	adds	r4, #12
 80007ee:	dc0e      	bgt.n	800080e <__adddf3+0x1ba>
 80007f0:	f104 0414 	add.w	r4, r4, #20
 80007f4:	f1c4 0220 	rsb	r2, r4, #32
 80007f8:	fa20 f004 	lsr.w	r0, r0, r4
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	ea40 0003 	orr.w	r0, r0, r3
 8000804:	fa21 f304 	lsr.w	r3, r1, r4
 8000808:	ea45 0103 	orr.w	r1, r5, r3
 800080c:	bd30      	pop	{r4, r5, pc}
 800080e:	f1c4 040c 	rsb	r4, r4, #12
 8000812:	f1c4 0220 	rsb	r2, r4, #32
 8000816:	fa20 f002 	lsr.w	r0, r0, r2
 800081a:	fa01 f304 	lsl.w	r3, r1, r4
 800081e:	ea40 0003 	orr.w	r0, r0, r3
 8000822:	4629      	mov	r1, r5
 8000824:	bd30      	pop	{r4, r5, pc}
 8000826:	fa21 f004 	lsr.w	r0, r1, r4
 800082a:	4629      	mov	r1, r5
 800082c:	bd30      	pop	{r4, r5, pc}
 800082e:	f094 0f00 	teq	r4, #0
 8000832:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000836:	bf06      	itte	eq
 8000838:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800083c:	3401      	addeq	r4, #1
 800083e:	3d01      	subne	r5, #1
 8000840:	e74e      	b.n	80006e0 <__adddf3+0x8c>
 8000842:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000846:	bf18      	it	ne
 8000848:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800084c:	d029      	beq.n	80008a2 <__adddf3+0x24e>
 800084e:	ea94 0f05 	teq	r4, r5
 8000852:	bf08      	it	eq
 8000854:	ea90 0f02 	teqeq	r0, r2
 8000858:	d005      	beq.n	8000866 <__adddf3+0x212>
 800085a:	ea54 0c00 	orrs.w	ip, r4, r0
 800085e:	bf04      	itt	eq
 8000860:	4619      	moveq	r1, r3
 8000862:	4610      	moveq	r0, r2
 8000864:	bd30      	pop	{r4, r5, pc}
 8000866:	ea91 0f03 	teq	r1, r3
 800086a:	bf1e      	ittt	ne
 800086c:	2100      	movne	r1, #0
 800086e:	2000      	movne	r0, #0
 8000870:	bd30      	popne	{r4, r5, pc}
 8000872:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000876:	d105      	bne.n	8000884 <__adddf3+0x230>
 8000878:	0040      	lsls	r0, r0, #1
 800087a:	4149      	adcs	r1, r1
 800087c:	bf28      	it	cs
 800087e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000882:	bd30      	pop	{r4, r5, pc}
 8000884:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000888:	bf3c      	itt	cc
 800088a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800088e:	bd30      	popcc	{r4, r5, pc}
 8000890:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000894:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd30      	pop	{r4, r5, pc}
 80008a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008a6:	bf1a      	itte	ne
 80008a8:	4619      	movne	r1, r3
 80008aa:	4610      	movne	r0, r2
 80008ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80008b0:	bf1c      	itt	ne
 80008b2:	460b      	movne	r3, r1
 80008b4:	4602      	movne	r2, r0
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	bf06      	itte	eq
 80008bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80008c0:	ea91 0f03 	teqeq	r1, r3
 80008c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80008c8:	bd30      	pop	{r4, r5, pc}
 80008ca:	bf00      	nop

080008cc <__aeabi_ui2d>:
 80008cc:	f090 0f00 	teq	r0, #0
 80008d0:	bf04      	itt	eq
 80008d2:	2100      	moveq	r1, #0
 80008d4:	4770      	bxeq	lr
 80008d6:	b530      	push	{r4, r5, lr}
 80008d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008e0:	f04f 0500 	mov.w	r5, #0
 80008e4:	f04f 0100 	mov.w	r1, #0
 80008e8:	e750      	b.n	800078c <__adddf3+0x138>
 80008ea:	bf00      	nop

080008ec <__aeabi_i2d>:
 80008ec:	f090 0f00 	teq	r0, #0
 80008f0:	bf04      	itt	eq
 80008f2:	2100      	moveq	r1, #0
 80008f4:	4770      	bxeq	lr
 80008f6:	b530      	push	{r4, r5, lr}
 80008f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000900:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000904:	bf48      	it	mi
 8000906:	4240      	negmi	r0, r0
 8000908:	f04f 0100 	mov.w	r1, #0
 800090c:	e73e      	b.n	800078c <__adddf3+0x138>
 800090e:	bf00      	nop

08000910 <__aeabi_f2d>:
 8000910:	0042      	lsls	r2, r0, #1
 8000912:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000916:	ea4f 0131 	mov.w	r1, r1, rrx
 800091a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800091e:	bf1f      	itttt	ne
 8000920:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000924:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000928:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800092c:	4770      	bxne	lr
 800092e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000932:	bf08      	it	eq
 8000934:	4770      	bxeq	lr
 8000936:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800093a:	bf04      	itt	eq
 800093c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000940:	4770      	bxeq	lr
 8000942:	b530      	push	{r4, r5, lr}
 8000944:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000948:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800094c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000950:	e71c      	b.n	800078c <__adddf3+0x138>
 8000952:	bf00      	nop

08000954 <__aeabi_ul2d>:
 8000954:	ea50 0201 	orrs.w	r2, r0, r1
 8000958:	bf08      	it	eq
 800095a:	4770      	bxeq	lr
 800095c:	b530      	push	{r4, r5, lr}
 800095e:	f04f 0500 	mov.w	r5, #0
 8000962:	e00a      	b.n	800097a <__aeabi_l2d+0x16>

08000964 <__aeabi_l2d>:
 8000964:	ea50 0201 	orrs.w	r2, r0, r1
 8000968:	bf08      	it	eq
 800096a:	4770      	bxeq	lr
 800096c:	b530      	push	{r4, r5, lr}
 800096e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000972:	d502      	bpl.n	800097a <__aeabi_l2d+0x16>
 8000974:	4240      	negs	r0, r0
 8000976:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800097e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000982:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000986:	f43f aed8 	beq.w	800073a <__adddf3+0xe6>
 800098a:	f04f 0203 	mov.w	r2, #3
 800098e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000992:	bf18      	it	ne
 8000994:	3203      	addne	r2, #3
 8000996:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800099a:	bf18      	it	ne
 800099c:	3203      	addne	r2, #3
 800099e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80009a2:	f1c2 0320 	rsb	r3, r2, #32
 80009a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80009aa:	fa20 f002 	lsr.w	r0, r0, r2
 80009ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80009b2:	ea40 000e 	orr.w	r0, r0, lr
 80009b6:	fa21 f102 	lsr.w	r1, r1, r2
 80009ba:	4414      	add	r4, r2
 80009bc:	e6bd      	b.n	800073a <__adddf3+0xe6>
 80009be:	bf00      	nop

080009c0 <__aeabi_d2uiz>:
 80009c0:	004a      	lsls	r2, r1, #1
 80009c2:	d211      	bcs.n	80009e8 <__aeabi_d2uiz+0x28>
 80009c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c8:	d211      	bcs.n	80009ee <__aeabi_d2uiz+0x2e>
 80009ca:	d50d      	bpl.n	80009e8 <__aeabi_d2uiz+0x28>
 80009cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d4:	d40e      	bmi.n	80009f4 <__aeabi_d2uiz+0x34>
 80009d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f2:	d102      	bne.n	80009fa <__aeabi_d2uiz+0x3a>
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	4770      	bx	lr
 80009fa:	f04f 0000 	mov.w	r0, #0
 80009fe:	4770      	bx	lr

08000a00 <_ZN12ClockManager18internalFreqUpdateEm>:

void ClockManager::internalFreqUpdate(uint32_t _targetFreq)
{
	uint32_t flashDiv = 35000000;

	if (_targetFreq < 26000000)
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <_ZN12ClockManager18internalFreqUpdateEm+0x74>)
 8000a02:	4298      	cmp	r0, r3
{
 8000a04:	b430      	push	{r4, r5}
	if (_targetFreq < 26000000)
 8000a06:	d81d      	bhi.n	8000a44 <_ZN12ClockManager18internalFreqUpdateEm+0x44>
	{
		
		PWR->CR1 = 0x2 << PWR_CR1_VOS_Pos;
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <_ZN12ClockManager18internalFreqUpdateEm+0x78>)
 8000a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0e:	6013      	str	r3, [r2, #0]
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000a10:	6953      	ldr	r3, [r2, #20]
 8000a12:	0559      	lsls	r1, r3, #21
 8000a14:	d4fc      	bmi.n	8000a10 <_ZN12ClockManager18internalFreqUpdateEm+0x10>
		flashDiv = 12000000;
 8000a16:	4d19      	ldr	r5, [pc, #100]	; (8000a7c <_ZN12ClockManager18internalFreqUpdateEm+0x7c>)
		while(PWR->SR2 & PWR_SR2_VOSF);
		PWR->CR5 = 0;
		flashDiv = 34000000;
	}

	ahbClock = _targetFreq;
 8000a18:	4c19      	ldr	r4, [pc, #100]	; (8000a80 <_ZN12ClockManager18internalFreqUpdateEm+0x80>)

	uint32_t waitStates = ahbClock / flashDiv < 15 ? ahbClock / flashDiv : 15;
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000a1a:	491a      	ldr	r1, [pc, #104]	; (8000a84 <_ZN12ClockManager18internalFreqUpdateEm+0x84>)
	ahbClock = _targetFreq;
 8000a1c:	6020      	str	r0, [r4, #0]
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000a1e:	680a      	ldr	r2, [r1, #0]
	uint32_t waitStates = ahbClock / flashDiv < 15 ? ahbClock / flashDiv : 15;
 8000a20:	fbb0 f0f5 	udiv	r0, r0, r5
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000a24:	f022 020f 	bic.w	r2, r2, #15
 8000a28:	280f      	cmp	r0, #15
 8000a2a:	bf94      	ite	ls
 8000a2c:	4302      	orrls	r2, r0
 8000a2e:	f042 020f 	orrhi.w	r2, r2, #15
	
	FLASH->ACR = flashConf;
 8000a32:	600a      	str	r2, [r1, #0]
	while(FLASH->ACR != flashConf)
 8000a34:	680b      	ldr	r3, [r1, #0]
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d1fc      	bne.n	8000a34 <_ZN12ClockManager18internalFreqUpdateEm+0x34>
		;


	apbClock = ahbClock;
	timerClock = apbClock;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_ZN12ClockManager18internalFreqUpdateEm+0x88>)
 8000a3c:	6822      	ldr	r2, [r4, #0]
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bc30      	pop	{r4, r5}
 8000a42:	4770      	bx	lr
	else if (_targetFreq < 150000000)
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <_ZN12ClockManager18internalFreqUpdateEm+0x8c>)
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 8000a46:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <_ZN12ClockManager18internalFreqUpdateEm+0x78>)
	else if (_targetFreq < 150000000)
 8000a48:	4298      	cmp	r0, r3
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 8000a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a4e:	6013      	str	r3, [r2, #0]
	else if (_targetFreq < 150000000)
 8000a50:	d808      	bhi.n	8000a64 <_ZN12ClockManager18internalFreqUpdateEm+0x64>
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000a52:	6953      	ldr	r3, [r2, #20]
 8000a54:	055b      	lsls	r3, r3, #21
 8000a56:	d4fc      	bmi.n	8000a52 <_ZN12ClockManager18internalFreqUpdateEm+0x52>
		PWR->CR5 = PWR_CR5_R1MODE;
 8000a58:	f44f 7380 	mov.w	r3, #256	; 0x100
		flashDiv = 30000000;
 8000a5c:	4d0c      	ldr	r5, [pc, #48]	; (8000a90 <_ZN12ClockManager18internalFreqUpdateEm+0x90>)
		PWR->CR5 = PWR_CR5_R1MODE;
 8000a5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		flashDiv = 30000000;
 8000a62:	e7d9      	b.n	8000a18 <_ZN12ClockManager18internalFreqUpdateEm+0x18>
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000a64:	6953      	ldr	r3, [r2, #20]
 8000a66:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000a6a:	d1fb      	bne.n	8000a64 <_ZN12ClockManager18internalFreqUpdateEm+0x64>
		flashDiv = 34000000;
 8000a6c:	4d09      	ldr	r5, [pc, #36]	; (8000a94 <_ZN12ClockManager18internalFreqUpdateEm+0x94>)
		PWR->CR5 = 0;
 8000a6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		flashDiv = 34000000;
 8000a72:	e7d1      	b.n	8000a18 <_ZN12ClockManager18internalFreqUpdateEm+0x18>
 8000a74:	018cba7f 	.word	0x018cba7f
 8000a78:	40007000 	.word	0x40007000
 8000a7c:	00b71b00 	.word	0x00b71b00
 8000a80:	20000000 	.word	0x20000000
 8000a84:	40022000 	.word	0x40022000
 8000a88:	2000000c 	.word	0x2000000c
 8000a8c:	08f0d17f 	.word	0x08f0d17f
 8000a90:	01c9c380 	.word	0x01c9c380
 8000a94:	0206cc80 	.word	0x0206cc80

08000a98 <_ZN3PID4InitEv>:
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
	_lastInput = *_myInput;
 8000a98:	e9d0 3209 	ldrd	r3, r2, [r0, #36]	; 0x24
	
	if (_outputSum > _outMax)
 8000a9c:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
	_outputSum = *_myOutput;
 8000aa0:	edd2 7a00 	vldr	s15, [r2]
 8000aa4:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
	if (_outputSum > _outMax)
 8000aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
	_lastInput = *_myInput;
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6343      	str	r3, [r0, #52]	; 0x34
	if (_outputSum > _outMax)
 8000ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab4:	dc06      	bgt.n	8000ac4 <_ZN3PID4InitEv+0x2c>
	{
		_outputSum = _outMax;
	}
	else if (_outputSum < _outMin)
 8000ab6:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8000aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac2:	d501      	bpl.n	8000ac8 <_ZN3PID4InitEv+0x30>
	{
		_outputSum = _outMin;
 8000ac4:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
	}
	else { }
	
}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <_ZN3PID15SetOutputLimitsEff>:

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(float Min, float Max)
{
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8000acc:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8000ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad4:	da26      	bge.n	8000b24 <_ZN3PID15SetOutputLimitsEff+0x58>
	
	_outMin = Min;
	_outMax = Max;
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8000ad6:	7843      	ldrb	r3, [r0, #1]
	_outMin = Min;
 8000ad8:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
	_outMax = Max;
 8000adc:	edc0 0a0f 	vstr	s1, [r0, #60]	; 0x3c
	if (_inAuto)
 8000ae0:	b303      	cbz	r3, 8000b24 <_ZN3PID15SetOutputLimitsEff+0x58>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8000ae2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ae4:	edd3 7a00 	vldr	s15, [r3]
 8000ae8:	eef4 7ae0 	vcmpe.f32	s15, s1
 8000aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af0:	dc19      	bgt.n	8000b26 <_ZN3PID15SetOutputLimitsEff+0x5a>
		{
			*_myOutput = _outMax;
		}
		else if (*_myOutput < _outMin)
 8000af2:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			*_myOutput = _outMin;
 8000afa:	bf48      	it	mi
 8000afc:	ed83 0a00 	vstrmi	s0, [r3]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8000b00:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8000b04:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 8000b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b10:	dc06      	bgt.n	8000b20 <_ZN3PID15SetOutputLimitsEff+0x54>
		{
			_outputSum = _outMax;
		}
		else if (_outputSum < _outMin)
 8000b12:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8000b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b1e:	d501      	bpl.n	8000b24 <_ZN3PID15SetOutputLimitsEff+0x58>
		{
			_outputSum = _outMin;
 8000b20:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
		}
		else { }
		
	}
	
}
 8000b24:	4770      	bx	lr
			*_myOutput = _outMax;
 8000b26:	edc3 0a00 	vstr	s1, [r3]
 8000b2a:	e7e9      	b.n	8000b00 <_ZN3PID15SetOutputLimitsEff+0x34>

08000b2c <_ZN6Serial5printEi.constprop.0>:
		sendChar(*_string);
		_string++;
	}
}

void Serial::print(int _number)
 8000b2c:	b530      	push	{r4, r5, lr}
 8000b2e:	b085      	sub	sp, #20
{ 
	char charTab[11]={};
 8000b30:	2200      	movs	r2, #0
 8000b32:	e9cd 2201 	strd	r2, r2, [sp, #4]
#include "typeConverter.h"


void typeConverter::IntToString (int _number, char * _string){
int i=0;
bool negative = _number<0? true : false;
 8000b36:	0fc5      	lsrs	r5, r0, #31
 8000b38:	f8cd 200b 	str.w	r2, [sp, #11]
int absNumber = _number<0? -_number : _number;
	if (absNumber==0) 
 8000b3c:	b9e8      	cbnz	r0, 8000b7a <_ZN6Serial5printEi.constprop.0+0x4e>
	{
		_string[0]='0';
 8000b3e:	2330      	movs	r3, #48	; 0x30
 8000b40:	f88d 3004 	strb.w	r3, [sp, #4]
	while (absNumber)
	{
		_string[i++]=absNumber % 10 + '0';
		absNumber /= 10;
	}
	if (negative)
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	d14c      	bne.n	8000be2 <_ZN6Serial5printEi.constprop.0+0xb6>
		return number;
}

void typeConverter::reverseArray(char* _charTab, int _lenght)
{
	for (int i =0; i<_lenght/2; i++)
 8000b48:	f04f 0c01 	mov.w	ip, #1
	_string[i]='\0';
 8000b4c:	f10c 0310 	add.w	r3, ip, #16
 8000b50:	eb0d 0c03 	add.w	ip, sp, r3
 8000b54:	2300      	movs	r3, #0
 8000b56:	f80c 3c0c 	strb.w	r3, [ip, #-12]
	while (*_string)
 8000b5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000b5e:	b153      	cbz	r3, 8000b76 <_ZN6Serial5printEi.constprop.0+0x4a>
	USARTx->TDR = _char;
 8000b60:	4a25      	ldr	r2, [pc, #148]	; (8000bf8 <_ZN6Serial5printEi.constprop.0+0xcc>)
 8000b62:	6852      	ldr	r2, [r2, #4]
 8000b64:	a901      	add	r1, sp, #4
 8000b66:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8000b68:	69d3      	ldr	r3, [r2, #28]
 8000b6a:	065b      	lsls	r3, r3, #25
 8000b6c:	d5fc      	bpl.n	8000b68 <_ZN6Serial5printEi.constprop.0+0x3c>
	while (*_string)
 8000b6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f7      	bne.n	8000b66 <_ZN6Serial5printEi.constprop.0+0x3a>
	typeConverter::IntToString(_number, charTab);
	print(charTab);
}
 8000b76:	b005      	add	sp, #20
 8000b78:	bd30      	pop	{r4, r5, pc}
 8000b7a:	a901      	add	r1, sp, #4
int absNumber = _number<0? -_number : _number;
 8000b7c:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
		_string[i++]=absNumber % 10 + '0';
 8000b80:	4c1e      	ldr	r4, [pc, #120]	; (8000bfc <_ZN6Serial5printEi.constprop.0+0xd0>)
int absNumber = _number<0? -_number : _number;
 8000b82:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8000b86:	468e      	mov	lr, r1
int i=0;
 8000b88:	4694      	mov	ip, r2
		_string[i++]=absNumber % 10 + '0';
 8000b8a:	fba4 0203 	umull	r0, r2, r4, r3
 8000b8e:	08d2      	lsrs	r2, r2, #3
 8000b90:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8000b94:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8000b98:	3330      	adds	r3, #48	; 0x30
 8000b9a:	f80e 3b01 	strb.w	r3, [lr], #1
 8000b9e:	4660      	mov	r0, ip
	while (absNumber)
 8000ba0:	4613      	mov	r3, r2
		_string[i++]=absNumber % 10 + '0';
 8000ba2:	f10c 0c01 	add.w	ip, ip, #1
	while (absNumber)
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d1ef      	bne.n	8000b8a <_ZN6Serial5printEi.constprop.0+0x5e>
	if (negative)
 8000baa:	b1ad      	cbz	r5, 8000bd8 <_ZN6Serial5printEi.constprop.0+0xac>
		_string[i++]='-';
 8000bac:	f10c 0310 	add.w	r3, ip, #16
 8000bb0:	446b      	add	r3, sp
 8000bb2:	1c82      	adds	r2, r0, #2
 8000bb4:	202d      	movs	r0, #45	; 0x2d
	for (int i =0; i<_lenght/2; i++)
 8000bb6:	ea4f 0e62 	mov.w	lr, r2, asr #1
	_string[i]='\0';
 8000bba:	4694      	mov	ip, r2
		_string[i++]='-';
 8000bbc:	f803 0c0c 	strb.w	r0, [r3, #-12]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	440a      	add	r2, r1
 8000bc4:	448e      	add	lr, r1
	{
		char temp = _charTab[i];
		_charTab [i] = _charTab [_lenght-i -1];
 8000bc6:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
		char temp = _charTab[i];
 8000bca:	7819      	ldrb	r1, [r3, #0]
		_charTab [i] = _charTab [_lenght-i -1];
 8000bcc:	f803 0b01 	strb.w	r0, [r3], #1
	for (int i =0; i<_lenght/2; i++)
 8000bd0:	459e      	cmp	lr, r3
		_charTab [_lenght-i -1] = temp;
 8000bd2:	7011      	strb	r1, [r2, #0]
	for (int i =0; i<_lenght/2; i++)
 8000bd4:	d1f7      	bne.n	8000bc6 <_ZN6Serial5printEi.constprop.0+0x9a>
 8000bd6:	e7b9      	b.n	8000b4c <_ZN6Serial5printEi.constprop.0+0x20>
 8000bd8:	ea5f 0e6c 	movs.w	lr, ip, asr #1
 8000bdc:	d0b4      	beq.n	8000b48 <_ZN6Serial5printEi.constprop.0+0x1c>
		_string[i++]=absNumber % 10 + '0';
 8000bde:	4662      	mov	r2, ip
 8000be0:	e7ee      	b.n	8000bc0 <_ZN6Serial5printEi.constprop.0+0x94>
		_string[i++]='-';
 8000be2:	232d      	movs	r3, #45	; 0x2d
 8000be4:	f04f 0c02 	mov.w	ip, #2
 8000be8:	f88d 3005 	strb.w	r3, [sp, #5]
 8000bec:	f04f 0e01 	mov.w	lr, #1
 8000bf0:	4662      	mov	r2, ip
 8000bf2:	a901      	add	r1, sp, #4
 8000bf4:	e7e4      	b.n	8000bc0 <_ZN6Serial5printEi.constprop.0+0x94>
 8000bf6:	bf00      	nop
 8000bf8:	200001b4 	.word	0x200001b4
 8000bfc:	cccccccd 	.word	0xcccccccd

08000c00 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0>:
void typeConverter::fractionalToString (float _number, char * _string, uint8_t _precision)
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	4605      	mov	r5, r0
 8000c04:	ed2d 8b02 	vpush	{d8}
	int64_t integerPart = static_cast<int64_t>(_number);
 8000c08:	ee10 0a10 	vmov	r0, s0
void typeConverter::fractionalToString (float _number, char * _string, uint8_t _precision)
 8000c0c:	eeb0 8a40 	vmov.f32	s16, s0
	int64_t integerPart = static_cast<int64_t>(_number);
 8000c10:	f002 fa3c 	bl	800308c <__aeabi_f2lz>
 8000c14:	4604      	mov	r4, r0
 8000c16:	460e      	mov	r6, r1
	fractionalPart =  _number - integerPart;
 8000c18:	f7ff fbae 	bl	8000378 <__aeabi_l2f>
 8000c1c:	ee07 0a10 	vmov	s14, r0
 8000c20:	ee78 7a47 	vsub.f32	s15, s16, s14
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000c24:	4623      	mov	r3, r4
	fractionalPart <0 ? fractionalPart = -fractionalPart : fractionalPart = fractionalPart;
 8000c26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2e:	bf48      	it	mi
 8000c30:	ee77 7a48 	vsubmi.f32	s15, s14, s16
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	db5b      	blt.n	8000cf0 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0xf0>
	if (absNumber==0) 
 8000c38:	b963      	cbnz	r3, 8000c54 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x54>
	if (negative)
 8000c3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		_string[0]='0';
 8000c3e:	2330      	movs	r3, #48	; 0x30
	if (negative)
 8000c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		_string[0]='0';
 8000c44:	702b      	strb	r3, [r5, #0]
	if (negative)
 8000c46:	d45f      	bmi.n	8000d08 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x108>
 8000c48:	2601      	movs	r6, #1
	_string[i++]='.';
 8000c4a:	232e      	movs	r3, #46	; 0x2e
 8000c4c:	55ab      	strb	r3, [r5, r6]
 8000c4e:	2405      	movs	r4, #5
 8000c50:	2202      	movs	r2, #2
 8000c52:	e031      	b.n	8000cb8 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0xb8>
 8000c54:	1e69      	subs	r1, r5, #1
		_string[i++]=absNumber % 10 + '0';
 8000c56:	4e31      	ldr	r6, [pc, #196]	; (8000d1c <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x11c>)
 8000c58:	4608      	mov	r0, r1
 8000c5a:	fb86 2403 	smull	r2, r4, r6, r3
 8000c5e:	17da      	asrs	r2, r3, #31
 8000c60:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8000c64:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8000c68:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8000c6c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000c70:	4684      	mov	ip, r0
	while (absNumber)
 8000c72:	4613      	mov	r3, r2
		_string[i++]=absNumber % 10 + '0';
 8000c74:	f800 4f01 	strb.w	r4, [r0, #1]!
	while (absNumber)
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d1ee      	bne.n	8000c5a <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x5a>
 8000c7c:	f1c5 0602 	rsb	r6, r5, #2
	if (negative)
 8000c80:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000c84:	4466      	add	r6, ip
 8000c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		_string[i++]=absNumber % 10 + '0';
 8000c8a:	4630      	mov	r0, r6
	if (negative)
 8000c8c:	d432      	bmi.n	8000cf4 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0xf4>
	for (int i =0; i<_lenght/2; i++)
 8000c8e:	ea5f 0e66 	movs.w	lr, r6, asr #1
		_string[i++]='-';
 8000c92:	f106 0201 	add.w	r2, r6, #1
	for (int j=i; j<_precision+i; j++)
 8000c96:	f106 0404 	add.w	r4, r6, #4
	for (int i =0; i<_lenght/2; i++)
 8000c9a:	d0d6      	beq.n	8000c4a <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x4a>
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	449e      	add	lr, r3
 8000ca0:	1829      	adds	r1, r5, r0
		char temp = _charTab[i];
 8000ca2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
		_charTab [i] = _charTab [_lenght-i -1];
 8000ca6:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8000caa:	f883 c000 	strb.w	ip, [r3]
	for (int i =0; i<_lenght/2; i++)
 8000cae:	459e      	cmp	lr, r3
		_charTab [_lenght-i -1] = temp;
 8000cb0:	7008      	strb	r0, [r1, #0]
	for (int i =0; i<_lenght/2; i++)
 8000cb2:	d1f6      	bne.n	8000ca2 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0xa2>
	_string[i++]='.';
 8000cb4:	232e      	movs	r3, #46	; 0x2e
 8000cb6:	55ab      	strb	r3, [r5, r6]
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000cbe:	442a      	add	r2, r5
		fractionalPart *=10;
 8000cc0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
		fractionalPart -= static_cast<int>(fractionalPart);
 8000cc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000cc8:	4613      	mov	r3, r2
 8000cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
	for (int j=i; j<_precision+i; j++)
 8000cce:	3302      	adds	r3, #2
		fractionalPart *=10;
 8000cd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
	for (int j=i; j<_precision+i; j++)
 8000cd4:	1b5b      	subs	r3, r3, r5
		_string[j]= static_cast<int>(fractionalPart) + '0';
 8000cd6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
	for (int j=i; j<_precision+i; j++)
 8000cda:	42a3      	cmp	r3, r4
		_string[j]= static_cast<int>(fractionalPart) + '0';
 8000cdc:	ee17 1a10 	vmov	r1, s14
 8000ce0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8000ce4:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (int j=i; j<_precision+i; j++)
 8000ce8:	dbec      	blt.n	8000cc4 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0xc4>
}
 8000cea:	ecbd 8b02 	vpop	{d8}
 8000cee:	bd70      	pop	{r4, r5, r6, pc}
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000cf0:	4263      	negs	r3, r4
 8000cf2:	e7a1      	b.n	8000c38 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x38>
		_string[i++]='-';
 8000cf4:	1c73      	adds	r3, r6, #1
 8000cf6:	222d      	movs	r2, #45	; 0x2d
 8000cf8:	55aa      	strb	r2, [r5, r6]
	for (int j=i; j<_precision+i; j++)
 8000cfa:	1d74      	adds	r4, r6, #5
	_string[i++]='.';
 8000cfc:	1cb2      	adds	r2, r6, #2
	for (int i =0; i<_lenght/2; i++)
 8000cfe:	ea4f 0e63 	mov.w	lr, r3, asr #1
		_string[i++]='-';
 8000d02:	461e      	mov	r6, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	e7c9      	b.n	8000c9c <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x9c>
 8000d08:	232d      	movs	r3, #45	; 0x2d
 8000d0a:	2602      	movs	r6, #2
 8000d0c:	706b      	strb	r3, [r5, #1]
 8000d0e:	2406      	movs	r4, #6
 8000d10:	f04f 0e01 	mov.w	lr, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	4630      	mov	r0, r6
 8000d18:	1e69      	subs	r1, r5, #1
 8000d1a:	e7bf      	b.n	8000c9c <_ZN13typeConverter18fractionalToStringEfPch.constprop.0+0x9c>
 8000d1c:	66666667 	.word	0x66666667

08000d20 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>:
	_myOutput   = Output;
 8000d20:	6282      	str	r2, [r0, #40]	; 0x28
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8000d22:	2200      	movs	r2, #0
PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8000d24:	b510      	push	{r4, lr}
	_mySetpoint = Setpoint;
 8000d26:	62c3      	str	r3, [r0, #44]	; 0x2c
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8000d28:	7042      	strb	r2, [r0, #1]
PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8000d2a:	eef0 6a40 	vmov.f32	s13, s0
 8000d2e:	eeb0 6a60 	vmov.f32	s12, s1
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8000d32:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8000db8 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x98>
 8000d36:	eddf 0a21 	vldr	s1, [pc, #132]	; 8000dbc <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x9c>
	_myInput    = Input;
 8000d3a:	6241      	str	r1, [r0, #36]	; 0x24
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8000d3c:	f7ff fec6 	bl	8000acc <_ZN3PID15SetOutputLimitsEff>

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8000d40:	7843      	ldrb	r3, [r0, #1]
	_sampleTime = _PID_SAMPLE_TIME_US_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000d42:	2219      	movs	r2, #25
PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8000d44:	4604      	mov	r4, r0
	_sampleTime = _PID_SAMPLE_TIME_US_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000d46:	6082      	str	r2, [r0, #8]
	if ((_inAuto) && (Direction != _controllerDirection))
 8000d48:	b19b      	cbz	r3, 8000d72 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x52>
 8000d4a:	78c3      	ldrb	r3, [r0, #3]
 8000d4c:	b18b      	cbz	r3, 8000d72 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x52>
	{
		
		_kp = (0 - _kp);
 8000d4e:	edd0 5a06 	vldr	s11, [r0, #24]
		_ki = (0 - _ki);
 8000d52:	ed90 7a07 	vldr	s14, [r0, #28]
		_kd = (0 - _kd);
 8000d56:	edd0 7a08 	vldr	s15, [r0, #32]
		_kp = (0 - _kp);
 8000d5a:	eef1 5a65 	vneg.f32	s11, s11
		_ki = (0 - _ki);
 8000d5e:	eeb1 7a47 	vneg.f32	s14, s14
		_kd = (0 - _kd);
 8000d62:	eef1 7a67 	vneg.f32	s15, s15
		_kp = (0 - _kp);
 8000d66:	edc0 5a06 	vstr	s11, [r0, #24]
		_ki = (0 - _ki);
 8000d6a:	ed80 7a07 	vstr	s14, [r0, #28]
		_kd = (0 - _kd);
 8000d6e:	edc0 7a08 	vstr	s15, [r0, #32]
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8000d72:	eef5 6ac0 	vcmpe.f32	s13, #0.0
		
	}
	
	_controllerDirection = Direction;
 8000d76:	2300      	movs	r3, #0
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	_controllerDirection = Direction;
 8000d7c:	70e3      	strb	r3, [r4, #3]
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8000d7e:	f04f 0300 	mov.w	r3, #0
 8000d82:	d415      	bmi.n	8000db0 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x90>
 8000d84:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8000d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8c:	d410      	bmi.n	8000db0 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x90>
	_ki = Ki * SampleTimeInSec;
 8000d8e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000dc0 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0xa0>
	_dispKp = Kp;
 8000d92:	edc4 6a03 	vstr	s13, [r4, #12]
	_ki = Ki * SampleTimeInSec;
 8000d96:	ee66 7a27 	vmul.f32	s15, s12, s15
	_pOn    = POn;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	70a2      	strb	r2, [r4, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8000d9e:	7022      	strb	r2, [r4, #0]
	_dispKi = Ki;
 8000da0:	ed84 6a04 	vstr	s12, [r4, #16]
	_dispKd = Kd;
 8000da4:	6163      	str	r3, [r4, #20]
	_kp = Kp;
 8000da6:	edc4 6a06 	vstr	s13, [r4, #24]
	_ki = Ki * SampleTimeInSec;
 8000daa:	edc4 7a07 	vstr	s15, [r4, #28]
	_kd = Kd / SampleTimeInSec;
 8000dae:	6223      	str	r3, [r4, #32]
	_lastTime = GetTime() - _sampleTime;
 8000db0:	f06f 0318 	mvn.w	r3, #24
 8000db4:	6063      	str	r3, [r4, #4]
}
 8000db6:	bd10      	pop	{r4, pc}
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	437f0000 	.word	0x437f0000
 8000dc0:	37d1b717 	.word	0x37d1b717

08000dc4 <adc_init.constprop.0.isra.0>:
#include "adc.h"

adcError_t adc_init(adcChannel_t* aIns)
{
    switch ((uint32_t)aIns->adc)
 8000dc4:	4a59      	ldr	r2, [pc, #356]	; (8000f2c <adc_init.constprop.0.isra.0+0x168>)
 8000dc6:	6803      	ldr	r3, [r0, #0]
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d008      	beq.n	8000dde <adc_init.constprop.0.isra.0+0x1a>
 8000dcc:	d97d      	bls.n	8000eca <adc_init.constprop.0.isra.0+0x106>
 8000dce:	4a58      	ldr	r2, [pc, #352]	; (8000f30 <adc_init.constprop.0.isra.0+0x16c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d004      	beq.n	8000dde <adc_init.constprop.0.isra.0+0x1a>
 8000dd4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	f040 80a4 	bne.w	8000f26 <adc_init.constprop.0.isra.0+0x162>
        case ADC4_BASE:
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
        break;
        case ADC5_BASE:
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
 8000dde:	4955      	ldr	r1, [pc, #340]	; (8000f34 <adc_init.constprop.0.isra.0+0x170>)
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
 8000de0:	4a55      	ldr	r2, [pc, #340]	; (8000f38 <adc_init.constprop.0.isra.0+0x174>)
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
 8000de2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	64cb      	str	r3, [r1, #76]	; 0x4c
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
 8000dea:	6893      	ldr	r3, [r2, #8]
 8000dec:	f443 0386 	orr.w	r3, r3, #4390912	; 0x430000
 8000df0:	6093      	str	r3, [r2, #8]
        default:
            return wrongADCmodule;
        break;
    }

	aIns->adc->CR |= ADC_CR_ADSTP;
 8000df2:	6802      	ldr	r2, [r0, #0]
 8000df4:	6893      	ldr	r3, [r2, #8]
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6093      	str	r3, [r2, #8]
	while((aIns->adc->ISR & ADC_ISR_ADRDY));	
 8000dfc:	6802      	ldr	r2, [r0, #0]
 8000dfe:	6813      	ldr	r3, [r2, #0]
 8000e00:	f013 0301 	ands.w	r3, r3, #1
 8000e04:	d1fb      	bne.n	8000dfe <adc_init.constprop.0.isra.0+0x3a>
	aIns->adc->CR =0;
 8000e06:	6093      	str	r3, [r2, #8]
    aIns->adc->CFGR = 0x80000000;
 8000e08:	6802      	ldr	r2, [r0, #0]
 8000e0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000e0e:	60d1      	str	r1, [r2, #12]
	aIns->adc->CFGR = ADC_CFGR_OVRMOD | aIns->triggerEdge<<ADC_CFGR_EXTEN_Pos | aIns->externalTriggerEvent<<ADC_CFGR_EXTSEL_Pos | ADC_CFGR_DMAEN | ADC_CFGR_DMACFG; // Set overrun mode, external trigger rising edge, TIM1_TRGO as trigger, DMA enable, DMA circular mode
 8000e10:	6902      	ldr	r2, [r0, #16]
 8000e12:	7b01      	ldrb	r1, [r0, #12]
 8000e14:	0152      	lsls	r2, r2, #5
 8000e16:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000e1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e1e:	6801      	ldr	r1, [r0, #0]
 8000e20:	f042 0203 	orr.w	r2, r2, #3
 8000e24:	60ca      	str	r2, [r1, #12]
	if (aIns->triggerEdge == noEXTtrigger)
 8000e26:	7b02      	ldrb	r2, [r0, #12]
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	d075      	beq.n	8000f18 <adc_init.constprop.0.isra.0+0x154>
    {
        aIns->adc->CFGR |= ADC_CFGR_CONT;
    }
    aIns->adc->CR |= ADC_CR_ADVREGEN;	
 8000e2c:	6801      	ldr	r1, [r0, #0]
 8000e2e:	688a      	ldr	r2, [r1, #8]
 8000e30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e34:	608a      	str	r2, [r1, #8]
	aIns->adc->CR |= ADC_CR_ADCAL;
 8000e36:	6801      	ldr	r1, [r0, #0]
 8000e38:	688a      	ldr	r2, [r1, #8]
 8000e3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e3e:	608a      	str	r2, [r1, #8]
	while(aIns->adc->CR & ADC_CR_ADCAL);
 8000e40:	6801      	ldr	r1, [r0, #0]
 8000e42:	688a      	ldr	r2, [r1, #8]
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	dbfc      	blt.n	8000e42 <adc_init.constprop.0.isra.0+0x7e>

    if (aIns->channelsCount>16)
 8000e48:	6842      	ldr	r2, [r0, #4]
 8000e4a:	2a10      	cmp	r2, #16
 8000e4c:	d86a      	bhi.n	8000f24 <adc_init.constprop.0.isra.0+0x160>
adcError_t adc_init(adcChannel_t* aIns)
 8000e4e:	b530      	push	{r4, r5, lr}
       return channelCountErr;
	aIns->adc->SQR1 |= (aIns->channelsCount-1)<<ADC_SQR1_L_Pos; 
 8000e50:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8000e52:	3a01      	subs	r2, #1
 8000e54:	4322      	orrs	r2, r4
 8000e56:	630a      	str	r2, [r1, #48]	; 0x30

    for (uint32_t i=0; i<aIns->channelsCount; i++)
 8000e58:	6842      	ldr	r2, [r0, #4]
 8000e5a:	2a00      	cmp	r2, #0
 8000e5c:	d047      	beq.n	8000eee <adc_init.constprop.0.isra.0+0x12a>
 8000e5e:	2106      	movs	r1, #6
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e00e      	b.n	8000e84 <adc_init.constprop.0.isra.0+0xc0>
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
            return channelNumberErr;

        if (i<=4)
        {
            aIns->adc->SQR1 |= *(aIns->channels+i) << (6+i*6); 
 8000e66:	6804      	ldr	r4, [r0, #0]
 8000e68:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e6a:	ea4e 0202 	orr.w	r2, lr, r2
 8000e6e:	6322      	str	r2, [r4, #48]	; 0x30
    for (uint32_t i=0; i<aIns->channelsCount; i++)
 8000e70:	6842      	ldr	r2, [r0, #4]
 8000e72:	4562      	cmp	r2, ip
 8000e74:	f10c 0401 	add.w	r4, ip, #1
 8000e78:	f103 0301 	add.w	r3, r3, #1
 8000e7c:	f101 0106 	add.w	r1, r1, #6
 8000e80:	d935      	bls.n	8000eee <adc_init.constprop.0.isra.0+0x12a>
 8000e82:	46a4      	mov	ip, r4
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
 8000e84:	6882      	ldr	r2, [r0, #8]
 8000e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e8a:	1e54      	subs	r4, r2, #1
 8000e8c:	2c0f      	cmp	r4, #15
            aIns->adc->SQR1 |= *(aIns->channels+i) << (6+i*6); 
 8000e8e:	fa02 fe01 	lsl.w	lr, r2, r1
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
 8000e92:	d839      	bhi.n	8000f08 <adc_init.constprop.0.isra.0+0x144>
        if (i<=4)
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d9e6      	bls.n	8000e66 <adc_init.constprop.0.isra.0+0xa2>
        }else if(i<=9)
        {
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000e98:	f1a1 0e24 	sub.w	lr, r1, #36	; 0x24
        }else if(i<=9)
 8000e9c:	2b09      	cmp	r3, #9
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000e9e:	fa02 fe0e 	lsl.w	lr, r2, lr
        }else if(i<=9)
 8000ea2:	d805      	bhi.n	8000eb0 <adc_init.constprop.0.isra.0+0xec>
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000ea4:	6804      	ldr	r4, [r0, #0]
 8000ea6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000ea8:	ea4e 0202 	orr.w	r2, lr, r2
 8000eac:	6362      	str	r2, [r4, #52]	; 0x34
 8000eae:	e7df      	b.n	8000e70 <adc_init.constprop.0.isra.0+0xac>
        }else if (i<=14)
        {
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000eb0:	f1a1 0442 	sub.w	r4, r1, #66	; 0x42
        }else if (i<=14)
 8000eb4:	2b0e      	cmp	r3, #14
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000eb6:	fa02 f404 	lsl.w	r4, r2, r4
        }else 
        {
            aIns->adc->SQR4 |= *(aIns->channels+i) << ((i-15)*6);
 8000eba:	f1a1 0e60 	sub.w	lr, r1, #96	; 0x60
        }else if (i<=14)
 8000ebe:	d824      	bhi.n	8000f0a <adc_init.constprop.0.isra.0+0x146>
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000ec0:	6802      	ldr	r2, [r0, #0]
 8000ec2:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8000ec4:	432c      	orrs	r4, r5
 8000ec6:	6394      	str	r4, [r2, #56]	; 0x38
 8000ec8:	e7d2      	b.n	8000e70 <adc_init.constprop.0.isra.0+0xac>
    switch ((uint32_t)aIns->adc)
 8000eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ece:	d003      	beq.n	8000ed8 <adc_init.constprop.0.isra.0+0x114>
 8000ed0:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d127      	bne.n	8000f28 <adc_init.constprop.0.isra.0+0x164>
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8000ed8:	4916      	ldr	r1, [pc, #88]	; (8000f34 <adc_init.constprop.0.isra.0+0x170>)
            ADC12_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);	// Set ADC clock to HCLK/2 and enable VREFINT
 8000eda:	4a18      	ldr	r2, [pc, #96]	; (8000f3c <adc_init.constprop.0.isra.0+0x178>)
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8000edc:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000ede:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ee2:	64cb      	str	r3, [r1, #76]	; 0x4c
            ADC12_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);	// Set ADC clock to HCLK/2 and enable VREFINT
 8000ee4:	6893      	ldr	r3, [r2, #8]
 8000ee6:	f443 0386 	orr.w	r3, r3, #4390912	; 0x430000
 8000eea:	6093      	str	r3, [r2, #8]
        break;
 8000eec:	e781      	b.n	8000df2 <adc_init.constprop.0.isra.0+0x2e>
        }
    }
	aIns->adc->CR |= ADC_CR_ADEN;
 8000eee:	6802      	ldr	r2, [r0, #0]
 8000ef0:	6893      	ldr	r3, [r2, #8]
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6093      	str	r3, [r2, #8]
	while(!(aIns->adc->ISR & ADC_ISR_ADRDY));
 8000ef8:	6802      	ldr	r2, [r0, #0]
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	07db      	lsls	r3, r3, #31
 8000efe:	d5fc      	bpl.n	8000efa <adc_init.constprop.0.isra.0+0x136>
	aIns->adc->CR |= ADC_CR_ADSTART;
 8000f00:	6893      	ldr	r3, [r2, #8]
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6093      	str	r3, [r2, #8]
    
    return adcOk;  
 8000f08:	bd30      	pop	{r4, r5, pc}
            aIns->adc->SQR4 |= *(aIns->channels+i) << ((i-15)*6);
 8000f0a:	6804      	ldr	r4, [r0, #0]
 8000f0c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000f0e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f12:	432a      	orrs	r2, r5
 8000f14:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000f16:	e7ab      	b.n	8000e70 <adc_init.constprop.0.isra.0+0xac>
        aIns->adc->CFGR |= ADC_CFGR_CONT;
 8000f18:	6801      	ldr	r1, [r0, #0]
 8000f1a:	68ca      	ldr	r2, [r1, #12]
 8000f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f20:	60ca      	str	r2, [r1, #12]
 8000f22:	e783      	b.n	8000e2c <adc_init.constprop.0.isra.0+0x68>
 8000f24:	4770      	bx	lr
 8000f26:	4770      	bx	lr
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	50000400 	.word	0x50000400
 8000f30:	50000500 	.word	0x50000500
 8000f34:	40021000 	.word	0x40021000
 8000f38:	50000700 	.word	0x50000700
 8000f3c:	50000300 	.word	0x50000300

08000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>:
#include "gpio.h"

GPIO::GPIO (GPIO_TypeDef* _GPIOx, uint8_t _pin, GPIOmode _mode, GPIOtype _type, GPIOspeed _speed, GPIOpull _pull, uint8_t _AFnumber):
 8000f40:	b5f0      	push	{r4, r5, r6, r7, lr}
GPIOx(_GPIOx), pin(_pin)
{
	switch ((uint32_t) _GPIOx)
 8000f42:	4e42      	ldr	r6, [pc, #264]	; (800104c <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x10c>)
GPIOx(_GPIOx), pin(_pin)
 8000f44:	6001      	str	r1, [r0, #0]
	switch ((uint32_t) _GPIOx)
 8000f46:	42b1      	cmp	r1, r6
GPIOx(_GPIOx), pin(_pin)
 8000f48:	7102      	strb	r2, [r0, #4]
GPIO::GPIO (GPIO_TypeDef* _GPIOx, uint8_t _pin, GPIOmode _mode, GPIOtype _type, GPIOspeed _speed, GPIOpull _pull, uint8_t _AFnumber):
 8000f4a:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8000f4e:	f89d 001c 	ldrb.w	r0, [sp, #28]
	switch ((uint32_t) _GPIOx)
 8000f52:	d068      	beq.n	8001026 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xe6>
 8000f54:	d850      	bhi.n	8000ff8 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xb8>
 8000f56:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
 8000f5a:	42b1      	cmp	r1, r6
 8000f5c:	d069      	beq.n	8001032 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xf2>
 8000f5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f62:	42b1      	cmp	r1, r6
 8000f64:	d13f      	bne.n	8000fe6 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xa6>
			break;
		case GPIOB_BASE:
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
			break;
		case GPIOC_BASE:
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000f66:	4f3a      	ldr	r7, [pc, #232]	; (8001050 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000f68:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000f6a:	f046 0604 	orr.w	r6, r6, #4
 8000f6e:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
		default: 
		break;
	}

	GPIOx->MODER &= ~(0b11 << (pin*2));
 8000f70:	0056      	lsls	r6, r2, #1
	GPIOx->MODER |= (static_cast<int>(_mode) << (pin*2));
	GPIOx->OTYPER &= ~(1 << pin);
	GPIOx->OTYPER |= (static_cast<int>(_type) << pin);
 8000f72:	fa05 fe02 	lsl.w	lr, r5, r2
	GPIOx->MODER &= ~(0b11 << (pin*2));
 8000f76:	f04f 0c03 	mov.w	ip, #3
 8000f7a:	680d      	ldr	r5, [r1, #0]
 8000f7c:	fa0c fc06 	lsl.w	ip, ip, r6
 8000f80:	ea25 050c 	bic.w	r5, r5, ip
 8000f84:	600d      	str	r5, [r1, #0]
	GPIOx->MODER |= (static_cast<int>(_mode) << (pin*2));
 8000f86:	680d      	ldr	r5, [r1, #0]
 8000f88:	40b3      	lsls	r3, r6
 8000f8a:	432b      	orrs	r3, r5
 8000f8c:	600b      	str	r3, [r1, #0]
	GPIOx->OTYPER &= ~(1 << pin);
 8000f8e:	684b      	ldr	r3, [r1, #4]
 8000f90:	2501      	movs	r5, #1
 8000f92:	4095      	lsls	r5, r2
 8000f94:	ea23 0305 	bic.w	r3, r3, r5
 8000f98:	604b      	str	r3, [r1, #4]
	GPIOx->OTYPER |= (static_cast<int>(_type) << pin);
 8000f9a:	684b      	ldr	r3, [r1, #4]
 8000f9c:	ea4e 0303 	orr.w	r3, lr, r3
 8000fa0:	604b      	str	r3, [r1, #4]
	GPIOx->OSPEEDR &= ~(0b11 << (pin*2));
 8000fa2:	688b      	ldr	r3, [r1, #8]
 8000fa4:	ea23 030c 	bic.w	r3, r3, ip
 8000fa8:	608b      	str	r3, [r1, #8]
	GPIOx->OSPEEDR |= (static_cast<int>(_speed)<<(pin*2));
 8000faa:	688b      	ldr	r3, [r1, #8]
 8000fac:	608b      	str	r3, [r1, #8]
	GPIOx->PUPDR &= ~(0b11 << (pin*2));
 8000fae:	68cb      	ldr	r3, [r1, #12]
 8000fb0:	ea23 030c 	bic.w	r3, r3, ip
 8000fb4:	60cb      	str	r3, [r1, #12]
	GPIOx->PUPDR |= (static_cast<int>(_pull)<<(pin*2));
 8000fb6:	68cb      	ldr	r3, [r1, #12]
 8000fb8:	40b4      	lsls	r4, r6
 8000fba:	431c      	orrs	r4, r3
 8000fbc:	08d3      	lsrs	r3, r2, #3
 8000fbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000fc2:	60cc      	str	r4, [r1, #12]
	GPIOx->AFR[pin/8] &= ~(0xF << ((pin % 8)*4));
 8000fc4:	f002 0207 	and.w	r2, r2, #7
 8000fc8:	6a19      	ldr	r1, [r3, #32]
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	f04f 0c0f 	mov.w	ip, #15
 8000fd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd4:	ea21 010c 	bic.w	r1, r1, ip
 8000fd8:	6219      	str	r1, [r3, #32]
	GPIOx->AFR[pin/8] |= (_AFnumber << ((pin % 8)*4));
 8000fda:	6a19      	ldr	r1, [r3, #32]
 8000fdc:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	621a      	str	r2, [r3, #32]
}
 8000fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch ((uint32_t) _GPIOx)
 8000fe6:	f1b1 4f90 	cmp.w	r1, #1207959552	; 0x48000000
 8000fea:	d1c1      	bne.n	8000f70 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000fec:	4f18      	ldr	r7, [pc, #96]	; (8001050 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000fee:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000ff0:	f046 0601 	orr.w	r6, r6, #1
 8000ff4:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8000ff6:	e7bb      	b.n	8000f70 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
	switch ((uint32_t) _GPIOx)
 8000ff8:	4e16      	ldr	r6, [pc, #88]	; (8001054 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x114>)
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d01f      	beq.n	800103e <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xfe>
 8000ffe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001002:	42b1      	cmp	r1, r6
 8001004:	d105      	bne.n	8001012 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xd2>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
 8001006:	4f12      	ldr	r7, [pc, #72]	; (8001050 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001008:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800100a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 800100e:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001010:	e7ae      	b.n	8000f70 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
	switch ((uint32_t) _GPIOx)
 8001012:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
 8001016:	42b1      	cmp	r1, r6
 8001018:	d1aa      	bne.n	8000f70 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
 800101a:	4f0d      	ldr	r7, [pc, #52]	; (8001050 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 800101c:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800101e:	f046 0610 	orr.w	r6, r6, #16
 8001022:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001024:	e7a4      	b.n	8000f70 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 8001026:	4f0a      	ldr	r7, [pc, #40]	; (8001050 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001028:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800102a:	f046 0608 	orr.w	r6, r6, #8
 800102e:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001030:	e79e      	b.n	8000f70 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001032:	4f07      	ldr	r7, [pc, #28]	; (8001050 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001034:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001036:	f046 0602 	orr.w	r6, r6, #2
 800103a:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 800103c:	e798      	b.n	8000f70 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOFEN;
 800103e:	4f04      	ldr	r7, [pc, #16]	; (8001050 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001040:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001042:	f046 0620 	orr.w	r6, r6, #32
 8001046:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001048:	e792      	b.n	8000f70 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
 800104a:	bf00      	nop
 800104c:	48000c00 	.word	0x48000c00
 8001050:	40021000 	.word	0x40021000
 8001054:	48001400 	.word	0x48001400

08001058 <_ZN3PID7ComputeEv.isra.0>:
	if (!_inAuto)
 8001058:	7843      	ldrb	r3, [r0, #1]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d049      	beq.n	80010f2 <_ZN3PID7ComputeEv.isra.0+0x9a>
		error   = *_mySetpoint - input;
 800105e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		input   = *_myInput;
 8001060:	6a42      	ldr	r2, [r0, #36]	; 0x24
		error   = *_mySetpoint - input;
 8001062:	ed93 7a00 	vldr	s14, [r3]
		input   = *_myInput;
 8001066:	ed92 5a00 	vldr	s10, [r2]
		_outputSum += (_ki * error);
 800106a:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
 800106e:	ed90 6a07 	vldr	s12, [r0, #28]
		dInput  = (input - _lastInput);
 8001072:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
		if (!_pOnE)
 8001076:	7803      	ldrb	r3, [r0, #0]
		error   = *_mySetpoint - input;
 8001078:	ee37 7a45 	vsub.f32	s14, s14, s10
		dInput  = (input - _lastInput);
 800107c:	ee75 7a67 	vsub.f32	s15, s10, s15
		_outputSum += (_ki * error);
 8001080:	eee7 6a06 	vfma.f32	s13, s14, s12
 8001084:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
		if (!_pOnE)
 8001088:	bba3      	cbnz	r3, 80010f4 <_ZN3PID7ComputeEv.isra.0+0x9c>
			_outputSum -= _kp * dInput;
 800108a:	ed90 7a06 	vldr	s14, [r0, #24]
		if (_outputSum > _outMax)
 800108e:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
			_outputSum -= _kp * dInput;
 8001092:	eee7 6ac7 	vfms.f32	s13, s15, s14
 8001096:	eef1 5a67 	vneg.f32	s11, s15
		if (_outputSum > _outMax)
 800109a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			_outputSum -= _kp * dInput;
 80010a2:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
		if (_outputSum > _outMax)
 80010a6:	dc37      	bgt.n	8001118 <_ZN3PID7ComputeEv.isra.0+0xc0>
		else if (_outputSum < _outMin)
 80010a8:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 80010ac:	eef4 6ac7 	vcmpe.f32	s13, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d443      	bmi.n	800113e <_ZN3PID7ComputeEv.isra.0+0xe6>
			output = 0;
 80010b6:	eddf 7a25 	vldr	s15, [pc, #148]	; 800114c <_ZN3PID7ComputeEv.isra.0+0xf4>
		output += _outputSum - _kd * dInput;
 80010ba:	ed90 7a08 	vldr	s14, [r0, #32]
 80010be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010c2:	eee7 7a25 	vfma.f32	s15, s14, s11
		if (output > _outMax)
 80010c6:	eef4 7ac6 	vcmpe.f32	s15, s12
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	dc08      	bgt.n	80010e2 <_ZN3PID7ComputeEv.isra.0+0x8a>
 80010d0:	ed90 6a0e 	vldr	s12, [r0, #56]	; 0x38
 80010d4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	bfb8      	it	lt
 80010de:	eeb0 6a67 	vmovlt.f32	s12, s15
		*_myOutput = output;
 80010e2:	6a82      	ldr	r2, [r0, #40]	; 0x28
		_lastTime  = now;
 80010e4:	2300      	movs	r3, #0
		*_myOutput = output;
 80010e6:	ed82 6a00 	vstr	s12, [r2]
		_lastInput = input;
 80010ea:	ed80 5a0d 	vstr	s10, [r0, #52]	; 0x34
		_lastTime  = now;
 80010ee:	6043      	str	r3, [r0, #4]
 80010f0:	4770      	bx	lr
}
 80010f2:	4770      	bx	lr
		if (_outputSum > _outMax)
 80010f4:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 80010f8:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d511      	bpl.n	8001126 <_ZN3PID7ComputeEv.isra.0+0xce>
			_outputSum = _outMax;
 8001102:	eef0 6a46 	vmov.f32	s13, s12
 8001106:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
			output = _kp * error;
 800110a:	edd0 4a06 	vldr	s9, [r0, #24]
 800110e:	eef1 5a67 	vneg.f32	s11, s15
 8001112:	ee67 7a24 	vmul.f32	s15, s14, s9
 8001116:	e7d0      	b.n	80010ba <_ZN3PID7ComputeEv.isra.0+0x62>
			output = 0;
 8001118:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800114c <_ZN3PID7ComputeEv.isra.0+0xf4>
			_outputSum = _outMax;
 800111c:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
 8001120:	eef0 6a46 	vmov.f32	s13, s12
 8001124:	e7c9      	b.n	80010ba <_ZN3PID7ComputeEv.isra.0+0x62>
		else if (_outputSum < _outMin)
 8001126:	edd0 5a0e 	vldr	s11, [r0, #56]	; 0x38
 800112a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	d5ea      	bpl.n	800110a <_ZN3PID7ComputeEv.isra.0+0xb2>
			_outputSum = _outMin;
 8001134:	eef0 6a65 	vmov.f32	s13, s11
 8001138:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
 800113c:	e7e5      	b.n	800110a <_ZN3PID7ComputeEv.isra.0+0xb2>
			output = 0;
 800113e:	eddf 7a03 	vldr	s15, [pc, #12]	; 800114c <_ZN3PID7ComputeEv.isra.0+0xf4>
			_outputSum = _outMin;
 8001142:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
 8001146:	eef0 6a47 	vmov.f32	s13, s14
 800114a:	e7b6      	b.n	80010ba <_ZN3PID7ComputeEv.isra.0+0x62>
 800114c:	00000000 	.word	0x00000000

08001150 <main>:

motor_t motor = {0};
PID pidUd (&motor.FilteredIdqA[0],  &motor.Udq_pu[0], &setiD, 0.0005f, 0.5f, 0.0f, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
PID pidUq (&motor.FilteredIdqA[1],  &motor.Udq_pu[1], &setiQ, 0.001f, 1.0f, 0.0f, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
int main(void)
{
 8001150:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
}

static inline void pwm_init (pwm_t* pwm)
{
    //NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  
 8001154:	4a74      	ldr	r2, [pc, #464]	; (8001328 <main+0x1d8>)
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001156:	4875      	ldr	r0, [pc, #468]	; (800132c <main+0x1dc>)
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  
 8001158:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800115a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800115e:	6613      	str	r3, [r2, #96]	; 0x60
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001160:	6803      	ldr	r3, [r0, #0]
	pwm->tim->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
	pwm->tim->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;
	pwm->tim->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;
	//TIM1->CR2 |= 0b010<<TIM_CR2_MMS_Pos;   // Set TRGO on Update Event
	pwm->tim->PSC = 0;  // tim_clk = cpu_clk
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 8001162:	4a73      	ldr	r2, [pc, #460]	; (8001330 <main+0x1e0>)
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001164:	6999      	ldr	r1, [r3, #24]
 8001166:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 800116a:	6199      	str	r1, [r3, #24]
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC2M_Pos | TIM_CCMR1_OC2PE ; // PWM mode 1 channel 2
 800116c:	6999      	ldr	r1, [r3, #24]
 800116e:	f441 41d0 	orr.w	r1, r1, #26624	; 0x6800
 8001172:	6199      	str	r1, [r3, #24]
	pwm->tim->CCMR2 |= 0b110<< TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC3PE ; // PWM mode 1 channel 3
 8001174:	69d9      	ldr	r1, [r3, #28]
 8001176:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 800117a:	61d9      	str	r1, [r3, #28]
	pwm->tim->CCMR2 |= 0b0110<< TIM_CCMR2_OC4M_Pos;
 800117c:	69d9      	ldr	r1, [r3, #28]
 800117e:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8001182:	61d9      	str	r1, [r3, #28]
	pwm->tim->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
 8001184:	6a19      	ldr	r1, [r3, #32]
 8001186:	f041 0105 	orr.w	r1, r1, #5
 800118a:	6219      	str	r1, [r3, #32]
	pwm->tim->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;
 800118c:	6a19      	ldr	r1, [r3, #32]
 800118e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8001192:	6219      	str	r1, [r3, #32]
	pwm->tim->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;
 8001194:	6a19      	ldr	r1, [r3, #32]
 8001196:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
 800119a:	6219      	str	r1, [r3, #32]
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 800119c:	6841      	ldr	r1, [r0, #4]
 800119e:	fbb2 f2f1 	udiv	r2, r2, r1
 80011a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80011a6:	bf28      	it	cs
 80011a8:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 80011ac:	f04f 0800 	mov.w	r8, #0
	pwm->tim->PSC = 0;  // tim_clk = cpu_clk
 80011b0:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
	pwm->tim->CCR1 = 0;
	pwm->tim->CCR2 = 0;
	pwm->tim->CCR3 = 0;
	pwm->tim->CCR4 = 1000;
 80011b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->tim->CCR1 = 0;
 80011ba:	2200      	movs	r2, #0
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 80011be:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 80011c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pwm->tim->CCR4 = 1000;
 80011c2:	6419      	str	r1, [r3, #64]	; 0x40
	pwm->tim ->DIER |=  TIM_DIER_UIE; // interrupt enable
 80011c4:	68da      	ldr	r2, [r3, #12]
	pwm->tim->CR2 = 0b0111<<TIM_CR2_MMS_Pos;   // Set TRGO on Compare 4
 80011c6:	2170      	movs	r1, #112	; 0x70
	pwm->tim ->DIER |=  TIM_DIER_UIE; // interrupt enable
 80011c8:	f042 0201 	orr.w	r2, r2, #1
 80011cc:	60da      	str	r2, [r3, #12]
	pwm->tim->CR2 = 0b0111<<TIM_CR2_MMS_Pos;   // Set TRGO on Compare 4
 80011ce:	6059      	str	r1, [r3, #4]
	pwm->tim->CR1 |= TIM_CR1_ARPE | 0b01<<TIM_CR1_CMS_Pos;
 80011d0:	681a      	ldr	r2, [r3, #0]
	pwm->tim->EGR |= TIM_EGR_UG;
 80011d2:	4956      	ldr	r1, [pc, #344]	; (800132c <main+0x1dc>)
	pwm->tim->CR1 |= TIM_CR1_ARPE | 0b01<<TIM_CR1_CMS_Pos;
 80011d4:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80011d8:	601a      	str	r2, [r3, #0]
	pwm->tim->EGR |= TIM_EGR_UG;
 80011da:	680b      	ldr	r3, [r1, #0]
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	615a      	str	r2, [r3, #20]
	pwm->tim->BDTR |= TIM_BDTR_MOE | 0b00100000<<TIM_BDTR_DTG_Pos; 
 80011e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ea:	f042 0220 	orr.w	r2, r2, #32
 80011ee:	645a      	str	r2, [r3, #68]	; 0x44
	pwm->tim->CR1 |= TIM_CR1_CEN;
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
    pwm->autoReloadValue = pwm->tim->ARR;
 80011f8:	680a      	ldr	r2, [r1, #0]
 80011fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80011fc:	608b      	str	r3, [r1, #8]
    pwm->halfAutoReloadValue = pwm->autoReloadValue/2;
 80011fe:	085b      	lsrs	r3, r3, #1

    getAutoReloadValue (pwm);
	pwm->tim->CCR4= pwm->halfAutoReloadValue;
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
	if (!(RCC->CR & RCC_CR_HSERDY))
 8001202:	4a49      	ldr	r2, [pc, #292]	; (8001328 <main+0x1d8>)
    pwm->halfAutoReloadValue = pwm->autoReloadValue/2;
 8001204:	60cb      	str	r3, [r1, #12]
 8001206:	6813      	ldr	r3, [r2, #0]
 8001208:	039b      	lsls	r3, r3, #14
 800120a:	b09b      	sub	sp, #108	; 0x6c
 800120c:	d406      	bmi.n	800121c <main+0xcc>
		RCC->CR |= RCC_CR_HSEON;
 800120e:	6813      	ldr	r3, [r2, #0]
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
		while(!(RCC->CR & RCC_CR_HSERDY));
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	039f      	lsls	r7, r3, #14
 800121a:	d5fc      	bpl.n	8001216 <main+0xc6>

void ClockManager::pllCfg([[maybe_unused]] int _pllNum, int _targetFreq, int _p, pllDiv _q, pllDiv _r)
{
	uint32_t sourceFreq;

	RCC->CR &= ~RCC_CR_PLLON;
 800121c:	4a42      	ldr	r2, [pc, #264]	; (8001328 <main+0x1d8>)
 800121e:	6813      	ldr	r3, [r2, #0]
 8001220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001224:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLRDY);
 8001226:	6813      	ldr	r3, [r2, #0]
 8001228:	019e      	lsls	r6, r3, #6
 800122a:	d4fc      	bmi.n	8001226 <main+0xd6>
	if (RCC->CR & RCC_CR_HSERDY)
 800122c:	6813      	ldr	r3, [r2, #0]
	else
		sourceFreq = RCC_PLLCFGR_PLLSRC_HSI;

	int m = sourceFreq / 4000000; //4 MHz input frequency

	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 800122e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001334 <main+0x1e4>
	if (RCC->CR & RCC_CR_HSERDY)
 8001232:	039d      	lsls	r5, r3, #14
		RCC->PLLCFGR = RCC_PLLCFGR_PLLSRC_HSE;
 8001234:	bf42      	ittt	mi
 8001236:	2103      	movmi	r1, #3
 8001238:	60d1      	strmi	r1, [r2, #12]
		sourceFreq = hseClock;
 800123a:	4b3f      	ldrmi	r3, [pc, #252]	; (8001338 <main+0x1e8>)
	int m = sourceFreq / 4000000; //4 MHz input frequency
 800123c:	4a3f      	ldr	r2, [pc, #252]	; (800133c <main+0x1ec>)
		sourceFreq = RCC_PLLCFGR_PLLSRC_HSI;
 800123e:	bf58      	it	pl
 8001240:	2302      	movpl	r3, #2
	int m = sourceFreq / 4000000; //4 MHz input frequency
 8001242:	fba2 1203 	umull	r1, r2, r2, r3
 8001246:	0d12      	lsrs	r2, r2, #20
	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 8001248:	fbb3 f3f2 	udiv	r3, r3, r2
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	int plln = (int)(targetDivider + 0.5f);

	RCC->PLLCFGR |= (m - 1) << RCC_PLLCFGR_PLLM_Pos;
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <main+0x1d8>)
	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 8001256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	RCC->PLLCFGR |= (m - 1) << RCC_PLLCFGR_PLLM_Pos;
 800125a:	68d9      	ldr	r1, [r3, #12]
 800125c:	3a01      	subs	r2, #1
 800125e:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
 8001262:	60da      	str	r2, [r3, #12]

	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 8001264:	68da      	ldr	r2, [r3, #12]
	int plln = (int)(targetDivider + 0.5f);
 8001266:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		| static_cast<uint32_t>(_q) << RCC_PLLCFGR_PLLQ_Pos
		| static_cast<uint32_t>(_r) << RCC_PLLCFGR_PLLR_Pos
		| plln << RCC_PLLCFGR_PLLN_Pos;
 8001272:	ee17 1a90 	vmov	r1, s15
 8001276:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 800127a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800127e:	60da      	str	r2, [r3, #12]

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN;
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	f042 7288 	orr.w	r2, r2, #17825792	; 0x1100000
 8001286:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800128a:	60da      	str	r2, [r3, #12]
	RCC->CR |= RCC_CR_PLLON;
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001292:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	0194      	lsls	r4, r2, #6
 8001298:	d5fc      	bpl.n	8001294 <main+0x144>
pllClk ClockManager::updatePll()
{
	pllClk pllClocks = {0, 0, 0, 0};
	uint32_t sourceFreq;

	if(!(RCC->CR & RCC_CR_PLLRDY))
 800129a:	681c      	ldr	r4, [r3, #0]
 800129c:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
 80012a0:	d054      	beq.n	800134c <main+0x1fc>
		return pllClocks;

	if (RCC->CR & RCC_CR_HSERDY)
 80012a2:	6819      	ldr	r1, [r3, #0]
		sourceFreq = hseClock;
	else
		sourceFreq = hsiClock;

    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012a4:	4820      	ldr	r0, [pc, #128]	; (8001328 <main+0x1d8>)
		sourceFreq = hsiClock;
 80012a6:	4a26      	ldr	r2, [pc, #152]	; (8001340 <main+0x1f0>)
 80012a8:	4b23      	ldr	r3, [pc, #140]	; (8001338 <main+0x1e8>)
	if(targetFreq > coreClock)
 80012aa:	4d26      	ldr	r5, [pc, #152]	; (8001344 <main+0x1f4>)
		sourceFreq = hsiClock;
 80012ac:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80012b0:	bf08      	it	eq
 80012b2:	4613      	moveq	r3, r2
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012b4:	68c2      	ldr	r2, [r0, #12]
	if(targetFreq > coreClock)
 80012b6:	682e      	ldr	r6, [r5, #0]
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
    pllClocks.internal = sourceFreq * finalMult;
 80012b8:	ee07 3a90 	vmov	s15, r3
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012bc:	68c3      	ldr	r3, [r0, #12]
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 80012be:	68c1      	ldr	r1, [r0, #12]
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012c0:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllClocks.internal = sourceFreq * finalMult;
 80012c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012cc:	ee07 2a90 	vmov	s15, r2
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012d0:	3301      	adds	r3, #1
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80012de:	68c3      	ldr	r3, [r0, #12]
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80012e0:	68c4      	ldr	r4, [r0, #12]
	pllClock = updatePll();
 80012e2:	4819      	ldr	r0, [pc, #100]	; (8001348 <main+0x1f8>)
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012e4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80012e8:	f3c4 6441 	ubfx	r4, r4, #25, #2
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80012ec:	f3c3 5341 	ubfx	r3, r3, #21, #2
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80012f0:	3401      	adds	r4, #1
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80012f2:	3301      	adds	r3, #1
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80012f4:	0064      	lsls	r4, r4, #1
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 80012f6:	0ec9      	lsrs	r1, r1, #27
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80012f8:	005b      	lsls	r3, r3, #1
    pllClocks.internal = sourceFreq * finalMult;
 80012fa:	ee66 7a07 	vmul.f32	s15, s12, s14
 80012fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001302:	ee17 2a90 	vmov	r2, s15
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 8001306:	fbb2 f4f4 	udiv	r4, r2, r4
	if(targetFreq > coreClock)
 800130a:	42a6      	cmp	r6, r4
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 800130c:	fbb2 f1f1 	udiv	r1, r2, r1
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
	pllClock = updatePll();
 8001314:	e9c0 2100 	strd	r2, r1, [r0]
 8001318:	e9c0 3402 	strd	r3, r4, [r0, #8]
	if(targetFreq > coreClock)
 800131c:	d21d      	bcs.n	800135a <main+0x20a>
		internalFreqUpdate(targetFreq);
 800131e:	4620      	mov	r0, r4
 8001320:	f7ff fb6e 	bl	8000a00 <_ZN12ClockManager18internalFreqUpdateEm>
 8001324:	e019      	b.n	800135a <main+0x20a>
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	2000001c 	.word	0x2000001c
 8001330:	04c4b400 	.word	0x04c4b400
 8001334:	4d989680 	.word	0x4d989680
 8001338:	016e3600 	.word	0x016e3600
 800133c:	431bde83 	.word	0x431bde83
 8001340:	00f42400 	.word	0x00f42400
 8001344:	20000008 	.word	0x20000008
 8001348:	200000d4 	.word	0x200000d4
	pllClock = updatePll();
 800134c:	4bb1      	ldr	r3, [pc, #708]	; (8001614 <main+0x4c4>)
	if(targetFreq > coreClock)
 800134e:	4db2      	ldr	r5, [pc, #712]	; (8001618 <main+0x4c8>)
	pllClock = updatePll();
 8001350:	e9c3 4400 	strd	r4, r4, [r3]
 8001354:	e9c3 4402 	strd	r4, r4, [r3, #8]
	if(targetFreq > coreClock)
 8001358:	682e      	ldr	r6, [r5, #0]
	RCC->CFGR = (RCC->CFGR & ~0x7) | static_cast<uint32_t>(_src);
 800135a:	4ab0      	ldr	r2, [pc, #704]	; (800161c <main+0x4cc>)
 800135c:	6893      	ldr	r3, [r2, #8]
 800135e:	f023 0307 	bic.w	r3, r3, #7
 8001362:	f043 0303 	orr.w	r3, r3, #3
 8001366:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != static_cast<uint32_t>(_src) << RCC_CFGR_SWS_Pos);
 8001368:	6893      	ldr	r3, [r2, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b0c      	cmp	r3, #12
 8001370:	d1fa      	bne.n	8001368 <main+0x218>
	if(targetFreq < coreClock)
 8001372:	42b4      	cmp	r4, r6
 8001374:	f0c0 849a 	bcc.w	8001cac <main+0xb5c>
    return result;
}

void ClockManager::enableClk(volatile uint32_t &_reg, uint32_t _bits)
{
	_reg |= _bits;
 8001378:	4ba8      	ldr	r3, [pc, #672]	; (800161c <main+0x4cc>)
	coreClock = targetFreq;
 800137a:	602c      	str	r4, [r5, #0]
	_reg |= _bits;
 800137c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800137e:	f042 0210 	orr.w	r2, r2, #16
 8001382:	659a      	str	r2, [r3, #88]	; 0x58
	while((_reg & _bits) != _bits)
 8001384:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001386:	06d0      	lsls	r0, r2, #27
 8001388:	d5fc      	bpl.n	8001384 <main+0x234>
	int prescaler = timerClock / 1000000;
 800138a:	4ba5      	ldr	r3, [pc, #660]	; (8001620 <main+0x4d0>)
 800138c:	4aa5      	ldr	r2, [pc, #660]	; (8001624 <main+0x4d4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	0c9b      	lsrs	r3, r3, #18
	TIM6->PSC = prescaler - 1;
 8001396:	4aa4      	ldr	r2, [pc, #656]	; (8001628 <main+0x4d8>)
 8001398:	3b01      	subs	r3, #1
 800139a:	6293      	str	r3, [r2, #40]	; 0x28
	TIM6->ARR = 0x0FFF;
 800139c:	f640 73ff 	movw	r3, #4095	; 0xfff
 80013a0:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM6->CR1 = TIM_CR1_CEN;
 80013a2:	2301      	movs	r3, #1
 80013a4:	6013      	str	r3, [r2, #0]
    SysTick_Config(coreClock / 1000);
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	4aa0      	ldr	r2, [pc, #640]	; (800162c <main+0x4dc>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	3b01      	subs	r3, #1
 80013b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b6:	d20a      	bcs.n	80013ce <main+0x27e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	499c      	ldr	r1, [pc, #624]	; (8001630 <main+0x4e0>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	23f0      	movs	r3, #240	; 0xf0
 80013c2:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c6:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c8:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ca:	6191      	str	r1, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013cc:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ce:	4f99      	ldr	r7, [pc, #612]	; (8001634 <main+0x4e4>)
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; 
 80013d0:	4c92      	ldr	r4, [pc, #584]	; (800161c <main+0x4cc>)
 80013d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	65a3      	str	r3, [r4, #88]	; 0x58
	TIM2->PSC = 15; // 160000000/16 = 10000000 Hz
 80013e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013e4:	220f      	movs	r2, #15
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 49999; // 10000000/4999 = 2000 Hz
 80013e8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 10;
 80013ee:	220a      	movs	r2, #10
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2 -> DIER |= TIM_DIER_UIE; // update interrupt enable
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	f042 0201 	orr.w	r2, r2, #1
 80013f8:	60da      	str	r2, [r3, #12]
	TIM2->CR1  |= TIM_CR1_ARPE;
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001400:	601a      	str	r2, [r3, #0]
	TIM2->CR1  |= TIM_CR1_CEN;	
 8001402:	6819      	ldr	r1, [r3, #0]
	adcChannelNumbers_t adc1Channels[3] = {1, 8, 9};
 8001404:	4a8c      	ldr	r2, [pc, #560]	; (8001638 <main+0x4e8>)
	TIM2->CR1  |= TIM_CR1_CEN;	
 8001406:	f041 0101 	orr.w	r1, r1, #1
 800140a:	6019      	str	r1, [r3, #0]
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 800140c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001410:	910e      	str	r1, [sp, #56]	; 0x38
	adcChannelNumbers_t adc1Channels[3] = {1, 8, 9};
 8001412:	ca07      	ldmia	r2, {r0, r1, r2}
 8001414:	ab0b      	add	r3, sp, #44	; 0x2c
 8001416:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 800141a:	f04f 0901 	mov.w	r9, #1
 800141e:	2500      	movs	r5, #0
 8001420:	2603      	movs	r6, #3
 8001422:	f04f 0a09 	mov.w	sl, #9
	adc_init(&adc);
 8001426:	a80e      	add	r0, sp, #56	; 0x38
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 8001428:	9310      	str	r3, [sp, #64]	; 0x40
 800142a:	9511      	str	r5, [sp, #68]	; 0x44
 800142c:	9513      	str	r5, [sp, #76]	; 0x4c
 800142e:	960f      	str	r6, [sp, #60]	; 0x3c
 8001430:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
 8001434:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
	adc_init(&adc);
 8001438:	f7ff fcc4 	bl	8000dc4 <adc_init.constprop.0.isra.0>
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 800143c:	4b7f      	ldr	r3, [pc, #508]	; (800163c <main+0x4ec>)
 800143e:	9314      	str	r3, [sp, #80]	; 0x50
 8001440:	ab08      	add	r3, sp, #32
	adcChannelNumbers_t adc2Channels[2] = {14 ,12};
 8001442:	220e      	movs	r2, #14
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 8001444:	f04f 0b02 	mov.w	fp, #2
 8001448:	9316      	str	r3, [sp, #88]	; 0x58
	adc_init(&adc2);
 800144a:	a814      	add	r0, sp, #80	; 0x50
	adcChannelNumbers_t adc2Channels[2] = {14 ,12};
 800144c:	230c      	movs	r3, #12
 800144e:	e9cd 2308 	strd	r2, r3, [sp, #32]
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 8001452:	9517      	str	r5, [sp, #92]	; 0x5c
 8001454:	e9cd a518 	strd	sl, r5, [sp, #96]	; 0x60
 8001458:	f88d 905c 	strb.w	r9, [sp, #92]	; 0x5c
 800145c:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
	adc_init(&adc2);
 8001460:	f7ff fcb0 	bl	8000dc4 <adc_init.constprop.0.isra.0>
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 8001464:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	DMA1_Channel2->CPAR = (uint32_t) &(ADC2->DR);
 8001466:	4a76      	ldr	r2, [pc, #472]	; (8001640 <main+0x4f0>)
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 8001468:	f043 0305 	orr.w	r3, r3, #5
 800146c:	64a3      	str	r3, [r4, #72]	; 0x48
	DMAMUX1_Channel1->CCR = 36; // dma request from ADC2
 800146e:	4b75      	ldr	r3, [pc, #468]	; (8001644 <main+0x4f4>)
 8001470:	2124      	movs	r1, #36	; 0x24
 8001472:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
	DMA1_Channel2-> CCR = 0b01<<DMA_CCR_MSIZE_Pos | 0b10<<DMA_CCR_PSIZE_Pos | DMA_CCR_MINC | DMA_CCR_CIRC ; // 16 bit memory size, 32 bit peripheral size, memory increment mode, circular mode, transfer complete interrupt enable
 8001476:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
 800147a:	61d9      	str	r1, [r3, #28]
	DMA1_Channel2->CPAR = (uint32_t) &(ADC2->DR);
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
	DMA1_Channel2->CMAR = (uint32_t) Adc2DmaReadings;
 800147e:	4a72      	ldr	r2, [pc, #456]	; (8001648 <main+0x4f8>)
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
	DMA1_Channel2->CNDTR = 2;
 8001482:	f8c3 b020 	str.w	fp, [r3, #32]
	DMA1_Channel2->CCR |= DMA_CCR_EN;
 8001486:	69da      	ldr	r2, [r3, #28]
 8001488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148c:	ea42 0209 	orr.w	r2, r2, r9
 8001490:	61da      	str	r2, [r3, #28]
 8001492:	6039      	str	r1, [r7, #0]
	DMAMUX1_Channel4->CCR = 5;
 8001494:	2105      	movs	r1, #5
 8001496:	f8c3 1810 	str.w	r1, [r3, #2064]	; 0x810
	DMA1_Channel5->CPAR = (uint32_t) &(ADC1->DR);
 800149a:	4a6c      	ldr	r2, [pc, #432]	; (800164c <main+0x4fc>)
	DMA1_Channel5-> CCR = 0b01<<DMA_CCR_MSIZE_Pos | 0b10<<DMA_CCR_PSIZE_Pos | DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_TCIE; // 16 bit memory size, 32 bit peripheral size, memory increment mode, circular mode, transfer complete interrupt enable
 800149c:	f240 61a2 	movw	r1, #1698	; 0x6a2
 80014a0:	6599      	str	r1, [r3, #88]	; 0x58
	DMA1_Channel5->CPAR = (uint32_t) &(ADC1->DR);
 80014a2:	661a      	str	r2, [r3, #96]	; 0x60
	DMA1_Channel5->CMAR = (uint32_t) AdcDmaReadings;
 80014a4:	4a6a      	ldr	r2, [pc, #424]	; (8001650 <main+0x500>)
 80014a6:	665a      	str	r2, [r3, #100]	; 0x64
	DMA1_Channel5->CNDTR = 3;
 80014a8:	65de      	str	r6, [r3, #92]	; 0x5c
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 80014aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014ac:	ea42 0209 	orr.w	r2, r2, r9
 80014b0:	659a      	str	r2, [r3, #88]	; 0x58
	RCC->AHB2ENR |=RCC_AHB2ENR_DAC1EN;
 80014b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	64e3      	str	r3, [r4, #76]	; 0x4c
	DAC1->CR |= DAC_CR_EN1;
 80014ba:	4b66      	ldr	r3, [pc, #408]	; (8001654 <main+0x504>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	ea42 0209 	orr.w	r2, r2, r9
 80014c2:	601a      	str	r2, [r3, #0]
	while (!(DAC1->CR & DAC_CR_EN1));
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	f012 0201 	ands.w	r2, r2, #1
 80014ca:	9206      	str	r2, [sp, #24]
 80014cc:	d0fa      	beq.n	80014c4 <main+0x374>
	// int i, j=0;
	static uint32_t prevMotorState=0;
	float offsetAngle = 0;
	//initSysTick();	
	Init();  
	pidUq.Init();
 80014ce:	4c62      	ldr	r4, [pc, #392]	; (8001658 <main+0x508>)
	DAC1->DHR12R1 = 4095;
 80014d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80014d4:	609a      	str	r2, [r3, #8]
	pidUq.Init();
 80014d6:	4620      	mov	r0, r4
	pidUq.SetOutputLimits(-1,1);
 80014d8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80014dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	pidUq.Init();
 80014e0:	f7ff fada 	bl	8000a98 <_ZN3PID4InitEv>
	pidUq.SetOutputLimits(-1,1);
 80014e4:	f7ff faf2 	bl	8000acc <_ZN3PID15SetOutputLimitsEff>
	if (newAuto && !_inAuto)
 80014e8:	7863      	ldrb	r3, [r4, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 83db 	beq.w	8001ca6 <main+0xb56>
	pidUq.SetMode(PIDMode_TypeDef::_PID_MODE_AUTOMATIC);

	pidUd.Init();
 80014f0:	495a      	ldr	r1, [pc, #360]	; (800165c <main+0x50c>)
	_inAuto = (PIDMode_TypeDef)newAuto;
 80014f2:	2301      	movs	r3, #1
 80014f4:	4608      	mov	r0, r1
	pidUd.SetOutputLimits(-1,1);
 80014f6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80014fa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80014fe:	7063      	strb	r3, [r4, #1]
	pidUd.Init();
 8001500:	f7ff faca 	bl	8000a98 <_ZN3PID4InitEv>
	pidUd.SetOutputLimits(-1,1);
 8001504:	f7ff fae2 	bl	8000acc <_ZN3PID15SetOutputLimitsEff>
	if (newAuto && !_inAuto)
 8001508:	784b      	ldrb	r3, [r1, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 83c8 	beq.w	8001ca0 <main+0xb50>
	_inAuto = (PIDMode_TypeDef)newAuto;
 8001510:	2301      	movs	r3, #1
 8001512:	704b      	strb	r3, [r1, #1]
		// 	}

	
		

		if(milis-lastPrintTime>=serialPrintInterval)
 8001514:	4b52      	ldr	r3, [pc, #328]	; (8001660 <main+0x510>)
			// // //static uint16_t filteredAngle;
			// // //filteredAngle += 0.8f * (Adc2DmaReadings[0] - filteredAngle);
			// // //uart.print(filteredAngle);
			// uart.print(",");
			uart.print("angleADC:");
			uart.println(Adc2DmaReadings[0]/11.21111111f);
 8001516:	ed9f 8a53 	vldr	s16, [pc, #332]	; 8001664 <main+0x514>
		if(milis-lastPrintTime>=serialPrintInterval)
 800151a:	f8d3 a000 	ldr.w	sl, [r3]
 800151e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8001694 <main+0x544>
 8001522:	4f51      	ldr	r7, [pc, #324]	; (8001668 <main+0x518>)
					motor.Udq_pu[1] = 0;
 8001524:	eddf 8a51 	vldr	s17, [pc, #324]	; 800166c <main+0x51c>
		if (milis-motorProcessLastTime>=slopeInterval)
 8001528:	4654      	mov	r4, sl
 800152a:	f04f 0b00 	mov.w	fp, #0
 800152e:	46c2      	mov	sl, r8
 8001530:	494f      	ldr	r1, [pc, #316]	; (8001670 <main+0x520>)
 8001532:	f899 c00b 	ldrb.w	ip, [r9, #11]
 8001536:	f8d1 e000 	ldr.w	lr, [r1]
 800153a:	494e      	ldr	r1, [pc, #312]	; (8001674 <main+0x524>)
 800153c:	f899 300a 	ldrb.w	r3, [r9, #10]
 8001540:	6808      	ldr	r0, [r1, #0]
 8001542:	494d      	ldr	r1, [pc, #308]	; (8001678 <main+0x528>)
 8001544:	6809      	ldr	r1, [r1, #0]
 8001546:	9101      	str	r1, [sp, #4]
 8001548:	494c      	ldr	r1, [pc, #304]	; (800167c <main+0x52c>)
 800154a:	6809      	ldr	r1, [r1, #0]
 800154c:	9100      	str	r1, [sp, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	494b      	ldr	r1, [pc, #300]	; (8001680 <main+0x530>)
 8001552:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001556:	e9cd 2204 	strd	r2, r2, [sp, #16]
 800155a:	6809      	ldr	r1, [r1, #0]
 800155c:	4666      	mov	r6, ip
 800155e:	4690      	mov	r8, r2
 8001560:	46a4      	mov	ip, r4

public:
	char buffer [bSize];
	bool empty()
	{
		if (tail==head) 
 8001562:	f899 500d 	ldrb.w	r5, [r9, #13]
 8001566:	f899 400c 	ldrb.w	r4, [r9, #12]
 800156a:	42a5      	cmp	r5, r4
 800156c:	d029      	beq.n	80015c2 <main+0x472>
bool Serial::readTillEOL (char *_line) // returns 1 if EOL is found, 0 if not, when EOL is found save read data to _line
{
	if (uart.available())
	{		
		
		if(count==0)
 800156e:	b933      	cbnz	r3, 800157e <main+0x42e>
 8001570:	4c44      	ldr	r4, [pc, #272]	; (8001684 <main+0x534>)
 8001572:	1c65      	adds	r5, r4, #1
 8001574:	4435      	add	r5, r6
		{
				for (int i=0; i<=elementsToFlush; i++)
				{
					char* tempPtr =_line+i;
					*tempPtr = 0;				
 8001576:	f804 bb01 	strb.w	fp, [r4], #1
				for (int i=0; i<=elementsToFlush; i++)
 800157a:	42ac      	cmp	r4, r5
 800157c:	d1fb      	bne.n	8001576 <main+0x426>
	return Buffer::status::ok;
	
}
	status read(char* _data)
	{
	if (tail==head) 
 800157e:	f899 500d 	ldrb.w	r5, [r9, #13]
 8001582:	f899 400c 	ldrb.w	r4, [r9, #12]
 8001586:	42a5      	cmp	r5, r4
 8001588:	d010      	beq.n	80015ac <main+0x45c>
		return Buffer::status::bufferEmpty;
		
	*_data=buffer[tail];
 800158a:	f899 400d 	ldrb.w	r4, [r9, #13]
 800158e:	444c      	add	r4, r9
 8001590:	f894 a00e 	ldrb.w	sl, [r4, #14]
	tail++;
 8001594:	f899 400d 	ldrb.w	r4, [r9, #13]
 8001598:	3401      	adds	r4, #1
 800159a:	b2e4      	uxtb	r4, r4
 800159c:	f889 400d 	strb.w	r4, [r9, #13]

	if ( tail == (bSize-1) )
 80015a0:	f899 400d 	ldrb.w	r4, [r9, #13]
 80015a4:	2cff      	cmp	r4, #255	; 0xff
		tail = 0;
 80015a6:	bf08      	it	eq
 80015a8:	f889 b00d 	strbeq.w	fp, [r9, #13]
				}							
		}		

		char c = uart.readChar();
		if (c == '\n')
 80015ac:	f1ba 0f0a 	cmp.w	sl, #10
		{
			//GPIOA->ODR ^= GPIO_ODR_OD5;
			_line+=count;
			*_line=0;
 80015b0:	4c34      	ldr	r4, [pc, #208]	; (8001684 <main+0x534>)
		if (c == '\n')
 80015b2:	f000 81e4 	beq.w	800197e <main+0x82e>
			return 1;
		}
		else
		{
			_line+=count;
			*_line=c;
 80015b6:	f804 a003 	strb.w	sl, [r4, r3]
			count++;
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f04f 0801 	mov.w	r8, #1
 80015c2:	683c      	ldr	r4, [r7, #0]
 80015c4:	9d00      	ldr	r5, [sp, #0]
 80015c6:	1a24      	subs	r4, r4, r0
 80015c8:	42ac      	cmp	r4, r5
 80015ca:	d317      	bcc.n	80015fc <main+0x4ac>
			if (!motorState)
 80015cc:	9a01      	ldr	r2, [sp, #4]
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	f000 81c7 	beq.w	8001962 <main+0x812>
				if (prevMotorState == 0)
 80015d4:	2900      	cmp	r1, #0
 80015d6:	f000 8347 	beq.w	8001c68 <main+0xb18>
				if ((motorSpeed <setMotorSpeed))
 80015da:	482b      	ldr	r0, [pc, #172]	; (8001688 <main+0x538>)
 80015dc:	4a2b      	ldr	r2, [pc, #172]	; (800168c <main+0x53c>)
 80015de:	6801      	ldr	r1, [r0, #0]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4291      	cmp	r1, r2
 80015e4:	f080 8314 	bcs.w	8001c10 <main+0xac0>
					motorSpeed++;			
 80015e8:	6802      	ldr	r2, [r0, #0]
 80015ea:	3201      	adds	r2, #1
 80015ec:	6002      	str	r2, [r0, #0]
				prevMotorState = 1;
 80015ee:	9906      	ldr	r1, [sp, #24]
			TIM2loopFlag = false;
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <main+0x540>)
 80015f2:	f882 b000 	strb.w	fp, [r2]
			motorProcessLastTime = milis;
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	9202      	str	r2, [sp, #8]
		if(milis-lastPrintTime>=serialPrintInterval)
 80015fc:	683c      	ldr	r4, [r7, #0]
 80015fe:	eba4 040c 	sub.w	r4, r4, ip
 8001602:	4574      	cmp	r4, lr
 8001604:	d3ad      	bcc.n	8001562 <main+0x412>
 8001606:	46b4      	mov	ip, r6
 8001608:	2a00      	cmp	r2, #0
 800160a:	d045      	beq.n	8001698 <main+0x548>
 800160c:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <main+0x530>)
 800160e:	6011      	str	r1, [r2, #0]
 8001610:	e042      	b.n	8001698 <main+0x548>
 8001612:	bf00      	nop
 8001614:	200000d4 	.word	0x200000d4
 8001618:	20000008 	.word	0x20000008
 800161c:	40021000 	.word	0x40021000
 8001620:	2000000c 	.word	0x2000000c
 8001624:	431bde83 	.word	0x431bde83
 8001628:	40001000 	.word	0x40001000
 800162c:	10624dd3 	.word	0x10624dd3
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	e000e100 	.word	0xe000e100
 8001638:	080030f4 	.word	0x080030f4
 800163c:	50000100 	.word	0x50000100
 8001640:	50000140 	.word	0x50000140
 8001644:	40020000 	.word	0x40020000
 8001648:	200000e8 	.word	0x200000e8
 800164c:	50000040 	.word	0x50000040
 8001650:	200000ec 	.word	0x200000ec
 8001654:	50000800 	.word	0x50000800
 8001658:	20000304 	.word	0x20000304
 800165c:	200002c4 	.word	0x200002c4
 8001660:	200000f4 	.word	0x200000f4
 8001664:	3db6ad09 	.word	0x3db6ad09
 8001668:	20000174 	.word	0x20000174
 800166c:	00000000 	.word	0x00000000
 8001670:	20000010 	.word	0x20000010
 8001674:	20000170 	.word	0x20000170
 8001678:	2000017c 	.word	0x2000017c
 800167c:	2000016c 	.word	0x2000016c
 8001680:	20000168 	.word	0x20000168
 8001684:	20000180 	.word	0x20000180
 8001688:	20000164 	.word	0x20000164
 800168c:	20000014 	.word	0x20000014
 8001690:	200000f8 	.word	0x200000f8
 8001694:	200001b4 	.word	0x200001b4
 8001698:	9a03      	ldr	r2, [sp, #12]
 800169a:	2a00      	cmp	r2, #0
 800169c:	f040 82f6 	bne.w	8001c8c <main+0xb3c>
 80016a0:	9a02      	ldr	r2, [sp, #8]
 80016a2:	b10a      	cbz	r2, 80016a8 <main+0x558>
 80016a4:	4a94      	ldr	r2, [pc, #592]	; (80018f8 <main+0x7a8>)
 80016a6:	6010      	str	r0, [r2, #0]
 80016a8:	9a05      	ldr	r2, [sp, #20]
 80016aa:	b112      	cbz	r2, 80016b2 <main+0x562>
 80016ac:	4a93      	ldr	r2, [pc, #588]	; (80018fc <main+0x7ac>)
 80016ae:	9901      	ldr	r1, [sp, #4]
 80016b0:	6011      	str	r1, [r2, #0]
 80016b2:	9a04      	ldr	r2, [sp, #16]
 80016b4:	b10a      	cbz	r2, 80016ba <main+0x56a>
 80016b6:	f889 c00b 	strb.w	ip, [r9, #11]
 80016ba:	f1b8 0f00 	cmp.w	r8, #0
 80016be:	d001      	beq.n	80016c4 <main+0x574>
 80016c0:	f889 300a 	strb.w	r3, [r9, #10]
	I2Cx->CR1 |= I2C_CR1_PE; // Enable I2C2 peripheral
}

void I2C::sendByte(uint8_t *_byte, uint8_t _address)
{
	I2Cx->CR2 &= ~(0x1FFFF << 10);
 80016c4:	4b8e      	ldr	r3, [pc, #568]	; (8001900 <main+0x7b0>)
 80016c6:	4a8f      	ldr	r2, [pc, #572]	; (8001904 <main+0x7b4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	400a      	ands	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= I2C_CR2_AUTOEND;
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80016d6:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 = _address<<1;
 80016d8:	226c      	movs	r2, #108	; 0x6c
 80016da:	605a      	str	r2, [r3, #4]
	I2Cx ->CR2 |= 1<<I2C_CR2_NBYTES_Pos; 
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016e2:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_START; 
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016ea:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))); // check if TXDR is empty
 80016ec:	699a      	ldr	r2, [r3, #24]
 80016ee:	f012 0f12 	tst.w	r2, #18
 80016f2:	d0fb      	beq.n	80016ec <main+0x59c>
	I2Cx->TXDR = *_byte; // Send data to I2C
 80016f4:	220e      	movs	r2, #14
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(I2Cx->ISR & I2C_ISR_TC));
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	0651      	lsls	r1, r2, #25
 80016fc:	d5fc      	bpl.n	80016f8 <main+0x5a8>
	//I2Cx->CR2 |= I2C_CR2_STOP; // Generate stop condition //nie trzxa
}

uint8_t I2C::recieveByte (uint8_t _address)
{
	I2Cx -> CR2 = _address<<1;
 80016fe:	226c      	movs	r2, #108	; 0x6c
 8001700:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= 1 << I2C_CR2_NBYTES_Pos; 
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001708:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_RD_WRN | I2C_CR2_START;
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001710:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & I2C_ISR_RXNE)); 
 8001712:	699a      	ldr	r2, [r3, #24]
 8001714:	0752      	lsls	r2, r2, #29
 8001716:	d5fc      	bpl.n	8001712 <main+0x5c2>
	uint8_t recievedByte = I2Cx->RXDR;
 8001718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	I2Cx -> CR2 = _address<<1;
 800171a:	226c      	movs	r2, #108	; 0x6c
 800171c:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= 1 << I2C_CR2_NBYTES_Pos; 
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001724:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_RD_WRN | I2C_CR2_START;
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800172c:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & I2C_ISR_RXNE)); 
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	0756      	lsls	r6, r2, #29
 8001732:	d5fc      	bpl.n	800172e <main+0x5de>
	USARTx->TDR = _char;
 8001734:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001738:	4973      	ldr	r1, [pc, #460]	; (8001908 <main+0x7b8>)
	uint8_t recievedByte = I2Cx->RXDR;
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	while (*_string)
 800173c:	2374      	movs	r3, #116	; 0x74
	USARTx->TDR = _char;
 800173e:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001740:	69d3      	ldr	r3, [r2, #28]
 8001742:	065d      	lsls	r5, r3, #25
 8001744:	d5fc      	bpl.n	8001740 <main+0x5f0>
	while (*_string)
 8001746:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f7      	bne.n	800173e <main+0x5ee>
			uart.print((int)milis);
 800174e:	6838      	ldr	r0, [r7, #0]
 8001750:	f7ff f9ec 	bl	8000b2c <_ZN6Serial5printEi.constprop.0>
	USARTx->TDR = _char;
 8001754:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001758:	222c      	movs	r2, #44	; 0x2c
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800175c:	69da      	ldr	r2, [r3, #28]
 800175e:	0654      	lsls	r4, r2, #25
 8001760:	d5fc      	bpl.n	800175c <main+0x60c>
 8001762:	496a      	ldr	r1, [pc, #424]	; (800190c <main+0x7bc>)
	while (*_string)
 8001764:	2273      	movs	r2, #115	; 0x73
	USARTx->TDR = _char;
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	0650      	lsls	r0, r2, #25
 800176c:	d5fc      	bpl.n	8001768 <main+0x618>
	while (*_string)
 800176e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001772:	2a00      	cmp	r2, #0
 8001774:	d1f7      	bne.n	8001766 <main+0x616>
			uart.print((int)motorSpeed);
 8001776:	4b66      	ldr	r3, [pc, #408]	; (8001910 <main+0x7c0>)
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	f7ff f9d7 	bl	8000b2c <_ZN6Serial5printEi.constprop.0>
	USARTx->TDR = _char;
 800177e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001782:	222c      	movs	r2, #44	; 0x2c
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001786:	69da      	ldr	r2, [r3, #28]
 8001788:	0652      	lsls	r2, r2, #25
 800178a:	d5fc      	bpl.n	8001786 <main+0x636>
 800178c:	4961      	ldr	r1, [pc, #388]	; (8001914 <main+0x7c4>)
	while (*_string)
 800178e:	2266      	movs	r2, #102	; 0x66
	USARTx->TDR = _char;
 8001790:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	0656      	lsls	r6, r2, #25
 8001796:	d5fc      	bpl.n	8001792 <main+0x642>
	while (*_string)
 8001798:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800179c:	2a00      	cmp	r2, #0
 800179e:	d1f7      	bne.n	8001790 <main+0x640>
	typeConverter::fractionalToString(_number, charTab, _percision);
 80017a0:	4b5d      	ldr	r3, [pc, #372]	; (8001918 <main+0x7c8>)
	char charTab[20]={};
 80017a2:	9218      	str	r2, [sp, #96]	; 0x60
	typeConverter::fractionalToString(_number, charTab, _percision);
 80017a4:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
 80017a8:	a814      	add	r0, sp, #80	; 0x50
	char charTab[20]={};
 80017aa:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 80017ae:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
	typeConverter::fractionalToString(_number, charTab, _percision);
 80017b2:	f7ff fa25 	bl	8000c00 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0>
	while (*_string)
 80017b6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
	USARTx->TDR = _char;
 80017ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
	while (*_string)
 80017be:	b142      	cbz	r2, 80017d2 <main+0x682>
	USARTx->TDR = _char;
 80017c0:	a914      	add	r1, sp, #80	; 0x50
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80017c4:	69da      	ldr	r2, [r3, #28]
 80017c6:	0655      	lsls	r5, r2, #25
 80017c8:	d5fc      	bpl.n	80017c4 <main+0x674>
	while (*_string)
 80017ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	d1f7      	bne.n	80017c2 <main+0x672>
	USARTx->TDR = _char;
 80017d2:	222c      	movs	r2, #44	; 0x2c
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80017d6:	69da      	ldr	r2, [r3, #28]
 80017d8:	0654      	lsls	r4, r2, #25
 80017da:	d5fc      	bpl.n	80017d6 <main+0x686>
 80017dc:	494f      	ldr	r1, [pc, #316]	; (800191c <main+0x7cc>)
	while (*_string)
 80017de:	2266      	movs	r2, #102	; 0x66
	USARTx->TDR = _char;
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	0650      	lsls	r0, r2, #25
 80017e6:	d5fc      	bpl.n	80017e2 <main+0x692>
	while (*_string)
 80017e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	d1f7      	bne.n	80017e0 <main+0x690>
	typeConverter::fractionalToString(_number, charTab, _percision);
 80017f0:	4b49      	ldr	r3, [pc, #292]	; (8001918 <main+0x7c8>)
	char charTab[20]={};
 80017f2:	9218      	str	r2, [sp, #96]	; 0x60
	typeConverter::fractionalToString(_number, charTab, _percision);
 80017f4:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
 80017f8:	a814      	add	r0, sp, #80	; 0x50
	char charTab[20]={};
 80017fa:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 80017fe:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
	typeConverter::fractionalToString(_number, charTab, _percision);
 8001802:	f7ff f9fd 	bl	8000c00 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0>
	while (*_string)
 8001806:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
	USARTx->TDR = _char;
 800180a:	f8d9 3004 	ldr.w	r3, [r9, #4]
	while (*_string)
 800180e:	b142      	cbz	r2, 8001822 <main+0x6d2>
	USARTx->TDR = _char;
 8001810:	a914      	add	r1, sp, #80	; 0x50
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	0652      	lsls	r2, r2, #25
 8001818:	d5fc      	bpl.n	8001814 <main+0x6c4>
	while (*_string)
 800181a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800181e:	2a00      	cmp	r2, #0
 8001820:	d1f7      	bne.n	8001812 <main+0x6c2>
	USARTx->TDR = _char;
 8001822:	222c      	movs	r2, #44	; 0x2c
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	0656      	lsls	r6, r2, #25
 800182a:	d5fc      	bpl.n	8001826 <main+0x6d6>
 800182c:	493c      	ldr	r1, [pc, #240]	; (8001920 <main+0x7d0>)
	while (*_string)
 800182e:	2249      	movs	r2, #73	; 0x49
	USARTx->TDR = _char;
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	0655      	lsls	r5, r2, #25
 8001836:	d5fc      	bpl.n	8001832 <main+0x6e2>
	while (*_string)
 8001838:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800183c:	2a00      	cmp	r2, #0
 800183e:	d1f7      	bne.n	8001830 <main+0x6e0>
			uart.print(AdcDmaReadings[0]);
 8001840:	4b38      	ldr	r3, [pc, #224]	; (8001924 <main+0x7d4>)
 8001842:	8818      	ldrh	r0, [r3, #0]
 8001844:	b280      	uxth	r0, r0
 8001846:	f7ff f971 	bl	8000b2c <_ZN6Serial5printEi.constprop.0>
	USARTx->TDR = _char;
 800184a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800184e:	222c      	movs	r2, #44	; 0x2c
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	0654      	lsls	r4, r2, #25
 8001856:	d5fc      	bpl.n	8001852 <main+0x702>
 8001858:	4933      	ldr	r1, [pc, #204]	; (8001928 <main+0x7d8>)
	while (*_string)
 800185a:	2249      	movs	r2, #73	; 0x49
	USARTx->TDR = _char;
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	0650      	lsls	r0, r2, #25
 8001862:	d5fc      	bpl.n	800185e <main+0x70e>
	while (*_string)
 8001864:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001868:	2a00      	cmp	r2, #0
 800186a:	d1f7      	bne.n	800185c <main+0x70c>
			uart.print(AdcDmaReadings[1]); 
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <main+0x7d4>)
 800186e:	8858      	ldrh	r0, [r3, #2]
 8001870:	b280      	uxth	r0, r0
 8001872:	f7ff f95b 	bl	8000b2c <_ZN6Serial5printEi.constprop.0>
	USARTx->TDR = _char;
 8001876:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800187a:	222c      	movs	r2, #44	; 0x2c
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	0652      	lsls	r2, r2, #25
 8001882:	d5fc      	bpl.n	800187e <main+0x72e>
 8001884:	4929      	ldr	r1, [pc, #164]	; (800192c <main+0x7dc>)
	while (*_string)
 8001886:	2249      	movs	r2, #73	; 0x49
	USARTx->TDR = _char;
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800188a:	69da      	ldr	r2, [r3, #28]
 800188c:	0656      	lsls	r6, r2, #25
 800188e:	d5fc      	bpl.n	800188a <main+0x73a>
	while (*_string)
 8001890:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001894:	2a00      	cmp	r2, #0
 8001896:	d1f7      	bne.n	8001888 <main+0x738>
			uart.print(AdcDmaReadings[2]);
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <main+0x7d4>)
 800189a:	8898      	ldrh	r0, [r3, #4]
 800189c:	b280      	uxth	r0, r0
 800189e:	f7ff f945 	bl	8000b2c <_ZN6Serial5printEi.constprop.0>
	USARTx->TDR = _char;
 80018a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018a6:	222c      	movs	r2, #44	; 0x2c
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80018aa:	69da      	ldr	r2, [r3, #28]
 80018ac:	0655      	lsls	r5, r2, #25
 80018ae:	d5fc      	bpl.n	80018aa <main+0x75a>
 80018b0:	491f      	ldr	r1, [pc, #124]	; (8001930 <main+0x7e0>)
	while (*_string)
 80018b2:	2261      	movs	r2, #97	; 0x61
	USARTx->TDR = _char;
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80018b6:	69da      	ldr	r2, [r3, #28]
 80018b8:	0654      	lsls	r4, r2, #25
 80018ba:	d5fc      	bpl.n	80018b6 <main+0x766>
	while (*_string)
 80018bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d1f7      	bne.n	80018b4 <main+0x764>
			uart.println(Adc2DmaReadings[0]/11.21111111f);
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <main+0x7e4>)
	char charTab[20]={};
 80018c6:	9218      	str	r2, [sp, #96]	; 0x60
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	typeConverter::fractionalToString(_number, charTab, _percision);
 80018d4:	a814      	add	r0, sp, #80	; 0x50
 80018d6:	ee20 0a08 	vmul.f32	s0, s0, s16
	char charTab[20]={};
 80018da:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 80018de:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
	typeConverter::fractionalToString(_number, charTab, _percision);
 80018e2:	f7ff f98d 	bl	8000c00 <_ZN13typeConverter18fractionalToStringEfPch.constprop.0>
	while (*_string)
 80018e6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
	USARTx->TDR = _char;
 80018ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
	while (*_string)
 80018ee:	b352      	cbz	r2, 8001946 <main+0x7f6>
	USARTx->TDR = _char;
 80018f0:	a914      	add	r1, sp, #80	; 0x50
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
 80018f4:	e020      	b.n	8001938 <main+0x7e8>
 80018f6:	bf00      	nop
 80018f8:	20000170 	.word	0x20000170
 80018fc:	2000017c 	.word	0x2000017c
 8001900:	200000e4 	.word	0x200000e4
 8001904:	f80003ff 	.word	0xf80003ff
 8001908:	08003100 	.word	0x08003100
 800190c:	0800310c 	.word	0x0800310c
 8001910:	20000164 	.word	0x20000164
 8001914:	08003114 	.word	0x08003114
 8001918:	200000fc 	.word	0x200000fc
 800191c:	08003120 	.word	0x08003120
 8001920:	0800312c 	.word	0x0800312c
 8001924:	200000ec 	.word	0x200000ec
 8001928:	08003130 	.word	0x08003130
 800192c:	08003134 	.word	0x08003134
 8001930:	08003138 	.word	0x08003138
 8001934:	200000e8 	.word	0x200000e8
	while(!(USARTx->ISR & USART_ISR_TC));
 8001938:	69da      	ldr	r2, [r3, #28]
 800193a:	0650      	lsls	r0, r2, #25
 800193c:	d5fc      	bpl.n	8001938 <main+0x7e8>
	while (*_string)
 800193e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001942:	2a00      	cmp	r2, #0
 8001944:	d1d5      	bne.n	80018f2 <main+0x7a2>
	USARTx->TDR = _char;
 8001946:	220a      	movs	r2, #10
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800194a:	69da      	ldr	r2, [r3, #28]
 800194c:	0652      	lsls	r2, r2, #25
 800194e:	d5fc      	bpl.n	800194a <main+0x7fa>
			// uart.print(angleEnc/11.375f);
			// uart.print(",");
			// uart.print("sumIabc:");
			// uart.println(motor.Iabc_A[0]+motor.Iabc_A[1]+motor.Iabc_A[2]);
			// led4.toggle();
			lastPrintTime = milis;		
 8001950:	4b9d      	ldr	r3, [pc, #628]	; (8001bc8 <main+0xa78>)
 8001952:	683c      	ldr	r4, [r7, #0]
 8001954:	601c      	str	r4, [r3, #0]
 8001956:	e5eb      	b.n	8001530 <main+0x3e0>
		if (milis-motorProcessLastTime>=slopeInterval)
 8001958:	2301      	movs	r3, #1
 800195a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800195e:	4698      	mov	r8, r3
			count=0;
 8001960:	2300      	movs	r3, #0
				if (prevMotorState)
 8001962:	2900      	cmp	r1, #0
 8001964:	f040 8168 	bne.w	8001c38 <main+0xae8>
				if (motorSpeed > 5)
 8001968:	4998      	ldr	r1, [pc, #608]	; (8001bcc <main+0xa7c>)
 800196a:	680a      	ldr	r2, [r1, #0]
 800196c:	2a05      	cmp	r2, #5
 800196e:	f240 815a 	bls.w	8001c26 <main+0xad6>
					motorSpeed--;
 8001972:	680a      	ldr	r2, [r1, #0]
 8001974:	3a01      	subs	r2, #1
 8001976:	600a      	str	r2, [r1, #0]
 8001978:	2100      	movs	r1, #0
 800197a:	9101      	str	r1, [sp, #4]
 800197c:	e638      	b.n	80015f0 <main+0x4a0>
			*_line=0;
 800197e:	f804 b003 	strb.w	fp, [r4, r3]
			if (UARTrxData[0] == '0')
 8001982:	7824      	ldrb	r4, [r4, #0]
 8001984:	2c30      	cmp	r4, #48	; 0x30
 8001986:	f000 810f 	beq.w	8001ba8 <main+0xa58>
			else if (UARTrxData[0] == '1')
 800198a:	3c31      	subs	r4, #49	; 0x31
 800198c:	2c46      	cmp	r4, #70	; 0x46
 800198e:	d857      	bhi.n	8001a40 <main+0x8f0>
 8001990:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001994:	005600fa 	.word	0x005600fa
 8001998:	00560056 	.word	0x00560056
 800199c:	00560056 	.word	0x00560056
 80019a0:	00560056 	.word	0x00560056
 80019a4:	00560056 	.word	0x00560056
 80019a8:	00560056 	.word	0x00560056
 80019ac:	00560056 	.word	0x00560056
 80019b0:	00560056 	.word	0x00560056
 80019b4:	00560056 	.word	0x00560056
 80019b8:	00560056 	.word	0x00560056
 80019bc:	00560056 	.word	0x00560056
 80019c0:	00560056 	.word	0x00560056
 80019c4:	00560056 	.word	0x00560056
 80019c8:	00560056 	.word	0x00560056
 80019cc:	00560056 	.word	0x00560056
 80019d0:	00560056 	.word	0x00560056
 80019d4:	00560056 	.word	0x00560056
 80019d8:	00560056 	.word	0x00560056
 80019dc:	00560056 	.word	0x00560056
 80019e0:	00560056 	.word	0x00560056
 80019e4:	00560056 	.word	0x00560056
 80019e8:	00560056 	.word	0x00560056
 80019ec:	00560056 	.word	0x00560056
 80019f0:	00560056 	.word	0x00560056
 80019f4:	00560056 	.word	0x00560056
 80019f8:	00d70056 	.word	0x00d70056
 80019fc:	00560056 	.word	0x00560056
 8001a00:	00560056 	.word	0x00560056
 8001a04:	00560056 	.word	0x00560056
 8001a08:	00560056 	.word	0x00560056
 8001a0c:	005600cd 	.word	0x005600cd
 8001a10:	00c30056 	.word	0x00c30056
 8001a14:	005600ab 	.word	0x005600ab
 8001a18:	008500a6 	.word	0x008500a6
 8001a1c:	00660056 	.word	0x00660056
 8001a20:	005c      	.short	0x005c
			else if (*_string == '-')
 8001a22:	2d2d      	cmp	r5, #45	; 0x2d
 8001a24:	f000 80e5 	beq.w	8001bf2 <main+0xaa2>
		if (negative)
 8001a28:	9d04      	ldr	r5, [sp, #16]
 8001a2a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8001a2e:	b105      	cbz	r5, 8001a32 <main+0x8e2>
			return -number;
 8001a30:	4264      	negs	r4, r4
					setiQ = typeConverter::stringToInt(UARTrxData+1);
 8001a32:	ee07 4a90 	vmov	s15, r4
 8001a36:	4c66      	ldr	r4, [pc, #408]	; (8001bd0 <main+0xa80>)
 8001a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3c:	edc4 7a00 	vstr	s15, [r4]
			elementsToFlush=count;
 8001a40:	461e      	mov	r6, r3
 8001a42:	2301      	movs	r3, #1
 8001a44:	9304      	str	r3, [sp, #16]
 8001a46:	4698      	mov	r8, r3
			count=0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e5ba      	b.n	80015c2 <main+0x472>
					setMotorSpeed -= 5;
 8001a4c:	4d61      	ldr	r5, [pc, #388]	; (8001bd4 <main+0xa84>)
 8001a4e:	682c      	ldr	r4, [r5, #0]
			elementsToFlush=count;
 8001a50:	461e      	mov	r6, r3
 8001a52:	3c05      	subs	r4, #5
 8001a54:	2301      	movs	r3, #1
 8001a56:	9304      	str	r3, [sp, #16]
 8001a58:	4698      	mov	r8, r3
 8001a5a:	602c      	str	r4, [r5, #0]
			count=0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	e5b0      	b.n	80015c2 <main+0x472>
		while (*_string && isNumber) 
 8001a60:	4c5d      	ldr	r4, [pc, #372]	; (8001bd8 <main+0xa88>)
 8001a62:	7864      	ldrb	r4, [r4, #1]
		int number = 0;
 8001a64:	4625      	mov	r5, r4
		while (*_string && isNumber) 
 8001a66:	b1bc      	cbz	r4, 8001a98 <main+0x948>
       	bool negative = false;
 8001a68:	2500      	movs	r5, #0
		while (*_string && isNumber) 
 8001a6a:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8001be4 <main+0xa94>
       	bool negative = false;
 8001a6e:	9504      	str	r5, [sp, #16]
		int number = 0;
 8001a70:	f8cd c01c 	str.w	ip, [sp, #28]
			int digit = *_string - '0';
 8001a74:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
			if (digit>=0 && digit<=9)			
 8001a78:	2e09      	cmp	r6, #9
				number = number * 10 + digit;
 8001a7a:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
			if (digit>=0 && digit<=9)			
 8001a7e:	f200 80bb 	bhi.w	8001bf8 <main+0xaa8>
				number = number * 10 + digit;
 8001a82:	eb06 054c 	add.w	r5, r6, ip, lsl #1
		while (*_string && isNumber) 
 8001a86:	f818 4f01 	ldrb.w	r4, [r8, #1]!
 8001a8a:	2c00      	cmp	r4, #0
 8001a8c:	d1f2      	bne.n	8001a74 <main+0x924>
		if (negative)
 8001a8e:	9c04      	ldr	r4, [sp, #16]
 8001a90:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8001a94:	b104      	cbz	r4, 8001a98 <main+0x948>
			return -number;
 8001a96:	426d      	negs	r5, r5
					setMotorSpeed = typeConverter::stringToInt(UARTrxData+1);
 8001a98:	4c4e      	ldr	r4, [pc, #312]	; (8001bd4 <main+0xa84>)
 8001a9a:	6025      	str	r5, [r4, #0]
 8001a9c:	e7d0      	b.n	8001a40 <main+0x8f0>
		while (*_string && isNumber) 
 8001a9e:	4c4e      	ldr	r4, [pc, #312]	; (8001bd8 <main+0xa88>)
 8001aa0:	7864      	ldrb	r4, [r4, #1]
		int number = 0;
 8001aa2:	46a6      	mov	lr, r4
		while (*_string && isNumber) 
 8001aa4:	b1ac      	cbz	r4, 8001ad2 <main+0x982>
       	bool negative = false;
 8001aa6:	2500      	movs	r5, #0
		while (*_string && isNumber) 
 8001aa8:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8001be4 <main+0xa94>
       	bool negative = false;
 8001aac:	9503      	str	r5, [sp, #12]
		int number = 0;
 8001aae:	46ae      	mov	lr, r5
			int digit = *_string - '0';
 8001ab0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
			if (digit>=0 && digit<=9)			
 8001ab4:	2d09      	cmp	r5, #9
				number = number * 10 + digit;
 8001ab6:	eb0e 068e 	add.w	r6, lr, lr, lsl #2
			if (digit>=0 && digit<=9)			
 8001aba:	f200 80a3 	bhi.w	8001c04 <main+0xab4>
				number = number * 10 + digit;
 8001abe:	eb05 0e46 	add.w	lr, r5, r6, lsl #1
		while (*_string && isNumber) 
 8001ac2:	f818 4f01 	ldrb.w	r4, [r8, #1]!
 8001ac6:	2c00      	cmp	r4, #0
 8001ac8:	d1f2      	bne.n	8001ab0 <main+0x960>
		if (negative)
 8001aca:	9c03      	ldr	r4, [sp, #12]
 8001acc:	b10c      	cbz	r4, 8001ad2 <main+0x982>
			return -number;
 8001ace:	f1ce 0e00 	rsb	lr, lr, #0
			elementsToFlush=count;
 8001ad2:	461e      	mov	r6, r3
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001ada:	4698      	mov	r8, r3
			count=0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e570      	b.n	80015c2 <main+0x472>
					setMotorSpeed += 50;
 8001ae0:	4d3c      	ldr	r5, [pc, #240]	; (8001bd4 <main+0xa84>)
 8001ae2:	682c      	ldr	r4, [r5, #0]
 8001ae4:	3432      	adds	r4, #50	; 0x32
 8001ae6:	602c      	str	r4, [r5, #0]
 8001ae8:	e7aa      	b.n	8001a40 <main+0x8f0>
		while (*_string && isNumber) 
 8001aea:	4c3b      	ldr	r4, [pc, #236]	; (8001bd8 <main+0xa88>)
 8001aec:	7865      	ldrb	r5, [r4, #1]
		int number = 0;
 8001aee:	462c      	mov	r4, r5
		while (*_string && isNumber) 
 8001af0:	2d00      	cmp	r5, #0
 8001af2:	d09e      	beq.n	8001a32 <main+0x8e2>
       	bool negative = false;
 8001af4:	2400      	movs	r4, #0
		while (*_string && isNumber) 
 8001af6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8001be4 <main+0xa94>
       	bool negative = false;
 8001afa:	9404      	str	r4, [sp, #16]
		int number = 0;
 8001afc:	f8cd c01c 	str.w	ip, [sp, #28]
			int digit = *_string - '0';
 8001b00:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
			if (digit>=0 && digit<=9)			
 8001b04:	2e09      	cmp	r6, #9
				number = number * 10 + digit;
 8001b06:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
			if (digit>=0 && digit<=9)			
 8001b0a:	d88a      	bhi.n	8001a22 <main+0x8d2>
				number = number * 10 + digit;
 8001b0c:	eb06 044c 	add.w	r4, r6, ip, lsl #1
		while (*_string && isNumber) 
 8001b10:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8001b14:	2d00      	cmp	r5, #0
 8001b16:	d1f3      	bne.n	8001b00 <main+0x9b0>
 8001b18:	e786      	b.n	8001a28 <main+0x8d8>
					setiQ +=1;
 8001b1a:	4c2d      	ldr	r4, [pc, #180]	; (8001bd0 <main+0xa80>)
 8001b1c:	edd4 7a00 	vldr	s15, [r4]
 8001b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b28:	edc4 7a00 	vstr	s15, [r4]
 8001b2c:	e788      	b.n	8001a40 <main+0x8f0>
					setiQ -=1;
 8001b2e:	4c28      	ldr	r4, [pc, #160]	; (8001bd0 <main+0xa80>)
 8001b30:	edd4 7a00 	vldr	s15, [r4]
 8001b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b3c:	edc4 7a00 	vstr	s15, [r4]
 8001b40:	e77e      	b.n	8001a40 <main+0x8f0>
 8001b42:	4c25      	ldr	r4, [pc, #148]	; (8001bd8 <main+0xa88>)
 8001b44:	7865      	ldrb	r5, [r4, #1]
		int number = 0;
 8001b46:	462c      	mov	r4, r5
		while (*_string && isNumber) 
 8001b48:	b1b5      	cbz	r5, 8001b78 <main+0xa28>
       	bool negative = false;
 8001b4a:	2400      	movs	r4, #0
		while (*_string && isNumber) 
 8001b4c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001be4 <main+0xa94>
       	bool negative = false;
 8001b50:	9404      	str	r4, [sp, #16]
		int number = 0;
 8001b52:	f8cd c01c 	str.w	ip, [sp, #28]
			int digit = *_string - '0';
 8001b56:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
			if (digit>=0 && digit<=9)			
 8001b5a:	2e09      	cmp	r6, #9
				number = number * 10 + digit;
 8001b5c:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
			if (digit>=0 && digit<=9)			
 8001b60:	d842      	bhi.n	8001be8 <main+0xa98>
				number = number * 10 + digit;
 8001b62:	eb06 044c 	add.w	r4, r6, ip, lsl #1
		while (*_string && isNumber) 
 8001b66:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8001b6a:	2d00      	cmp	r5, #0
 8001b6c:	d1f3      	bne.n	8001b56 <main+0xa06>
		if (negative)
 8001b6e:	9d04      	ldr	r5, [sp, #16]
 8001b70:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8001b74:	b105      	cbz	r5, 8001b78 <main+0xa28>
			return -number;
 8001b76:	4264      	negs	r4, r4
					setiD = typeConverter::stringToInt(UARTrxData+1);
 8001b78:	ee07 4a90 	vmov	s15, r4
 8001b7c:	4c17      	ldr	r4, [pc, #92]	; (8001bdc <main+0xa8c>)
 8001b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b82:	edc4 7a00 	vstr	s15, [r4]
 8001b86:	e75b      	b.n	8001a40 <main+0x8f0>
		if (milis-motorProcessLastTime>=slopeInterval)
 8001b88:	4c15      	ldr	r4, [pc, #84]	; (8001be0 <main+0xa90>)
 8001b8a:	683d      	ldr	r5, [r7, #0]
 8001b8c:	6824      	ldr	r4, [r4, #0]
 8001b8e:	1a2d      	subs	r5, r5, r0
			elementsToFlush=count;
 8001b90:	461e      	mov	r6, r3
 8001b92:	42a5      	cmp	r5, r4
 8001b94:	f04f 0301 	mov.w	r3, #1
 8001b98:	9305      	str	r3, [sp, #20]
 8001b9a:	d27b      	bcs.n	8001c94 <main+0xb44>
					motorState = 1;
 8001b9c:	9c06      	ldr	r4, [sp, #24]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001b9e:	9304      	str	r3, [sp, #16]
 8001ba0:	4698      	mov	r8, r3
					motorState = 1;
 8001ba2:	9401      	str	r4, [sp, #4]
			count=0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e529      	b.n	80015fc <main+0x4ac>
		if (milis-motorProcessLastTime>=slopeInterval)
 8001ba8:	4c0d      	ldr	r4, [pc, #52]	; (8001be0 <main+0xa90>)
 8001baa:	683d      	ldr	r5, [r7, #0]
 8001bac:	6824      	ldr	r4, [r4, #0]
 8001bae:	1a2d      	subs	r5, r5, r0
 8001bb0:	42ac      	cmp	r4, r5
			elementsToFlush=count;
 8001bb2:	461e      	mov	r6, r3
 8001bb4:	f67f aed0 	bls.w	8001958 <main+0x808>
 8001bb8:	2401      	movs	r4, #1
					motorState = 0;
 8001bba:	2300      	movs	r3, #0
		if (milis-motorProcessLastTime>=slopeInterval)
 8001bbc:	9405      	str	r4, [sp, #20]
					motorState = 0;
 8001bbe:	9301      	str	r3, [sp, #4]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001bc0:	9404      	str	r4, [sp, #16]
 8001bc2:	46a0      	mov	r8, r4
 8001bc4:	e51a      	b.n	80015fc <main+0x4ac>
 8001bc6:	bf00      	nop
 8001bc8:	200000f4 	.word	0x200000f4
 8001bcc:	20000164 	.word	0x20000164
 8001bd0:	20000018 	.word	0x20000018
 8001bd4:	20000014 	.word	0x20000014
 8001bd8:	20000180 	.word	0x20000180
 8001bdc:	20000178 	.word	0x20000178
 8001be0:	2000016c 	.word	0x2000016c
 8001be4:	20000181 	.word	0x20000181
			else if (*_string == '-')
 8001be8:	2d2d      	cmp	r5, #45	; 0x2d
 8001bea:	d1c0      	bne.n	8001b6e <main+0xa1e>
				negative = true;
 8001bec:	2501      	movs	r5, #1
 8001bee:	9504      	str	r5, [sp, #16]
 8001bf0:	e7b9      	b.n	8001b66 <main+0xa16>
 8001bf2:	2501      	movs	r5, #1
 8001bf4:	9504      	str	r5, [sp, #16]
 8001bf6:	e78b      	b.n	8001b10 <main+0x9c0>
			else if (*_string == '-')
 8001bf8:	2c2d      	cmp	r4, #45	; 0x2d
 8001bfa:	f47f af48 	bne.w	8001a8e <main+0x93e>
				negative = true;
 8001bfe:	2401      	movs	r4, #1
 8001c00:	9404      	str	r4, [sp, #16]
 8001c02:	e740      	b.n	8001a86 <main+0x936>
			else if (*_string == '-')
 8001c04:	2c2d      	cmp	r4, #45	; 0x2d
 8001c06:	f47f af60 	bne.w	8001aca <main+0x97a>
				negative = true;
 8001c0a:	2401      	movs	r4, #1
 8001c0c:	9403      	str	r4, [sp, #12]
 8001c0e:	e758      	b.n	8001ac2 <main+0x972>
				else if (motorSpeed > setMotorSpeed)
 8001c10:	4829      	ldr	r0, [pc, #164]	; (8001cb8 <main+0xb68>)
 8001c12:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <main+0xb6c>)
 8001c14:	6801      	ldr	r1, [r0, #0]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	4291      	cmp	r1, r2
 8001c1a:	f67f ace8 	bls.w	80015ee <main+0x49e>
					motorSpeed --;
 8001c1e:	6802      	ldr	r2, [r0, #0]
 8001c20:	3a01      	subs	r2, #1
 8001c22:	6002      	str	r2, [r0, #0]
 8001c24:	e4e3      	b.n	80015ee <main+0x49e>
					motor.Udq_pu[1] = 0;
 8001c26:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <main+0xb70>)
 8001c28:	edc2 8a0d 	vstr	s17, [r2, #52]	; 0x34
					motor.Udq_pu[0] = 0;
 8001c2c:	edc2 8a0c 	vstr	s17, [r2, #48]	; 0x30
					motorSpeed = 0;
 8001c30:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <main+0xb68>)
 8001c32:	f8c2 b000 	str.w	fp, [r2]
 8001c36:	e69f      	b.n	8001978 <main+0x828>
	// uint32_t Ub = -0.5f * Ualpha  + M_SQRT3_2 * Ubeta + 500;
	// uint32_t Uc = -0.5f * Ualpha - M_SQRT3_2 * Ubeta + 500;
}
static inline void pwmOutOff(pwm_t* pwm)
{
	pwm->tim->CCR1 = 0;
 8001c38:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <main+0xb74>)
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	f8c2 b034 	str.w	fp, [r2, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 8001c40:	f8c2 b038 	str.w	fp, [r2, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 8001c44:	f8c2 b03c 	str.w	fp, [r2, #60]	; 0x3c
	pwm->tim->CCMR1 &= ~(0b1111<< TIM_CCMR1_OC1M_Pos);
 8001c48:	6991      	ldr	r1, [r2, #24]
 8001c4a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8001c4e:	6191      	str	r1, [r2, #24]
	pwm->tim->CCMR1 &= ~(0b1111<< TIM_CCMR1_OC2M_Pos);
 8001c50:	6991      	ldr	r1, [r2, #24]
 8001c52:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8001c56:	6191      	str	r1, [r2, #24]
	pwm->tim->CCMR2 &= ~(0b1111<< TIM_CCMR2_OC3M_Pos);
 8001c58:	69d1      	ldr	r1, [r2, #28]
 8001c5a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8001c5e:	61d1      	str	r1, [r2, #28]
					motorSpeed = 0;
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <main+0xb68>)
 8001c62:	f8c2 b000 	str.w	fp, [r2]
 8001c66:	e67f      	b.n	8001968 <main+0x818>
}
static inline void pwmOutOn(pwm_t* pwm)
{
	pwm->tim->CCR1 = 0;
 8001c68:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <main+0xb74>)
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	6351      	str	r1, [r2, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 8001c6e:	6391      	str	r1, [r2, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 8001c70:	63d1      	str	r1, [r2, #60]	; 0x3c
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001c72:	6991      	ldr	r1, [r2, #24]
 8001c74:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 8001c78:	6191      	str	r1, [r2, #24]
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC2M_Pos | TIM_CCMR1_OC2PE ; // PWM mode 1 channel 2
 8001c7a:	6991      	ldr	r1, [r2, #24]
 8001c7c:	f441 41d0 	orr.w	r1, r1, #26624	; 0x6800
 8001c80:	6191      	str	r1, [r2, #24]
	pwm->tim->CCMR2 |= 0b110<< TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC3PE ; // PWM mode 1 channel 3
 8001c82:	69d1      	ldr	r1, [r2, #28]
 8001c84:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 8001c88:	61d1      	str	r1, [r2, #28]
}
 8001c8a:	e4a6      	b.n	80015da <main+0x48a>
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <main+0xb78>)
 8001c8e:	f8c2 e000 	str.w	lr, [r2]
 8001c92:	e505      	b.n	80016a0 <main+0x550>
					motorState = 1;
 8001c94:	9a06      	ldr	r2, [sp, #24]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001c96:	9304      	str	r3, [sp, #16]
 8001c98:	4698      	mov	r8, r3
					motorState = 1;
 8001c9a:	9201      	str	r2, [sp, #4]
			count=0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e499      	b.n	80015d4 <main+0x484>
		Init();
 8001ca0:	f7fe fefa 	bl	8000a98 <_ZN3PID4InitEv>
 8001ca4:	e434      	b.n	8001510 <main+0x3c0>
 8001ca6:	f7fe fef7 	bl	8000a98 <_ZN3PID4InitEv>
 8001caa:	e421      	b.n	80014f0 <main+0x3a0>
		internalFreqUpdate(targetFreq);
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7fe fea7 	bl	8000a00 <_ZN12ClockManager18internalFreqUpdateEm>
 8001cb2:	f7ff bb61 	b.w	8001378 <main+0x228>
 8001cb6:	bf00      	nop
 8001cb8:	20000164 	.word	0x20000164
 8001cbc:	20000014 	.word	0x20000014
 8001cc0:	200000fc 	.word	0x200000fc
 8001cc4:	2000001c 	.word	0x2000001c
 8001cc8:	20000010 	.word	0x20000010

08001ccc <DMA1_Channel5_IRQHandler>:


extern "C"
{
	void DMA1_Channel5_IRQHandler() // New current readings ready
	{
 8001ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cce:	ed2d 8b08 	vpush	{d8-d11}
		if (DMA1->ISR & DMA_ISR_TCIF5)
 8001cd2:	4b95      	ldr	r3, [pc, #596]	; (8001f28 <DMA1_Channel5_IRQHandler+0x25c>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	0391      	lsls	r1, r2, #14
 8001cd8:	d402      	bmi.n	8001ce0 <DMA1_Channel5_IRQHandler+0x14>
			pwm_set3Phase_pu(&inverterPWM, motor.Uabc_pu);
			// setPhaseVoltage(setUq, setUd, SetOLangle);	
			led1.reset();
			//setPhaseVoltage(0.5, 0.5, SetOLangle);
		}
	}
 8001cda:	ecbd 8b08 	vpop	{d8-d11}
 8001cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			led1.set();
 8001ce0:	4e92      	ldr	r6, [pc, #584]	; (8001f2c <DMA1_Channel5_IRQHandler+0x260>)
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001ce2:	ed9f 9a93 	vldr	s18, [pc, #588]	; 8001f30 <DMA1_Channel5_IRQHandler+0x264>
 8001ce6:	6835      	ldr	r5, [r6, #0]
void GPIO::set()
{
	GPIOx->BSRR |= (1<<pin);
 8001ce8:	7930      	ldrb	r0, [r6, #4]
 8001cea:	69a9      	ldr	r1, [r5, #24]
 8001cec:	ed9f 6a91 	vldr	s12, [pc, #580]	; 8001f34 <DMA1_Channel5_IRQHandler+0x268>
static inline void motor_clark (motor_t* motor)
{
	// motor->IalphaBeta_A[0] = motor->Iabc_A[0];
	// motor->IalphaBeta_A[1] = (M_1_SQRT3 * motor->IalphaBeta_A[0]) + (M_2_SQRT3 * motor->Iabc_A[1]);

	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001cf0:	ed9f ba91 	vldr	s22, [pc, #580]	; 8001f38 <DMA1_Channel5_IRQHandler+0x26c>
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001cf4:	ed9f 5a91 	vldr	s10, [pc, #580]	; 8001f3c <DMA1_Channel5_IRQHandler+0x270>
	motor->Iabc_A[0] = iA;
 8001cf8:	4c91      	ldr	r4, [pc, #580]	; (8001f40 <DMA1_Channel5_IRQHandler+0x274>)
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001cfa:	eddf 5a92 	vldr	s11, [pc, #584]	; 8001f44 <DMA1_Channel5_IRQHandler+0x278>
			motor_setThetaRef (&motor, SetOLangle);
 8001cfe:	4f92      	ldr	r7, [pc, #584]	; (8001f48 <DMA1_Channel5_IRQHandler+0x27c>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	4082      	lsls	r2, r0
 8001d04:	430a      	orrs	r2, r1
 8001d06:	61aa      	str	r2, [r5, #24]
			DMA1->IFCR |= DMA_IFCR_CTCIF5;
 8001d08:	685a      	ldr	r2, [r3, #4]
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001d0a:	4990      	ldr	r1, [pc, #576]	; (8001f4c <DMA1_Channel5_IRQHandler+0x280>)
			DMA1->IFCR |= DMA_IFCR_CTCIF5;
 8001d0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d10:	605a      	str	r2, [r3, #4]
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001d12:	880b      	ldrh	r3, [r1, #0]
			AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET,\
 8001d14:	888a      	ldrh	r2, [r1, #4]
 8001d16:	b292      	uxth	r2, r2
 8001d18:	ee07 2a90 	vmov	s15, r2
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001d1c:	884a      	ldrh	r2, [r1, #2]
			DAC1->DHR12R1 = AdcDmaReadings[0];
 8001d1e:	8809      	ldrh	r1, [r1, #0]
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001d20:	b292      	uxth	r2, r2
			AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET,\
 8001d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001d26:	ee07 2a90 	vmov	s15, r2
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001d2a:	eef0 6a49 	vmov.f32	s13, s18
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001d32:	eee7 6a06 	vfma.f32	s13, s14, s12
 8001d36:	b29b      	uxth	r3, r3
			DAC1->DHR12R1 = AdcDmaReadings[0];
 8001d38:	b289      	uxth	r1, r1
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001d3a:	eeb0 7a49 	vmov.f32	s14, s18
 8001d3e:	eea7 7a86 	vfma.f32	s14, s15, s12
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001d4a:	ee76 9a87 	vadd.f32	s19, s13, s14
 8001d4e:	eea7 9a86 	vfma.f32	s18, s15, s12
			DAC1->DHR12R1 = AdcDmaReadings[0];
 8001d52:	4b7f      	ldr	r3, [pc, #508]	; (8001f50 <DMA1_Channel5_IRQHandler+0x284>)
 8001d54:	eef0 aa69 	vmov.f32	s21, s19
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001d58:	ee36 8ac7 	vsub.f32	s16, s13, s14
	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001d5c:	eed9 aa0b 	vfnms.f32	s21, s18, s22
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001d60:	ee28 8a05 	vmul.f32	s16, s16, s10
	motor->Iabc_A[1] = iB;
 8001d64:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
	motor->Iabc_A[2] = iC;
 8001d68:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001d6c:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
	motor->Iabc_A[0] = iA;
 8001d70:	ed84 9a0e 	vstr	s18, [r4, #56]	; 0x38
	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001d74:	edc4 aa11 	vstr	s21, [r4, #68]	; 0x44
 8001d78:	6099      	str	r1, [r3, #8]
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001d7a:	4b76      	ldr	r3, [pc, #472]	; (8001f54 <DMA1_Channel5_IRQHandler+0x288>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
			motor_setThetaRef (&motor, SetOLangle);
 8001d7e:	ed97 aa00 	vldr	s20, [r7]
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001d8c:	eeb0 0a4a 	vmov.f32	s0, s20
 8001d90:	ee67 7aa5 	vmul.f32	s15, s15, s11
	// uint32_t Ub = -0.5f * Ualpha  + M_SQRT3_2 * Ubeta + 500;
	// uint32_t Uc = -0.5f * Ualpha - M_SQRT3_2 * Ubeta + 500;
}
static inline void motor_setThetaRef (motor_t *motor, float	thetaSet)
{
	motor->theta_Rad = thetaSet;
 8001d94:	ed84 aa17 	vstr	s20, [r4, #92]	; 0x5c
 8001d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001d9c:	eee9 9a4b 	vfms.f32	s19, s18, s22
 8001da0:	ee17 3a90 	vmov	r3, s15
 8001da4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8001da8:	f000 fb02 	bl	80023b0 <cosf>
 8001dac:	eef0 8a40 	vmov.f32	s17, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001db0:	eeb0 0a4a 	vmov.f32	s0, s20
 8001db4:	f000 fb34 	bl	8002420 <sinf>
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001db8:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <DMA1_Channel5_IRQHandler+0x28c>)
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001dba:	eddf 3a68 	vldr	s7, [pc, #416]	; 8001f5c <DMA1_Channel5_IRQHandler+0x290>
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001dbe:	edd3 4a00 	vldr	s9, [r3]
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001dc2:	edd3 5a00 	vldr	s11, [r3]
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001dc6:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <DMA1_Channel5_IRQHandler+0x294>)
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001dc8:	edd4 6a15 	vldr	s13, [r4, #84]	; 0x54
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001dd0:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001dd4:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <DMA1_Channel5_IRQHandler+0x298>)
 8001dd6:	ee28 6a28 	vmul.f32	s12, s16, s17
	motor->Idq_A[0] = motor->IalphaBeta_A[0] * cos(motor->theta_Rad) + motor->IalphaBeta_A[1] * sin(motor->theta_Rad);
 8001dda:	ee28 8a00 	vmul.f32	s16, s16, s0
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001dde:	eea0 6a29 	vfma.f32	s12, s0, s19
	motor->Idq_A[0] = motor->IalphaBeta_A[0] * cos(motor->theta_Rad) + motor->IalphaBeta_A[1] * sin(motor->theta_Rad);
 8001de2:	eeaa 8aa8 	vfma.f32	s16, s21, s17
 8001de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001dea:	ee38 4a66 	vsub.f32	s8, s16, s13
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001dee:	ee67 7aa3 	vmul.f32	s15, s15, s7
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001df2:	ee36 5a47 	vsub.f32	s10, s12, s14
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001df6:	edc3 7a00 	vstr	s15, [r3]
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001dfa:	eea5 7a25 	vfma.f32	s14, s10, s11
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001dfe:	eee4 6a24 	vfma.f32	s13, s8, s9
				if (SetOLangle < M_2PI * POLE_PAIRS) 
 8001e02:	edd7 5a00 	vldr	s11, [r7]
 8001e06:	eddf 7a58 	vldr	s15, [pc, #352]	; 8001f68 <DMA1_Channel5_IRQHandler+0x29c>
 8001e0a:	ed84 8a13 	vstr	s16, [r4, #76]	; 0x4c
 8001e0e:	eef4 5ae7 	vcmpe.f32	s11, s15
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001e16:	ed84 6a14 	vstr	s12, [r4, #80]	; 0x50
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001e1a:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001e1e:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
				if (SetOLangle < M_2PI * POLE_PAIRS) 
 8001e22:	d467      	bmi.n	8001ef4 <DMA1_Channel5_IRQHandler+0x228>
					SetOLangle = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	603b      	str	r3, [r7, #0]
			if (motorState )
 8001e28:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <DMA1_Channel5_IRQHandler+0x2a0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b1b3      	cbz	r3, 8001e5c <DMA1_Channel5_IRQHandler+0x190>
				if (UART5->ISR & USART_ISR_ORE)
 8001e2e:	4b50      	ldr	r3, [pc, #320]	; (8001f70 <DMA1_Channel5_IRQHandler+0x2a4>)
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	0712      	lsls	r2, r2, #28
 8001e34:	d467      	bmi.n	8001f06 <DMA1_Channel5_IRQHandler+0x23a>
			pidUq.Compute();
 8001e36:	484f      	ldr	r0, [pc, #316]	; (8001f74 <DMA1_Channel5_IRQHandler+0x2a8>)
 8001e38:	f7ff f90e 	bl	8001058 <_ZN3PID7ComputeEv.isra.0>
			pidUd.Compute();				
 8001e3c:	484e      	ldr	r0, [pc, #312]	; (8001f78 <DMA1_Channel5_IRQHandler+0x2ac>)
 8001e3e:	f7ff f90b 	bl	8001058 <_ZN3PID7ComputeEv.isra.0>
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001e42:	ed94 8a17 	vldr	s16, [r4, #92]	; 0x5c
  { return __builtin_cosf(__x); }
 8001e46:	eeb0 0a48 	vmov.f32	s0, s16
 8001e4a:	f000 fab1 	bl	80023b0 <cosf>
 8001e4e:	eef0 8a40 	vmov.f32	s17, s0
  { return __builtin_sinf(__x); }
 8001e52:	eeb0 0a48 	vmov.f32	s0, s16
 8001e56:	f000 fae3 	bl	8002420 <sinf>
}
void GPIO::reset ()
{
	GPIOx->BSRR |= (1<<(pin+16));
 8001e5a:	6835      	ldr	r5, [r6, #0]
 8001e5c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8001e60:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e64:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001f7c <DMA1_Channel5_IRQHandler+0x2b0>
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001e68:	4b45      	ldr	r3, [pc, #276]	; (8001f80 <DMA1_Channel5_IRQHandler+0x2b4>)
 8001e6a:	7932      	ldrb	r2, [r6, #4]
 8001e6c:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001e72:	ee67 4aa8 	vmul.f32	s9, s15, s17
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001e76:	ee60 7a67 	vnmul.f32	s15, s0, s15
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001e7a:	eee7 4a00 	vfma.f32	s9, s14, s0
 8001e7e:	3210      	adds	r2, #16
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001e80:	eee7 7a28 	vfma.f32	s15, s14, s17
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e84:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8001e88:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001e8c:	eeb0 4a66 	vmov.f32	s8, s13
 8001e90:	eea7 4a87 	vfma.f32	s8, s15, s14
	motor->Uabc_pu[2] = -0.5f * motor->UalphaBeta_pu[0] - M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e94:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8001e98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e9c:	eeb8 5a46 	vcvt.f32.u32	s10, s12
 8001ea0:	ee74 5a07 	vadd.f32	s11, s8, s14
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001ea4:	ee37 6a87 	vadd.f32	s12, s15, s14
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001ea8:	ee36 7a87 	vadd.f32	s14, s13, s14
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001eac:	ee65 5a85 	vmul.f32	s11, s11, s10
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001eb0:	ee26 6a05 	vmul.f32	s12, s12, s10
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001eb4:	ee27 7a05 	vmul.f32	s14, s14, s10
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001eb8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001ebc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001ec0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001ec4:	edc3 5a0d 	vstr	s11, [r3, #52]	; 0x34
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001ec8:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001ecc:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001ed0:	edc4 4a0b 	vstr	s9, [r4, #44]	; 0x2c
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001ed4:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
	motor->Uabc_pu[0] = motor->UalphaBeta_pu[0];
 8001ed8:	edc4 7a07 	vstr	s15, [r4, #28]
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001edc:	ed84 4a08 	vstr	s8, [r4, #32]
	motor->Uabc_pu[2] = -0.5f * motor->UalphaBeta_pu[0] - M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001ee0:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 8001ee4:	69a9      	ldr	r1, [r5, #24]
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	430b      	orrs	r3, r1
 8001eec:	61ab      	str	r3, [r5, #24]
	}
 8001eee:	ecbd 8b08 	vpop	{d8-d11}
 8001ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					SetOLangle += velChange;
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	ed97 7a00 	vldr	s14, [r7]
 8001efc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f00:	edc7 7a00 	vstr	s15, [r7]
 8001f04:	e790      	b.n	8001e28 <DMA1_Channel5_IRQHandler+0x15c>
					led5.set();
 8001f06:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <DMA1_Channel5_IRQHandler+0x2b8>)
 8001f08:	6811      	ldr	r1, [r2, #0]
	GPIOx->BSRR |= (1<<pin);
 8001f0a:	7915      	ldrb	r5, [r2, #4]
 8001f0c:	6988      	ldr	r0, [r1, #24]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	40aa      	lsls	r2, r5
 8001f12:	4302      	orrs	r2, r0
 8001f14:	618a      	str	r2, [r1, #24]
					UART5->ICR |= USART_ICR_ORECF;
 8001f16:	6a1a      	ldr	r2, [r3, #32]
		head=0;
 8001f18:	491b      	ldr	r1, [pc, #108]	; (8001f88 <DMA1_Channel5_IRQHandler+0x2bc>)
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	621a      	str	r2, [r3, #32]
 8001f20:	2300      	movs	r3, #0
 8001f22:	730b      	strb	r3, [r1, #12]
		tail=0;
 8001f24:	734b      	strb	r3, [r1, #13]
}

void Serial::bufferFlush()
{
	buffer.flush();
}
 8001f26:	e786      	b.n	8001e36 <DMA1_Channel5_IRQHandler+0x16a>
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	200000cc 	.word	0x200000cc
 8001f30:	c2040000 	.word	0xc2040000
 8001f34:	3c88828a 	.word	0x3c88828a
 8001f38:	3f2aaaab 	.word	0x3f2aaaab
 8001f3c:	3f13cd3a 	.word	0x3f13cd3a
 8001f40:	200000fc 	.word	0x200000fc
 8001f44:	3db6ad09 	.word	0x3db6ad09
 8001f48:	200000c8 	.word	0x200000c8
 8001f4c:	200000ec 	.word	0x200000ec
 8001f50:	50000800 	.word	0x50000800
 8001f54:	200000e8 	.word	0x200000e8
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	37f1933b 	.word	0x37f1933b
 8001f60:	20000164 	.word	0x20000164
 8001f64:	200000c4 	.word	0x200000c4
 8001f68:	428a3ae7 	.word	0x428a3ae7
 8001f6c:	2000017c 	.word	0x2000017c
 8001f70:	40005000 	.word	0x40005000
 8001f74:	20000304 	.word	0x20000304
 8001f78:	200002c4 	.word	0x200002c4
 8001f7c:	3f5db3d7 	.word	0x3f5db3d7
 8001f80:	2000001c 	.word	0x2000001c
 8001f84:	200000bc 	.word	0x200000bc
 8001f88:	200001b4 	.word	0x200001b4

08001f8c <TIM2_IRQHandler>:
	
	void TIM2_IRQHandler()
	{
		if (TIM2->SR & TIM_SR_UIF)
 8001f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	07d2      	lsls	r2, r2, #31
 8001f94:	d506      	bpl.n	8001fa4 <TIM2_IRQHandler+0x18>
		{
			TIM2->SR &= ~TIM_SR_UIF;
 8001f96:	691a      	ldr	r2, [r3, #16]
			//led3.toggle();
			TIM2loopFlag = true;
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <TIM2_IRQHandler+0x1c>)
			TIM2->SR &= ~TIM_SR_UIF;
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
			TIM2loopFlag = true;
 8001f9e:	2001      	movs	r0, #1
			TIM2->SR &= ~TIM_SR_UIF;
 8001fa0:	611a      	str	r2, [r3, #16]
			TIM2loopFlag = true;
 8001fa2:	7008      	strb	r0, [r1, #0]
		}
	}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200000f8 	.word	0x200000f8

08001fac <UART5_IRQHandler>:
		if (USARTx->ISR & USART_ISR_RXNE)
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <UART5_IRQHandler+0x38>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	69d1      	ldr	r1, [r2, #28]
 8001fb2:	0689      	lsls	r1, r1, #26
 8001fb4:	d400      	bmi.n	8001fb8 <UART5_IRQHandler+0xc>
extern "C"
{
void UART5_IRQHandler()
	{
		uart.interrupt();
	}
 8001fb6:	4770      	bx	lr
			char c = USARTx->RDR;
 8001fb8:	6a51      	ldr	r1, [r2, #36]	; 0x24
	if ((head+1)==tail)
 8001fba:	7b1a      	ldrb	r2, [r3, #12]
 8001fbc:	7b58      	ldrb	r0, [r3, #13]
 8001fbe:	3201      	adds	r2, #1
 8001fc0:	4282      	cmp	r2, r0
 8001fc2:	b2c9      	uxtb	r1, r1
 8001fc4:	d0f7      	beq.n	8001fb6 <UART5_IRQHandler+0xa>
	buffer[head] = _data;
 8001fc6:	7b18      	ldrb	r0, [r3, #12]
	head++;
 8001fc8:	7b1a      	ldrb	r2, [r3, #12]
 8001fca:	3201      	adds	r2, #1
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	731a      	strb	r2, [r3, #12]
	if ( head == (bSize-1) )
 8001fd0:	7b1a      	ldrb	r2, [r3, #12]
	buffer[head] = _data;
 8001fd2:	4418      	add	r0, r3
	if ( head == (bSize-1) )
 8001fd4:	2aff      	cmp	r2, #255	; 0xff
		head = 0;
 8001fd6:	bf08      	it	eq
 8001fd8:	2200      	moveq	r2, #0
	buffer[head] = _data;
 8001fda:	7381      	strb	r1, [r0, #14]
		head = 0;
 8001fdc:	bf08      	it	eq
 8001fde:	731a      	strbeq	r2, [r3, #12]
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200001b4 	.word	0x200001b4

08001fe8 <SysTick_Handler>:
		milis++;
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <SysTick_Handler+0x10>)
		TIM6->EGR = TIM_EGR_UG;
 8001fea:	4904      	ldr	r1, [pc, #16]	; (8001ffc <SysTick_Handler+0x14>)
		milis++;
 8001fec:	6813      	ldr	r3, [r2, #0]
		TIM6->EGR = TIM_EGR_UG;
 8001fee:	2001      	movs	r0, #1
		milis++;
 8001ff0:	4403      	add	r3, r0
 8001ff2:	6013      	str	r3, [r2, #0]
		TIM6->EGR = TIM_EGR_UG;
 8001ff4:	6148      	str	r0, [r1, #20]
	}
 8001ff6:	4770      	bx	lr
 8001ff8:	20000174 	.word	0x20000174
 8001ffc:	40001000 	.word	0x40001000

08002000 <SystemInit>:

void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <SystemInit+0x30>)
	#else
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	#endif

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	DWT->CYCCNT = 0;
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <SystemInit+0x34>)
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002004:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002008:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800200c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002010:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002014:	6098      	str	r0, [r3, #8]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002016:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
	DWT->CYCCNT = 0;
 800201a:	2000      	movs	r0, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800201c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002020:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
	DWT->CYCCNT = 0;
 8002024:	6050      	str	r0, [r2, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002026:	6813      	ldr	r3, [r2, #0]
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00
 8002034:	e0001000 	.word	0xe0001000

08002038 <_init>:
int __errno;
void *__dso_handle = (void *)&__dso_handle;

void _init(void) {}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop

0800203c <_sub_I_65535_0.0>:
 800203c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	2400      	movs	r4, #0
 8002044:	2601      	movs	r6, #1
 8002046:	4f8a      	ldr	r7, [pc, #552]	; (8002270 <_sub_I_65535_0.0+0x234>)
 8002048:	9400      	str	r4, [sp, #0]
 800204a:	2302      	movs	r3, #2
 800204c:	f04f 0805 	mov.w	r8, #5
 8002050:	461d      	mov	r5, r3
 8002052:	e9cd 6801 	strd	r6, r8, [sp, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	4986      	ldr	r1, [pc, #536]	; (8002274 <_sub_I_65535_0.0+0x238>)
 800205a:	4887      	ldr	r0, [pc, #540]	; (8002278 <_sub_I_65535_0.0+0x23c>)
 800205c:	ed9f 0a87 	vldr	s0, [pc, #540]	; 800227c <_sub_I_65535_0.0+0x240>
 8002060:	f7fe ff6e 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002064:	e9cd 4500 	strd	r4, r5, [sp]
 8002068:	f8cd 8008 	str.w	r8, [sp, #8]
 800206c:	462b      	mov	r3, r5
 800206e:	f04f 0808 	mov.w	r8, #8
 8002072:	4639      	mov	r1, r7
 8002074:	4882      	ldr	r0, [pc, #520]	; (8002280 <_sub_I_65535_0.0+0x244>)
 8002076:	220c      	movs	r2, #12
 8002078:	f7fe ff62 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800207c:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8002080:	462b      	mov	r3, r5
 8002082:	4642      	mov	r2, r8
 8002084:	4639      	mov	r1, r7
 8002086:	487f      	ldr	r0, [pc, #508]	; (8002284 <_sub_I_65535_0.0+0x248>)
 8002088:	9600      	str	r6, [sp, #0]
 800208a:	f7fe ff59 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800208e:	e9cd 6400 	strd	r6, r4, [sp]
 8002092:	f8cd 8008 	str.w	r8, [sp, #8]
 8002096:	462b      	mov	r3, r5
 8002098:	4639      	mov	r1, r7
 800209a:	487b      	ldr	r0, [pc, #492]	; (8002288 <_sub_I_65535_0.0+0x24c>)
 800209c:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8002308 <_sub_I_65535_0.0+0x2cc>
 80020a0:	2209      	movs	r2, #9
 80020a2:	f7fe ff4d 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020a6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80020aa:	462b      	mov	r3, r5
 80020ac:	9400      	str	r4, [sp, #0]
 80020ae:	4622      	mov	r2, r4
 80020b0:	4876      	ldr	r0, [pc, #472]	; (800228c <_sub_I_65535_0.0+0x250>)
 80020b2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80020b6:	f7fe ff43 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020ba:	f04f 0904 	mov.w	r9, #4
 80020be:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80020c2:	462b      	mov	r3, r5
 80020c4:	9400      	str	r4, [sp, #0]
 80020c6:	4622      	mov	r2, r4
 80020c8:	4639      	mov	r1, r7
 80020ca:	4871      	ldr	r0, [pc, #452]	; (8002290 <_sub_I_65535_0.0+0x254>)
 80020cc:	f7fe ff38 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020d0:	e9cd 4901 	strd	r4, r9, [sp, #4]
 80020d4:	9400      	str	r4, [sp, #0]
 80020d6:	462b      	mov	r3, r5
 80020d8:	4639      	mov	r1, r7
 80020da:	486e      	ldr	r0, [pc, #440]	; (8002294 <_sub_I_65535_0.0+0x258>)
 80020dc:	220d      	movs	r2, #13
 80020de:	f7fe ff2f 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020e2:	f04f 0a06 	mov.w	sl, #6
 80020e6:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80020ea:	9400      	str	r4, [sp, #0]
 80020ec:	462b      	mov	r3, r5
 80020ee:	4632      	mov	r2, r6
 80020f0:	4639      	mov	r1, r7
 80020f2:	4869      	ldr	r0, [pc, #420]	; (8002298 <_sub_I_65535_0.0+0x25c>)
 80020f4:	f7fe ff24 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020f8:	e9cd 4400 	strd	r4, r4, [sp]
 80020fc:	462b      	mov	r3, r5
 80020fe:	4622      	mov	r2, r4
 8002100:	4641      	mov	r1, r8
 8002102:	4866      	ldr	r0, [pc, #408]	; (800229c <_sub_I_65535_0.0+0x260>)
 8002104:	f8cd a008 	str.w	sl, [sp, #8]
 8002108:	f7fe ff1a 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800210c:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8002110:	9400      	str	r4, [sp, #0]
 8002112:	462b      	mov	r3, r5
 8002114:	4862      	ldr	r0, [pc, #392]	; (80022a0 <_sub_I_65535_0.0+0x264>)
 8002116:	220a      	movs	r2, #10
 8002118:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800211c:	f7fe ff10 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002120:	230c      	movs	r3, #12
 8002122:	e9cd 4400 	strd	r4, r4, [sp]
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	4641      	mov	r1, r8
 800212a:	462b      	mov	r3, r5
 800212c:	485d      	ldr	r0, [pc, #372]	; (80022a4 <_sub_I_65535_0.0+0x268>)
 800212e:	2209      	movs	r2, #9
 8002130:	f7fe ff06 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002134:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002138:	9400      	str	r4, [sp, #0]
 800213a:	4622      	mov	r2, r4
 800213c:	485a      	ldr	r0, [pc, #360]	; (80022a8 <_sub_I_65535_0.0+0x26c>)
 800213e:	2303      	movs	r3, #3
 8002140:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002144:	f7fe fefc 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002148:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800214c:	9400      	str	r4, [sp, #0]
 800214e:	462a      	mov	r2, r5
 8002150:	4639      	mov	r1, r7
 8002152:	4856      	ldr	r0, [pc, #344]	; (80022ac <_sub_I_65535_0.0+0x270>)
 8002154:	2303      	movs	r3, #3
 8002156:	f7fe fef3 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800215a:	2303      	movs	r3, #3
 800215c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002160:	9400      	str	r4, [sp, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	4639      	mov	r1, r7
 8002166:	4852      	ldr	r0, [pc, #328]	; (80022b0 <_sub_I_65535_0.0+0x274>)
 8002168:	f7fe feea 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800216c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002170:	462a      	mov	r2, r5
 8002172:	9400      	str	r4, [sp, #0]
 8002174:	4641      	mov	r1, r8
 8002176:	484f      	ldr	r0, [pc, #316]	; (80022b4 <_sub_I_65535_0.0+0x278>)
 8002178:	2303      	movs	r3, #3
 800217a:	f7fe fee1 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800217e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002182:	9400      	str	r4, [sp, #0]
 8002184:	4641      	mov	r1, r8
 8002186:	484c      	ldr	r0, [pc, #304]	; (80022b8 <_sub_I_65535_0.0+0x27c>)
 8002188:	2303      	movs	r3, #3
 800218a:	220b      	movs	r2, #11
 800218c:	f7fe fed8 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002190:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002194:	464a      	mov	r2, r9
 8002196:	9400      	str	r4, [sp, #0]
 8002198:	4633      	mov	r3, r6
 800219a:	4639      	mov	r1, r7
 800219c:	4847      	ldr	r0, [pc, #284]	; (80022bc <_sub_I_65535_0.0+0x280>)
 800219e:	f7fe fecf 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80021a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80021a6:	4633      	mov	r3, r6
 80021a8:	9400      	str	r4, [sp, #0]
 80021aa:	4641      	mov	r1, r8
 80021ac:	4844      	ldr	r0, [pc, #272]	; (80022c0 <_sub_I_65535_0.0+0x284>)
 80021ae:	220a      	movs	r2, #10
 80021b0:	f7fe fec6 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80021b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80021b8:	4633      	mov	r3, r6
 80021ba:	4639      	mov	r1, r7
 80021bc:	9400      	str	r4, [sp, #0]
 80021be:	4841      	ldr	r0, [pc, #260]	; (80022c4 <_sub_I_65535_0.0+0x288>)
 80021c0:	220b      	movs	r2, #11
 80021c2:	f7fe febd 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80021c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80021ca:	4633      	mov	r3, r6
 80021cc:	4641      	mov	r1, r8
 80021ce:	9400      	str	r4, [sp, #0]
 80021d0:	483d      	ldr	r0, [pc, #244]	; (80022c8 <_sub_I_65535_0.0+0x28c>)
 80021d2:	2207      	movs	r2, #7
 80021d4:	f7fe feb4 	bl	8000f40 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80021d8:	4a3c      	ldr	r2, [pc, #240]	; (80022cc <_sub_I_65535_0.0+0x290>)
 80021da:	493d      	ldr	r1, [pc, #244]	; (80022d0 <_sub_I_65535_0.0+0x294>)
 80021dc:	6011      	str	r1, [r2, #0]
 80021de:	493d      	ldr	r1, [pc, #244]	; (80022d4 <_sub_I_65535_0.0+0x298>)
 80021e0:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <_sub_I_65535_0.0+0x29c>)
 80021e2:	7314      	strb	r4, [r2, #12]
 80021e4:	e9c2 1401 	strd	r1, r4, [r2, #4]
 80021e8:	7354      	strb	r4, [r2, #13]
 80021ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ec:	483b      	ldr	r0, [pc, #236]	; (80022dc <_sub_I_65535_0.0+0x2a0>)
 80021ee:	4c3c      	ldr	r4, [pc, #240]	; (80022e0 <_sub_I_65535_0.0+0x2a4>)
 80021f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021f4:	659a      	str	r2, [r3, #88]	; 0x58
 80021f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38
 80021fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002200:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
 8002206:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800220a:	6042      	str	r2, [r0, #4]
 800220c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002210:	60ca      	str	r2, [r1, #12]
 8002212:	680a      	ldr	r2, [r1, #0]
 8002214:	4833      	ldr	r0, [pc, #204]	; (80022e4 <_sub_I_65535_0.0+0x2a8>)
 8002216:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 800221a:	600a      	str	r2, [r1, #0]
 800221c:	4a32      	ldr	r2, [pc, #200]	; (80022e8 <_sub_I_65535_0.0+0x2ac>)
 800221e:	6002      	str	r2, [r0, #0]
 8002220:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002222:	4832      	ldr	r0, [pc, #200]	; (80022ec <_sub_I_65535_0.0+0x2b0>)
 8002224:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002228:	6599      	str	r1, [r3, #88]	; 0x58
 800222a:	6813      	ldr	r3, [r2, #0]
 800222c:	4930      	ldr	r1, [pc, #192]	; (80022f0 <_sub_I_65535_0.0+0x2b4>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	6110      	str	r0, [r2, #16]
 8002236:	6813      	ldr	r3, [r2, #0]
 8002238:	482e      	ldr	r0, [pc, #184]	; (80022f4 <_sub_I_65535_0.0+0x2b8>)
 800223a:	4333      	orrs	r3, r6
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002242:	600e      	str	r6, [r1, #0]
 8002244:	4622      	mov	r2, r4
 8002246:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <_sub_I_65535_0.0+0x2bc>)
 800224c:	f7fe fd68 	bl	8000d20 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>
 8002250:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80022fc <_sub_I_65535_0.0+0x2c0>
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <_sub_I_65535_0.0+0x2c4>)
 8002256:	482b      	ldr	r0, [pc, #172]	; (8002304 <_sub_I_65535_0.0+0x2c8>)
 8002258:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800225c:	eb04 0209 	add.w	r2, r4, r9
 8002260:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002264:	b004      	add	sp, #16
 8002266:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800226a:	f7fe bd59 	b.w	8000d20 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>
 800226e:	bf00      	nop
 8002270:	48000800 	.word	0x48000800
 8002274:	48000c00 	.word	0x48000c00
 8002278:	200000b4 	.word	0x200000b4
 800227c:	3a03126f 	.word	0x3a03126f
 8002280:	200000ac 	.word	0x200000ac
 8002284:	200000a4 	.word	0x200000a4
 8002288:	2000009c 	.word	0x2000009c
 800228c:	20000094 	.word	0x20000094
 8002290:	2000008c 	.word	0x2000008c
 8002294:	20000084 	.word	0x20000084
 8002298:	2000007c 	.word	0x2000007c
 800229c:	20000074 	.word	0x20000074
 80022a0:	2000006c 	.word	0x2000006c
 80022a4:	20000064 	.word	0x20000064
 80022a8:	2000005c 	.word	0x2000005c
 80022ac:	20000054 	.word	0x20000054
 80022b0:	2000004c 	.word	0x2000004c
 80022b4:	20000044 	.word	0x20000044
 80022b8:	2000003c 	.word	0x2000003c
 80022bc:	200000cc 	.word	0x200000cc
 80022c0:	20000034 	.word	0x20000034
 80022c4:	2000002c 	.word	0x2000002c
 80022c8:	200000bc 	.word	0x200000bc
 80022cc:	200001b4 	.word	0x200001b4
 80022d0:	0007a120 	.word	0x0007a120
 80022d4:	40005000 	.word	0x40005000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	2000012c 	.word	0x2000012c
 80022e4:	200000e4 	.word	0x200000e4
 80022e8:	40007800 	.word	0x40007800
 80022ec:	0070276b 	.word	0x0070276b
 80022f0:	2000016c 	.word	0x2000016c
 80022f4:	200002c4 	.word	0x200002c4
 80022f8:	20000178 	.word	0x20000178
 80022fc:	3a83126f 	.word	0x3a83126f
 8002300:	20000018 	.word	0x20000018
 8002304:	20000304 	.word	0x20000304
 8002308:	48000400 	.word	0x48000400

0800230c <Reset_Handler>:
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <LoopForever+0x2>)
 800230e:	4685      	mov	sp, r0
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <LoopForever+0x6>)
 8002312:	490e      	ldr	r1, [pc, #56]	; (800234c <LoopForever+0xa>)
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <LoopForever+0xe>)
 8002316:	2300      	movs	r3, #0
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:
 800231a:	58d4      	ldr	r4, [r2, r3]
 800231c:	50c4      	str	r4, [r0, r3]
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:
 8002320:	18c4      	adds	r4, r0, r3
 8002322:	428c      	cmp	r4, r1
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>
 8002326:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <LoopForever+0x12>)
 8002328:	4c0b      	ldr	r4, [pc, #44]	; (8002358 <LoopForever+0x16>)
 800232a:	2300      	movs	r3, #0
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:
 8002332:	42a2      	cmp	r2, r4
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>
 8002336:	f7ff fe63 	bl	8002000 <SystemInit>
 800233a:	f000 f811 	bl	8002360 <__libc_init_array>
 800233e:	f7fe ff07 	bl	8001150 <main>

08002342 <LoopForever>:
 8002342:	e7fe      	b.n	8002342 <LoopForever>
 8002344:	20020000 	.word	0x20020000
 8002348:	20000000 	.word	0x20000000
 800234c:	2000002c 	.word	0x2000002c
 8002350:	08003518 	.word	0x08003518
 8002354:	2000002c 	.word	0x2000002c
 8002358:	20000344 	.word	0x20000344

0800235c <ADC1_2_IRQHandler>:
 800235c:	e7fe      	b.n	800235c <ADC1_2_IRQHandler>
	...

08002360 <__libc_init_array>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <__libc_init_array+0x40>)
 8002364:	4d0f      	ldr	r5, [pc, #60]	; (80023a4 <__libc_init_array+0x44>)
 8002366:	42ab      	cmp	r3, r5
 8002368:	eba3 0605 	sub.w	r6, r3, r5
 800236c:	d007      	beq.n	800237e <__libc_init_array+0x1e>
 800236e:	10b6      	asrs	r6, r6, #2
 8002370:	2400      	movs	r4, #0
 8002372:	f855 3b04 	ldr.w	r3, [r5], #4
 8002376:	3401      	adds	r4, #1
 8002378:	4798      	blx	r3
 800237a:	42a6      	cmp	r6, r4
 800237c:	d8f9      	bhi.n	8002372 <__libc_init_array+0x12>
 800237e:	f7ff fe5b 	bl	8002038 <_init>
 8002382:	4d09      	ldr	r5, [pc, #36]	; (80023a8 <__libc_init_array+0x48>)
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <__libc_init_array+0x4c>)
 8002386:	1b5e      	subs	r6, r3, r5
 8002388:	42ab      	cmp	r3, r5
 800238a:	ea4f 06a6 	mov.w	r6, r6, asr #2
 800238e:	d006      	beq.n	800239e <__libc_init_array+0x3e>
 8002390:	2400      	movs	r4, #0
 8002392:	f855 3b04 	ldr.w	r3, [r5], #4
 8002396:	3401      	adds	r4, #1
 8002398:	4798      	blx	r3
 800239a:	42a6      	cmp	r6, r4
 800239c:	d8f9      	bhi.n	8002392 <__libc_init_array+0x32>
 800239e:	bd70      	pop	{r4, r5, r6, pc}
 80023a0:	08003514 	.word	0x08003514
 80023a4:	08003514 	.word	0x08003514
 80023a8:	08003514 	.word	0x08003514
 80023ac:	08003518 	.word	0x08003518

080023b0 <cosf>:
 80023b0:	ee10 3a10 	vmov	r3, s0
 80023b4:	4918      	ldr	r1, [pc, #96]	; (8002418 <cosf+0x68>)
 80023b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ba:	428a      	cmp	r2, r1
 80023bc:	d91b      	bls.n	80023f6 <cosf+0x46>
 80023be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80023c2:	d302      	bcc.n	80023ca <cosf+0x1a>
 80023c4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80023c8:	4770      	bx	lr
 80023ca:	b500      	push	{lr}
 80023cc:	b083      	sub	sp, #12
 80023ce:	4668      	mov	r0, sp
 80023d0:	f000 f92a 	bl	8002628 <__ieee754_rem_pio2f>
 80023d4:	f000 0003 	and.w	r0, r0, #3
 80023d8:	2801      	cmp	r0, #1
 80023da:	eddd 0a01 	vldr	s1, [sp, #4]
 80023de:	ed9d 0a00 	vldr	s0, [sp]
 80023e2:	d00c      	beq.n	80023fe <cosf+0x4e>
 80023e4:	2802      	cmp	r0, #2
 80023e6:	d012      	beq.n	800240e <cosf+0x5e>
 80023e8:	b170      	cbz	r0, 8002408 <cosf+0x58>
 80023ea:	2001      	movs	r0, #1
 80023ec:	f000 f8d4 	bl	8002598 <__kernel_sinf>
 80023f0:	b003      	add	sp, #12
 80023f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80023f6:	eddf 0a09 	vldr	s1, [pc, #36]	; 800241c <cosf+0x6c>
 80023fa:	f000 b84b 	b.w	8002494 <__kernel_cosf>
 80023fe:	f000 f8cb 	bl	8002598 <__kernel_sinf>
 8002402:	eeb1 0a40 	vneg.f32	s0, s0
 8002406:	e7f3      	b.n	80023f0 <cosf+0x40>
 8002408:	f000 f844 	bl	8002494 <__kernel_cosf>
 800240c:	e7f0      	b.n	80023f0 <cosf+0x40>
 800240e:	f000 f841 	bl	8002494 <__kernel_cosf>
 8002412:	eeb1 0a40 	vneg.f32	s0, s0
 8002416:	e7eb      	b.n	80023f0 <cosf+0x40>
 8002418:	3f490fd8 	.word	0x3f490fd8
 800241c:	00000000 	.word	0x00000000

08002420 <sinf>:
 8002420:	ee10 3a10 	vmov	r3, s0
 8002424:	4919      	ldr	r1, [pc, #100]	; (800248c <sinf+0x6c>)
 8002426:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800242a:	428a      	cmp	r2, r1
 800242c:	d91c      	bls.n	8002468 <sinf+0x48>
 800242e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8002432:	d302      	bcc.n	800243a <sinf+0x1a>
 8002434:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002438:	4770      	bx	lr
 800243a:	b500      	push	{lr}
 800243c:	b083      	sub	sp, #12
 800243e:	4668      	mov	r0, sp
 8002440:	f000 f8f2 	bl	8002628 <__ieee754_rem_pio2f>
 8002444:	f000 0003 	and.w	r0, r0, #3
 8002448:	2801      	cmp	r0, #1
 800244a:	eddd 0a01 	vldr	s1, [sp, #4]
 800244e:	ed9d 0a00 	vldr	s0, [sp]
 8002452:	d00e      	beq.n	8002472 <sinf+0x52>
 8002454:	2802      	cmp	r0, #2
 8002456:	d013      	beq.n	8002480 <sinf+0x60>
 8002458:	b170      	cbz	r0, 8002478 <sinf+0x58>
 800245a:	f000 f81b 	bl	8002494 <__kernel_cosf>
 800245e:	eeb1 0a40 	vneg.f32	s0, s0
 8002462:	b003      	add	sp, #12
 8002464:	f85d fb04 	ldr.w	pc, [sp], #4
 8002468:	eddf 0a09 	vldr	s1, [pc, #36]	; 8002490 <sinf+0x70>
 800246c:	2000      	movs	r0, #0
 800246e:	f000 b893 	b.w	8002598 <__kernel_sinf>
 8002472:	f000 f80f 	bl	8002494 <__kernel_cosf>
 8002476:	e7f4      	b.n	8002462 <sinf+0x42>
 8002478:	2001      	movs	r0, #1
 800247a:	f000 f88d 	bl	8002598 <__kernel_sinf>
 800247e:	e7f0      	b.n	8002462 <sinf+0x42>
 8002480:	2001      	movs	r0, #1
 8002482:	f000 f889 	bl	8002598 <__kernel_sinf>
 8002486:	eeb1 0a40 	vneg.f32	s0, s0
 800248a:	e7ea      	b.n	8002462 <sinf+0x42>
 800248c:	3f490fd8 	.word	0x3f490fd8
 8002490:	00000000 	.word	0x00000000

08002494 <__kernel_cosf>:
 8002494:	ee10 3a10 	vmov	r3, s0
 8002498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800249c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80024a0:	d22c      	bcs.n	80024fc <__kernel_cosf+0x68>
 80024a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80024a6:	ee17 3a90 	vmov	r3, s15
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d060      	beq.n	8002570 <__kernel_cosf+0xdc>
 80024ae:	ee60 7a00 	vmul.f32	s15, s0, s0
 80024b2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002578 <__kernel_cosf+0xe4>
 80024b6:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800257c <__kernel_cosf+0xe8>
 80024ba:	eddf 5a31 	vldr	s11, [pc, #196]	; 8002580 <__kernel_cosf+0xec>
 80024be:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8002584 <__kernel_cosf+0xf0>
 80024c2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002588 <__kernel_cosf+0xf4>
 80024c6:	eea7 5a87 	vfma.f32	s10, s15, s14
 80024ca:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800258c <__kernel_cosf+0xf8>
 80024ce:	eee5 5a27 	vfma.f32	s11, s10, s15
 80024d2:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80024d6:	eea7 7a86 	vfma.f32	s14, s15, s12
 80024da:	eee7 6a87 	vfma.f32	s13, s15, s14
 80024de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024e2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80024e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024ea:	eee7 0aa6 	vfma.f32	s1, s15, s13
 80024ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024f2:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80024f6:	ee30 0a60 	vsub.f32	s0, s0, s1
 80024fa:	4770      	bx	lr
 80024fc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002500:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002578 <__kernel_cosf+0xe4>
 8002504:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 800257c <__kernel_cosf+0xe8>
 8002508:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002580 <__kernel_cosf+0xec>
 800250c:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8002584 <__kernel_cosf+0xf0>
 8002510:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002588 <__kernel_cosf+0xf4>
 8002514:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <__kernel_cosf+0xfc>)
 8002516:	eea7 5a87 	vfma.f32	s10, s15, s14
 800251a:	4293      	cmp	r3, r2
 800251c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800258c <__kernel_cosf+0xf8>
 8002520:	eee5 5a27 	vfma.f32	s11, s10, s15
 8002524:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8002528:	eea6 7a27 	vfma.f32	s14, s12, s15
 800252c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002530:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002534:	d9d5      	bls.n	80024e2 <__kernel_cosf+0x4e>
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <__kernel_cosf+0x100>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d814      	bhi.n	8002566 <__kernel_cosf+0xd2>
 800253c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8002540:	ee07 3a10 	vmov	s14, r3
 8002544:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002548:	ee36 6a47 	vsub.f32	s12, s12, s14
 800254c:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002550:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002554:	ee97 7aa5 	vfnms.f32	s14, s15, s11
 8002558:	eee7 0aa6 	vfma.f32	s1, s15, s13
 800255c:	ee37 7a60 	vsub.f32	s14, s14, s1
 8002560:	ee36 0a47 	vsub.f32	s0, s12, s14
 8002564:	4770      	bx	lr
 8002566:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 800256a:	eeb5 7a02 	vmov.f32	s14, #82	; 0x3e900000  0.2812500
 800256e:	e7ed      	b.n	800254c <__kernel_cosf+0xb8>
 8002570:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	ad47d74e 	.word	0xad47d74e
 800257c:	310f74f6 	.word	0x310f74f6
 8002580:	b493f27c 	.word	0xb493f27c
 8002584:	37d00d01 	.word	0x37d00d01
 8002588:	3d2aaaab 	.word	0x3d2aaaab
 800258c:	bab60b61 	.word	0xbab60b61
 8002590:	3e999999 	.word	0x3e999999
 8002594:	3f480000 	.word	0x3f480000

08002598 <__kernel_sinf>:
 8002598:	ee10 3a10 	vmov	r3, s0
 800259c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80025a4:	d204      	bcs.n	80025b0 <__kernel_sinf+0x18>
 80025a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80025aa:	ee17 3a90 	vmov	r3, s15
 80025ae:	b35b      	cbz	r3, 8002608 <__kernel_sinf+0x70>
 80025b0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80025b4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800260c <__kernel_sinf+0x74>
 80025b8:	eddf 5a15 	vldr	s11, [pc, #84]	; 8002610 <__kernel_sinf+0x78>
 80025bc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8002614 <__kernel_sinf+0x7c>
 80025c0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002618 <__kernel_sinf+0x80>
 80025c4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80025c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800261c <__kernel_sinf+0x84>
 80025cc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80025d0:	ee20 5a27 	vmul.f32	s10, s0, s15
 80025d4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80025d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80025dc:	b930      	cbnz	r0, 80025ec <__kernel_sinf+0x54>
 80025de:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002620 <__kernel_sinf+0x88>
 80025e2:	eee7 6a87 	vfma.f32	s13, s15, s14
 80025e6:	eea6 0a85 	vfma.f32	s0, s13, s10
 80025ea:	4770      	bx	lr
 80025ec:	ee27 7a45 	vnmul.f32	s14, s14, s10
 80025f0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80025f4:	eea0 7aa6 	vfma.f32	s14, s1, s13
 80025f8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002624 <__kernel_sinf+0x8c>
 80025fc:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8002600:	eee5 0a26 	vfma.f32	s1, s10, s13
 8002604:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2f2ec9d3 	.word	0x2f2ec9d3
 8002610:	b2d72f34 	.word	0xb2d72f34
 8002614:	3638ef1b 	.word	0x3638ef1b
 8002618:	b9500d01 	.word	0xb9500d01
 800261c:	3c088889 	.word	0x3c088889
 8002620:	be2aaaab 	.word	0xbe2aaaab
 8002624:	3e2aaaab 	.word	0x3e2aaaab

08002628 <__ieee754_rem_pio2f>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	ee10 3a10 	vmov	r3, s0
 800262e:	4a88      	ldr	r2, [pc, #544]	; (8002850 <__ieee754_rem_pio2f+0x228>)
 8002630:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002634:	4294      	cmp	r4, r2
 8002636:	b086      	sub	sp, #24
 8002638:	4605      	mov	r5, r0
 800263a:	d971      	bls.n	8002720 <__ieee754_rem_pio2f+0xf8>
 800263c:	4a85      	ldr	r2, [pc, #532]	; (8002854 <__ieee754_rem_pio2f+0x22c>)
 800263e:	4294      	cmp	r4, r2
 8002640:	461e      	mov	r6, r3
 8002642:	d824      	bhi.n	800268e <__ieee754_rem_pio2f+0x66>
 8002644:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	eddf 7a83 	vldr	s15, [pc, #524]	; 8002858 <__ieee754_rem_pio2f+0x230>
 800264e:	4a83      	ldr	r2, [pc, #524]	; (800285c <__ieee754_rem_pio2f+0x234>)
 8002650:	f026 060f 	bic.w	r6, r6, #15
 8002654:	eeb0 7a40 	vmov.f32	s14, s0
 8002658:	f340 80e0 	ble.w	800281c <__ieee754_rem_pio2f+0x1f4>
 800265c:	4296      	cmp	r6, r2
 800265e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8002662:	bf09      	itett	eq
 8002664:	ed9f 7a7e 	vldreq	s14, [pc, #504]	; 8002860 <__ieee754_rem_pio2f+0x238>
 8002668:	eddf 6a7e 	vldrne	s13, [pc, #504]	; 8002864 <__ieee754_rem_pio2f+0x23c>
 800266c:	eddf 6a7e 	vldreq	s13, [pc, #504]	; 8002868 <__ieee754_rem_pio2f+0x240>
 8002670:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8002674:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8002678:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800267c:	ed80 7a00 	vstr	s14, [r0]
 8002680:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002684:	edc0 7a01 	vstr	s15, [r0, #4]
 8002688:	2001      	movs	r0, #1
 800268a:	b006      	add	sp, #24
 800268c:	bd70      	pop	{r4, r5, r6, pc}
 800268e:	4a77      	ldr	r2, [pc, #476]	; (800286c <__ieee754_rem_pio2f+0x244>)
 8002690:	4294      	cmp	r4, r2
 8002692:	d952      	bls.n	800273a <__ieee754_rem_pio2f+0x112>
 8002694:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002698:	d248      	bcs.n	800272c <__ieee754_rem_pio2f+0x104>
 800269a:	15e2      	asrs	r2, r4, #23
 800269c:	3a86      	subs	r2, #134	; 0x86
 800269e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80026aa:	eddf 6a71 	vldr	s13, [pc, #452]	; 8002870 <__ieee754_rem_pio2f+0x248>
 80026ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026b6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80026ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80026c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026ca:	ed8d 7a04 	vstr	s14, [sp, #16]
 80026ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026da:	edcd 7a05 	vstr	s15, [sp, #20]
 80026de:	f040 8098 	bne.w	8002812 <__ieee754_rem_pio2f+0x1ea>
 80026e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2302      	movne	r3, #2
 80026f0:	4960      	ldr	r1, [pc, #384]	; (8002874 <__ieee754_rem_pio2f+0x24c>)
 80026f2:	9101      	str	r1, [sp, #4]
 80026f4:	2102      	movs	r1, #2
 80026f6:	9100      	str	r1, [sp, #0]
 80026f8:	a803      	add	r0, sp, #12
 80026fa:	4629      	mov	r1, r5
 80026fc:	f000 f8cc 	bl	8002898 <__kernel_rem_pio2f>
 8002700:	2e00      	cmp	r6, #0
 8002702:	dac2      	bge.n	800268a <__ieee754_rem_pio2f+0x62>
 8002704:	ed95 7a00 	vldr	s14, [r5]
 8002708:	edd5 7a01 	vldr	s15, [r5, #4]
 800270c:	eeb1 7a47 	vneg.f32	s14, s14
 8002710:	eef1 7a67 	vneg.f32	s15, s15
 8002714:	ed85 7a00 	vstr	s14, [r5]
 8002718:	edc5 7a01 	vstr	s15, [r5, #4]
 800271c:	4240      	negs	r0, r0
 800271e:	e7b4      	b.n	800268a <__ieee754_rem_pio2f+0x62>
 8002720:	2200      	movs	r2, #0
 8002722:	ed85 0a00 	vstr	s0, [r5]
 8002726:	6042      	str	r2, [r0, #4]
 8002728:	2000      	movs	r0, #0
 800272a:	e7ae      	b.n	800268a <__ieee754_rem_pio2f+0x62>
 800272c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002730:	edc0 7a01 	vstr	s15, [r0, #4]
 8002734:	edc0 7a00 	vstr	s15, [r0]
 8002738:	e7f6      	b.n	8002728 <__ieee754_rem_pio2f+0x100>
 800273a:	f000 f8a5 	bl	8002888 <fabsf>
 800273e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002878 <__ieee754_rem_pio2f+0x250>
 8002742:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8002858 <__ieee754_rem_pio2f+0x230>
 8002746:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800274a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800274e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002864 <__ieee754_rem_pio2f+0x23c>
 8002752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002756:	ee17 0a90 	vmov	r0, s15
 800275a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800275e:	281f      	cmp	r0, #31
 8002760:	eea6 0ac6 	vfms.f32	s0, s13, s12
 8002764:	ee66 7a87 	vmul.f32	s15, s13, s14
 8002768:	eeb1 6a66 	vneg.f32	s12, s13
 800276c:	dc20      	bgt.n	80027b0 <__ieee754_rem_pio2f+0x188>
 800276e:	4a43      	ldr	r2, [pc, #268]	; (800287c <__ieee754_rem_pio2f+0x254>)
 8002770:	1e41      	subs	r1, r0, #1
 8002772:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8002776:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800277a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800277e:	4293      	cmp	r3, r2
 8002780:	d016      	beq.n	80027b0 <__ieee754_rem_pio2f+0x188>
 8002782:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002786:	ee30 0a47 	vsub.f32	s0, s0, s14
 800278a:	2e00      	cmp	r6, #0
 800278c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002790:	ed85 7a00 	vstr	s14, [r5]
 8002794:	ed85 0a01 	vstr	s0, [r5, #4]
 8002798:	f6bf af77 	bge.w	800268a <__ieee754_rem_pio2f+0x62>
 800279c:	eeb1 7a47 	vneg.f32	s14, s14
 80027a0:	eeb1 0a40 	vneg.f32	s0, s0
 80027a4:	ed85 7a00 	vstr	s14, [r5]
 80027a8:	ed85 0a01 	vstr	s0, [r5, #4]
 80027ac:	4240      	negs	r0, r0
 80027ae:	e76c      	b.n	800268a <__ieee754_rem_pio2f+0x62>
 80027b0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80027b4:	15e2      	asrs	r2, r4, #23
 80027b6:	ee17 3a10 	vmov	r3, s14
 80027ba:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80027be:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	dddf      	ble.n	8002786 <__ieee754_rem_pio2f+0x15e>
 80027c6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002860 <__ieee754_rem_pio2f+0x238>
 80027ca:	ed9f 5a27 	vldr	s10, [pc, #156]	; 8002868 <__ieee754_rem_pio2f+0x240>
 80027ce:	eef0 5a40 	vmov.f32	s11, s0
 80027d2:	eee6 5a07 	vfma.f32	s11, s12, s14
 80027d6:	ee70 7a65 	vsub.f32	s15, s0, s11
 80027da:	eee6 7a07 	vfma.f32	s15, s12, s14
 80027de:	eed6 7a85 	vfnms.f32	s15, s13, s10
 80027e2:	ee35 7ae7 	vsub.f32	s14, s11, s15
 80027e6:	ee17 3a10 	vmov	r3, s14
 80027ea:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80027ee:	1ad2      	subs	r2, r2, r3
 80027f0:	2a19      	cmp	r2, #25
 80027f2:	dd10      	ble.n	8002816 <__ieee754_rem_pio2f+0x1ee>
 80027f4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002880 <__ieee754_rem_pio2f+0x258>
 80027f8:	ed9f 5a22 	vldr	s10, [pc, #136]	; 8002884 <__ieee754_rem_pio2f+0x25c>
 80027fc:	eeb0 0a65 	vmov.f32	s0, s11
 8002800:	eea6 0a07 	vfma.f32	s0, s12, s14
 8002804:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8002808:	eee6 7a07 	vfma.f32	s15, s12, s14
 800280c:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8002810:	e7b7      	b.n	8002782 <__ieee754_rem_pio2f+0x15a>
 8002812:	2303      	movs	r3, #3
 8002814:	e76c      	b.n	80026f0 <__ieee754_rem_pio2f+0xc8>
 8002816:	eeb0 0a65 	vmov.f32	s0, s11
 800281a:	e7b4      	b.n	8002786 <__ieee754_rem_pio2f+0x15e>
 800281c:	4296      	cmp	r6, r2
 800281e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002822:	bf09      	itett	eq
 8002824:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 8002860 <__ieee754_rem_pio2f+0x238>
 8002828:	eddf 6a0e 	vldrne	s13, [pc, #56]	; 8002864 <__ieee754_rem_pio2f+0x23c>
 800282c:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 8002868 <__ieee754_rem_pio2f+0x240>
 8002830:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002834:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002838:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800283c:	ed80 7a00 	vstr	s14, [r0]
 8002840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002844:	edc0 7a01 	vstr	s15, [r0, #4]
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	e71d      	b.n	800268a <__ieee754_rem_pio2f+0x62>
 800284e:	bf00      	nop
 8002850:	3f490fd8 	.word	0x3f490fd8
 8002854:	4016cbe3 	.word	0x4016cbe3
 8002858:	3fc90f80 	.word	0x3fc90f80
 800285c:	3fc90fd0 	.word	0x3fc90fd0
 8002860:	37354400 	.word	0x37354400
 8002864:	37354443 	.word	0x37354443
 8002868:	2e85a308 	.word	0x2e85a308
 800286c:	43490f80 	.word	0x43490f80
 8002870:	43800000 	.word	0x43800000
 8002874:	080031c4 	.word	0x080031c4
 8002878:	3f22f984 	.word	0x3f22f984
 800287c:	08003144 	.word	0x08003144
 8002880:	2e85a300 	.word	0x2e85a300
 8002884:	248d3132 	.word	0x248d3132

08002888 <fabsf>:
 8002888:	ee10 3a10 	vmov	r3, s0
 800288c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002890:	ee00 3a10 	vmov	s0, r3
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop

08002898 <__kernel_rem_pio2f>:
 8002898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800289c:	ed2d 8b04 	vpush	{d8-d9}
 80028a0:	b0db      	sub	sp, #364	; 0x16c
 80028a2:	460c      	mov	r4, r1
 80028a4:	4681      	mov	r9, r0
 80028a6:	4611      	mov	r1, r2
 80028a8:	9868      	ldr	r0, [sp, #416]	; 0x1a0
 80028aa:	4a96      	ldr	r2, [pc, #600]	; (8002b04 <__kernel_rem_pio2f+0x26c>)
 80028ac:	9304      	str	r3, [sp, #16]
 80028ae:	461e      	mov	r6, r3
 80028b0:	4623      	mov	r3, r4
 80028b2:	1d0c      	adds	r4, r1, #4
 80028b4:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80028b8:	f106 37ff 	add.w	r7, r6, #4294967295
 80028bc:	f2c0 82b0 	blt.w	8002e20 <__kernel_rem_pio2f+0x588>
 80028c0:	1eca      	subs	r2, r1, #3
 80028c2:	bf48      	it	mi
 80028c4:	1d0a      	addmi	r2, r1, #4
 80028c6:	10d2      	asrs	r2, r2, #3
 80028c8:	9203      	str	r2, [sp, #12]
 80028ca:	3201      	adds	r2, #1
 80028cc:	00d2      	lsls	r2, r2, #3
 80028ce:	9206      	str	r2, [sp, #24]
 80028d0:	9a06      	ldr	r2, [sp, #24]
 80028d2:	9803      	ldr	r0, [sp, #12]
 80028d4:	19ee      	adds	r6, r5, r7
 80028d6:	eba1 0202 	sub.w	r2, r1, r2
 80028da:	eba0 0007 	sub.w	r0, r0, r7
 80028de:	d419      	bmi.n	8002914 <__kernel_rem_pio2f+0x7c>
 80028e0:	3601      	adds	r6, #1
 80028e2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002b08 <__kernel_rem_pio2f+0x270>
 80028e6:	f8dd c1a4 	ldr.w	ip, [sp, #420]	; 0x1a4
 80028ea:	4406      	add	r6, r0
 80028ec:	ac1e      	add	r4, sp, #120	; 0x78
 80028ee:	469e      	mov	lr, r3
 80028f0:	2800      	cmp	r0, #0
 80028f2:	bfa4      	itt	ge
 80028f4:	f85c 3020 	ldrge.w	r3, [ip, r0, lsl #2]
 80028f8:	ee07 3a90 	vmovge	s15, r3
 80028fc:	f100 0001 	add.w	r0, r0, #1
 8002900:	bfac      	ite	ge
 8002902:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8002906:	eef0 7a47 	vmovlt.f32	s15, s14
 800290a:	42b0      	cmp	r0, r6
 800290c:	ece4 7a01 	vstmia	r4!, {s15}
 8002910:	d1ee      	bne.n	80028f0 <__kernel_rem_pio2f+0x58>
 8002912:	4673      	mov	r3, lr
 8002914:	2d00      	cmp	r5, #0
 8002916:	f2c0 82d9 	blt.w	8002ecc <__kernel_rem_pio2f+0x634>
 800291a:	9804      	ldr	r0, [sp, #16]
 800291c:	ac1e      	add	r4, sp, #120	; 0x78
 800291e:	eb04 0680 	add.w	r6, r4, r0, lsl #2
 8002922:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8002926:	eb05 0e00 	add.w	lr, r5, r0
 800292a:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
 800292e:	463c      	mov	r4, r7
 8002930:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002934:	2f00      	cmp	r7, #0
 8002936:	eddf 7a74 	vldr	s15, [pc, #464]	; 8002b08 <__kernel_rem_pio2f+0x270>
 800293a:	db09      	blt.n	8002950 <__kernel_rem_pio2f+0xb8>
 800293c:	46b3      	mov	fp, r6
 800293e:	46ca      	mov	sl, r9
 8002940:	ecfa 6a01 	vldmia	sl!, {s13}
 8002944:	ed3b 7a01 	vldmdb	fp!, {s14}
 8002948:	4582      	cmp	sl, r0
 800294a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800294e:	d1f7      	bne.n	8002940 <__kernel_rem_pio2f+0xa8>
 8002950:	3401      	adds	r4, #1
 8002952:	4574      	cmp	r4, lr
 8002954:	ecec 7a01 	vstmia	ip!, {s15}
 8002958:	f106 0604 	add.w	r6, r6, #4
 800295c:	d1ea      	bne.n	8002934 <__kernel_rem_pio2f+0x9c>
 800295e:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8002962:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 8002966:	e9cd 3107 	strd	r3, r1, [sp, #28]
 800296a:	3804      	subs	r0, #4
 800296c:	ed9f 9a68 	vldr	s18, [pc, #416]	; 8002b10 <__kernel_rem_pio2f+0x278>
 8002970:	eddf 8a66 	vldr	s17, [pc, #408]	; 8002b0c <__kernel_rem_pio2f+0x274>
 8002974:	9005      	str	r0, [sp, #20]
 8002976:	eb09 0408 	add.w	r4, r9, r8
 800297a:	46ab      	mov	fp, r5
 800297c:	eb0a 0885 	add.w	r8, sl, r5, lsl #2
 8002980:	ae46      	add	r6, sp, #280	; 0x118
 8002982:	9501      	str	r5, [sp, #4]
 8002984:	4610      	mov	r0, r2
 8002986:	ab5a      	add	r3, sp, #360	; 0x168
 8002988:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 800298c:	f1bb 0f00 	cmp.w	fp, #0
 8002990:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8002994:	dd16      	ble.n	80029c4 <__kernel_rem_pio2f+0x12c>
 8002996:	eb06 038b 	add.w	r3, r6, fp, lsl #2
 800299a:	4652      	mov	r2, sl
 800299c:	ee60 7a09 	vmul.f32	s15, s0, s18
 80029a0:	eeb0 7a40 	vmov.f32	s14, s0
 80029a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a8:	ed73 6a01 	vldmdb	r3!, {s13}
 80029ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b0:	42b3      	cmp	r3, r6
 80029b2:	eea7 7ae8 	vfms.f32	s14, s15, s17
 80029b6:	ee37 0aa6 	vadd.f32	s0, s15, s13
 80029ba:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80029be:	eca2 7a01 	vstmia	r2!, {s14}
 80029c2:	d1eb      	bne.n	800299c <__kernel_rem_pio2f+0x104>
 80029c4:	9002      	str	r0, [sp, #8]
 80029c6:	f000 faa5 	bl	8002f14 <scalbnf>
 80029ca:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 80029ce:	eeb0 8a40 	vmov.f32	s16, s0
 80029d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80029d6:	f000 fb0f 	bl	8002ff8 <floorf>
 80029da:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80029de:	eea0 8a67 	vfms.f32	s16, s0, s15
 80029e2:	9802      	ldr	r0, [sp, #8]
 80029e4:	2800      	cmp	r0, #0
 80029e6:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 80029ea:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 80029ee:	ee38 8a67 	vsub.f32	s16, s16, s15
 80029f2:	dd6e      	ble.n	8002ad2 <__kernel_rem_pio2f+0x23a>
 80029f4:	f10b 3cff 	add.w	ip, fp, #4294967295
 80029f8:	f1c0 0308 	rsb	r3, r0, #8
 80029fc:	f85a 202c 	ldr.w	r2, [sl, ip, lsl #2]
 8002a00:	fa42 f503 	asr.w	r5, r2, r3
 8002a04:	fa05 f303 	lsl.w	r3, r5, r3
 8002a08:	1ad2      	subs	r2, r2, r3
 8002a0a:	f1c0 0107 	rsb	r1, r0, #7
 8002a0e:	ee19 3a90 	vmov	r3, s19
 8002a12:	fa42 f101 	asr.w	r1, r2, r1
 8002a16:	442b      	add	r3, r5
 8002a18:	2900      	cmp	r1, #0
 8002a1a:	f84a 202c 	str.w	r2, [sl, ip, lsl #2]
 8002a1e:	ee09 3a90 	vmov	s19, r3
 8002a22:	f300 814b 	bgt.w	8002cbc <__kernel_rem_pio2f+0x424>
 8002a26:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2e:	f040 80ba 	bne.w	8002ba6 <__kernel_rem_pio2f+0x30e>
 8002a32:	9b01      	ldr	r3, [sp, #4]
 8002a34:	459b      	cmp	fp, r3
 8002a36:	dd0b      	ble.n	8002a50 <__kernel_rem_pio2f+0x1b8>
 8002a38:	eb0a 038b 	add.w	r3, sl, fp, lsl #2
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
 8002a42:	4543      	cmp	r3, r8
 8002a44:	ea42 0205 	orr.w	r2, r2, r5
 8002a48:	d1f9      	bne.n	8002a3e <__kernel_rem_pio2f+0x1a6>
 8002a4a:	2a00      	cmp	r2, #0
 8002a4c:	f040 8154 	bne.w	8002cf8 <__kernel_rem_pio2f+0x460>
 8002a50:	9b01      	ldr	r3, [sp, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f040 8144 	bne.w	8002ce6 <__kernel_rem_pio2f+0x44e>
 8002a5e:	9b05      	ldr	r3, [sp, #20]
 8002a60:	2101      	movs	r1, #1
 8002a62:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002a66:	3101      	adds	r1, #1
 8002a68:	2a00      	cmp	r2, #0
 8002a6a:	d0fa      	beq.n	8002a62 <__kernel_rem_pio2f+0x1ca>
 8002a6c:	f10b 0301 	add.w	r3, fp, #1
 8002a70:	4459      	add	r1, fp
 8002a72:	469c      	mov	ip, r3
 8002a74:	9d03      	ldr	r5, [sp, #12]
 8002a76:	9a04      	ldr	r2, [sp, #16]
 8002a78:	eb05 0e03 	add.w	lr, r5, r3
 8002a7c:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8002a80:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
 8002a82:	445a      	add	r2, fp
 8002a84:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002a88:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 8002a8c:	ab1e      	add	r3, sp, #120	; 0x78
 8002a8e:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8002a92:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8002a96:	edde 7a01 	vldr	s15, [lr, #4]
 8002a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9e:	2f00      	cmp	r7, #0
 8002aa0:	f10e 0e04 	add.w	lr, lr, #4
 8002aa4:	ece5 7a01 	vstmia	r5!, {s15}
 8002aa8:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002b08 <__kernel_rem_pio2f+0x270>
 8002aac:	db09      	blt.n	8002ac2 <__kernel_rem_pio2f+0x22a>
 8002aae:	462a      	mov	r2, r5
 8002ab0:	464b      	mov	r3, r9
 8002ab2:	ecf3 6a01 	vldmia	r3!, {s13}
 8002ab6:	ed32 7a01 	vldmdb	r2!, {s14}
 8002aba:	42a3      	cmp	r3, r4
 8002abc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002ac0:	d1f7      	bne.n	8002ab2 <__kernel_rem_pio2f+0x21a>
 8002ac2:	f10c 0c01 	add.w	ip, ip, #1
 8002ac6:	4561      	cmp	r1, ip
 8002ac8:	eceb 7a01 	vstmia	fp!, {s15}
 8002acc:	dae3      	bge.n	8002a96 <__kernel_rem_pio2f+0x1fe>
 8002ace:	468b      	mov	fp, r1
 8002ad0:	e759      	b.n	8002986 <__kernel_rem_pio2f+0xee>
 8002ad2:	f040 80e9 	bne.w	8002ca8 <__kernel_rem_pio2f+0x410>
 8002ad6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002ada:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8002ade:	11c9      	asrs	r1, r1, #7
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	dda0      	ble.n	8002a26 <__kernel_rem_pio2f+0x18e>
 8002ae4:	ee19 3a90 	vmov	r3, s19
 8002ae8:	f1bb 0f00 	cmp.w	fp, #0
 8002aec:	f103 0301 	add.w	r3, r3, #1
 8002af0:	ee09 3a90 	vmov	s19, r3
 8002af4:	f340 81ee 	ble.w	8002ed4 <__kernel_rem_pio2f+0x63c>
 8002af8:	2500      	movs	r5, #0
 8002afa:	46d4      	mov	ip, sl
 8002afc:	462a      	mov	r2, r5
 8002afe:	9102      	str	r1, [sp, #8]
 8002b00:	4686      	mov	lr, r0
 8002b02:	e019      	b.n	8002b38 <__kernel_rem_pio2f+0x2a0>
 8002b04:	08003508 	.word	0x08003508
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	43800000 	.word	0x43800000
 8002b10:	3b800000 	.word	0x3b800000
 8002b14:	3501      	adds	r5, #1
 8002b16:	45ab      	cmp	fp, r5
 8002b18:	f841 0c04 	str.w	r0, [r1, #-4]
 8002b1c:	f340 80e8 	ble.w	8002cf0 <__kernel_rem_pio2f+0x458>
 8002b20:	680b      	ldr	r3, [r1, #0]
 8002b22:	f10c 0c08 	add.w	ip, ip, #8
 8002b26:	3501      	adds	r5, #1
 8002b28:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002b2c:	45ab      	cmp	fp, r5
 8002b2e:	f04f 0201 	mov.w	r2, #1
 8002b32:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002b36:	dd0d      	ble.n	8002b54 <__kernel_rem_pio2f+0x2bc>
 8002b38:	4661      	mov	r1, ip
 8002b3a:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	f040 80b0 	bne.w	8002ca4 <__kernel_rem_pio2f+0x40c>
 8002b44:	f5c3 7080 	rsb	r0, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e3      	bne.n	8002b14 <__kernel_rem_pio2f+0x27c>
 8002b4c:	3501      	adds	r5, #1
 8002b4e:	45ab      	cmp	fp, r5
 8002b50:	468c      	mov	ip, r1
 8002b52:	dcf1      	bgt.n	8002b38 <__kernel_rem_pio2f+0x2a0>
 8002b54:	9902      	ldr	r1, [sp, #8]
 8002b56:	4670      	mov	r0, lr
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	dd0c      	ble.n	8002b76 <__kernel_rem_pio2f+0x2de>
 8002b5c:	2801      	cmp	r0, #1
 8002b5e:	f000 80b9 	beq.w	8002cd4 <__kernel_rem_pio2f+0x43c>
 8002b62:	2802      	cmp	r0, #2
 8002b64:	d107      	bne.n	8002b76 <__kernel_rem_pio2f+0x2de>
 8002b66:	f10b 35ff 	add.w	r5, fp, #4294967295
 8002b6a:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8002b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b72:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 8002b76:	2902      	cmp	r1, #2
 8002b78:	f47f af55 	bne.w	8002a26 <__kernel_rem_pio2f+0x18e>
 8002b7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b80:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002b84:	2a00      	cmp	r2, #0
 8002b86:	f43f af4e 	beq.w	8002a26 <__kernel_rem_pio2f+0x18e>
 8002b8a:	9109      	str	r1, [sp, #36]	; 0x24
 8002b8c:	9002      	str	r0, [sp, #8]
 8002b8e:	f000 f9c1 	bl	8002f14 <scalbnf>
 8002b92:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002b96:	9802      	ldr	r0, [sp, #8]
 8002b98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b9a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba2:	f43f af46 	beq.w	8002a32 <__kernel_rem_pio2f+0x19a>
 8002ba6:	9b07      	ldr	r3, [sp, #28]
 8002ba8:	9d01      	ldr	r5, [sp, #4]
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	4688      	mov	r8, r1
 8002bae:	9b06      	ldr	r3, [sp, #24]
 8002bb0:	9908      	ldr	r1, [sp, #32]
 8002bb2:	9002      	str	r0, [sp, #8]
 8002bb4:	eeb0 0a48 	vmov.f32	s0, s16
 8002bb8:	1a58      	subs	r0, r3, r1
 8002bba:	f000 f9ab 	bl	8002f14 <scalbnf>
 8002bbe:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 8002b0c <__kernel_rem_pio2f+0x274>
 8002bc2:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8002bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bca:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8002bce:	eef0 7a40 	vmov.f32	s15, s0
 8002bd2:	f2c0 814d 	blt.w	8002e70 <__kernel_rem_pio2f+0x5d8>
 8002bd6:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8002b10 <__kernel_rem_pio2f+0x278>
 8002bda:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002bde:	f10b 0401 	add.w	r4, fp, #1
 8002be2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002be6:	3208      	adds	r2, #8
 8002be8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bec:	eee7 7a66 	vfms.f32	s15, s14, s13
 8002bf0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf8:	ee17 1a90 	vmov	r1, s15
 8002bfc:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 8002c00:	ee17 1a10 	vmov	r1, s14
 8002c04:	f84a 1024 	str.w	r1, [sl, r4, lsl #2]
 8002c08:	4610      	mov	r0, r2
 8002c0a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	f000 f980 	bl	8002f14 <scalbnf>
 8002c14:	2c00      	cmp	r4, #0
 8002c16:	9b01      	ldr	r3, [sp, #4]
 8002c18:	eeb0 7a40 	vmov.f32	s14, s0
 8002c1c:	f2c0 814c 	blt.w	8002eb8 <__kernel_rem_pio2f+0x620>
 8002c20:	1c60      	adds	r0, r4, #1
 8002c22:	ae46      	add	r6, sp, #280	; 0x118
 8002c24:	ed5f 6a46 	vldr	s13, [pc, #-280]	; 8002b10 <__kernel_rem_pio2f+0x278>
 8002c28:	0081      	lsls	r1, r0, #2
 8002c2a:	eb0a 0280 	add.w	r2, sl, r0, lsl #2
 8002c2e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8002c32:	ed72 7a01 	vldmdb	r2!, {s15}
 8002c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3a:	4552      	cmp	r2, sl
 8002c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c44:	ed60 7a01 	vstmdb	r0!, {s15}
 8002c48:	d1f3      	bne.n	8002c32 <__kernel_rem_pio2f+0x39a>
 8002c4a:	1f0a      	subs	r2, r1, #4
 8002c4c:	a846      	add	r0, sp, #280	; 0x118
 8002c4e:	2d00      	cmp	r5, #0
 8002c50:	eb00 0702 	add.w	r7, r0, r2
 8002c54:	f04f 0600 	mov.w	r6, #0
 8002c58:	469c      	mov	ip, r3
 8002c5a:	db20      	blt.n	8002c9e <__kernel_rem_pio2f+0x406>
 8002c5c:	4bab      	ldr	r3, [pc, #684]	; (8002f0c <__kernel_rem_pio2f+0x674>)
 8002c5e:	eddf 7aac 	vldr	s15, [pc, #688]	; 8002f10 <__kernel_rem_pio2f+0x678>
 8002c62:	4638      	mov	r0, r7
 8002c64:	2200      	movs	r2, #0
 8002c66:	e001      	b.n	8002c6c <__kernel_rem_pio2f+0x3d4>
 8002c68:	42b2      	cmp	r2, r6
 8002c6a:	dc08      	bgt.n	8002c7e <__kernel_rem_pio2f+0x3e6>
 8002c6c:	ecf3 6a01 	vldmia	r3!, {s13}
 8002c70:	ecb0 7a01 	vldmia	r0!, {s14}
 8002c74:	3201      	adds	r2, #1
 8002c76:	4295      	cmp	r5, r2
 8002c78:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002c7c:	daf4      	bge.n	8002c68 <__kernel_rem_pio2f+0x3d0>
 8002c7e:	ab5a      	add	r3, sp, #360	; 0x168
 8002c80:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 8002c84:	42a6      	cmp	r6, r4
 8002c86:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8002c8a:	ea4f 0086 	mov.w	r0, r6, lsl #2
 8002c8e:	f106 0201 	add.w	r2, r6, #1
 8002c92:	f1a7 0704 	sub.w	r7, r7, #4
 8002c96:	d047      	beq.n	8002d28 <__kernel_rem_pio2f+0x490>
 8002c98:	2d00      	cmp	r5, #0
 8002c9a:	4616      	mov	r6, r2
 8002c9c:	dade      	bge.n	8002c5c <__kernel_rem_pio2f+0x3c4>
 8002c9e:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8002f10 <__kernel_rem_pio2f+0x678>
 8002ca2:	e7ec      	b.n	8002c7e <__kernel_rem_pio2f+0x3e6>
 8002ca4:	468c      	mov	ip, r1
 8002ca6:	e73e      	b.n	8002b26 <__kernel_rem_pio2f+0x28e>
 8002ca8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002cac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb4:	f280 80a2 	bge.w	8002dfc <__kernel_rem_pio2f+0x564>
 8002cb8:	2100      	movs	r1, #0
 8002cba:	e6b4      	b.n	8002a26 <__kernel_rem_pio2f+0x18e>
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f1bb 0f00 	cmp.w	fp, #0
 8002cc2:	ee09 3a90 	vmov	s19, r3
 8002cc6:	bfd8      	it	le
 8002cc8:	2200      	movle	r2, #0
 8002cca:	f73f af15 	bgt.w	8002af8 <__kernel_rem_pio2f+0x260>
 8002cce:	2801      	cmp	r0, #1
 8002cd0:	f47f af47 	bne.w	8002b62 <__kernel_rem_pio2f+0x2ca>
 8002cd4:	f10b 35ff 	add.w	r5, fp, #4294967295
 8002cd8:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8002cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce0:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 8002ce4:	e747      	b.n	8002b76 <__kernel_rem_pio2f+0x2de>
 8002ce6:	f10b 0301 	add.w	r3, fp, #1
 8002cea:	469c      	mov	ip, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	e6c1      	b.n	8002a74 <__kernel_rem_pio2f+0x1dc>
 8002cf0:	9902      	ldr	r1, [sp, #8]
 8002cf2:	4670      	mov	r0, lr
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	e72f      	b.n	8002b58 <__kernel_rem_pio2f+0x2c0>
 8002cf8:	f10b 34ff 	add.w	r4, fp, #4294967295
 8002cfc:	4688      	mov	r8, r1
 8002cfe:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8002d02:	9d01      	ldr	r5, [sp, #4]
 8002d04:	9b07      	ldr	r3, [sp, #28]
 8002d06:	f1a0 0208 	sub.w	r2, r0, #8
 8002d0a:	2900      	cmp	r1, #0
 8002d0c:	f47f af7c 	bne.w	8002c08 <__kernel_rem_pio2f+0x370>
 8002d10:	f10b 4180 	add.w	r1, fp, #1073741824	; 0x40000000
 8002d14:	3901      	subs	r1, #1
 8002d16:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8002d1a:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8002d1e:	3c01      	subs	r4, #1
 8002d20:	3a08      	subs	r2, #8
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d0f9      	beq.n	8002d1a <__kernel_rem_pio2f+0x482>
 8002d26:	e76f      	b.n	8002c08 <__kernel_rem_pio2f+0x370>
 8002d28:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002d2a:	2a02      	cmp	r2, #2
 8002d2c:	4663      	mov	r3, ip
 8002d2e:	dc1b      	bgt.n	8002d68 <__kernel_rem_pio2f+0x4d0>
 8002d30:	2a00      	cmp	r2, #0
 8002d32:	dc7a      	bgt.n	8002e2a <__kernel_rem_pio2f+0x592>
 8002d34:	d10f      	bne.n	8002d56 <__kernel_rem_pio2f+0x4be>
 8002d36:	aa32      	add	r2, sp, #200	; 0xc8
 8002d38:	eddf 7a75 	vldr	s15, [pc, #468]	; 8002f10 <__kernel_rem_pio2f+0x678>
 8002d3c:	4411      	add	r1, r2
 8002d3e:	ed31 7a01 	vldmdb	r1!, {s14}
 8002d42:	4291      	cmp	r1, r2
 8002d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d48:	d1f9      	bne.n	8002d3e <__kernel_rem_pio2f+0x4a6>
 8002d4a:	4642      	mov	r2, r8
 8002d4c:	b10a      	cbz	r2, 8002d52 <__kernel_rem_pio2f+0x4ba>
 8002d4e:	eef1 7a67 	vneg.f32	s15, s15
 8002d52:	edc3 7a00 	vstr	s15, [r3]
 8002d56:	ee19 3a90 	vmov	r3, s19
 8002d5a:	f003 0007 	and.w	r0, r3, #7
 8002d5e:	b05b      	add	sp, #364	; 0x16c
 8002d60:	ecbd 8b04 	vpop	{d8-d9}
 8002d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d68:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002d6a:	2a03      	cmp	r2, #3
 8002d6c:	d1f3      	bne.n	8002d56 <__kernel_rem_pio2f+0x4be>
 8002d6e:	2c00      	cmp	r4, #0
 8002d70:	f000 80bc 	beq.w	8002eec <__kernel_rem_pio2f+0x654>
 8002d74:	a932      	add	r1, sp, #200	; 0xc8
 8002d76:	180d      	adds	r5, r1, r0
 8002d78:	ed95 7a00 	vldr	s14, [r5]
 8002d7c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8002d80:	00a7      	lsls	r7, r4, #2
 8002d82:	4606      	mov	r6, r0
 8002d84:	ed56 7a01 	vldr	s15, [r6, #-4]
 8002d88:	eef0 6a47 	vmov.f32	s13, s14
 8002d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d90:	4632      	mov	r2, r6
 8002d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d96:	3e04      	subs	r6, #4
 8002d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d9c:	42b1      	cmp	r1, r6
 8002d9e:	edc2 7a00 	vstr	s15, [r2]
 8002da2:	ed02 7a01 	vstr	s14, [r2, #-4]
 8002da6:	d1ed      	bne.n	8002d84 <__kernel_rem_pio2f+0x4ec>
 8002da8:	2c01      	cmp	r4, #1
 8002daa:	f000 809f 	beq.w	8002eec <__kernel_rem_pio2f+0x654>
 8002dae:	ed95 7a00 	vldr	s14, [r5]
 8002db2:	ed70 7a01 	vldmdb	r0!, {s15}
 8002db6:	eef0 6a47 	vmov.f32	s13, s14
 8002dba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbe:	4282      	cmp	r2, r0
 8002dc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dc4:	ed80 7a00 	vstr	s14, [r0]
 8002dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dcc:	edc0 7a01 	vstr	s15, [r0, #4]
 8002dd0:	d1ef      	bne.n	8002db2 <__kernel_rem_pio2f+0x51a>
 8002dd2:	1d38      	adds	r0, r7, #4
 8002dd4:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8002f10 <__kernel_rem_pio2f+0x678>
 8002dd8:	4401      	add	r1, r0
 8002dda:	3204      	adds	r2, #4
 8002ddc:	ed31 7a01 	vldmdb	r1!, {s14}
 8002de0:	428a      	cmp	r2, r1
 8002de2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002de6:	d1f9      	bne.n	8002ddc <__kernel_rem_pio2f+0x544>
 8002de8:	4642      	mov	r2, r8
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	d148      	bne.n	8002e80 <__kernel_rem_pio2f+0x5e8>
 8002dee:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8002df0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8002df2:	6019      	str	r1, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	edc3 7a02 	vstr	s15, [r3, #8]
 8002dfa:	e7ac      	b.n	8002d56 <__kernel_rem_pio2f+0x4be>
 8002dfc:	ee19 3a90 	vmov	r3, s19
 8002e00:	f1bb 0f00 	cmp.w	fp, #0
 8002e04:	f103 0301 	add.w	r3, r3, #1
 8002e08:	ee09 3a90 	vmov	s19, r3
 8002e0c:	bfc8      	it	gt
 8002e0e:	2102      	movgt	r1, #2
 8002e10:	f73f ae72 	bgt.w	8002af8 <__kernel_rem_pio2f+0x260>
 8002e14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002e18:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	e602      	b.n	8002a26 <__kernel_rem_pio2f+0x18e>
 8002e20:	2208      	movs	r2, #8
 8002e22:	9206      	str	r2, [sp, #24]
 8002e24:	2200      	movs	r2, #0
 8002e26:	9203      	str	r2, [sp, #12]
 8002e28:	e552      	b.n	80028d0 <__kernel_rem_pio2f+0x38>
 8002e2a:	aa32      	add	r2, sp, #200	; 0xc8
 8002e2c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8002f10 <__kernel_rem_pio2f+0x678>
 8002e30:	4411      	add	r1, r2
 8002e32:	ed31 7a01 	vldmdb	r1!, {s14}
 8002e36:	428a      	cmp	r2, r1
 8002e38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e3c:	d1f9      	bne.n	8002e32 <__kernel_rem_pio2f+0x59a>
 8002e3e:	4642      	mov	r2, r8
 8002e40:	bb7a      	cbnz	r2, 8002ea2 <__kernel_rem_pio2f+0x60a>
 8002e42:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8002e46:	edc3 7a00 	vstr	s15, [r3]
 8002e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4e:	b164      	cbz	r4, 8002e6a <__kernel_rem_pio2f+0x5d2>
 8002e50:	a933      	add	r1, sp, #204	; 0xcc
 8002e52:	2201      	movs	r2, #1
 8002e54:	ecb1 7a01 	vldmia	r1!, {s14}
 8002e58:	3201      	adds	r2, #1
 8002e5a:	4294      	cmp	r4, r2
 8002e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e60:	daf8      	bge.n	8002e54 <__kernel_rem_pio2f+0x5bc>
 8002e62:	4642      	mov	r2, r8
 8002e64:	b10a      	cbz	r2, 8002e6a <__kernel_rem_pio2f+0x5d2>
 8002e66:	eef1 7a67 	vneg.f32	s15, s15
 8002e6a:	edc3 7a01 	vstr	s15, [r3, #4]
 8002e6e:	e772      	b.n	8002d56 <__kernel_rem_pio2f+0x4be>
 8002e70:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002e74:	465c      	mov	r4, fp
 8002e76:	ee17 1a90 	vmov	r1, s15
 8002e7a:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 8002e7e:	e6c3      	b.n	8002c08 <__kernel_rem_pio2f+0x370>
 8002e80:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8002e84:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8002e88:	eef1 6a66 	vneg.f32	s13, s13
 8002e8c:	eeb1 7a47 	vneg.f32	s14, s14
 8002e90:	eef1 7a67 	vneg.f32	s15, s15
 8002e94:	edc3 6a00 	vstr	s13, [r3]
 8002e98:	ed83 7a01 	vstr	s14, [r3, #4]
 8002e9c:	edc3 7a02 	vstr	s15, [r3, #8]
 8002ea0:	e759      	b.n	8002d56 <__kernel_rem_pio2f+0x4be>
 8002ea2:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8002ea6:	eeb1 7a67 	vneg.f32	s14, s15
 8002eaa:	ed83 7a00 	vstr	s14, [r3]
 8002eae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002eb2:	2c00      	cmp	r4, #0
 8002eb4:	d1cc      	bne.n	8002e50 <__kernel_rem_pio2f+0x5b8>
 8002eb6:	e7d6      	b.n	8002e66 <__kernel_rem_pio2f+0x5ce>
 8002eb8:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002eba:	2a02      	cmp	r2, #2
 8002ebc:	dc12      	bgt.n	8002ee4 <__kernel_rem_pio2f+0x64c>
 8002ebe:	2a00      	cmp	r2, #0
 8002ec0:	dc17      	bgt.n	8002ef2 <__kernel_rem_pio2f+0x65a>
 8002ec2:	f47f af48 	bne.w	8002d56 <__kernel_rem_pio2f+0x4be>
 8002ec6:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002f10 <__kernel_rem_pio2f+0x678>
 8002eca:	e73e      	b.n	8002d4a <__kernel_rem_pio2f+0x4b2>
 8002ecc:	9804      	ldr	r0, [sp, #16]
 8002ece:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8002ed2:	e544      	b.n	800295e <__kernel_rem_pio2f+0xc6>
 8002ed4:	2902      	cmp	r1, #2
 8002ed6:	f47f ada6 	bne.w	8002a26 <__kernel_rem_pio2f+0x18e>
 8002eda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002ede:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8002ee2:	e5a0      	b.n	8002a26 <__kernel_rem_pio2f+0x18e>
 8002ee4:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002ee6:	2a03      	cmp	r2, #3
 8002ee8:	f47f af35 	bne.w	8002d56 <__kernel_rem_pio2f+0x4be>
 8002eec:	eddf 7a08 	vldr	s15, [pc, #32]	; 8002f10 <__kernel_rem_pio2f+0x678>
 8002ef0:	e77a      	b.n	8002de8 <__kernel_rem_pio2f+0x550>
 8002ef2:	4642      	mov	r2, r8
 8002ef4:	b922      	cbnz	r2, 8002f00 <__kernel_rem_pio2f+0x668>
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e7b4      	b.n	8002e6a <__kernel_rem_pio2f+0x5d2>
 8002f00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f04:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e7ac      	b.n	8002e66 <__kernel_rem_pio2f+0x5ce>
 8002f0c:	080034dc 	.word	0x080034dc
 8002f10:	00000000 	.word	0x00000000

08002f14 <scalbnf>:
 8002f14:	ee10 3a10 	vmov	r3, s0
 8002f18:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	d027      	beq.n	8002f70 <scalbnf+0x5c>
 8002f20:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002f24:	d221      	bcs.n	8002f6a <scalbnf+0x56>
 8002f26:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8002f2a:	d122      	bne.n	8002f72 <scalbnf+0x5e>
 8002f2c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8002fdc <scalbnf+0xc8>
 8002f30:	4a2b      	ldr	r2, [pc, #172]	; (8002fe0 <scalbnf+0xcc>)
 8002f32:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002f36:	4290      	cmp	r0, r2
 8002f38:	ee17 3a90 	vmov	r3, s15
 8002f3c:	db33      	blt.n	8002fa6 <scalbnf+0x92>
 8002f3e:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8002f42:	f3c3 51c7 	ubfx	r1, r3, #23, #8
 8002f46:	4560      	cmp	r0, ip
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f1a1 0119 	sub.w	r1, r1, #25
 8002f4e:	dd16      	ble.n	8002f7e <scalbnf+0x6a>
 8002f50:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002fe4 <scalbnf+0xd0>
 8002f54:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002fe8 <scalbnf+0xd4>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	eeb0 7a67 	vmov.f32	s14, s15
 8002f5e:	bfb8      	it	lt
 8002f60:	eef0 7a66 	vmovlt.f32	s15, s13
 8002f64:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002f68:	4770      	bx	lr
 8002f6a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002f6e:	4770      	bx	lr
 8002f70:	4770      	bx	lr
 8002f72:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8002f76:	4560      	cmp	r0, ip
 8002f78:	ea4f 51d1 	mov.w	r1, r1, lsr #23
 8002f7c:	dce8      	bgt.n	8002f50 <scalbnf+0x3c>
 8002f7e:	4401      	add	r1, r0
 8002f80:	29fe      	cmp	r1, #254	; 0xfe
 8002f82:	dce5      	bgt.n	8002f50 <scalbnf+0x3c>
 8002f84:	2900      	cmp	r1, #0
 8002f86:	dc15      	bgt.n	8002fb4 <scalbnf+0xa0>
 8002f88:	f111 0f16 	cmn.w	r1, #22
 8002f8c:	db19      	blt.n	8002fc2 <scalbnf+0xae>
 8002f8e:	3119      	adds	r1, #25
 8002f90:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002f94:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8002f98:	ee07 2a90 	vmov	s15, r2
 8002f9c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002fec <scalbnf+0xd8>
 8002fa0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002fa4:	4770      	bx	lr
 8002fa6:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002ff0 <scalbnf+0xdc>
 8002faa:	ee07 3a10 	vmov	s14, r3
 8002fae:	ee27 0a27 	vmul.f32	s0, s14, s15
 8002fb2:	4770      	bx	lr
 8002fb4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002fb8:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8002fbc:	ee00 3a10 	vmov	s0, r3
 8002fc0:	4770      	bx	lr
 8002fc2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002ff0 <scalbnf+0xdc>
 8002fc6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002ff4 <scalbnf+0xe0>
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	eeb0 7a67 	vmov.f32	s14, s15
 8002fd0:	bfb8      	it	lt
 8002fd2:	eef0 7a66 	vmovlt.f32	s15, s13
 8002fd6:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002fda:	4770      	bx	lr
 8002fdc:	4c000000 	.word	0x4c000000
 8002fe0:	ffff3cb0 	.word	0xffff3cb0
 8002fe4:	7149f2ca 	.word	0x7149f2ca
 8002fe8:	f149f2ca 	.word	0xf149f2ca
 8002fec:	33000000 	.word	0x33000000
 8002ff0:	0da24260 	.word	0x0da24260
 8002ff4:	8da24260 	.word	0x8da24260

08002ff8 <floorf>:
 8002ff8:	ee10 2a10 	vmov	r2, s0
 8002ffc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003000:	3b7f      	subs	r3, #127	; 0x7f
 8003002:	2b16      	cmp	r3, #22
 8003004:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8003008:	dc29      	bgt.n	800305e <floorf+0x66>
 800300a:	2b00      	cmp	r3, #0
 800300c:	4610      	mov	r0, r2
 800300e:	db18      	blt.n	8003042 <floorf+0x4a>
 8003010:	491a      	ldr	r1, [pc, #104]	; (800307c <floorf+0x84>)
 8003012:	4119      	asrs	r1, r3
 8003014:	420a      	tst	r2, r1
 8003016:	d021      	beq.n	800305c <floorf+0x64>
 8003018:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003080 <floorf+0x88>
 800301c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	dd18      	ble.n	800305c <floorf+0x64>
 800302a:	2a00      	cmp	r2, #0
 800302c:	da04      	bge.n	8003038 <floorf+0x40>
 800302e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003032:	fa42 f303 	asr.w	r3, r2, r3
 8003036:	4418      	add	r0, r3
 8003038:	ea20 0301 	bic.w	r3, r0, r1
 800303c:	ee00 3a10 	vmov	s0, r3
 8003040:	4770      	bx	lr
 8003042:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003080 <floorf+0x88>
 8003046:	ee70 7a27 	vadd.f32	s15, s0, s15
 800304a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003052:	dd03      	ble.n	800305c <floorf+0x64>
 8003054:	2a00      	cmp	r2, #0
 8003056:	db08      	blt.n	800306a <floorf+0x72>
 8003058:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003084 <floorf+0x8c>
 800305c:	4770      	bx	lr
 800305e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003062:	d3fb      	bcc.n	800305c <floorf+0x64>
 8003064:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003068:	4770      	bx	lr
 800306a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003088 <floorf+0x90>
 800306e:	2900      	cmp	r1, #0
 8003070:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003074:	bf08      	it	eq
 8003076:	eeb0 0a67 	vmoveq.f32	s0, s15
 800307a:	4770      	bx	lr
 800307c:	007fffff 	.word	0x007fffff
 8003080:	7149f2ca 	.word	0x7149f2ca
 8003084:	00000000 	.word	0x00000000
 8003088:	80000000 	.word	0x80000000

0800308c <__aeabi_f2lz>:
 800308c:	ee07 0a90 	vmov	s15, r0
 8003090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003098:	d401      	bmi.n	800309e <__aeabi_f2lz+0x12>
 800309a:	f000 b80b 	b.w	80030b4 <__aeabi_f2ulz>
 800309e:	eef1 7a67 	vneg.f32	s15, s15
 80030a2:	b508      	push	{r3, lr}
 80030a4:	ee17 0a90 	vmov	r0, s15
 80030a8:	f000 f804 	bl	80030b4 <__aeabi_f2ulz>
 80030ac:	4240      	negs	r0, r0
 80030ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80030b2:	bd08      	pop	{r3, pc}

080030b4 <__aeabi_f2ulz>:
 80030b4:	b5d0      	push	{r4, r6, r7, lr}
 80030b6:	f7fd fc2b 	bl	8000910 <__aeabi_f2d>
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <__aeabi_f2ulz+0x38>)
 80030bc:	2200      	movs	r2, #0
 80030be:	4606      	mov	r6, r0
 80030c0:	460f      	mov	r7, r1
 80030c2:	f7fd f997 	bl	80003f4 <__aeabi_dmul>
 80030c6:	f7fd fc7b 	bl	80009c0 <__aeabi_d2uiz>
 80030ca:	4604      	mov	r4, r0
 80030cc:	f7fd fbfe 	bl	80008cc <__aeabi_ui2d>
 80030d0:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <__aeabi_f2ulz+0x3c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	f7fd f98e 	bl	80003f4 <__aeabi_dmul>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4630      	mov	r0, r6
 80030de:	4639      	mov	r1, r7
 80030e0:	f7fd fab6 	bl	8000650 <__aeabi_dsub>
 80030e4:	f7fd fc6c 	bl	80009c0 <__aeabi_d2uiz>
 80030e8:	4621      	mov	r1, r4
 80030ea:	bdd0      	pop	{r4, r6, r7, pc}
 80030ec:	3df00000 	.word	0x3df00000
 80030f0:	41f00000 	.word	0x41f00000
