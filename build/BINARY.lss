
build/BINARY.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_frsub>:
 80005f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	e002      	b.n	80005fc <__addsf3>
 80005f6:	bf00      	nop

080005f8 <__aeabi_fsub>:
 80005f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005fc <__addsf3>:
 80005fc:	0042      	lsls	r2, r0, #1
 80005fe:	bf1f      	itttt	ne
 8000600:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000604:	ea92 0f03 	teqne	r2, r3
 8000608:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800060c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000610:	d06a      	beq.n	80006e8 <__addsf3+0xec>
 8000612:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000616:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800061a:	bfc1      	itttt	gt
 800061c:	18d2      	addgt	r2, r2, r3
 800061e:	4041      	eorgt	r1, r0
 8000620:	4048      	eorgt	r0, r1
 8000622:	4041      	eorgt	r1, r0
 8000624:	bfb8      	it	lt
 8000626:	425b      	neglt	r3, r3
 8000628:	2b19      	cmp	r3, #25
 800062a:	bf88      	it	hi
 800062c:	4770      	bxhi	lr
 800062e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000636:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000642:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000646:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800064a:	bf18      	it	ne
 800064c:	4249      	negne	r1, r1
 800064e:	ea92 0f03 	teq	r2, r3
 8000652:	d03f      	beq.n	80006d4 <__addsf3+0xd8>
 8000654:	f1a2 0201 	sub.w	r2, r2, #1
 8000658:	fa41 fc03 	asr.w	ip, r1, r3
 800065c:	eb10 000c 	adds.w	r0, r0, ip
 8000660:	f1c3 0320 	rsb	r3, r3, #32
 8000664:	fa01 f103 	lsl.w	r1, r1, r3
 8000668:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800066c:	d502      	bpl.n	8000674 <__addsf3+0x78>
 800066e:	4249      	negs	r1, r1
 8000670:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000674:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000678:	d313      	bcc.n	80006a2 <__addsf3+0xa6>
 800067a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800067e:	d306      	bcc.n	800068e <__addsf3+0x92>
 8000680:	0840      	lsrs	r0, r0, #1
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	f102 0201 	add.w	r2, r2, #1
 800068a:	2afe      	cmp	r2, #254	; 0xfe
 800068c:	d251      	bcs.n	8000732 <__addsf3+0x136>
 800068e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000692:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000696:	bf08      	it	eq
 8000698:	f020 0001 	biceq.w	r0, r0, #1
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	4770      	bx	lr
 80006a2:	0049      	lsls	r1, r1, #1
 80006a4:	eb40 0000 	adc.w	r0, r0, r0
 80006a8:	3a01      	subs	r2, #1
 80006aa:	bf28      	it	cs
 80006ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006b0:	d2ed      	bcs.n	800068e <__addsf3+0x92>
 80006b2:	fab0 fc80 	clz	ip, r0
 80006b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80006ba:	ebb2 020c 	subs.w	r2, r2, ip
 80006be:	fa00 f00c 	lsl.w	r0, r0, ip
 80006c2:	bfaa      	itet	ge
 80006c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006c8:	4252      	neglt	r2, r2
 80006ca:	4318      	orrge	r0, r3
 80006cc:	bfbc      	itt	lt
 80006ce:	40d0      	lsrlt	r0, r2
 80006d0:	4318      	orrlt	r0, r3
 80006d2:	4770      	bx	lr
 80006d4:	f092 0f00 	teq	r2, #0
 80006d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006dc:	bf06      	itte	eq
 80006de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006e2:	3201      	addeq	r2, #1
 80006e4:	3b01      	subne	r3, #1
 80006e6:	e7b5      	b.n	8000654 <__addsf3+0x58>
 80006e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f0:	bf18      	it	ne
 80006f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f6:	d021      	beq.n	800073c <__addsf3+0x140>
 80006f8:	ea92 0f03 	teq	r2, r3
 80006fc:	d004      	beq.n	8000708 <__addsf3+0x10c>
 80006fe:	f092 0f00 	teq	r2, #0
 8000702:	bf08      	it	eq
 8000704:	4608      	moveq	r0, r1
 8000706:	4770      	bx	lr
 8000708:	ea90 0f01 	teq	r0, r1
 800070c:	bf1c      	itt	ne
 800070e:	2000      	movne	r0, #0
 8000710:	4770      	bxne	lr
 8000712:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000716:	d104      	bne.n	8000722 <__addsf3+0x126>
 8000718:	0040      	lsls	r0, r0, #1
 800071a:	bf28      	it	cs
 800071c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000720:	4770      	bx	lr
 8000722:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000726:	bf3c      	itt	cc
 8000728:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800072c:	4770      	bxcc	lr
 800072e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000732:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000736:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800073a:	4770      	bx	lr
 800073c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000740:	bf16      	itet	ne
 8000742:	4608      	movne	r0, r1
 8000744:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000748:	4601      	movne	r1, r0
 800074a:	0242      	lsls	r2, r0, #9
 800074c:	bf06      	itte	eq
 800074e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000752:	ea90 0f01 	teqeq	r0, r1
 8000756:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800075a:	4770      	bx	lr

0800075c <__aeabi_ui2f>:
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	e004      	b.n	800076c <__aeabi_i2f+0x8>
 8000762:	bf00      	nop

08000764 <__aeabi_i2f>:
 8000764:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000768:	bf48      	it	mi
 800076a:	4240      	negmi	r0, r0
 800076c:	ea5f 0c00 	movs.w	ip, r0
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000778:	4601      	mov	r1, r0
 800077a:	f04f 0000 	mov.w	r0, #0
 800077e:	e01c      	b.n	80007ba <__aeabi_l2f+0x2a>

08000780 <__aeabi_ul2f>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	f04f 0300 	mov.w	r3, #0
 800078c:	e00a      	b.n	80007a4 <__aeabi_l2f+0x14>
 800078e:	bf00      	nop

08000790 <__aeabi_l2f>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800079c:	d502      	bpl.n	80007a4 <__aeabi_l2f+0x14>
 800079e:	4240      	negs	r0, r0
 80007a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a4:	ea5f 0c01 	movs.w	ip, r1
 80007a8:	bf02      	ittt	eq
 80007aa:	4684      	moveq	ip, r0
 80007ac:	4601      	moveq	r1, r0
 80007ae:	2000      	moveq	r0, #0
 80007b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007b4:	bf08      	it	eq
 80007b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007be:	fabc f28c 	clz	r2, ip
 80007c2:	3a08      	subs	r2, #8
 80007c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007c8:	db10      	blt.n	80007ec <__aeabi_l2f+0x5c>
 80007ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ce:	4463      	add	r3, ip
 80007d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80007d4:	f1c2 0220 	rsb	r2, r2, #32
 80007d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007dc:	fa20 f202 	lsr.w	r2, r0, r2
 80007e0:	eb43 0002 	adc.w	r0, r3, r2
 80007e4:	bf08      	it	eq
 80007e6:	f020 0001 	biceq.w	r0, r0, #1
 80007ea:	4770      	bx	lr
 80007ec:	f102 0220 	add.w	r2, r2, #32
 80007f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80007f4:	f1c2 0220 	rsb	r2, r2, #32
 80007f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000800:	eb43 0002 	adc.w	r0, r3, r2
 8000804:	bf08      	it	eq
 8000806:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800080a:	4770      	bx	lr

0800080c <__aeabi_dmul>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8de 	bleq	80009e8 <__aeabi_dmul+0x1dc>
 800082c:	442c      	add	r4, r5
 800082e:	ea81 0603 	eor.w	r6, r1, r3
 8000832:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000836:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800083a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800083e:	bf18      	it	ne
 8000840:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800084c:	d038      	beq.n	80008c0 <__aeabi_dmul+0xb4>
 800084e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000852:	f04f 0500 	mov.w	r5, #0
 8000856:	fbe1 e502 	umlal	lr, r5, r1, r2
 800085a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800085e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000862:	f04f 0600 	mov.w	r6, #0
 8000866:	fbe1 5603 	umlal	r5, r6, r1, r3
 800086a:	f09c 0f00 	teq	ip, #0
 800086e:	bf18      	it	ne
 8000870:	f04e 0e01 	orrne.w	lr, lr, #1
 8000874:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000878:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800087c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000880:	d204      	bcs.n	800088c <__aeabi_dmul+0x80>
 8000882:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000886:	416d      	adcs	r5, r5
 8000888:	eb46 0606 	adc.w	r6, r6, r6
 800088c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000890:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000894:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000898:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800089c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008a4:	bf88      	it	hi
 80008a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008aa:	d81e      	bhi.n	80008ea <__aeabi_dmul+0xde>
 80008ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008b0:	bf08      	it	eq
 80008b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008b6:	f150 0000 	adcs.w	r0, r0, #0
 80008ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008be:	bd70      	pop	{r4, r5, r6, pc}
 80008c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008c4:	ea46 0101 	orr.w	r1, r6, r1
 80008c8:	ea40 0002 	orr.w	r0, r0, r2
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008d4:	bfc2      	ittt	gt
 80008d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008de:	bd70      	popgt	{r4, r5, r6, pc}
 80008e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008e4:	f04f 0e00 	mov.w	lr, #0
 80008e8:	3c01      	subs	r4, #1
 80008ea:	f300 80ab 	bgt.w	8000a44 <__aeabi_dmul+0x238>
 80008ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80008f2:	bfde      	ittt	le
 80008f4:	2000      	movle	r0, #0
 80008f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80008fa:	bd70      	pople	{r4, r5, r6, pc}
 80008fc:	f1c4 0400 	rsb	r4, r4, #0
 8000900:	3c20      	subs	r4, #32
 8000902:	da35      	bge.n	8000970 <__aeabi_dmul+0x164>
 8000904:	340c      	adds	r4, #12
 8000906:	dc1b      	bgt.n	8000940 <__aeabi_dmul+0x134>
 8000908:	f104 0414 	add.w	r4, r4, #20
 800090c:	f1c4 0520 	rsb	r5, r4, #32
 8000910:	fa00 f305 	lsl.w	r3, r0, r5
 8000914:	fa20 f004 	lsr.w	r0, r0, r4
 8000918:	fa01 f205 	lsl.w	r2, r1, r5
 800091c:	ea40 0002 	orr.w	r0, r0, r2
 8000920:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000924:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000928:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800092c:	fa21 f604 	lsr.w	r6, r1, r4
 8000930:	eb42 0106 	adc.w	r1, r2, r6
 8000934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000938:	bf08      	it	eq
 800093a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f1c4 040c 	rsb	r4, r4, #12
 8000944:	f1c4 0520 	rsb	r5, r4, #32
 8000948:	fa00 f304 	lsl.w	r3, r0, r4
 800094c:	fa20 f005 	lsr.w	r0, r0, r5
 8000950:	fa01 f204 	lsl.w	r2, r1, r4
 8000954:	ea40 0002 	orr.w	r0, r0, r2
 8000958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800095c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000960:	f141 0100 	adc.w	r1, r1, #0
 8000964:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000968:	bf08      	it	eq
 800096a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	f1c4 0520 	rsb	r5, r4, #32
 8000974:	fa00 f205 	lsl.w	r2, r0, r5
 8000978:	ea4e 0e02 	orr.w	lr, lr, r2
 800097c:	fa20 f304 	lsr.w	r3, r0, r4
 8000980:	fa01 f205 	lsl.w	r2, r1, r5
 8000984:	ea43 0302 	orr.w	r3, r3, r2
 8000988:	fa21 f004 	lsr.w	r0, r1, r4
 800098c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000990:	fa21 f204 	lsr.w	r2, r1, r4
 8000994:	ea20 0002 	bic.w	r0, r0, r2
 8000998:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800099c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a0:	bf08      	it	eq
 80009a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f094 0f00 	teq	r4, #0
 80009ac:	d10f      	bne.n	80009ce <__aeabi_dmul+0x1c2>
 80009ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009b2:	0040      	lsls	r0, r0, #1
 80009b4:	eb41 0101 	adc.w	r1, r1, r1
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf08      	it	eq
 80009be:	3c01      	subeq	r4, #1
 80009c0:	d0f7      	beq.n	80009b2 <__aeabi_dmul+0x1a6>
 80009c2:	ea41 0106 	orr.w	r1, r1, r6
 80009c6:	f095 0f00 	teq	r5, #0
 80009ca:	bf18      	it	ne
 80009cc:	4770      	bxne	lr
 80009ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009d2:	0052      	lsls	r2, r2, #1
 80009d4:	eb43 0303 	adc.w	r3, r3, r3
 80009d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009dc:	bf08      	it	eq
 80009de:	3d01      	subeq	r5, #1
 80009e0:	d0f7      	beq.n	80009d2 <__aeabi_dmul+0x1c6>
 80009e2:	ea43 0306 	orr.w	r3, r3, r6
 80009e6:	4770      	bx	lr
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f0:	bf18      	it	ne
 80009f2:	ea95 0f0c 	teqne	r5, ip
 80009f6:	d00c      	beq.n	8000a12 <__aeabi_dmul+0x206>
 80009f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009fc:	bf18      	it	ne
 80009fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a02:	d1d1      	bne.n	80009a8 <__aeabi_dmul+0x19c>
 8000a04:	ea81 0103 	eor.w	r1, r1, r3
 8000a08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	bd70      	pop	{r4, r5, r6, pc}
 8000a12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a16:	bf06      	itte	eq
 8000a18:	4610      	moveq	r0, r2
 8000a1a:	4619      	moveq	r1, r3
 8000a1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a20:	d019      	beq.n	8000a56 <__aeabi_dmul+0x24a>
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dmul+0x222>
 8000a28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a2c:	d113      	bne.n	8000a56 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	d105      	bne.n	8000a40 <__aeabi_dmul+0x234>
 8000a34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a38:	bf1c      	itt	ne
 8000a3a:	4610      	movne	r0, r2
 8000a3c:	4619      	movne	r1, r3
 8000a3e:	d10a      	bne.n	8000a56 <__aeabi_dmul+0x24a>
 8000a40:	ea81 0103 	eor.w	r1, r1, r3
 8000a44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
 8000a56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}

08000a60 <__aeabi_d2uiz>:
 8000a60:	004a      	lsls	r2, r1, #1
 8000a62:	d211      	bcs.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d211      	bcs.n	8000a8e <__aeabi_d2uiz+0x2e>
 8000a6a:	d50d      	bpl.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d40e      	bmi.n	8000a94 <__aeabi_d2uiz+0x34>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_d2uiz+0x3a>
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0000 	mov.w	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <_ZN6Serial5printEPKc.constprop.0>:
	while(!(USARTx->ISR & USART_ISR_TC));
}

void Serial::print(const char* _string)
{
	while (*_string)
 8000aa0:	7803      	ldrb	r3, [r0, #0]
 8000aa2:	b14b      	cbz	r3, 8000ab8 <_ZN6Serial5printEPKc.constprop.0+0x18>
	USARTx->TDR = _char;
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <_ZN6Serial5printEPKc.constprop.0+0x1c>)
 8000aa6:	6852      	ldr	r2, [r2, #4]
 8000aa8:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8000aaa:	69d3      	ldr	r3, [r2, #28]
 8000aac:	065b      	lsls	r3, r3, #25
 8000aae:	d5fc      	bpl.n	8000aaa <_ZN6Serial5printEPKc.constprop.0+0xa>
	while (*_string)
 8000ab0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f7      	bne.n	8000aa8 <_ZN6Serial5printEPKc.constprop.0+0x8>
	{
		sendChar(*_string);
		_string++;
	}
}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200001b4 	.word	0x200001b4

08000ac0 <_ZN12ClockManager18internalFreqUpdateEm>:

void ClockManager::internalFreqUpdate(uint32_t _targetFreq)
{
	uint32_t flashDiv = 35000000;

	if (_targetFreq < 26000000)
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <_ZN12ClockManager18internalFreqUpdateEm+0x78>)
 8000ac2:	4298      	cmp	r0, r3
{
 8000ac4:	b430      	push	{r4, r5}
	if (_targetFreq < 26000000)
 8000ac6:	d81f      	bhi.n	8000b08 <_ZN12ClockManager18internalFreqUpdateEm+0x48>
	{
		
		PWR->CR1 = 0x2 << PWR_CR1_VOS_Pos;
 8000ac8:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <_ZN12ClockManager18internalFreqUpdateEm+0x7c>)
 8000aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ace:	6013      	str	r3, [r2, #0]
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000ad0:	6953      	ldr	r3, [r2, #20]
 8000ad2:	0559      	lsls	r1, r3, #21
 8000ad4:	d4fc      	bmi.n	8000ad0 <_ZN12ClockManager18internalFreqUpdateEm+0x10>
		flashDiv = 12000000;
 8000ad6:	4d1a      	ldr	r5, [pc, #104]	; (8000b40 <_ZN12ClockManager18internalFreqUpdateEm+0x80>)
		while(PWR->SR2 & PWR_SR2_VOSF);
		PWR->CR5 = 0;
		flashDiv = 34000000;
	}

	ahbClock = _targetFreq;
 8000ad8:	4c1a      	ldr	r4, [pc, #104]	; (8000b44 <_ZN12ClockManager18internalFreqUpdateEm+0x84>)

	uint32_t waitStates = ahbClock / flashDiv < 15 ? ahbClock / flashDiv : 15;
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000ada:	491b      	ldr	r1, [pc, #108]	; (8000b48 <_ZN12ClockManager18internalFreqUpdateEm+0x88>)
	ahbClock = _targetFreq;
 8000adc:	6020      	str	r0, [r4, #0]
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000ade:	680a      	ldr	r2, [r1, #0]
	uint32_t waitStates = ahbClock / flashDiv < 15 ? ahbClock / flashDiv : 15;
 8000ae0:	fbb0 f0f5 	udiv	r0, r0, r5
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 8000ae4:	f022 020f 	bic.w	r2, r2, #15
 8000ae8:	280f      	cmp	r0, #15
 8000aea:	bf94      	ite	ls
 8000aec:	4302      	orrls	r2, r0
 8000aee:	f042 020f 	orrhi.w	r2, r2, #15
	
	FLASH->ACR = flashConf;
 8000af2:	600a      	str	r2, [r1, #0]
	while(FLASH->ACR != flashConf)
 8000af4:	680b      	ldr	r3, [r1, #0]
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d1fc      	bne.n	8000af4 <_ZN12ClockManager18internalFreqUpdateEm+0x34>
		;


	apbClock = ahbClock;
 8000afa:	4914      	ldr	r1, [pc, #80]	; (8000b4c <_ZN12ClockManager18internalFreqUpdateEm+0x8c>)
	timerClock = apbClock;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_ZN12ClockManager18internalFreqUpdateEm+0x90>)
	apbClock = ahbClock;
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	600b      	str	r3, [r1, #0]
	timerClock = apbClock;
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bc30      	pop	{r4, r5}
 8000b06:	4770      	bx	lr
	else if (_targetFreq < 150000000)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <_ZN12ClockManager18internalFreqUpdateEm+0x94>)
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <_ZN12ClockManager18internalFreqUpdateEm+0x7c>)
	else if (_targetFreq < 150000000)
 8000b0c:	4298      	cmp	r0, r3
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 8000b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b12:	6013      	str	r3, [r2, #0]
	else if (_targetFreq < 150000000)
 8000b14:	d808      	bhi.n	8000b28 <_ZN12ClockManager18internalFreqUpdateEm+0x68>
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000b16:	6953      	ldr	r3, [r2, #20]
 8000b18:	055b      	lsls	r3, r3, #21
 8000b1a:	d4fc      	bmi.n	8000b16 <_ZN12ClockManager18internalFreqUpdateEm+0x56>
		PWR->CR5 = PWR_CR5_R1MODE;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
		flashDiv = 30000000;
 8000b20:	4d0d      	ldr	r5, [pc, #52]	; (8000b58 <_ZN12ClockManager18internalFreqUpdateEm+0x98>)
		PWR->CR5 = PWR_CR5_R1MODE;
 8000b22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		flashDiv = 30000000;
 8000b26:	e7d7      	b.n	8000ad8 <_ZN12ClockManager18internalFreqUpdateEm+0x18>
		while(PWR->SR2 & PWR_SR2_VOSF);
 8000b28:	6953      	ldr	r3, [r2, #20]
 8000b2a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000b2e:	d1fb      	bne.n	8000b28 <_ZN12ClockManager18internalFreqUpdateEm+0x68>
		flashDiv = 34000000;
 8000b30:	4d0a      	ldr	r5, [pc, #40]	; (8000b5c <_ZN12ClockManager18internalFreqUpdateEm+0x9c>)
		PWR->CR5 = 0;
 8000b32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		flashDiv = 34000000;
 8000b36:	e7cf      	b.n	8000ad8 <_ZN12ClockManager18internalFreqUpdateEm+0x18>
 8000b38:	018cba7f 	.word	0x018cba7f
 8000b3c:	40007000 	.word	0x40007000
 8000b40:	00b71b00 	.word	0x00b71b00
 8000b44:	20000008 	.word	0x20000008
 8000b48:	40022000 	.word	0x40022000
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	20000010 	.word	0x20000010
 8000b54:	08f0d17f 	.word	0x08f0d17f
 8000b58:	01c9c380 	.word	0x01c9c380
 8000b5c:	0206cc80 	.word	0x0206cc80

08000b60 <_ZN3PID4InitEv>:
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
	_lastInput = *_myInput;
 8000b60:	e9d0 3209 	ldrd	r3, r2, [r0, #36]	; 0x24
	
	if (_outputSum > _outMax)
 8000b64:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
	_outputSum = *_myOutput;
 8000b68:	edd2 7a00 	vldr	s15, [r2]
 8000b6c:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
	if (_outputSum > _outMax)
 8000b70:	eef4 7ac7 	vcmpe.f32	s15, s14
	_lastInput = *_myInput;
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	6343      	str	r3, [r0, #52]	; 0x34
	if (_outputSum > _outMax)
 8000b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b7c:	dc06      	bgt.n	8000b8c <_ZN3PID4InitEv+0x2c>
	{
		_outputSum = _outMax;
	}
	else if (_outputSum < _outMin)
 8000b7e:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8000b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8a:	d501      	bpl.n	8000b90 <_ZN3PID4InitEv+0x30>
	{
		_outputSum = _outMin;
 8000b8c:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
	}
	else { }
	
}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <_ZN3PID15SetOutputLimitsEff>:

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(float Min, float Max)
{
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8000b94:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8000b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9c:	da26      	bge.n	8000bec <_ZN3PID15SetOutputLimitsEff+0x58>
	
	_outMin = Min;
	_outMax = Max;
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8000b9e:	7843      	ldrb	r3, [r0, #1]
	_outMin = Min;
 8000ba0:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
	_outMax = Max;
 8000ba4:	edc0 0a0f 	vstr	s1, [r0, #60]	; 0x3c
	if (_inAuto)
 8000ba8:	b303      	cbz	r3, 8000bec <_ZN3PID15SetOutputLimitsEff+0x58>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8000baa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000bac:	edd3 7a00 	vldr	s15, [r3]
 8000bb0:	eef4 7ae0 	vcmpe.f32	s15, s1
 8000bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb8:	dc19      	bgt.n	8000bee <_ZN3PID15SetOutputLimitsEff+0x5a>
		{
			*_myOutput = _outMax;
		}
		else if (*_myOutput < _outMin)
 8000bba:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			*_myOutput = _outMin;
 8000bc2:	bf48      	it	mi
 8000bc4:	ed83 0a00 	vstrmi	s0, [r3]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8000bc8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8000bcc:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 8000bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd8:	dc06      	bgt.n	8000be8 <_ZN3PID15SetOutputLimitsEff+0x54>
		{
			_outputSum = _outMax;
		}
		else if (_outputSum < _outMin)
 8000bda:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8000bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be6:	d501      	bpl.n	8000bec <_ZN3PID15SetOutputLimitsEff+0x58>
		{
			_outputSum = _outMin;
 8000be8:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
		}
		else { }
		
	}
	
}
 8000bec:	4770      	bx	lr
			*_myOutput = _outMax;
 8000bee:	edc3 0a00 	vstr	s1, [r3]
 8000bf2:	e7e9      	b.n	8000bc8 <_ZN3PID15SetOutputLimitsEff+0x34>

08000bf4 <_ZN6Serial5printEdh.constprop.0>:
	char charTab[11]={};
	typeConverter::IntToString(_number, charTab);
	print(charTab);
}

void Serial::print(double _number, uint8_t _percision)
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	ed2d 8b02 	vpush	{d8}
 8000bfa:	b086      	sub	sp, #24
{
	char charTab[20]={};
 8000bfc:	2300      	movs	r3, #0
void Serial::print(double _number, uint8_t _percision)
 8000bfe:	ec51 0b10 	vmov	r0, r1, d0
	char charTab[20]={};
 8000c02:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000c06:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000c0a:	9305      	str	r3, [sp, #20]
	typeConverter::fractionalToString(_number, charTab, _percision);
 8000c0c:	f7ff fca0 	bl	8000550 <__aeabi_d2f>
 8000c10:	ee08 0a10 	vmov	s16, r0

void typeConverter::fractionalToString (float _number, char * _string, uint8_t _precision)
{
	int i=0;
	bool negative = _number<0? true : false;
	int64_t integerPart = static_cast<int64_t>(_number);
 8000c14:	f002 fa3c 	bl	8003090 <__aeabi_f2lz>
 8000c18:	4604      	mov	r4, r0
 8000c1a:	460d      	mov	r5, r1
	float fractionalPart;
	fractionalPart =  _number - integerPart;
 8000c1c:	f7ff fdb8 	bl	8000790 <__aeabi_l2f>
 8000c20:	ee07 0a10 	vmov	s14, r0
 8000c24:	ee78 7a47 	vsub.f32	s15, s16, s14
	fractionalPart <0 ? fractionalPart = -fractionalPart : fractionalPart = fractionalPart;
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000c28:	4623      	mov	r3, r4
	fractionalPart <0 ? fractionalPart = -fractionalPart : fractionalPart = fractionalPart;
 8000c2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c32:	bf48      	it	mi
 8000c34:	ee77 7a48 	vsubmi.f32	s15, s14, s16
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	db6b      	blt.n	8000d14 <_ZN6Serial5printEdh.constprop.0+0x120>
	
	if (absNumber==0) 
 8000c3c:	b973      	cbnz	r3, 8000c5c <_ZN6Serial5printEdh.constprop.0+0x68>
	while (absNumber)
	{
		_string[i++]=absNumber % 10 + '0';
		absNumber /= 10;
	}
	if (negative)
 8000c3e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		_string[0]='0';
 8000c42:	2330      	movs	r3, #48	; 0x30
	if (negative)
 8000c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		_string[0]='0';
 8000c48:	f88d 3004 	strb.w	r3, [sp, #4]
	if (negative)
 8000c4c:	d475      	bmi.n	8000d3a <_ZN6Serial5printEdh.constprop.0+0x146>
 8000c4e:	a801      	add	r0, sp, #4
		_string[i++]='-';
	reverseArray(_string, i);

	_string[i++]='.';
 8000c50:	232e      	movs	r3, #46	; 0x2e
 8000c52:	f88d 3005 	strb.w	r3, [sp, #5]
 8000c56:	2505      	movs	r5, #5
 8000c58:	2102      	movs	r1, #2
 8000c5a:	e033      	b.n	8000cc4 <_ZN6Serial5printEdh.constprop.0+0xd0>
 8000c5c:	a801      	add	r0, sp, #4
		_string[i++]=absNumber % 10 + '0';
 8000c5e:	4d3c      	ldr	r5, [pc, #240]	; (8000d50 <_ZN6Serial5printEdh.constprop.0+0x15c>)
 8000c60:	4604      	mov	r4, r0
	int i=0;
 8000c62:	2200      	movs	r2, #0
		_string[i++]=absNumber % 10 + '0';
 8000c64:	fb85 1c03 	smull	r1, ip, r5, r3
 8000c68:	17d9      	asrs	r1, r3, #31
 8000c6a:	ebc1 01ac 	rsb	r1, r1, ip, asr #2
 8000c6e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8000c72:	eba3 034c 	sub.w	r3, r3, ip, lsl #1
 8000c76:	3330      	adds	r3, #48	; 0x30
 8000c78:	f804 3b01 	strb.w	r3, [r4], #1
 8000c7c:	4694      	mov	ip, r2
	while (absNumber)
 8000c7e:	460b      	mov	r3, r1
		_string[i++]=absNumber % 10 + '0';
 8000c80:	3201      	adds	r2, #1
	while (absNumber)
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d1ee      	bne.n	8000c64 <_ZN6Serial5printEdh.constprop.0+0x70>
	if (negative)
 8000c86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c8e:	d443      	bmi.n	8000d18 <_ZN6Serial5printEdh.constprop.0+0x124>
		return number;
}

void typeConverter::reverseArray(char* _charTab, int _lenght)
{
	for (int i =0; i<_lenght/2; i++)
 8000c90:	ea5f 0e62 	movs.w	lr, r2, asr #1
		_string[i++]='-';
 8000c94:	f10c 0102 	add.w	r1, ip, #2
 8000c98:	4616      	mov	r6, r2
	for (int j=i; j<_precision+i; j++)
 8000c9a:	f10c 0505 	add.w	r5, ip, #5
	for (int i =0; i<_lenght/2; i++)
 8000c9e:	d0d7      	beq.n	8000c50 <_ZN6Serial5printEdh.constprop.0+0x5c>
 8000ca0:	4402      	add	r2, r0
 8000ca2:	4486      	add	lr, r0
 8000ca4:	4603      	mov	r3, r0
	{
		char temp = _charTab[i];
		_charTab [i] = _charTab [_lenght-i -1];
 8000ca6:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
		char temp = _charTab[i];
 8000caa:	781c      	ldrb	r4, [r3, #0]
		_charTab [i] = _charTab [_lenght-i -1];
 8000cac:	f803 cb01 	strb.w	ip, [r3], #1
	for (int i =0; i<_lenght/2; i++)
 8000cb0:	459e      	cmp	lr, r3
		_charTab [_lenght-i -1] = temp;
 8000cb2:	7014      	strb	r4, [r2, #0]
	for (int i =0; i<_lenght/2; i++)
 8000cb4:	d1f7      	bne.n	8000ca6 <_ZN6Serial5printEdh.constprop.0+0xb2>
	_string[i++]='.';
 8000cb6:	f106 0318 	add.w	r3, r6, #24
 8000cba:	eb0d 0603 	add.w	r6, sp, r3
 8000cbe:	232e      	movs	r3, #46	; 0x2e
 8000cc0:	f806 3c14 	strb.w	r3, [r6, #-20]
 8000cc4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000cc8:	1843      	adds	r3, r0, r1
		fractionalPart *=10;
 8000cca:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
		fractionalPart -= static_cast<int>(fractionalPart);
 8000cce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	for (int j=i; j<_precision+i; j++)
 8000cd2:	3101      	adds	r1, #1
		fractionalPart -= static_cast<int>(fractionalPart);
 8000cd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
	for (int j=i; j<_precision+i; j++)
 8000cd8:	42a9      	cmp	r1, r5
		fractionalPart *=10;
 8000cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
		_string[j]= static_cast<int>(fractionalPart) + '0';
 8000cde:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000ce2:	ee17 2a10 	vmov	r2, s14
 8000ce6:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000cea:	f803 2b01 	strb.w	r2, [r3], #1
	for (int j=i; j<_precision+i; j++)
 8000cee:	dbee      	blt.n	8000cce <_ZN6Serial5printEdh.constprop.0+0xda>
	while (*_string)
 8000cf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000cf4:	b153      	cbz	r3, 8000d0c <_ZN6Serial5printEdh.constprop.0+0x118>
	USARTx->TDR = _char;
 8000cf6:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <_ZN6Serial5printEdh.constprop.0+0x160>)
 8000cf8:	6852      	ldr	r2, [r2, #4]
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8000cfe:	69d3      	ldr	r3, [r2, #28]
 8000d00:	065b      	lsls	r3, r3, #25
 8000d02:	d5fc      	bpl.n	8000cfe <_ZN6Serial5printEdh.constprop.0+0x10a>
	while (*_string)
 8000d04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f7      	bne.n	8000cfc <_ZN6Serial5printEdh.constprop.0+0x108>
	print(charTab);
}
 8000d0c:	b006      	add	sp, #24
 8000d0e:	ecbd 8b02 	vpop	{d8}
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8000d14:	4263      	negs	r3, r4
 8000d16:	e791      	b.n	8000c3c <_ZN6Serial5printEdh.constprop.0+0x48>
		_string[i++]='-';
 8000d18:	f102 0318 	add.w	r3, r2, #24
 8000d1c:	eb0d 0203 	add.w	r2, sp, r3
 8000d20:	f10c 0602 	add.w	r6, ip, #2
 8000d24:	232d      	movs	r3, #45	; 0x2d
 8000d26:	f802 3c14 	strb.w	r3, [r2, #-20]
	for (int i =0; i<_lenght/2; i++)
 8000d2a:	ea4f 0e66 	mov.w	lr, r6, asr #1
		_string[i++]='-';
 8000d2e:	4632      	mov	r2, r6
	_string[i++]='.';
 8000d30:	f10c 0103 	add.w	r1, ip, #3
	for (int j=i; j<_precision+i; j++)
 8000d34:	f10c 0506 	add.w	r5, ip, #6
 8000d38:	e7b2      	b.n	8000ca0 <_ZN6Serial5printEdh.constprop.0+0xac>
		_string[i++]='-';
 8000d3a:	232d      	movs	r3, #45	; 0x2d
 8000d3c:	2602      	movs	r6, #2
 8000d3e:	f88d 3005 	strb.w	r3, [sp, #5]
 8000d42:	2506      	movs	r5, #6
 8000d44:	2103      	movs	r1, #3
 8000d46:	f04f 0e01 	mov.w	lr, #1
 8000d4a:	4632      	mov	r2, r6
 8000d4c:	a801      	add	r0, sp, #4
 8000d4e:	e7a7      	b.n	8000ca0 <_ZN6Serial5printEdh.constprop.0+0xac>
 8000d50:	66666667 	.word	0x66666667
 8000d54:	200001b4 	.word	0x200001b4

08000d58 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>:
	_myOutput   = Output;
 8000d58:	6282      	str	r2, [r0, #40]	; 0x28
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8000d5a:	2200      	movs	r2, #0
PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8000d5c:	b510      	push	{r4, lr}
	_mySetpoint = Setpoint;
 8000d5e:	62c3      	str	r3, [r0, #44]	; 0x2c
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8000d60:	7042      	strb	r2, [r0, #1]
PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8000d62:	eef0 6a40 	vmov.f32	s13, s0
 8000d66:	eeb0 6a60 	vmov.f32	s12, s1
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8000d6a:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8000df0 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x98>
 8000d6e:	eddf 0a21 	vldr	s1, [pc, #132]	; 8000df4 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x9c>
	_myInput    = Input;
 8000d72:	6241      	str	r1, [r0, #36]	; 0x24
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8000d74:	f7ff ff0e 	bl	8000b94 <_ZN3PID15SetOutputLimitsEff>

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8000d78:	7843      	ldrb	r3, [r0, #1]
	_sampleTime = _PID_SAMPLE_TIME_US_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000d7a:	2219      	movs	r2, #25
PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8000d7c:	4604      	mov	r4, r0
	_sampleTime = _PID_SAMPLE_TIME_US_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000d7e:	6082      	str	r2, [r0, #8]
	if ((_inAuto) && (Direction != _controllerDirection))
 8000d80:	b19b      	cbz	r3, 8000daa <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x52>
 8000d82:	78c3      	ldrb	r3, [r0, #3]
 8000d84:	b18b      	cbz	r3, 8000daa <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x52>
	{
		
		_kp = (0 - _kp);
 8000d86:	edd0 5a06 	vldr	s11, [r0, #24]
		_ki = (0 - _ki);
 8000d8a:	ed90 7a07 	vldr	s14, [r0, #28]
		_kd = (0 - _kd);
 8000d8e:	edd0 7a08 	vldr	s15, [r0, #32]
		_kp = (0 - _kp);
 8000d92:	eef1 5a65 	vneg.f32	s11, s11
		_ki = (0 - _ki);
 8000d96:	eeb1 7a47 	vneg.f32	s14, s14
		_kd = (0 - _kd);
 8000d9a:	eef1 7a67 	vneg.f32	s15, s15
		_kp = (0 - _kp);
 8000d9e:	edc0 5a06 	vstr	s11, [r0, #24]
		_ki = (0 - _ki);
 8000da2:	ed80 7a07 	vstr	s14, [r0, #28]
		_kd = (0 - _kd);
 8000da6:	edc0 7a08 	vstr	s15, [r0, #32]
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8000daa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
		
	}
	
	_controllerDirection = Direction;
 8000dae:	2300      	movs	r3, #0
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8000db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	_controllerDirection = Direction;
 8000db4:	70e3      	strb	r3, [r4, #3]
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8000db6:	f04f 0300 	mov.w	r3, #0
 8000dba:	d415      	bmi.n	8000de8 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x90>
 8000dbc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d410      	bmi.n	8000de8 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0x90>
	_ki = Ki * SampleTimeInSec;
 8000dc6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000df8 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0+0xa0>
	_dispKp = Kp;
 8000dca:	edc4 6a03 	vstr	s13, [r4, #12]
	_ki = Ki * SampleTimeInSec;
 8000dce:	ee66 7a27 	vmul.f32	s15, s12, s15
	_pOn    = POn;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	70a2      	strb	r2, [r4, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8000dd6:	7022      	strb	r2, [r4, #0]
	_dispKi = Ki;
 8000dd8:	ed84 6a04 	vstr	s12, [r4, #16]
	_dispKd = Kd;
 8000ddc:	6163      	str	r3, [r4, #20]
	_kp = Kp;
 8000dde:	edc4 6a06 	vstr	s13, [r4, #24]
	_ki = Ki * SampleTimeInSec;
 8000de2:	edc4 7a07 	vstr	s15, [r4, #28]
	_kd = Kd / SampleTimeInSec;
 8000de6:	6223      	str	r3, [r4, #32]
	_lastTime = GetTime() - _sampleTime;
 8000de8:	f06f 0318 	mvn.w	r3, #24
 8000dec:	6063      	str	r3, [r4, #4]
}
 8000dee:	bd10      	pop	{r4, pc}
 8000df0:	00000000 	.word	0x00000000
 8000df4:	437f0000 	.word	0x437f0000
 8000df8:	37d1b717 	.word	0x37d1b717

08000dfc <adc_init.constprop.0.isra.0>:
#include "adc.h"

adcError_t adc_init(adcChannel_t* aIns)
{
    switch ((uint32_t)aIns->adc)
 8000dfc:	4a59      	ldr	r2, [pc, #356]	; (8000f64 <adc_init.constprop.0.isra.0+0x168>)
 8000dfe:	6803      	ldr	r3, [r0, #0]
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d008      	beq.n	8000e16 <adc_init.constprop.0.isra.0+0x1a>
 8000e04:	d97d      	bls.n	8000f02 <adc_init.constprop.0.isra.0+0x106>
 8000e06:	4a58      	ldr	r2, [pc, #352]	; (8000f68 <adc_init.constprop.0.isra.0+0x16c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d004      	beq.n	8000e16 <adc_init.constprop.0.isra.0+0x1a>
 8000e0c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000e10:	4293      	cmp	r3, r2
 8000e12:	f040 80a4 	bne.w	8000f5e <adc_init.constprop.0.isra.0+0x162>
        case ADC4_BASE:
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
        break;
        case ADC5_BASE:
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
 8000e16:	4955      	ldr	r1, [pc, #340]	; (8000f6c <adc_init.constprop.0.isra.0+0x170>)
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
 8000e18:	4a55      	ldr	r2, [pc, #340]	; (8000f70 <adc_init.constprop.0.isra.0+0x174>)
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC345EN;
 8000e1a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	64cb      	str	r3, [r1, #76]	; 0x4c
            ADC345_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);
 8000e22:	6893      	ldr	r3, [r2, #8]
 8000e24:	f443 0386 	orr.w	r3, r3, #4390912	; 0x430000
 8000e28:	6093      	str	r3, [r2, #8]
        default:
            return wrongADCmodule;
        break;
    }

	aIns->adc->CR |= ADC_CR_ADSTP;
 8000e2a:	6802      	ldr	r2, [r0, #0]
 8000e2c:	6893      	ldr	r3, [r2, #8]
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6093      	str	r3, [r2, #8]
	while((aIns->adc->ISR & ADC_ISR_ADRDY));	
 8000e34:	6802      	ldr	r2, [r0, #0]
 8000e36:	6813      	ldr	r3, [r2, #0]
 8000e38:	f013 0301 	ands.w	r3, r3, #1
 8000e3c:	d1fb      	bne.n	8000e36 <adc_init.constprop.0.isra.0+0x3a>
	aIns->adc->CR =0;
 8000e3e:	6093      	str	r3, [r2, #8]
    aIns->adc->CFGR = 0x80000000;
 8000e40:	6802      	ldr	r2, [r0, #0]
 8000e42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000e46:	60d1      	str	r1, [r2, #12]
	aIns->adc->CFGR = ADC_CFGR_OVRMOD | aIns->triggerEdge<<ADC_CFGR_EXTEN_Pos | aIns->externalTriggerEvent<<ADC_CFGR_EXTSEL_Pos | ADC_CFGR_DMAEN | ADC_CFGR_DMACFG; // Set overrun mode, external trigger rising edge, TIM1_TRGO as trigger, DMA enable, DMA circular mode
 8000e48:	6902      	ldr	r2, [r0, #16]
 8000e4a:	7b01      	ldrb	r1, [r0, #12]
 8000e4c:	0152      	lsls	r2, r2, #5
 8000e4e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000e52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e56:	6801      	ldr	r1, [r0, #0]
 8000e58:	f042 0203 	orr.w	r2, r2, #3
 8000e5c:	60ca      	str	r2, [r1, #12]
	if (aIns->triggerEdge == noEXTtrigger)
 8000e5e:	7b02      	ldrb	r2, [r0, #12]
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	d075      	beq.n	8000f50 <adc_init.constprop.0.isra.0+0x154>
    {
        aIns->adc->CFGR |= ADC_CFGR_CONT;
    }
    aIns->adc->CR |= ADC_CR_ADVREGEN;	
 8000e64:	6801      	ldr	r1, [r0, #0]
 8000e66:	688a      	ldr	r2, [r1, #8]
 8000e68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e6c:	608a      	str	r2, [r1, #8]
	aIns->adc->CR |= ADC_CR_ADCAL;
 8000e6e:	6801      	ldr	r1, [r0, #0]
 8000e70:	688a      	ldr	r2, [r1, #8]
 8000e72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e76:	608a      	str	r2, [r1, #8]
	while(aIns->adc->CR & ADC_CR_ADCAL);
 8000e78:	6801      	ldr	r1, [r0, #0]
 8000e7a:	688a      	ldr	r2, [r1, #8]
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	dbfc      	blt.n	8000e7a <adc_init.constprop.0.isra.0+0x7e>

    if (aIns->channelsCount>16)
 8000e80:	6842      	ldr	r2, [r0, #4]
 8000e82:	2a10      	cmp	r2, #16
 8000e84:	d86a      	bhi.n	8000f5c <adc_init.constprop.0.isra.0+0x160>
adcError_t adc_init(adcChannel_t* aIns)
 8000e86:	b530      	push	{r4, r5, lr}
       return channelCountErr;
	aIns->adc->SQR1 |= (aIns->channelsCount-1)<<ADC_SQR1_L_Pos; 
 8000e88:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8000e8a:	3a01      	subs	r2, #1
 8000e8c:	4322      	orrs	r2, r4
 8000e8e:	630a      	str	r2, [r1, #48]	; 0x30

    for (uint32_t i=0; i<aIns->channelsCount; i++)
 8000e90:	6842      	ldr	r2, [r0, #4]
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d047      	beq.n	8000f26 <adc_init.constprop.0.isra.0+0x12a>
 8000e96:	2106      	movs	r1, #6
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	e00e      	b.n	8000ebc <adc_init.constprop.0.isra.0+0xc0>
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
            return channelNumberErr;

        if (i<=4)
        {
            aIns->adc->SQR1 |= *(aIns->channels+i) << (6+i*6); 
 8000e9e:	6804      	ldr	r4, [r0, #0]
 8000ea0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ea2:	ea4e 0202 	orr.w	r2, lr, r2
 8000ea6:	6322      	str	r2, [r4, #48]	; 0x30
    for (uint32_t i=0; i<aIns->channelsCount; i++)
 8000ea8:	6842      	ldr	r2, [r0, #4]
 8000eaa:	4562      	cmp	r2, ip
 8000eac:	f10c 0401 	add.w	r4, ip, #1
 8000eb0:	f103 0301 	add.w	r3, r3, #1
 8000eb4:	f101 0106 	add.w	r1, r1, #6
 8000eb8:	d935      	bls.n	8000f26 <adc_init.constprop.0.isra.0+0x12a>
 8000eba:	46a4      	mov	ip, r4
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
 8000ebc:	6882      	ldr	r2, [r0, #8]
 8000ebe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec2:	1e54      	subs	r4, r2, #1
 8000ec4:	2c0f      	cmp	r4, #15
            aIns->adc->SQR1 |= *(aIns->channels+i) << (6+i*6); 
 8000ec6:	fa02 fe01 	lsl.w	lr, r2, r1
        if (*(aIns->channels+i)>16 || *(aIns->channels+i)<1)
 8000eca:	d839      	bhi.n	8000f40 <adc_init.constprop.0.isra.0+0x144>
        if (i<=4)
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d9e6      	bls.n	8000e9e <adc_init.constprop.0.isra.0+0xa2>
        }else if(i<=9)
        {
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000ed0:	f1a1 0e24 	sub.w	lr, r1, #36	; 0x24
        }else if(i<=9)
 8000ed4:	2b09      	cmp	r3, #9
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000ed6:	fa02 fe0e 	lsl.w	lr, r2, lr
        }else if(i<=9)
 8000eda:	d805      	bhi.n	8000ee8 <adc_init.constprop.0.isra.0+0xec>
            aIns->adc->SQR2 |= *(aIns->channels+i) << ((i-5)*6);
 8000edc:	6804      	ldr	r4, [r0, #0]
 8000ede:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000ee0:	ea4e 0202 	orr.w	r2, lr, r2
 8000ee4:	6362      	str	r2, [r4, #52]	; 0x34
 8000ee6:	e7df      	b.n	8000ea8 <adc_init.constprop.0.isra.0+0xac>
        }else if (i<=14)
        {
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000ee8:	f1a1 0442 	sub.w	r4, r1, #66	; 0x42
        }else if (i<=14)
 8000eec:	2b0e      	cmp	r3, #14
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000eee:	fa02 f404 	lsl.w	r4, r2, r4
        }else 
        {
            aIns->adc->SQR4 |= *(aIns->channels+i) << ((i-15)*6);
 8000ef2:	f1a1 0e60 	sub.w	lr, r1, #96	; 0x60
        }else if (i<=14)
 8000ef6:	d824      	bhi.n	8000f42 <adc_init.constprop.0.isra.0+0x146>
            aIns->adc->SQR3 |= *(aIns->channels+i) << ((i-10)*6);     
 8000ef8:	6802      	ldr	r2, [r0, #0]
 8000efa:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8000efc:	432c      	orrs	r4, r5
 8000efe:	6394      	str	r4, [r2, #56]	; 0x38
 8000f00:	e7d2      	b.n	8000ea8 <adc_init.constprop.0.isra.0+0xac>
    switch ((uint32_t)aIns->adc)
 8000f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f06:	d003      	beq.n	8000f10 <adc_init.constprop.0.isra.0+0x114>
 8000f08:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d127      	bne.n	8000f60 <adc_init.constprop.0.isra.0+0x164>
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8000f10:	4916      	ldr	r1, [pc, #88]	; (8000f6c <adc_init.constprop.0.isra.0+0x170>)
            ADC12_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);	// Set ADC clock to HCLK/2 and enable VREFINT
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <adc_init.constprop.0.isra.0+0x178>)
            RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8000f14:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000f16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f1a:	64cb      	str	r3, [r1, #76]	; 0x4c
            ADC12_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);	// Set ADC clock to HCLK/2 and enable VREFINT
 8000f1c:	6893      	ldr	r3, [r2, #8]
 8000f1e:	f443 0386 	orr.w	r3, r3, #4390912	; 0x430000
 8000f22:	6093      	str	r3, [r2, #8]
        break;
 8000f24:	e781      	b.n	8000e2a <adc_init.constprop.0.isra.0+0x2e>
        }
    }
	aIns->adc->CR |= ADC_CR_ADEN;
 8000f26:	6802      	ldr	r2, [r0, #0]
 8000f28:	6893      	ldr	r3, [r2, #8]
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6093      	str	r3, [r2, #8]
	while(!(aIns->adc->ISR & ADC_ISR_ADRDY));
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	07db      	lsls	r3, r3, #31
 8000f36:	d5fc      	bpl.n	8000f32 <adc_init.constprop.0.isra.0+0x136>
	aIns->adc->CR |= ADC_CR_ADSTART;
 8000f38:	6893      	ldr	r3, [r2, #8]
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6093      	str	r3, [r2, #8]
    
    return adcOk;  
 8000f40:	bd30      	pop	{r4, r5, pc}
            aIns->adc->SQR4 |= *(aIns->channels+i) << ((i-15)*6);
 8000f42:	6804      	ldr	r4, [r0, #0]
 8000f44:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000f46:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f4a:	432a      	orrs	r2, r5
 8000f4c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000f4e:	e7ab      	b.n	8000ea8 <adc_init.constprop.0.isra.0+0xac>
        aIns->adc->CFGR |= ADC_CFGR_CONT;
 8000f50:	6801      	ldr	r1, [r0, #0]
 8000f52:	68ca      	ldr	r2, [r1, #12]
 8000f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f58:	60ca      	str	r2, [r1, #12]
 8000f5a:	e783      	b.n	8000e64 <adc_init.constprop.0.isra.0+0x68>
 8000f5c:	4770      	bx	lr
 8000f5e:	4770      	bx	lr
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	50000400 	.word	0x50000400
 8000f68:	50000500 	.word	0x50000500
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	50000700 	.word	0x50000700
 8000f74:	50000300 	.word	0x50000300

08000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>:
#include "gpio.h"

GPIO::GPIO (GPIO_TypeDef* _GPIOx, uint8_t _pin, GPIOmode _mode, GPIOtype _type, GPIOspeed _speed, GPIOpull _pull, uint8_t _AFnumber):
 8000f78:	b5f0      	push	{r4, r5, r6, r7, lr}
GPIOx(_GPIOx), pin(_pin)
{
	switch ((uint32_t) _GPIOx)
 8000f7a:	4e42      	ldr	r6, [pc, #264]	; (8001084 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x10c>)
GPIOx(_GPIOx), pin(_pin)
 8000f7c:	6001      	str	r1, [r0, #0]
	switch ((uint32_t) _GPIOx)
 8000f7e:	42b1      	cmp	r1, r6
GPIOx(_GPIOx), pin(_pin)
 8000f80:	7102      	strb	r2, [r0, #4]
GPIO::GPIO (GPIO_TypeDef* _GPIOx, uint8_t _pin, GPIOmode _mode, GPIOtype _type, GPIOspeed _speed, GPIOpull _pull, uint8_t _AFnumber):
 8000f82:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8000f86:	f89d 001c 	ldrb.w	r0, [sp, #28]
	switch ((uint32_t) _GPIOx)
 8000f8a:	d068      	beq.n	800105e <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xe6>
 8000f8c:	d850      	bhi.n	8001030 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xb8>
 8000f8e:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
 8000f92:	42b1      	cmp	r1, r6
 8000f94:	d069      	beq.n	800106a <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xf2>
 8000f96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f9a:	42b1      	cmp	r1, r6
 8000f9c:	d13f      	bne.n	800101e <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xa6>
			break;
		case GPIOB_BASE:
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
			break;
		case GPIOC_BASE:
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000f9e:	4f3a      	ldr	r7, [pc, #232]	; (8001088 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8000fa0:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000fa2:	f046 0604 	orr.w	r6, r6, #4
 8000fa6:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
		default: 
		break;
	}

	GPIOx->MODER &= ~(0b11 << (pin*2));
 8000fa8:	0056      	lsls	r6, r2, #1
	GPIOx->MODER |= (static_cast<int>(_mode) << (pin*2));
	GPIOx->OTYPER &= ~(1 << pin);
	GPIOx->OTYPER |= (static_cast<int>(_type) << pin);
 8000faa:	fa05 fe02 	lsl.w	lr, r5, r2
	GPIOx->MODER &= ~(0b11 << (pin*2));
 8000fae:	f04f 0c03 	mov.w	ip, #3
 8000fb2:	680d      	ldr	r5, [r1, #0]
 8000fb4:	fa0c fc06 	lsl.w	ip, ip, r6
 8000fb8:	ea25 050c 	bic.w	r5, r5, ip
 8000fbc:	600d      	str	r5, [r1, #0]
	GPIOx->MODER |= (static_cast<int>(_mode) << (pin*2));
 8000fbe:	680d      	ldr	r5, [r1, #0]
 8000fc0:	40b3      	lsls	r3, r6
 8000fc2:	432b      	orrs	r3, r5
 8000fc4:	600b      	str	r3, [r1, #0]
	GPIOx->OTYPER &= ~(1 << pin);
 8000fc6:	684b      	ldr	r3, [r1, #4]
 8000fc8:	2501      	movs	r5, #1
 8000fca:	4095      	lsls	r5, r2
 8000fcc:	ea23 0305 	bic.w	r3, r3, r5
 8000fd0:	604b      	str	r3, [r1, #4]
	GPIOx->OTYPER |= (static_cast<int>(_type) << pin);
 8000fd2:	684b      	ldr	r3, [r1, #4]
 8000fd4:	ea4e 0303 	orr.w	r3, lr, r3
 8000fd8:	604b      	str	r3, [r1, #4]
	GPIOx->OSPEEDR &= ~(0b11 << (pin*2));
 8000fda:	688b      	ldr	r3, [r1, #8]
 8000fdc:	ea23 030c 	bic.w	r3, r3, ip
 8000fe0:	608b      	str	r3, [r1, #8]
	GPIOx->OSPEEDR |= (static_cast<int>(_speed)<<(pin*2));
 8000fe2:	688b      	ldr	r3, [r1, #8]
 8000fe4:	608b      	str	r3, [r1, #8]
	GPIOx->PUPDR &= ~(0b11 << (pin*2));
 8000fe6:	68cb      	ldr	r3, [r1, #12]
 8000fe8:	ea23 030c 	bic.w	r3, r3, ip
 8000fec:	60cb      	str	r3, [r1, #12]
	GPIOx->PUPDR |= (static_cast<int>(_pull)<<(pin*2));
 8000fee:	68cb      	ldr	r3, [r1, #12]
 8000ff0:	40b4      	lsls	r4, r6
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	08d3      	lsrs	r3, r2, #3
 8000ff6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000ffa:	60cc      	str	r4, [r1, #12]
	GPIOx->AFR[pin/8] &= ~(0xF << ((pin % 8)*4));
 8000ffc:	f002 0207 	and.w	r2, r2, #7
 8001000:	6a19      	ldr	r1, [r3, #32]
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	f04f 0c0f 	mov.w	ip, #15
 8001008:	fa0c fc02 	lsl.w	ip, ip, r2
 800100c:	ea21 010c 	bic.w	r1, r1, ip
 8001010:	6219      	str	r1, [r3, #32]
	GPIOx->AFR[pin/8] |= (_AFnumber << ((pin % 8)*4));
 8001012:	6a19      	ldr	r1, [r3, #32]
 8001014:	fa00 f202 	lsl.w	r2, r0, r2
 8001018:	430a      	orrs	r2, r1
 800101a:	621a      	str	r2, [r3, #32]
}
 800101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch ((uint32_t) _GPIOx)
 800101e:	f1b1 4f90 	cmp.w	r1, #1207959552	; 0x48000000
 8001022:	d1c1      	bne.n	8000fa8 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001024:	4f18      	ldr	r7, [pc, #96]	; (8001088 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001026:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001028:	f046 0601 	orr.w	r6, r6, #1
 800102c:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 800102e:	e7bb      	b.n	8000fa8 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
	switch ((uint32_t) _GPIOx)
 8001030:	4e16      	ldr	r6, [pc, #88]	; (800108c <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x114>)
 8001032:	42b1      	cmp	r1, r6
 8001034:	d01f      	beq.n	8001076 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xfe>
 8001036:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800103a:	42b1      	cmp	r1, r6
 800103c:	d105      	bne.n	800104a <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0xd2>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
 800103e:	4f12      	ldr	r7, [pc, #72]	; (8001088 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001040:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001042:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 8001046:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001048:	e7ae      	b.n	8000fa8 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
	switch ((uint32_t) _GPIOx)
 800104a:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
 800104e:	42b1      	cmp	r1, r6
 8001050:	d1aa      	bne.n	8000fa8 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
 8001052:	4f0d      	ldr	r7, [pc, #52]	; (8001088 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001054:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001056:	f046 0610 	orr.w	r6, r6, #16
 800105a:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 800105c:	e7a4      	b.n	8000fa8 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 800105e:	4f0a      	ldr	r7, [pc, #40]	; (8001088 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001060:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001062:	f046 0608 	orr.w	r6, r6, #8
 8001066:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001068:	e79e      	b.n	8000fa8 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 800106a:	4f07      	ldr	r7, [pc, #28]	; (8001088 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 800106c:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800106e:	f046 0602 	orr.w	r6, r6, #2
 8001072:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001074:	e798      	b.n	8000fa8 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOFEN;
 8001076:	4f04      	ldr	r7, [pc, #16]	; (8001088 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x110>)
 8001078:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800107a:	f046 0620 	orr.w	r6, r6, #32
 800107e:	64fe      	str	r6, [r7, #76]	; 0x4c
			break;
 8001080:	e792      	b.n	8000fa8 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0+0x30>
 8001082:	bf00      	nop
 8001084:	48000c00 	.word	0x48000c00
 8001088:	40021000 	.word	0x40021000
 800108c:	48001400 	.word	0x48001400

08001090 <_ZN3PID7ComputeEv.isra.0>:
	if (!_inAuto)
 8001090:	7843      	ldrb	r3, [r0, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d049      	beq.n	800112a <_ZN3PID7ComputeEv.isra.0+0x9a>
		error   = *_mySetpoint - input;
 8001096:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		input   = *_myInput;
 8001098:	6a42      	ldr	r2, [r0, #36]	; 0x24
		error   = *_mySetpoint - input;
 800109a:	ed93 7a00 	vldr	s14, [r3]
		input   = *_myInput;
 800109e:	ed92 5a00 	vldr	s10, [r2]
		_outputSum += (_ki * error);
 80010a2:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
 80010a6:	ed90 6a07 	vldr	s12, [r0, #28]
		dInput  = (input - _lastInput);
 80010aa:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
		if (!_pOnE)
 80010ae:	7803      	ldrb	r3, [r0, #0]
		error   = *_mySetpoint - input;
 80010b0:	ee37 7a45 	vsub.f32	s14, s14, s10
		dInput  = (input - _lastInput);
 80010b4:	ee75 7a67 	vsub.f32	s15, s10, s15
		_outputSum += (_ki * error);
 80010b8:	eee7 6a06 	vfma.f32	s13, s14, s12
 80010bc:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
		if (!_pOnE)
 80010c0:	bba3      	cbnz	r3, 800112c <_ZN3PID7ComputeEv.isra.0+0x9c>
			_outputSum -= _kp * dInput;
 80010c2:	ed90 7a06 	vldr	s14, [r0, #24]
		if (_outputSum > _outMax)
 80010c6:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
			_outputSum -= _kp * dInput;
 80010ca:	eee7 6ac7 	vfms.f32	s13, s15, s14
 80010ce:	eef1 5a67 	vneg.f32	s11, s15
		if (_outputSum > _outMax)
 80010d2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			_outputSum -= _kp * dInput;
 80010da:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
		if (_outputSum > _outMax)
 80010de:	dc37      	bgt.n	8001150 <_ZN3PID7ComputeEv.isra.0+0xc0>
		else if (_outputSum < _outMin)
 80010e0:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 80010e4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	d443      	bmi.n	8001176 <_ZN3PID7ComputeEv.isra.0+0xe6>
			output = 0;
 80010ee:	eddf 7a25 	vldr	s15, [pc, #148]	; 8001184 <_ZN3PID7ComputeEv.isra.0+0xf4>
		output += _outputSum - _kd * dInput;
 80010f2:	ed90 7a08 	vldr	s14, [r0, #32]
 80010f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010fa:	eee7 7a25 	vfma.f32	s15, s14, s11
		if (output > _outMax)
 80010fe:	eef4 7ac6 	vcmpe.f32	s15, s12
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dc08      	bgt.n	800111a <_ZN3PID7ComputeEv.isra.0+0x8a>
 8001108:	ed90 6a0e 	vldr	s12, [r0, #56]	; 0x38
 800110c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	bfb8      	it	lt
 8001116:	eeb0 6a67 	vmovlt.f32	s12, s15
		*_myOutput = output;
 800111a:	6a82      	ldr	r2, [r0, #40]	; 0x28
		_lastTime  = now;
 800111c:	2300      	movs	r3, #0
		*_myOutput = output;
 800111e:	ed82 6a00 	vstr	s12, [r2]
		_lastInput = input;
 8001122:	ed80 5a0d 	vstr	s10, [r0, #52]	; 0x34
		_lastTime  = now;
 8001126:	6043      	str	r3, [r0, #4]
 8001128:	4770      	bx	lr
}
 800112a:	4770      	bx	lr
		if (_outputSum > _outMax)
 800112c:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 8001130:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d511      	bpl.n	800115e <_ZN3PID7ComputeEv.isra.0+0xce>
			_outputSum = _outMax;
 800113a:	eef0 6a46 	vmov.f32	s13, s12
 800113e:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
			output = _kp * error;
 8001142:	edd0 4a06 	vldr	s9, [r0, #24]
 8001146:	eef1 5a67 	vneg.f32	s11, s15
 800114a:	ee67 7a24 	vmul.f32	s15, s14, s9
 800114e:	e7d0      	b.n	80010f2 <_ZN3PID7ComputeEv.isra.0+0x62>
			output = 0;
 8001150:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001184 <_ZN3PID7ComputeEv.isra.0+0xf4>
			_outputSum = _outMax;
 8001154:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
 8001158:	eef0 6a46 	vmov.f32	s13, s12
 800115c:	e7c9      	b.n	80010f2 <_ZN3PID7ComputeEv.isra.0+0x62>
		else if (_outputSum < _outMin)
 800115e:	edd0 5a0e 	vldr	s11, [r0, #56]	; 0x38
 8001162:	eef4 6ae5 	vcmpe.f32	s13, s11
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d5ea      	bpl.n	8001142 <_ZN3PID7ComputeEv.isra.0+0xb2>
			_outputSum = _outMin;
 800116c:	eef0 6a65 	vmov.f32	s13, s11
 8001170:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
 8001174:	e7e5      	b.n	8001142 <_ZN3PID7ComputeEv.isra.0+0xb2>
			output = 0;
 8001176:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001184 <_ZN3PID7ComputeEv.isra.0+0xf4>
			_outputSum = _outMin;
 800117a:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
 800117e:	eef0 6a47 	vmov.f32	s13, s14
 8001182:	e7b6      	b.n	80010f2 <_ZN3PID7ComputeEv.isra.0+0x62>
 8001184:	00000000 	.word	0x00000000

08001188 <main>:

motor_t motor = {0};
PID pidUd (&motor.FilteredIdqA[0],  &motor.Udq_pu[0], &setiD, 0.1f, 0.5f, 0, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
PID pidUq (&motor.FilteredIdqA[1],  &motor.Udq_pu[1], &setiQ, 0.01f, 0.15f, 0, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
int main(void)
{
 8001188:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
}

static inline void pwm_init (pwm_t* pwm)
{
    //NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  
 800118c:	4a74      	ldr	r2, [pc, #464]	; (8001360 <main+0x1d8>)
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 800118e:	4c75      	ldr	r4, [pc, #468]	; (8001364 <main+0x1dc>)
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  
 8001190:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001192:	b099      	sub	sp, #100	; 0x64
 8001194:	2000      	movs	r0, #0
 8001196:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800119a:	9001      	str	r0, [sp, #4]
 800119c:	6613      	str	r3, [r2, #96]	; 0x60
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 800119e:	6823      	ldr	r3, [r4, #0]
	pwm->tim->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
	pwm->tim->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;
	pwm->tim->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;
	//TIM1->CR2 |= 0b010<<TIM_CR2_MMS_Pos;   // Set TRGO on Update Event
	pwm->tim->PSC = 0;  // tim_clk = cpu_clk
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 80011a0:	4a71      	ldr	r2, [pc, #452]	; (8001368 <main+0x1e0>)
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 80011a2:	6999      	ldr	r1, [r3, #24]
 80011a4:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 80011a8:	6199      	str	r1, [r3, #24]
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC2M_Pos | TIM_CCMR1_OC2PE ; // PWM mode 1 channel 2
 80011aa:	6999      	ldr	r1, [r3, #24]
 80011ac:	f441 41d0 	orr.w	r1, r1, #26624	; 0x6800
 80011b0:	6199      	str	r1, [r3, #24]
	pwm->tim->CCMR2 |= 0b110<< TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC3PE ; // PWM mode 1 channel 3
 80011b2:	69d9      	ldr	r1, [r3, #28]
 80011b4:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 80011b8:	61d9      	str	r1, [r3, #28]
	pwm->tim->CCMR2 |= 0b0110<< TIM_CCMR2_OC4M_Pos;
 80011ba:	69d9      	ldr	r1, [r3, #28]
 80011bc:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80011c0:	61d9      	str	r1, [r3, #28]
	pwm->tim->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
 80011c2:	6a19      	ldr	r1, [r3, #32]
 80011c4:	f041 0105 	orr.w	r1, r1, #5
 80011c8:	6219      	str	r1, [r3, #32]
	pwm->tim->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;
 80011ca:	6a19      	ldr	r1, [r3, #32]
 80011cc:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80011d0:	6219      	str	r1, [r3, #32]
	pwm->tim->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;
 80011d2:	6a19      	ldr	r1, [r3, #32]
 80011d4:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
 80011d8:	6219      	str	r1, [r3, #32]
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 80011da:	6861      	ldr	r1, [r4, #4]
 80011dc:	fbb2 f2f1 	udiv	r2, r2, r1
 80011e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80011e4:	bf28      	it	cs
 80011e6:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
	pwm->tim->PSC = 0;  // tim_clk = cpu_clk
 80011ea:	6298      	str	r0, [r3, #40]	; 0x28
	pwm->tim->CCR1 = 0;
	pwm->tim->CCR2 = 0;
	pwm->tim->CCR3 = 0;
	pwm->tim->CCR4 = 1000;
 80011ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->tim->CCR1 = 0;
 80011f2:	2200      	movs	r2, #0
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 80011f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pwm->tim->CCR4 = 1000;
 80011fa:	6419      	str	r1, [r3, #64]	; 0x40
	pwm->tim ->DIER |=  TIM_DIER_UIE; // interrupt enable
 80011fc:	68da      	ldr	r2, [r3, #12]
	pwm->tim->CR2 = 0b0111<<TIM_CR2_MMS_Pos;   // Set TRGO on Compare 4
 80011fe:	2170      	movs	r1, #112	; 0x70
	pwm->tim ->DIER |=  TIM_DIER_UIE; // interrupt enable
 8001200:	f042 0201 	orr.w	r2, r2, #1
 8001204:	60da      	str	r2, [r3, #12]
	pwm->tim->CR2 = 0b0111<<TIM_CR2_MMS_Pos;   // Set TRGO on Compare 4
 8001206:	6059      	str	r1, [r3, #4]
	pwm->tim->CR1 |= TIM_CR1_ARPE | 0b01<<TIM_CR1_CMS_Pos;
 8001208:	681a      	ldr	r2, [r3, #0]
	pwm->tim->EGR |= TIM_EGR_UG;
 800120a:	4956      	ldr	r1, [pc, #344]	; (8001364 <main+0x1dc>)
	pwm->tim->CR1 |= TIM_CR1_ARPE | 0b01<<TIM_CR1_CMS_Pos;
 800120c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8001210:	601a      	str	r2, [r3, #0]
	pwm->tim->EGR |= TIM_EGR_UG;
 8001212:	680b      	ldr	r3, [r1, #0]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	f042 0201 	orr.w	r2, r2, #1
 800121a:	615a      	str	r2, [r3, #20]
	pwm->tim->BDTR |= TIM_BDTR_MOE | 0b00100000<<TIM_BDTR_DTG_Pos;
 800121c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800121e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001222:	f042 0220 	orr.w	r2, r2, #32
 8001226:	645a      	str	r2, [r3, #68]	; 0x44
	pwm->tim->CR1 |= TIM_CR1_CEN;
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]
    pwm->autoReloadValue = pwm->tim->ARR;
 8001230:	680a      	ldr	r2, [r1, #0]
 8001232:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001234:	608b      	str	r3, [r1, #8]
    pwm->halfAutoReloadValue = pwm->autoReloadValue/2;
 8001236:	085b      	lsrs	r3, r3, #1

    getAutoReloadValue (pwm);
	pwm->tim->CCR4= pwm->halfAutoReloadValue;
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
	if (!(RCC->CR & RCC_CR_HSERDY))
 800123a:	4a49      	ldr	r2, [pc, #292]	; (8001360 <main+0x1d8>)
    pwm->halfAutoReloadValue = pwm->autoReloadValue/2;
 800123c:	60cb      	str	r3, [r1, #12]
 800123e:	6813      	ldr	r3, [r2, #0]
 8001240:	039e      	lsls	r6, r3, #14
 8001242:	d406      	bmi.n	8001252 <main+0xca>
		RCC->CR |= RCC_CR_HSEON;
 8001244:	6813      	ldr	r3, [r2, #0]
 8001246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124a:	6013      	str	r3, [r2, #0]
		while(!(RCC->CR & RCC_CR_HSERDY));
 800124c:	6813      	ldr	r3, [r2, #0]
 800124e:	039d      	lsls	r5, r3, #14
 8001250:	d5fc      	bpl.n	800124c <main+0xc4>

void ClockManager::pllCfg([[maybe_unused]] int _pllNum, int _targetFreq, int _p, pllDiv _q, pllDiv _r)
{
	uint32_t sourceFreq;

	RCC->CR &= ~RCC_CR_PLLON;
 8001252:	4a43      	ldr	r2, [pc, #268]	; (8001360 <main+0x1d8>)
 8001254:	6813      	ldr	r3, [r2, #0]
 8001256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800125a:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLRDY);
 800125c:	6813      	ldr	r3, [r2, #0]
 800125e:	019c      	lsls	r4, r3, #6
 8001260:	d4fc      	bmi.n	800125c <main+0xd4>
	if (RCC->CR & RCC_CR_HSERDY)
 8001262:	6813      	ldr	r3, [r2, #0]
	else
		sourceFreq = RCC_PLLCFGR_PLLSRC_HSI;

	int m = sourceFreq / 4000000; //4 MHz input frequency

	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 8001264:	eddf 6a41 	vldr	s13, [pc, #260]	; 800136c <main+0x1e4>
	if (RCC->CR & RCC_CR_HSERDY)
 8001268:	0398      	lsls	r0, r3, #14
		RCC->PLLCFGR = RCC_PLLCFGR_PLLSRC_HSE;
 800126a:	bf42      	ittt	mi
 800126c:	2103      	movmi	r1, #3
 800126e:	60d1      	strmi	r1, [r2, #12]
		sourceFreq = hseClock;
 8001270:	4b3f      	ldrmi	r3, [pc, #252]	; (8001370 <main+0x1e8>)
	int m = sourceFreq / 4000000; //4 MHz input frequency
 8001272:	4a40      	ldr	r2, [pc, #256]	; (8001374 <main+0x1ec>)
		sourceFreq = RCC_PLLCFGR_PLLSRC_HSI;
 8001274:	bf58      	it	pl
 8001276:	2302      	movpl	r3, #2
	int m = sourceFreq / 4000000; //4 MHz input frequency
 8001278:	fba2 1203 	umull	r1, r2, r2, r3
 800127c:	0d12      	lsrs	r2, r2, #20
	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 800127e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	int plln = (int)(targetDivider + 0.5f);

	RCC->PLLCFGR |= (m - 1) << RCC_PLLCFGR_PLLM_Pos;
 800128a:	4b35      	ldr	r3, [pc, #212]	; (8001360 <main+0x1d8>)
	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 800128c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	RCC->PLLCFGR |= (m - 1) << RCC_PLLCFGR_PLLM_Pos;
 8001290:	68d9      	ldr	r1, [r3, #12]
 8001292:	3a01      	subs	r2, #1
 8001294:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
 8001298:	60da      	str	r2, [r3, #12]

	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 800129a:	68da      	ldr	r2, [r3, #12]
	int plln = (int)(targetDivider + 0.5f);
 800129c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80012a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		| static_cast<uint32_t>(_q) << RCC_PLLCFGR_PLLQ_Pos
		| static_cast<uint32_t>(_r) << RCC_PLLCFGR_PLLR_Pos
		| plln << RCC_PLLCFGR_PLLN_Pos;
 80012a8:	ee17 1a90 	vmov	r1, s15
 80012ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 80012b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012b4:	60da      	str	r2, [r3, #12]

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN;
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	f042 7288 	orr.w	r2, r2, #17825792	; 0x1100000
 80012bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012c0:	60da      	str	r2, [r3, #12]
	RCC->CR |= RCC_CR_PLLON;
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80012c8:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	0191      	lsls	r1, r2, #6
 80012ce:	d5fc      	bpl.n	80012ca <main+0x142>
pllClk ClockManager::updatePll()
{
	pllClk pllClocks = {0, 0, 0, 0};
	uint32_t sourceFreq;

	if(!(RCC->CR & RCC_CR_PLLRDY))
 80012d0:	681c      	ldr	r4, [r3, #0]
 80012d2:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
 80012d6:	d055      	beq.n	8001384 <main+0x1fc>
		return pllClocks;

	if (RCC->CR & RCC_CR_HSERDY)
 80012d8:	681a      	ldr	r2, [r3, #0]
		sourceFreq = hseClock;
	else
		sourceFreq = hsiClock;
 80012da:	4927      	ldr	r1, [pc, #156]	; (8001378 <main+0x1f0>)
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <main+0x1e8>)
	if(targetFreq > coreClock)
 80012de:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8001380 <main+0x1f8>
	pllClock = updatePll();
 80012e2:	4e26      	ldr	r6, [pc, #152]	; (800137c <main+0x1f4>)
	if(targetFreq > coreClock)
 80012e4:	f8d8 9000 	ldr.w	r9, [r8]
		sourceFreq = hsiClock;
 80012e8:	f412 3f00 	tst.w	r2, #131072	; 0x20000

    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <main+0x1d8>)
		sourceFreq = hsiClock;
 80012ee:	bf08      	it	eq
 80012f0:	460b      	moveq	r3, r1
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012f2:	68d1      	ldr	r1, [r2, #12]
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
    pllClocks.internal = sourceFreq * finalMult;
 80012f4:	ee07 3a90 	vmov	s15, r3
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 80012f8:	68d3      	ldr	r3, [r2, #12]
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 80012fa:	68d7      	ldr	r7, [r2, #12]
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80012fc:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllClocks.internal = sourceFreq * finalMult;
 8001300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 8001304:	f3c3 1303 	ubfx	r3, r3, #4, #4
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8001308:	ee07 1a90 	vmov	s15, r1
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 800130c:	3301      	adds	r3, #1
    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 800130e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 800131a:	68d3      	ldr	r3, [r2, #12]
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 800131c:	68d4      	ldr	r4, [r2, #12]
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 800131e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 8001322:	f3c4 6441 	ubfx	r4, r4, #25, #2
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 8001326:	f3c3 5341 	ubfx	r3, r3, #21, #2
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 800132a:	3401      	adds	r4, #1
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 800132c:	3301      	adds	r3, #1
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 800132e:	0064      	lsls	r4, r4, #1
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 8001330:	0eff      	lsrs	r7, r7, #27
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 8001332:	005b      	lsls	r3, r3, #1
    pllClocks.internal = sourceFreq * finalMult;
 8001334:	ee66 7a07 	vmul.f32	s15, s12, s14
 8001338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133c:	ee17 5a90 	vmov	r5, s15
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 8001340:	fbb5 f4f4 	udiv	r4, r5, r4
	if(targetFreq > coreClock)
 8001344:	45a1      	cmp	r9, r4
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 8001346:	fbb5 f7f7 	udiv	r7, r5, r7
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 800134a:	fbb5 f3f3 	udiv	r3, r5, r3
	pllClock = updatePll();
 800134e:	e9c6 5700 	strd	r5, r7, [r6]
 8001352:	60b3      	str	r3, [r6, #8]
 8001354:	60f4      	str	r4, [r6, #12]
	if(targetFreq > coreClock)
 8001356:	d220      	bcs.n	800139a <main+0x212>
		internalFreqUpdate(targetFreq);
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff fbb1 	bl	8000ac0 <_ZN12ClockManager18internalFreqUpdateEm>
 800135e:	e01c      	b.n	800139a <main+0x212>
 8001360:	40021000 	.word	0x40021000
 8001364:	2000001c 	.word	0x2000001c
 8001368:	04c4b400 	.word	0x04c4b400
 800136c:	4d989680 	.word	0x4d989680
 8001370:	016e3600 	.word	0x016e3600
 8001374:	431bde83 	.word	0x431bde83
 8001378:	00f42400 	.word	0x00f42400
 800137c:	200000d0 	.word	0x200000d0
 8001380:	2000000c 	.word	0x2000000c
	pllClock = updatePll();
 8001384:	4ec8      	ldr	r6, [pc, #800]	; (80016a8 <main+0x520>)
	if(targetFreq > coreClock)
 8001386:	f8df 83b4 	ldr.w	r8, [pc, #948]	; 800173c <main+0x5b4>
	pllClock = updatePll();
 800138a:	e9c6 4400 	strd	r4, r4, [r6]
 800138e:	e9c6 4402 	strd	r4, r4, [r6, #8]
	if(targetFreq > coreClock)
 8001392:	f8d8 9000 	ldr.w	r9, [r8]
	pllClk pllClocks = {0, 0, 0, 0};
 8001396:	4627      	mov	r7, r4
 8001398:	4625      	mov	r5, r4
	RCC->CFGR = (RCC->CFGR & ~0x7) | static_cast<uint32_t>(_src);
 800139a:	4ac4      	ldr	r2, [pc, #784]	; (80016ac <main+0x524>)
 800139c:	6893      	ldr	r3, [r2, #8]
 800139e:	f023 0307 	bic.w	r3, r3, #7
 80013a2:	f043 0303 	orr.w	r3, r3, #3
 80013a6:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != static_cast<uint32_t>(_src) << RCC_CFGR_SWS_Pos);
 80013a8:	6893      	ldr	r3, [r2, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	d1fa      	bne.n	80013a8 <main+0x220>
	if(targetFreq < coreClock)
 80013b2:	45a1      	cmp	r9, r4
 80013b4:	f200 847f 	bhi.w	8001cb6 <main+0xb2e>
{
   // uart.print("\r\ncpu = ");
    //uart.println((float)coreClock / 1000000);

    uart.print("\r\ncpu = ");
    uart.print((float)coreClock / 1000000);
 80013b8:	ee07 4a90 	vmov	s15, r4
 80013bc:	ed9f 8abc 	vldr	s16, [pc, #752]	; 80016b0 <main+0x528>
    uart.print("\r\ncpu = ");
 80013c0:	48bc      	ldr	r0, [pc, #752]	; (80016b4 <main+0x52c>)
	coreClock = targetFreq;
 80013c2:	f8c8 4000 	str.w	r4, [r8]
    uart.print((float)coreClock / 1000000);
 80013c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    uart.print("\r\ncpu = ");
 80013ca:	f7ff fb69 	bl	8000aa0 <_ZN6Serial5printEPKc.constprop.0>
    uart.print((float)coreClock / 1000000);
 80013ce:	ee67 7a88 	vmul.f32	s15, s15, s16
    uart.print(" MHz\r\nahb = ");
    uart.print((float)ahbClock / 1000000);
    uart.print(" MHz\r\napb = ");
    uart.print((float)apbClock / 1000000);
    uart.print(" MHz\r\ntim = ");
    uart.print((float)timerClock / 1000000);
 80013d2:	4cb9      	ldr	r4, [pc, #740]	; (80016b8 <main+0x530>)
    uart.print((float)coreClock / 1000000);
 80013d4:	ee17 0a90 	vmov	r0, s15
 80013d8:	f7ff f862 	bl	80004a0 <__aeabi_f2d>
 80013dc:	ec41 0b10 	vmov	d0, r0, r1
 80013e0:	f7ff fc08 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
    uart.print(" MHz\r\nahb = ");
 80013e4:	48b5      	ldr	r0, [pc, #724]	; (80016bc <main+0x534>)
 80013e6:	f7ff fb5b 	bl	8000aa0 <_ZN6Serial5printEPKc.constprop.0>
    uart.print((float)ahbClock / 1000000);
 80013ea:	4bb5      	ldr	r3, [pc, #724]	; (80016c0 <main+0x538>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80013f8:	ee17 0a90 	vmov	r0, s15
 80013fc:	f7ff f850 	bl	80004a0 <__aeabi_f2d>
 8001400:	ec41 0b10 	vmov	d0, r0, r1
 8001404:	f7ff fbf6 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
    uart.print(" MHz\r\napb = ");
 8001408:	48ae      	ldr	r0, [pc, #696]	; (80016c4 <main+0x53c>)
 800140a:	f7ff fb49 	bl	8000aa0 <_ZN6Serial5printEPKc.constprop.0>
    uart.print((float)apbClock / 1000000);
 800140e:	4bae      	ldr	r3, [pc, #696]	; (80016c8 <main+0x540>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001418:	ee67 7a88 	vmul.f32	s15, s15, s16
 800141c:	ee17 0a90 	vmov	r0, s15
 8001420:	f7ff f83e 	bl	80004a0 <__aeabi_f2d>
 8001424:	ec41 0b10 	vmov	d0, r0, r1
 8001428:	f7ff fbe4 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
    uart.print(" MHz\r\ntim = ");
 800142c:	48a7      	ldr	r0, [pc, #668]	; (80016cc <main+0x544>)
 800142e:	f7ff fb37 	bl	8000aa0 <_ZN6Serial5printEPKc.constprop.0>
    uart.print((float)timerClock / 1000000);
 8001432:	edd4 7a00 	vldr	s15, [r4]
 8001436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800143a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800143e:	ee17 0a90 	vmov	r0, s15
 8001442:	f7ff f82d 	bl	80004a0 <__aeabi_f2d>
 8001446:	ec41 0b10 	vmov	d0, r0, r1
 800144a:	f7ff fbd3 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
    uart.print(" MHz\r\n");

	uart.print("\nPLL\r\nkernel: ");
	uart.print(float(pllClock.internal) / 1000000);
 800144e:	ee07 5a90 	vmov	s15, r5
 8001452:	eef8 7a67 	vcvt.f32.u32	s15, s15
    uart.print(" MHz\r\n");
 8001456:	489e      	ldr	r0, [pc, #632]	; (80016d0 <main+0x548>)
	uart.print(float(pllClock.internal) / 1000000);
 8001458:	ee67 7a88 	vmul.f32	s15, s15, s16
    uart.print(" MHz\r\n");
 800145c:	f7ff fb20 	bl	8000aa0 <_ZN6Serial5printEPKc.constprop.0>
	uart.print("\nPLL\r\nkernel: ");
 8001460:	489c      	ldr	r0, [pc, #624]	; (80016d4 <main+0x54c>)
 8001462:	f7ff fb1d 	bl	8000aa0 <_ZN6Serial5printEPKc.constprop.0>
	uart.print(float(pllClock.internal) / 1000000);
 8001466:	ee17 0a90 	vmov	r0, s15
 800146a:	f7ff f819 	bl	80004a0 <__aeabi_f2d>
 800146e:	ec41 0b10 	vmov	d0, r0, r1
 8001472:	f7ff fbbf 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
	uart.print(" MHz\r\n    p: ");
	uart.print(float(pllClock.p) / 1000000);
 8001476:	ee07 7a90 	vmov	s15, r7
 800147a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	uart.print(" MHz\r\n    p: ");
 800147e:	4896      	ldr	r0, [pc, #600]	; (80016d8 <main+0x550>)
	uart.print(float(pllClock.p) / 1000000);
 8001480:	ee67 7a88 	vmul.f32	s15, s15, s16
	uart.print(" MHz\r\n    p: ");
 8001484:	f7ff fb0c 	bl	8000aa0 <_ZN6Serial5printEPKc.constprop.0>
	uart.print(float(pllClock.p) / 1000000);
 8001488:	ee17 0a90 	vmov	r0, s15
 800148c:	f7ff f808 	bl	80004a0 <__aeabi_f2d>
 8001490:	ec41 0b10 	vmov	d0, r0, r1
 8001494:	f7ff fbae 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
	uart.print(" MHz\r\n    q: ");
 8001498:	4890      	ldr	r0, [pc, #576]	; (80016dc <main+0x554>)
 800149a:	f7ff fb01 	bl	8000aa0 <_ZN6Serial5printEPKc.constprop.0>
	uart.print(float(pllClock.q) / 1000000);
 800149e:	edd6 7a02 	vldr	s15, [r6, #8]
 80014a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80014aa:	ee17 0a90 	vmov	r0, s15
 80014ae:	f7fe fff7 	bl	80004a0 <__aeabi_f2d>
 80014b2:	ec41 0b10 	vmov	d0, r0, r1
 80014b6:	f7ff fb9d 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
	uart.print(" MHz\r\n    r: ");
 80014ba:	4889      	ldr	r0, [pc, #548]	; (80016e0 <main+0x558>)
 80014bc:	f7ff faf0 	bl	8000aa0 <_ZN6Serial5printEPKc.constprop.0>
	uart.print(float(pllClock.r) / 1000000);
 80014c0:	edd6 7a03 	vldr	s15, [r6, #12]
 80014c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80014cc:	ee17 0a90 	vmov	r0, s15
 80014d0:	f7fe ffe6 	bl	80004a0 <__aeabi_f2d>
 80014d4:	ec41 0b10 	vmov	d0, r0, r1
 80014d8:	f7ff fb8c 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
	uart.print(" MHz\r\n");
 80014dc:	487c      	ldr	r0, [pc, #496]	; (80016d0 <main+0x548>)
 80014de:	f7ff fadf 	bl	8000aa0 <_ZN6Serial5printEPKc.constprop.0>
	_reg |= _bits;
 80014e2:	4b72      	ldr	r3, [pc, #456]	; (80016ac <main+0x524>)
 80014e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014e6:	f042 0210 	orr.w	r2, r2, #16
 80014ea:	659a      	str	r2, [r3, #88]	; 0x58
	while((_reg & _bits) != _bits)
 80014ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014ee:	06d2      	lsls	r2, r2, #27
 80014f0:	d5fc      	bpl.n	80014ec <main+0x364>
	int prescaler = timerClock / 1000000;
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	4a7b      	ldr	r2, [pc, #492]	; (80016e4 <main+0x55c>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0c9b      	lsrs	r3, r3, #18
	TIM6->PSC = prescaler - 1;
 80014fc:	4a7a      	ldr	r2, [pc, #488]	; (80016e8 <main+0x560>)
 80014fe:	3b01      	subs	r3, #1
 8001500:	6293      	str	r3, [r2, #40]	; 0x28
	TIM6->ARR = 0x0FFF;
 8001502:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001506:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM6->CR1 = TIM_CR1_CEN;
 8001508:	2301      	movs	r3, #1
 800150a:	6013      	str	r3, [r2, #0]
    SysTick_Config(coreClock / 1000);
 800150c:	f8d8 3000 	ldr.w	r3, [r8]
 8001510:	4a76      	ldr	r2, [pc, #472]	; (80016ec <main+0x564>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	3b01      	subs	r3, #1
 800151a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151e:	d20a      	bcs.n	8001536 <main+0x3ae>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001520:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	4972      	ldr	r1, [pc, #456]	; (80016f0 <main+0x568>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	23f0      	movs	r3, #240	; 0xf0
 800152a:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152e:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001530:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001532:	6191      	str	r1, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001534:	6113      	str	r3, [r2, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8001740 <main+0x5b8>
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; 
 800153a:	4c5c      	ldr	r4, [pc, #368]	; (80016ac <main+0x524>)
	// int i, j=0;
	static uint32_t prevMotorState=0;
	float offsetAngle = 0;
	//initSysTick();	
	Init();  
	pidUq.Init();
 800153c:	4e6d      	ldr	r6, [pc, #436]	; (80016f4 <main+0x56c>)
 800153e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001542:	f8c8 3000 	str.w	r3, [r8]
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; 
 8001546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	65a3      	str	r3, [r4, #88]	; 0x58
	TIM2->PSC = 15; // 160000000/16 = 10000000 Hz
 800154e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001552:	220f      	movs	r2, #15
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 49999; // 10000000/4999 = 2000 Hz
 8001556:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 10;
 800155c:	220a      	movs	r2, #10
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2 -> DIER |= TIM_DIER_UIE; // update interrupt enable
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	60da      	str	r2, [r3, #12]
	TIM2->CR1  |= TIM_CR1_ARPE;
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800156e:	601a      	str	r2, [r3, #0]
	TIM2->CR1  |= TIM_CR1_CEN;	
 8001570:	6819      	ldr	r1, [r3, #0]
	adcChannelNumbers_t adc1Channels[3] = {1, 8, 9};
 8001572:	4a61      	ldr	r2, [pc, #388]	; (80016f8 <main+0x570>)
	TIM2->CR1  |= TIM_CR1_CEN;	
 8001574:	f041 0101 	orr.w	r1, r1, #1
 8001578:	6019      	str	r1, [r3, #0]
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 800157a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800157e:	910c      	str	r1, [sp, #48]	; 0x30
	adcChannelNumbers_t adc1Channels[3] = {1, 8, 9};
 8001580:	ca07      	ldmia	r2, {r0, r1, r2}
 8001582:	ab09      	add	r3, sp, #36	; 0x24
 8001584:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 8001588:	2500      	movs	r5, #0
 800158a:	f04f 0a01 	mov.w	sl, #1
 800158e:	2703      	movs	r7, #3
 8001590:	f04f 0b09 	mov.w	fp, #9
	adc_init(&adc);
 8001594:	a80c      	add	r0, sp, #48	; 0x30
	adcChannel_t adc = {.adc = ADC1, .channelsCount = 3, .channels = adc1Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 8001596:	930e      	str	r3, [sp, #56]	; 0x38
 8001598:	950f      	str	r5, [sp, #60]	; 0x3c
 800159a:	9511      	str	r5, [sp, #68]	; 0x44
 800159c:	970d      	str	r7, [sp, #52]	; 0x34
 800159e:	f88d a03c 	strb.w	sl, [sp, #60]	; 0x3c
 80015a2:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
	adc_init(&adc);
 80015a6:	f7ff fc29 	bl	8000dfc <adc_init.constprop.0.isra.0>
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 80015aa:	4b54      	ldr	r3, [pc, #336]	; (80016fc <main+0x574>)
 80015ac:	9312      	str	r3, [sp, #72]	; 0x48
 80015ae:	ab06      	add	r3, sp, #24
	adcChannelNumbers_t adc2Channels[2] = {14 ,12};
 80015b0:	220e      	movs	r2, #14
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 80015b2:	f04f 0902 	mov.w	r9, #2
	adc_init(&adc2);
 80015b6:	a812      	add	r0, sp, #72	; 0x48
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 80015b8:	9314      	str	r3, [sp, #80]	; 0x50
	adcChannelNumbers_t adc2Channels[2] = {14 ,12};
 80015ba:	230c      	movs	r3, #12
 80015bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
	adcChannel_t adc2 = {.adc = ADC2, .channelsCount = 2, .channels = adc2Channels, .triggerEdge = risingEdge, .externalTriggerEvent = 0b01001, .adcError = adcOk};
 80015c0:	9515      	str	r5, [sp, #84]	; 0x54
 80015c2:	e9cd b516 	strd	fp, r5, [sp, #88]	; 0x58
 80015c6:	f88d a054 	strb.w	sl, [sp, #84]	; 0x54
 80015ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
	adc_init(&adc2);
 80015ce:	f7ff fc15 	bl	8000dfc <adc_init.constprop.0.isra.0>
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 80015d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	DMA1_Channel2->CPAR = (uint32_t) &(ADC2->DR);
 80015d4:	4a4a      	ldr	r2, [pc, #296]	; (8001700 <main+0x578>)
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 80015d6:	f043 0305 	orr.w	r3, r3, #5
 80015da:	64a3      	str	r3, [r4, #72]	; 0x48
	DMAMUX1_Channel1->CCR = 36; // dma request from ADC2
 80015dc:	4b49      	ldr	r3, [pc, #292]	; (8001704 <main+0x57c>)
 80015de:	2124      	movs	r1, #36	; 0x24
 80015e0:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
	DMA1_Channel2-> CCR = 0b01<<DMA_CCR_MSIZE_Pos | 0b10<<DMA_CCR_PSIZE_Pos | DMA_CCR_MINC | DMA_CCR_CIRC ; // 16 bit memory size, 32 bit peripheral size, memory increment mode, circular mode, transfer complete interrupt enable
 80015e4:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
 80015e8:	61d9      	str	r1, [r3, #28]
	DMA1_Channel2->CPAR = (uint32_t) &(ADC2->DR);
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
	DMA1_Channel2->CMAR = (uint32_t) Adc2DmaReadings;
 80015ec:	4a46      	ldr	r2, [pc, #280]	; (8001708 <main+0x580>)
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
	DMA1_Channel2->CNDTR = 2;
 80015f0:	f8c3 9020 	str.w	r9, [r3, #32]
	DMA1_Channel2->CCR |= DMA_CCR_EN;
 80015f4:	69da      	ldr	r2, [r3, #28]
	DMA1_Channel5->CPAR = (uint32_t) &(ADC1->DR);
 80015f6:	4945      	ldr	r1, [pc, #276]	; (800170c <main+0x584>)
	DMA1_Channel2->CCR |= DMA_CCR_EN;
 80015f8:	ea42 020a 	orr.w	r2, r2, sl
 80015fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001600:	61da      	str	r2, [r3, #28]
 8001602:	f8c8 0000 	str.w	r0, [r8]
	DMAMUX1_Channel4->CCR = 5;
 8001606:	2005      	movs	r0, #5
 8001608:	f8c3 0810 	str.w	r0, [r3, #2064]	; 0x810
	DMA1_Channel5->CMAR = (uint32_t) AdcDmaReadings;
 800160c:	4a40      	ldr	r2, [pc, #256]	; (8001710 <main+0x588>)
	DMA1_Channel5-> CCR = 0b01<<DMA_CCR_MSIZE_Pos | 0b10<<DMA_CCR_PSIZE_Pos | DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_TCIE; // 16 bit memory size, 32 bit peripheral size, memory increment mode, circular mode, transfer complete interrupt enable
 800160e:	f240 60a2 	movw	r0, #1698	; 0x6a2
 8001612:	6598      	str	r0, [r3, #88]	; 0x58
	DMA1_Channel5->CPAR = (uint32_t) &(ADC1->DR);
 8001614:	6619      	str	r1, [r3, #96]	; 0x60
	DMA1_Channel5->CMAR = (uint32_t) AdcDmaReadings;
 8001616:	665a      	str	r2, [r3, #100]	; 0x64
	DMA1_Channel5->CNDTR = 3;
 8001618:	65df      	str	r7, [r3, #92]	; 0x5c
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 800161a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800161c:	ea42 020a 	orr.w	r2, r2, sl
 8001620:	659a      	str	r2, [r3, #88]	; 0x58
	pidUq.Init();
 8001622:	4630      	mov	r0, r6
	pidUq.SetOutputLimits(-1,1);
 8001624:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001628:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	pidUq.Init();
 800162c:	f7ff fa98 	bl	8000b60 <_ZN3PID4InitEv>
	pidUq.SetOutputLimits(-1,1);
 8001630:	f7ff fab0 	bl	8000b94 <_ZN3PID15SetOutputLimitsEff>
	if (newAuto && !_inAuto)
 8001634:	7873      	ldrb	r3, [r6, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 833a 	beq.w	8001cb0 <main+0xb28>
	pidUq.SetMode(PIDMode_TypeDef::_PID_MODE_AUTOMATIC);

	pidUd.Init();
 800163c:	4935      	ldr	r1, [pc, #212]	; (8001714 <main+0x58c>)
	_inAuto = (PIDMode_TypeDef)newAuto;
 800163e:	2301      	movs	r3, #1
 8001640:	4608      	mov	r0, r1
	pidUd.SetOutputLimits(-1,1);
 8001642:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001646:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800164a:	7073      	strb	r3, [r6, #1]
	pidUd.Init();
 800164c:	f7ff fa88 	bl	8000b60 <_ZN3PID4InitEv>
	pidUd.SetOutputLimits(-1,1);
 8001650:	f7ff faa0 	bl	8000b94 <_ZN3PID15SetOutputLimitsEff>
	if (newAuto && !_inAuto)
 8001654:	784b      	ldrb	r3, [r1, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8327 	beq.w	8001caa <main+0xb22>
	_inAuto = (PIDMode_TypeDef)newAuto;
 800165c:	2301      	movs	r3, #1
 800165e:	704b      	strb	r3, [r1, #1]
		// 	}

	
		

		if(milis-lastPrintTime>=1)
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <main+0x590>)
			//static uint16_t filteredAngle;
			//filteredAngle += 0.8f * (Adc2DmaReadings[0] - filteredAngle);
			//uart.print(filteredAngle);
			//uart.print(",");
			uart.print("angleADC:");
			uart.print(Adc2DmaReadings[0]/11.21111111f);
 8001662:	eddf 8a2e 	vldr	s17, [pc, #184]	; 800171c <main+0x594>
			uart.print(",");
			uart.print("angleI2c:");
			uart.print(angleEnc/11.375f);
 8001666:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 8001720 <main+0x598>
		if(milis-lastPrintTime>=1)
 800166a:	681f      	ldr	r7, [r3, #0]
 800166c:	4c2d      	ldr	r4, [pc, #180]	; (8001724 <main+0x59c>)
 800166e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8001744 <main+0x5bc>
 8001672:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8001748 <main+0x5c0>
					motor.Udq_pu[1] = 0;
 8001676:	ed9f 9a2c 	vldr	s18, [pc, #176]	; 8001728 <main+0x5a0>
			uart.print(setiQ);			
 800167a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800167e:	f04f 0900 	mov.w	r9, #0
 8001682:	7ae3      	ldrb	r3, [r4, #11]
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <main+0x5a4>)
 8001688:	7aa5      	ldrb	r5, [r4, #10]
 800168a:	6819      	ldr	r1, [r3, #0]
		if (milis-motorProcessLastTime>=slopeInterval)
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <main+0x5a8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	9303      	str	r3, [sp, #12]
			uart.print(setiQ);			
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <main+0x5ac>)
 8001694:	f8d3 e000 	ldr.w	lr, [r3]
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <main+0x5b0>)
 800169a:	2200      	movs	r2, #0
 800169c:	681e      	ldr	r6, [r3, #0]
 800169e:	9201      	str	r2, [sp, #4]
 80016a0:	9204      	str	r2, [sp, #16]
 80016a2:	4694      	mov	ip, r2
 80016a4:	e052      	b.n	800174c <main+0x5c4>
 80016a6:	bf00      	nop
 80016a8:	200000d0 	.word	0x200000d0
 80016ac:	40021000 	.word	0x40021000
 80016b0:	358637bd 	.word	0x358637bd
 80016b4:	08003150 	.word	0x08003150
 80016b8:	20000010 	.word	0x20000010
 80016bc:	0800315c 	.word	0x0800315c
 80016c0:	20000008 	.word	0x20000008
 80016c4:	0800316c 	.word	0x0800316c
 80016c8:	20000004 	.word	0x20000004
 80016cc:	0800317c 	.word	0x0800317c
 80016d0:	0800318c 	.word	0x0800318c
 80016d4:	08003194 	.word	0x08003194
 80016d8:	080031a4 	.word	0x080031a4
 80016dc:	080031b4 	.word	0x080031b4
 80016e0:	080031c4 	.word	0x080031c4
 80016e4:	431bde83 	.word	0x431bde83
 80016e8:	40001000 	.word	0x40001000
 80016ec:	10624dd3 	.word	0x10624dd3
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	20000304 	.word	0x20000304
 80016f8:	080030f8 	.word	0x080030f8
 80016fc:	50000100 	.word	0x50000100
 8001700:	50000140 	.word	0x50000140
 8001704:	40020000 	.word	0x40020000
 8001708:	200000fc 	.word	0x200000fc
 800170c:	50000040 	.word	0x50000040
 8001710:	200000e0 	.word	0x200000e0
 8001714:	200002c4 	.word	0x200002c4
 8001718:	200000f4 	.word	0x200000f4
 800171c:	3db6ad09 	.word	0x3db6ad09
 8001720:	3db40b41 	.word	0x3db40b41
 8001724:	200001b4 	.word	0x200001b4
 8001728:	00000000 	.word	0x00000000
 800172c:	20000174 	.word	0x20000174
 8001730:	20000170 	.word	0x20000170
 8001734:	20000018 	.word	0x20000018
 8001738:	2000016c 	.word	0x2000016c
 800173c:	2000000c 	.word	0x2000000c
 8001740:	e000e100 	.word	0xe000e100
 8001744:	20000178 	.word	0x20000178
 8001748:	20000104 	.word	0x20000104

public:
	char buffer [bSize];
	bool empty()
	{
		if (tail==head) 
 800174c:	7b60      	ldrb	r0, [r4, #13]
 800174e:	7b23      	ldrb	r3, [r4, #12]
 8001750:	4298      	cmp	r0, r3
 8001752:	d027      	beq.n	80017a4 <main+0x61c>
bool Serial::readTillEOL (char *_line) // returns 1 if EOL is found, 0 if not, when EOL is found save read data to _line
{
	if (uart.available())
	{		
		
		if(count==0)
 8001754:	b955      	cbnz	r5, 800176c <main+0x5e4>
 8001756:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 8001a1c <main+0x894>
 800175a:	9b02      	ldr	r3, [sp, #8]
 800175c:	f10c 0001 	add.w	r0, ip, #1
 8001760:	4418      	add	r0, r3
 8001762:	4663      	mov	r3, ip
		{
				for (int i=0; i<=elementsToFlush; i++)
				{
					char* tempPtr =_line+i;
					*tempPtr = 0;				
 8001764:	f803 9b01 	strb.w	r9, [r3], #1
				for (int i=0; i<=elementsToFlush; i++)
 8001768:	4298      	cmp	r0, r3
 800176a:	d1fb      	bne.n	8001764 <main+0x5dc>
	return Buffer::status::ok;
	
}
	status read(char* _data)
	{
	if (tail==head) 
 800176c:	7b60      	ldrb	r0, [r4, #13]
 800176e:	7b23      	ldrb	r3, [r4, #12]
 8001770:	4298      	cmp	r0, r3
 8001772:	d00c      	beq.n	800178e <main+0x606>
		return Buffer::status::bufferEmpty;
		
	*_data=buffer[tail];
 8001774:	7b63      	ldrb	r3, [r4, #13]
 8001776:	4423      	add	r3, r4
 8001778:	f893 a00e 	ldrb.w	sl, [r3, #14]
	tail++;
 800177c:	7b63      	ldrb	r3, [r4, #13]
 800177e:	3301      	adds	r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	7363      	strb	r3, [r4, #13]

	if ( tail == (bSize-1) )
 8001784:	7b63      	ldrb	r3, [r4, #13]
 8001786:	2bff      	cmp	r3, #255	; 0xff
		tail = 0;
 8001788:	bf08      	it	eq
 800178a:	f884 900d 	strbeq.w	r9, [r4, #13]
				}							
		}		

		char c = uart.readChar();
		if (c == '\n')
 800178e:	f1ba 0f0a 	cmp.w	sl, #10
		{
			//GPIOA->ODR ^= GPIO_ODR_OD5;
			_line+=count;
			*_line=0;
 8001792:	4ba2      	ldr	r3, [pc, #648]	; (8001a1c <main+0x894>)
		if (c == '\n')
 8001794:	f000 81a4 	beq.w	8001ae0 <main+0x958>
			return 1;
		}
		else
		{
			_line+=count;
			*_line=c;
 8001798:	f803 a005 	strb.w	sl, [r3, r5]
			count++;
 800179c:	1c6b      	adds	r3, r5, #1
 800179e:	b2dd      	uxtb	r5, r3
 80017a0:	f04f 0c01 	mov.w	ip, #1
		if (milis-motorProcessLastTime>=slopeInterval)
 80017a4:	f8d8 3000 	ldr.w	r3, [r8]
 80017a8:	9803      	ldr	r0, [sp, #12]
 80017aa:	1a5b      	subs	r3, r3, r1
 80017ac:	4283      	cmp	r3, r0
 80017ae:	d319      	bcc.n	80017e4 <main+0x65c>
			if (!motorState)
 80017b0:	4b9b      	ldr	r3, [pc, #620]	; (8001a20 <main+0x898>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8186 	beq.w	8001ac6 <main+0x93e>
				if (prevMotorState == 0)
 80017ba:	2e00      	cmp	r6, #0
 80017bc:	f000 8239 	beq.w	8001c32 <main+0xaaa>
				if ((motorSpeed <setMotorSpeed))
 80017c0:	4998      	ldr	r1, [pc, #608]	; (8001a24 <main+0x89c>)
 80017c2:	4b99      	ldr	r3, [pc, #612]	; (8001a28 <main+0x8a0>)
 80017c4:	680a      	ldr	r2, [r1, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f080 8225 	bcs.w	8001c18 <main+0xa90>
					motorSpeed++;			
 80017ce:	680b      	ldr	r3, [r1, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	600b      	str	r3, [r1, #0]
				prevMotorState = 1;
 80017d4:	2601      	movs	r6, #1
			TIM2loopFlag = false;
 80017d6:	4b95      	ldr	r3, [pc, #596]	; (8001a2c <main+0x8a4>)
 80017d8:	f883 9000 	strb.w	r9, [r3]
			motorProcessLastTime = milis;
 80017dc:	2201      	movs	r2, #1
 80017de:	f8d8 1000 	ldr.w	r1, [r8]
 80017e2:	9201      	str	r2, [sp, #4]
		if(milis-lastPrintTime>=1)
 80017e4:	f8d8 3000 	ldr.w	r3, [r8]
 80017e8:	42bb      	cmp	r3, r7
 80017ea:	d0af      	beq.n	800174c <main+0x5c4>
 80017ec:	4628      	mov	r0, r5
 80017ee:	b10a      	cbz	r2, 80017f4 <main+0x66c>
 80017f0:	4b8f      	ldr	r3, [pc, #572]	; (8001a30 <main+0x8a8>)
 80017f2:	601e      	str	r6, [r3, #0]
 80017f4:	9b01      	ldr	r3, [sp, #4]
 80017f6:	b10b      	cbz	r3, 80017fc <main+0x674>
 80017f8:	4b8e      	ldr	r3, [pc, #568]	; (8001a34 <main+0x8ac>)
 80017fa:	6019      	str	r1, [r3, #0]
 80017fc:	9b04      	ldr	r3, [sp, #16]
 80017fe:	b10b      	cbz	r3, 8001804 <main+0x67c>
 8001800:	9b02      	ldr	r3, [sp, #8]
 8001802:	72e3      	strb	r3, [r4, #11]
 8001804:	f1bc 0f00 	cmp.w	ip, #0
 8001808:	d000      	beq.n	800180c <main+0x684>
 800180a:	72a0      	strb	r0, [r4, #10]
	I2Cx->CR1 |= I2C_CR1_PE; // Enable I2C2 peripheral
}

void I2C::sendByte(uint8_t *_byte, uint8_t _address)
{
	I2Cx->CR2 &= ~(0x1FFFF << 10);
 800180c:	4b8a      	ldr	r3, [pc, #552]	; (8001a38 <main+0x8b0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	f022 62ff 	bic.w	r2, r2, #133693440	; 0x7f80000
 8001816:	f422 22ff 	bic.w	r2, r2, #522240	; 0x7f800
 800181a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181e:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= I2C_CR2_AUTOEND;
 8001820:	685a      	ldr	r2, [r3, #4]
	I2Cx -> CR2 = _address<<1;
 8001822:	216c      	movs	r1, #108	; 0x6c
	I2Cx->CR2 |= I2C_CR2_AUTOEND;
 8001824:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001828:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 = _address<<1;
 800182a:	6059      	str	r1, [r3, #4]
	I2Cx ->CR2 |= 1<<I2C_CR2_NBYTES_Pos; 
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001832:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_START; 
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800183a:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))); // check if TXDR is empty
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	f012 0f12 	tst.w	r2, #18
 8001842:	d0fb      	beq.n	800183c <main+0x6b4>
	I2Cx->TXDR = *_byte; // Send data to I2C
 8001844:	220e      	movs	r2, #14
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(I2Cx->ISR & I2C_ISR_TC));
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	0657      	lsls	r7, r2, #25
 800184c:	d5fc      	bpl.n	8001848 <main+0x6c0>
	//I2Cx->CR2 |= I2C_CR2_STOP; // Generate stop condition //nie trzxa
}

uint8_t I2C::recieveByte (uint8_t _address)
{
	I2Cx -> CR2 = _address<<1;
 800184e:	226c      	movs	r2, #108	; 0x6c
 8001850:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= 1 << I2C_CR2_NBYTES_Pos; 
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001858:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_RD_WRN | I2C_CR2_START;
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001860:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & I2C_ISR_RXNE)); 
 8001862:	699a      	ldr	r2, [r3, #24]
 8001864:	0756      	lsls	r6, r2, #29
 8001866:	d5fc      	bpl.n	8001862 <main+0x6da>
	I2Cx -> CR2 = _address<<1;
 8001868:	226c      	movs	r2, #108	; 0x6c
	uint8_t recievedByte = I2Cx->RXDR;
 800186a:	6a59      	ldr	r1, [r3, #36]	; 0x24
	I2Cx -> CR2 = _address<<1;
 800186c:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= 1 << I2C_CR2_NBYTES_Pos; 
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001874:	605a      	str	r2, [r3, #4]
	I2Cx -> CR2 |= I2C_CR2_RD_WRN | I2C_CR2_START;
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800187c:	605a      	str	r2, [r3, #4]
	while(!(I2Cx->ISR & I2C_ISR_RXNE)); 
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	0755      	lsls	r5, r2, #29
 8001882:	d5fc      	bpl.n	800187e <main+0x6f6>
	uint8_t recievedByte = I2Cx->RXDR;
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	USARTx->TDR = _char;
 8001886:	6862      	ldr	r2, [r4, #4]
			uint16_t angleEnc = (recieved << 8) | recieved1;
 8001888:	b2db      	uxtb	r3, r3
 800188a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800188e:	b29b      	uxth	r3, r3
 8001890:	496a      	ldr	r1, [pc, #424]	; (8001a3c <main+0x8b4>)
 8001892:	ee09 3a90 	vmov	s19, r3
	while (*_string)
 8001896:	2373      	movs	r3, #115	; 0x73
	USARTx->TDR = _char;
 8001898:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800189a:	69d3      	ldr	r3, [r2, #28]
 800189c:	0658      	lsls	r0, r3, #25
 800189e:	d5fc      	bpl.n	800189a <main+0x712>
	while (*_string)
 80018a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f7      	bne.n	8001898 <main+0x710>
			uart.print(setiQ);			
 80018a8:	4670      	mov	r0, lr
 80018aa:	f7fe fdf9 	bl	80004a0 <__aeabi_f2d>
 80018ae:	ec41 0b10 	vmov	d0, r0, r1
 80018b2:	f7ff f99f 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 80018b6:	6863      	ldr	r3, [r4, #4]
 80018b8:	222c      	movs	r2, #44	; 0x2c
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	0652      	lsls	r2, r2, #25
 80018c0:	d5fc      	bpl.n	80018bc <main+0x734>
 80018c2:	485f      	ldr	r0, [pc, #380]	; (8001a40 <main+0x8b8>)
	while (*_string)
 80018c4:	2173      	movs	r1, #115	; 0x73
	USARTx->TDR = _char;
 80018c6:	6299      	str	r1, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	0657      	lsls	r7, r2, #25
 80018cc:	d5fc      	bpl.n	80018c8 <main+0x740>
	while (*_string)
 80018ce:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80018d2:	2900      	cmp	r1, #0
 80018d4:	d1f7      	bne.n	80018c6 <main+0x73e>
			uart.print((int)motorSpeed);
 80018d6:	4a53      	ldr	r2, [pc, #332]	; (8001a24 <main+0x89c>)
 80018d8:	6812      	ldr	r2, [r2, #0]
	char charTab[11]={};
 80018da:	e9cd 1112 	strd	r1, r1, [sp, #72]	; 0x48
bool negative = _number<0? true : false;
 80018de:	0fd7      	lsrs	r7, r2, #31
 80018e0:	f8cd 104f 	str.w	r1, [sp, #79]	; 0x4f
	if (absNumber==0) 
 80018e4:	2a00      	cmp	r2, #0
 80018e6:	f040 815d 	bne.w	8001ba4 <main+0xa1c>
		_string[0]='0';
 80018ea:	2230      	movs	r2, #48	; 0x30
 80018ec:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	if (negative)
 80018f0:	2f00      	cmp	r7, #0
 80018f2:	f000 816f 	beq.w	8001bd4 <main+0xa4c>
		_string[i++]='-';
 80018f6:	222d      	movs	r2, #45	; 0x2d
 80018f8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
 80018fc:	2202      	movs	r2, #2
 80018fe:	4611      	mov	r1, r2
 8001900:	2701      	movs	r7, #1
 8001902:	a812      	add	r0, sp, #72	; 0x48
 8001904:	4402      	add	r2, r0
 8001906:	4407      	add	r7, r0
		_charTab [i] = _charTab [_lenght-i -1];
 8001908:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
		char temp = _charTab[i];
 800190c:	7805      	ldrb	r5, [r0, #0]
		_charTab [i] = _charTab [_lenght-i -1];
 800190e:	f800 6b01 	strb.w	r6, [r0], #1
	for (int i =0; i<_lenght/2; i++)
 8001912:	42b8      	cmp	r0, r7
		_charTab [_lenght-i -1] = temp;
 8001914:	7015      	strb	r5, [r2, #0]
	for (int i =0; i<_lenght/2; i++)
 8001916:	d1f7      	bne.n	8001908 <main+0x780>
	_string[i]='\0';
 8001918:	f101 0260 	add.w	r2, r1, #96	; 0x60
 800191c:	eb0d 0102 	add.w	r1, sp, r2
 8001920:	f801 9c18 	strb.w	r9, [r1, #-24]
	while (*_string)
 8001924:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8001928:	a912      	add	r1, sp, #72	; 0x48
 800192a:	b13a      	cbz	r2, 800193c <main+0x7b4>
	USARTx->TDR = _char;
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	0656      	lsls	r6, r2, #25
 8001932:	d5fc      	bpl.n	800192e <main+0x7a6>
	while (*_string)
 8001934:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001938:	2a00      	cmp	r2, #0
 800193a:	d1f7      	bne.n	800192c <main+0x7a4>
	USARTx->TDR = _char;
 800193c:	222c      	movs	r2, #44	; 0x2c
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001940:	69da      	ldr	r2, [r3, #28]
 8001942:	0655      	lsls	r5, r2, #25
 8001944:	d5fc      	bpl.n	8001940 <main+0x7b8>
 8001946:	493f      	ldr	r1, [pc, #252]	; (8001a44 <main+0x8bc>)
	while (*_string)
 8001948:	2266      	movs	r2, #102	; 0x66
	USARTx->TDR = _char;
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800194c:	69da      	ldr	r2, [r3, #28]
 800194e:	0650      	lsls	r0, r2, #25
 8001950:	d5fc      	bpl.n	800194c <main+0x7c4>
	while (*_string)
 8001952:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001956:	2a00      	cmp	r2, #0
 8001958:	d1f7      	bne.n	800194a <main+0x7c2>
			uart.print(motor.FilteredIdqA[1]);
 800195a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 800195e:	f7fe fd9f 	bl	80004a0 <__aeabi_f2d>
 8001962:	ec41 0b10 	vmov	d0, r0, r1
 8001966:	f7ff f945 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 800196a:	6863      	ldr	r3, [r4, #4]
 800196c:	222c      	movs	r2, #44	; 0x2c
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	0651      	lsls	r1, r2, #25
 8001974:	d5fc      	bpl.n	8001970 <main+0x7e8>
 8001976:	4934      	ldr	r1, [pc, #208]	; (8001a48 <main+0x8c0>)
	while (*_string)
 8001978:	2266      	movs	r2, #102	; 0x66
	USARTx->TDR = _char;
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 800197c:	69da      	ldr	r2, [r3, #28]
 800197e:	0652      	lsls	r2, r2, #25
 8001980:	d5fc      	bpl.n	800197c <main+0x7f4>
	while (*_string)
 8001982:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001986:	2a00      	cmp	r2, #0
 8001988:	d1f7      	bne.n	800197a <main+0x7f2>
			uart.print(motor.FilteredIdqA[0]);
 800198a:	f8db 0054 	ldr.w	r0, [fp, #84]	; 0x54
 800198e:	f7fe fd87 	bl	80004a0 <__aeabi_f2d>
 8001992:	ec41 0b10 	vmov	d0, r0, r1
 8001996:	f7ff f92d 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 800199a:	6863      	ldr	r3, [r4, #4]
 800199c:	222c      	movs	r2, #44	; 0x2c
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	0657      	lsls	r7, r2, #25
 80019a4:	d5fc      	bpl.n	80019a0 <main+0x818>
 80019a6:	4929      	ldr	r1, [pc, #164]	; (8001a4c <main+0x8c4>)
	while (*_string)
 80019a8:	2261      	movs	r2, #97	; 0x61
	USARTx->TDR = _char;
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	0656      	lsls	r6, r2, #25
 80019b0:	d5fc      	bpl.n	80019ac <main+0x824>
	while (*_string)
 80019b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	d1f7      	bne.n	80019aa <main+0x822>
			uart.print(Adc2DmaReadings[0]/11.21111111f);
 80019ba:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <main+0x8c8>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80019ca:	ee17 0a90 	vmov	r0, s15
 80019ce:	f7fe fd67 	bl	80004a0 <__aeabi_f2d>
 80019d2:	ec41 0b10 	vmov	d0, r0, r1
 80019d6:	f7ff f90d 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 80019da:	6863      	ldr	r3, [r4, #4]
 80019dc:	222c      	movs	r2, #44	; 0x2c
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	0655      	lsls	r5, r2, #25
 80019e4:	d5fc      	bpl.n	80019e0 <main+0x858>
 80019e6:	491b      	ldr	r1, [pc, #108]	; (8001a54 <main+0x8cc>)
	while (*_string)
 80019e8:	2261      	movs	r2, #97	; 0x61
	USARTx->TDR = _char;
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	0650      	lsls	r0, r2, #25
 80019f0:	d5fc      	bpl.n	80019ec <main+0x864>
	while (*_string)
 80019f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80019f6:	2a00      	cmp	r2, #0
 80019f8:	d1f7      	bne.n	80019ea <main+0x862>
			uart.print(angleEnc/11.375f);
 80019fa:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 80019fe:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001a02:	ee17 0a90 	vmov	r0, s15
 8001a06:	f7fe fd4b 	bl	80004a0 <__aeabi_f2d>
 8001a0a:	ec41 0b10 	vmov	d0, r0, r1
 8001a0e:	f7ff f8f1 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	222c      	movs	r2, #44	; 0x2c
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
 8001a18:	e01e      	b.n	8001a58 <main+0x8d0>
 8001a1a:	bf00      	nop
 8001a1c:	20000180 	.word	0x20000180
 8001a20:	2000017c 	.word	0x2000017c
 8001a24:	20000100 	.word	0x20000100
 8001a28:	20000014 	.word	0x20000014
 8001a2c:	200000f8 	.word	0x200000f8
 8001a30:	2000016c 	.word	0x2000016c
 8001a34:	20000174 	.word	0x20000174
 8001a38:	200000e8 	.word	0x200000e8
 8001a3c:	08003104 	.word	0x08003104
 8001a40:	0800310c 	.word	0x0800310c
 8001a44:	08003114 	.word	0x08003114
 8001a48:	08003120 	.word	0x08003120
 8001a4c:	0800312c 	.word	0x0800312c
 8001a50:	200000fc 	.word	0x200000fc
 8001a54:	08003138 	.word	0x08003138
	while(!(USARTx->ISR & USART_ISR_TC));
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	0651      	lsls	r1, r2, #25
 8001a5c:	d5fc      	bpl.n	8001a58 <main+0x8d0>
 8001a5e:	4998      	ldr	r1, [pc, #608]	; (8001cc0 <main+0xb38>)
	while (*_string)
 8001a60:	2273      	movs	r2, #115	; 0x73
	USARTx->TDR = _char;
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	0652      	lsls	r2, r2, #25
 8001a68:	d5fc      	bpl.n	8001a64 <main+0x8dc>
	while (*_string)
 8001a6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001a6e:	2a00      	cmp	r2, #0
 8001a70:	d1f7      	bne.n	8001a62 <main+0x8da>
			uart.print(",");
			uart.print("sumIabc:");
			uart.println(motor.Iabc_A[0]+motor.Iabc_A[1]+motor.Iabc_A[2]);
 8001a72:	eddb 6a0f 	vldr	s13, [fp, #60]	; 0x3c
 8001a76:	eddb 7a0e 	vldr	s15, [fp, #56]	; 0x38
 8001a7a:	ed9b 7a10 	vldr	s14, [fp, #64]	; 0x40
 8001a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a86:	ee17 0a90 	vmov	r0, s15
 8001a8a:	f7fe fd09 	bl	80004a0 <__aeabi_f2d>
	print(_number, _percision);
 8001a8e:	ec41 0b10 	vmov	d0, r0, r1
 8001a92:	f7ff f8af 	bl	8000bf4 <_ZN6Serial5printEdh.constprop.0>
	USARTx->TDR = _char;
 8001a96:	6862      	ldr	r2, [r4, #4]
 8001a98:	230a      	movs	r3, #10
 8001a9a:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001a9c:	69d3      	ldr	r3, [r2, #28]
 8001a9e:	065b      	lsls	r3, r3, #25
 8001aa0:	d5fc      	bpl.n	8001a9c <main+0x914>
			led4.toggle();
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <main+0xb3c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
	GPIOx->BSRR |= (1<<(pin+16));

}
void GPIO::toggle()
{
	GPIOx->ODR ^= (1<<pin);
 8001aa6:	7918      	ldrb	r0, [r3, #4]
 8001aa8:	6951      	ldr	r1, [r2, #20]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	4083      	lsls	r3, r0
 8001aae:	404b      	eors	r3, r1
 8001ab0:	6153      	str	r3, [r2, #20]
			lastPrintTime = milis;		
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <main+0xb40>)
 8001ab4:	f8d8 7000 	ldr.w	r7, [r8]
 8001ab8:	601f      	str	r7, [r3, #0]
 8001aba:	e5e2      	b.n	8001682 <main+0x4fa>
		if (milis-motorProcessLastTime>=slopeInterval)
 8001abc:	2301      	movs	r3, #1
			elementsToFlush=count;
 8001abe:	9502      	str	r5, [sp, #8]
 8001ac0:	9304      	str	r3, [sp, #16]
 8001ac2:	469c      	mov	ip, r3
			count=0;
 8001ac4:	2500      	movs	r5, #0
				if (prevMotorState)
 8001ac6:	2e00      	cmp	r6, #0
 8001ac8:	f040 80c5 	bne.w	8001c56 <main+0xace>
				if (motorSpeed > 5)
 8001acc:	4a7f      	ldr	r2, [pc, #508]	; (8001ccc <main+0xb44>)
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	f240 80a4 	bls.w	8001c1e <main+0xa96>
					motorSpeed--;
 8001ad6:	6813      	ldr	r3, [r2, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	2600      	movs	r6, #0
 8001ade:	e67a      	b.n	80017d6 <main+0x64e>
			*_line=0;
 8001ae0:	f803 9005 	strb.w	r9, [r3, r5]
			if (UARTrxData[0] == '0')
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b30      	cmp	r3, #48	; 0x30
 8001ae8:	f000 8085 	beq.w	8001bf6 <main+0xa6e>
			else if (UARTrxData[0] == '1')
 8001aec:	2b31      	cmp	r3, #49	; 0x31
 8001aee:	f000 80ca 	beq.w	8001c86 <main+0xafe>
 8001af2:	3b6d      	subs	r3, #109	; 0x6d
 8001af4:	b2d8      	uxtb	r0, r3
 8001af6:	280a      	cmp	r0, #10
 8001af8:	d813      	bhi.n	8001b22 <main+0x99a>
 8001afa:	2b0a      	cmp	r3, #10
 8001afc:	d811      	bhi.n	8001b22 <main+0x99a>
 8001afe:	e8df f003 	tbb	[pc, r3]
 8001b02:	104a      	.short	0x104a
 8001b04:	10103910 	.word	0x10103910
 8001b08:	1c101035 	.word	0x1c101035
 8001b0c:	16          	.byte	0x16
 8001b0d:	00          	.byte	0x00
			else if (*_string == '-')
 8001b0e:	2b2d      	cmp	r3, #45	; 0x2d
 8001b10:	d06e      	beq.n	8001bf0 <main+0xa68>
		if (negative)
 8001b12:	9b02      	ldr	r3, [sp, #8]
 8001b14:	9f04      	ldr	r7, [sp, #16]
 8001b16:	f8dd e014 	ldr.w	lr, [sp, #20]
 8001b1a:	b103      	cbz	r3, 8001b1e <main+0x996>
			return -number;
 8001b1c:	4240      	negs	r0, r0
					setMotorSpeed = typeConverter::stringToInt(UARTrxData+1);
 8001b1e:	4b6c      	ldr	r3, [pc, #432]	; (8001cd0 <main+0xb48>)
 8001b20:	6018      	str	r0, [r3, #0]
			elementsToFlush=count;
 8001b22:	2301      	movs	r3, #1
 8001b24:	9502      	str	r5, [sp, #8]
 8001b26:	9304      	str	r3, [sp, #16]
 8001b28:	469c      	mov	ip, r3
			count=0;
 8001b2a:	2500      	movs	r5, #0
 8001b2c:	e63a      	b.n	80017a4 <main+0x61c>
					setMotorSpeed -= 5;
 8001b2e:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <main+0xb48>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3b05      	subs	r3, #5
					setMotorSpeed += 50;
 8001b34:	4866      	ldr	r0, [pc, #408]	; (8001cd0 <main+0xb48>)
 8001b36:	6003      	str	r3, [r0, #0]
 8001b38:	e7f3      	b.n	8001b22 <main+0x99a>
		while (*_string && isNumber) 
 8001b3a:	4b66      	ldr	r3, [pc, #408]	; (8001cd4 <main+0xb4c>)
 8001b3c:	785b      	ldrb	r3, [r3, #1]
		int number = 0;
 8001b3e:	4618      	mov	r0, r3
		while (*_string && isNumber) 
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ec      	beq.n	8001b1e <main+0x996>
       	bool negative = false;
 8001b44:	2000      	movs	r0, #0
		while (*_string && isNumber) 
 8001b46:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001cec <main+0xb64>
       	bool negative = false;
 8001b4a:	9002      	str	r0, [sp, #8]
		int number = 0;
 8001b4c:	9704      	str	r7, [sp, #16]
 8001b4e:	f8cd e014 	str.w	lr, [sp, #20]
			int digit = *_string - '0';
 8001b52:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
			if (digit>=0 && digit<=9)			
 8001b56:	2f09      	cmp	r7, #9
				number = number * 10 + digit;
 8001b58:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
			if (digit>=0 && digit<=9)			
 8001b5c:	d8d7      	bhi.n	8001b0e <main+0x986>
				number = number * 10 + digit;
 8001b5e:	eb07 004e 	add.w	r0, r7, lr, lsl #1
		while (*_string && isNumber) 
 8001b62:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f3      	bne.n	8001b52 <main+0x9ca>
 8001b6a:	e7d2      	b.n	8001b12 <main+0x98a>
 8001b6c:	4b58      	ldr	r3, [pc, #352]	; (8001cd0 <main+0xb48>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3332      	adds	r3, #50	; 0x32
 8001b72:	e7df      	b.n	8001b34 <main+0x9ac>
					setiQ +=1;
 8001b74:	ee07 ea10 	vmov	s14, lr
 8001b78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
					setiQ -=1;
 8001b80:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <main+0xb50>)
			elementsToFlush=count;
 8001b82:	9502      	str	r5, [sp, #8]
 8001b84:	edc3 7a00 	vstr	s15, [r3]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	ee17 ea90 	vmov	lr, s15
 8001b8e:	9304      	str	r3, [sp, #16]
 8001b90:	469c      	mov	ip, r3
			count=0;
 8001b92:	2500      	movs	r5, #0
 8001b94:	e606      	b.n	80017a4 <main+0x61c>
 8001b96:	ee07 ea10 	vmov	s14, lr
 8001b9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba2:	e7ed      	b.n	8001b80 <main+0x9f8>
int absNumber = _number<0? -_number : _number;
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	bfb8      	it	lt
 8001ba8:	4252      	neglt	r2, r2
		_string[i++]=absNumber % 10 + '0';
 8001baa:	4e4c      	ldr	r6, [pc, #304]	; (8001cdc <main+0xb54>)
 8001bac:	ad12      	add	r5, sp, #72	; 0x48
 8001bae:	4696      	mov	lr, r2
 8001bb0:	fba6 200e 	umull	r2, r0, r6, lr
 8001bb4:	08c0      	lsrs	r0, r0, #3
 8001bb6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8001bba:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
 8001bbe:	3230      	adds	r2, #48	; 0x30
 8001bc0:	468c      	mov	ip, r1
 8001bc2:	f805 2b01 	strb.w	r2, [r5], #1
 8001bc6:	3101      	adds	r1, #1
	while (absNumber)
 8001bc8:	4686      	mov	lr, r0
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <main+0xa28>
	if (negative)
 8001bce:	b91f      	cbnz	r7, 8001bd8 <main+0xa50>
	for (int i =0; i<_lenght/2; i++)
 8001bd0:	104f      	asrs	r7, r1, #1
 8001bd2:	d12c      	bne.n	8001c2e <main+0xaa6>
		_string[i++]='-';
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	e69f      	b.n	8001918 <main+0x790>
 8001bd8:	f101 0260 	add.w	r2, r1, #96	; 0x60
 8001bdc:	eb0d 0102 	add.w	r1, sp, r2
 8001be0:	202d      	movs	r0, #45	; 0x2d
 8001be2:	f10c 0202 	add.w	r2, ip, #2
 8001be6:	f801 0c18 	strb.w	r0, [r1, #-24]
	for (int i =0; i<_lenght/2; i++)
 8001bea:	1057      	asrs	r7, r2, #1
	_string[i]='\0';
 8001bec:	4611      	mov	r1, r2
	for (int i =0; i<_lenght/2; i++)
 8001bee:	e688      	b.n	8001902 <main+0x77a>
				negative = true;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	e7b5      	b.n	8001b62 <main+0x9da>
				motorState = 0;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <main+0xb58>)
		if (milis-motorProcessLastTime>=slopeInterval)
 8001bf8:	f8d8 0000 	ldr.w	r0, [r8]
				motorState = 0;
 8001bfc:	f8c3 9000 	str.w	r9, [r3]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001c00:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <main+0xb5c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1a40      	subs	r0, r0, r1
 8001c06:	4298      	cmp	r0, r3
 8001c08:	f4bf af58 	bcs.w	8001abc <main+0x934>
			elementsToFlush=count;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	9502      	str	r5, [sp, #8]
 8001c10:	9304      	str	r3, [sp, #16]
 8001c12:	469c      	mov	ip, r3
			count=0;
 8001c14:	2500      	movs	r5, #0
 8001c16:	e5e5      	b.n	80017e4 <main+0x65c>
					motorSpeed =setMotorSpeed;
 8001c18:	4a2c      	ldr	r2, [pc, #176]	; (8001ccc <main+0xb44>)
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e5da      	b.n	80017d4 <main+0x64c>
					motorSpeed = 0;
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <main+0xb44>)
					motor.Udq_pu[1] = 0;
 8001c20:	ed8b 9a0d 	vstr	s18, [fp, #52]	; 0x34
					motor.Udq_pu[0] = 0;
 8001c24:	ed8b 9a0c 	vstr	s18, [fp, #48]	; 0x30
					motorSpeed = 0;
 8001c28:	f8c3 9000 	str.w	r9, [r3]
 8001c2c:	e756      	b.n	8001adc <main+0x954>
		_string[i++]=absNumber % 10 + '0';
 8001c2e:	460a      	mov	r2, r1
 8001c30:	e667      	b.n	8001902 <main+0x77a>
	pwm->tim->CCMR1 &= ~(0b1111<< TIM_CCMR1_OC2M_Pos);
	pwm->tim->CCMR2 &= ~(0b1111<< TIM_CCMR2_OC3M_Pos);
}
static inline void pwmOutOn(pwm_t* pwm)
{
	pwm->tim->CCR1 = 0;
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <main+0xb60>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	635e      	str	r6, [r3, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 8001c38:	639e      	str	r6, [r3, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 8001c3a:	63de      	str	r6, [r3, #60]	; 0x3c
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8001c42:	619a      	str	r2, [r3, #24]
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC2M_Pos | TIM_CCMR1_OC2PE ; // PWM mode 1 channel 2
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	f442 42d0 	orr.w	r2, r2, #26624	; 0x6800
 8001c4a:	619a      	str	r2, [r3, #24]
	pwm->tim->CCMR2 |= 0b110<< TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC3PE ; // PWM mode 1 channel 3
 8001c4c:	69da      	ldr	r2, [r3, #28]
 8001c4e:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8001c52:	61da      	str	r2, [r3, #28]
}
 8001c54:	e5b4      	b.n	80017c0 <main+0x638>
	pwm->tim->CCR1 = 0;
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <main+0xb60>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 8001c5e:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 8001c62:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
	pwm->tim->CCMR1 &= ~(0b1111<< TIM_CCMR1_OC1M_Pos);
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c6c:	619a      	str	r2, [r3, #24]
	pwm->tim->CCMR1 &= ~(0b1111<< TIM_CCMR1_OC2M_Pos);
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8001c74:	619a      	str	r2, [r3, #24]
	pwm->tim->CCMR2 &= ~(0b1111<< TIM_CCMR2_OC3M_Pos);
 8001c76:	69da      	ldr	r2, [r3, #28]
 8001c78:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c7c:	61da      	str	r2, [r3, #28]
					motorSpeed = 0;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <main+0xb44>)
 8001c80:	f8c3 9000 	str.w	r9, [r3]
 8001c84:	e722      	b.n	8001acc <main+0x944>
		if (milis-motorProcessLastTime>=slopeInterval)
 8001c86:	f8d8 3000 	ldr.w	r3, [r8]
 8001c8a:	eba3 0c01 	sub.w	ip, r3, r1
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <main+0xb5c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	9302      	str	r3, [sp, #8]
					motorState = 1;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <main+0xb58>)
 8001c96:	2001      	movs	r0, #1
 8001c98:	6018      	str	r0, [r3, #0]
		if (milis-motorProcessLastTime>=slopeInterval)
 8001c9a:	9b02      	ldr	r3, [sp, #8]
 8001c9c:	4563      	cmp	r3, ip
 8001c9e:	d8b5      	bhi.n	8001c0c <main+0xa84>
			elementsToFlush=count;
 8001ca0:	9502      	str	r5, [sp, #8]
 8001ca2:	9004      	str	r0, [sp, #16]
 8001ca4:	4684      	mov	ip, r0
			count=0;
 8001ca6:	2500      	movs	r5, #0
 8001ca8:	e587      	b.n	80017ba <main+0x632>
		Init();
 8001caa:	f7fe ff59 	bl	8000b60 <_ZN3PID4InitEv>
 8001cae:	e4d5      	b.n	800165c <main+0x4d4>
 8001cb0:	f7fe ff56 	bl	8000b60 <_ZN3PID4InitEv>
 8001cb4:	e4c2      	b.n	800163c <main+0x4b4>
		internalFreqUpdate(targetFreq);
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7fe ff02 	bl	8000ac0 <_ZN12ClockManager18internalFreqUpdateEm>
 8001cbc:	f7ff bb7c 	b.w	80013b8 <main+0x230>
 8001cc0:	08003144 	.word	0x08003144
 8001cc4:	200000ec 	.word	0x200000ec
 8001cc8:	200000f4 	.word	0x200000f4
 8001ccc:	20000100 	.word	0x20000100
 8001cd0:	20000014 	.word	0x20000014
 8001cd4:	20000180 	.word	0x20000180
 8001cd8:	20000018 	.word	0x20000018
 8001cdc:	cccccccd 	.word	0xcccccccd
 8001ce0:	2000017c 	.word	0x2000017c
 8001ce4:	20000170 	.word	0x20000170
 8001ce8:	2000001c 	.word	0x2000001c
 8001cec:	20000181 	.word	0x20000181

08001cf0 <DMA1_Channel5_IRQHandler>:


extern "C"
{
	void DMA1_Channel5_IRQHandler() // New current readings ready
	{
 8001cf0:	b538      	push	{r3, r4, r5, lr}
 8001cf2:	ed2d 8b08 	vpush	{d8-d11}
		if (DMA1->ISR & DMA_ISR_TCIF5)
 8001cf6:	4b8d      	ldr	r3, [pc, #564]	; (8001f2c <DMA1_Channel5_IRQHandler+0x23c>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	0391      	lsls	r1, r2, #14
 8001cfc:	d402      	bmi.n	8001d04 <DMA1_Channel5_IRQHandler+0x14>
			pwm_set3Phase_pu(&inverterPWM, motor.Uabc_pu);
			// setPhaseVoltage(setUq, setUd, SetOLangle);	
			led1.toggle();
			//setPhaseVoltage(0.5, 0.5, SetOLangle);
		}
	}
 8001cfe:	ecbd 8b08 	vpop	{d8-d11}
 8001d02:	bd38      	pop	{r3, r4, r5, pc}
			DMA1->IFCR |= DMA_IFCR_CTCIF5;
 8001d04:	6859      	ldr	r1, [r3, #4]
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001d06:	4a8a      	ldr	r2, [pc, #552]	; (8001f30 <DMA1_Channel5_IRQHandler+0x240>)
 8001d08:	ed9f 9a8a 	vldr	s18, [pc, #552]	; 8001f34 <DMA1_Channel5_IRQHandler+0x244>
 8001d0c:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8001f38 <DMA1_Channel5_IRQHandler+0x248>
static inline void motor_clark (motor_t* motor)
{
	// motor->IalphaBeta_A[0] = motor->Iabc_A[0];
	// motor->IalphaBeta_A[1] = (M_1_SQRT3 * motor->IalphaBeta_A[0]) + (M_2_SQRT3 * motor->Iabc_A[1]);

	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001d10:	ed9f ba8a 	vldr	s22, [pc, #552]	; 8001f3c <DMA1_Channel5_IRQHandler+0x24c>
			motor_setThetaRef (&motor, SetOLangle);
 8001d14:	4d8a      	ldr	r5, [pc, #552]	; (8001f40 <DMA1_Channel5_IRQHandler+0x250>)
	motor->Iabc_A[0] = iA;
 8001d16:	4c8b      	ldr	r4, [pc, #556]	; (8001f44 <DMA1_Channel5_IRQHandler+0x254>)
			DMA1->IFCR |= DMA_IFCR_CTCIF5;
 8001d18:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001d1c:	6059      	str	r1, [r3, #4]
			AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET,\
 8001d1e:	8893      	ldrh	r3, [r2, #4]
			motor_setThetaRef (&motor, SetOLangle);
 8001d20:	ed95 aa00 	vldr	s20, [r5]
			AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET,\
 8001d24:	ee08 3a10 	vmov	s16, r3
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001d28:	8853      	ldrh	r3, [r2, #2]
	// uint32_t Ub = -0.5f * Ualpha  + M_SQRT3_2 * Ubeta + 500;
	// uint32_t Uc = -0.5f * Ualpha - M_SQRT3_2 * Ubeta + 500;
}
static inline void motor_setThetaRef (motor_t *motor, float	thetaSet)
{
	motor->theta_Rad = thetaSet;
 8001d2a:	ed84 aa17 	vstr	s20, [r4, #92]	; 0x5c
 8001d2e:	ee07 3a10 	vmov	s14, r3
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001d32:	8813      	ldrh	r3, [r2, #0]
 8001d34:	ee06 3a90 	vmov	s13, r3
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001d38:	4b83      	ldr	r3, [pc, #524]	; (8001f48 <DMA1_Channel5_IRQHandler+0x258>)
			AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET);
 8001d3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET,\
 8001d3e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001d42:	881b      	ldrh	r3, [r3, #0]
			motor_setABCcurrentsFB (&motor, AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET, \
 8001d44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001d48:	eef0 5a49 	vmov.f32	s11, s18
 8001d4c:	eeb0 6a49 	vmov.f32	s12, s18
 8001d50:	eee8 5a27 	vfma.f32	s11, s16, s15
 8001d54:	eea7 6a27 	vfma.f32	s12, s14, s15
 8001d58:	eea6 9aa7 	vfma.f32	s18, s13, s15
			motor_setThetaFB(&motor, Adc2DmaReadings[0]/11.21111111f);
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8001f4c <DMA1_Channel5_IRQHandler+0x25c>
	motor->Iabc_A[1] = iB;
 8001d64:	edc4 5a0f 	vstr	s11, [r4, #60]	; 0x3c
 8001d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001d6c:	ee75 9a86 	vadd.f32	s19, s11, s12
 8001d70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d74:	eef0 aa69 	vmov.f32	s21, s19
 8001d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d7c:	eed9 aa0b 	vfnms.f32	s21, s18, s22
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001d80:	ee38 8a47 	vsub.f32	s16, s16, s14
 8001d84:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001f50 <DMA1_Channel5_IRQHandler+0x260>
	motor->Iabc_A[2] = iC;
 8001d88:	ed84 6a10 	vstr	s12, [r4, #64]	; 0x40
	motor->IalphaBeta_A[1] = M_1_SQRT3 * (motor->Iabc_A[1] - motor->Iabc_A[2]);
 8001d8c:	ee28 8a07 	vmul.f32	s16, s16, s14
 8001d90:	ee17 3a90 	vmov	r3, s15
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001d94:	eeb0 0a4a 	vmov.f32	s0, s20
 8001d98:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8001d9c:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
	motor->Iabc_A[0] = iA;
 8001da0:	ed84 9a0e 	vstr	s18, [r4, #56]	; 0x38
	motor->IalphaBeta_A[0] = 0.33333333333f * 2.0f * motor->Iabc_A[0] - (motor->Iabc_A[1] + motor->Iabc_A[2]);
 8001da4:	edc4 aa11 	vstr	s21, [r4, #68]	; 0x44
 8001da8:	f000 fb04 	bl	80023b4 <cosf>
 8001dac:	eef0 8a40 	vmov.f32	s17, s0
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001db0:	eeb0 0a4a 	vmov.f32	s0, s20
 8001db4:	f000 fb36 	bl	8002424 <sinf>
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001db8:	eee9 9a4b 	vfms.f32	s19, s18, s22
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001dbc:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <DMA1_Channel5_IRQHandler+0x264>)
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001dbe:	4a66      	ldr	r2, [pc, #408]	; (8001f58 <DMA1_Channel5_IRQHandler+0x268>)
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001dc0:	edd3 4a00 	vldr	s9, [r3]
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001dc4:	edd3 5a00 	vldr	s11, [r3]
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001dc8:	edd2 7a00 	vldr	s15, [r2]
 8001dcc:	eddf 3a63 	vldr	s7, [pc, #396]	; 8001f5c <DMA1_Channel5_IRQHandler+0x26c>
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001dd0:	edd4 6a15 	vldr	s13, [r4, #84]	; 0x54
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001dd4:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001dd8:	4b61      	ldr	r3, [pc, #388]	; (8001f60 <DMA1_Channel5_IRQHandler+0x270>)
 8001dda:	ee28 6a28 	vmul.f32	s12, s16, s17
	motor->Idq_A[0] = motor->IalphaBeta_A[0] * cos(motor->theta_Rad) + motor->IalphaBeta_A[1] * sin(motor->theta_Rad);
 8001dde:	ee28 8a00 	vmul.f32	s16, s16, s0
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001de2:	eea0 6a29 	vfma.f32	s12, s0, s19
	motor->Idq_A[0] = motor->IalphaBeta_A[0] * cos(motor->theta_Rad) + motor->IalphaBeta_A[1] * sin(motor->theta_Rad);
 8001de6:	eeaa 8aa8 	vfma.f32	s16, s21, s17
 8001dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001dee:	ee38 4a66 	vsub.f32	s8, s16, s13
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001df2:	ee67 7aa3 	vmul.f32	s15, s15, s7
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001df6:	ee36 5a47 	vsub.f32	s10, s12, s14
			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 8001dfa:	edc3 7a00 	vstr	s15, [r3]
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001dfe:	eea5 7a25 	vfma.f32	s14, s10, s11
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001e02:	eee4 6a24 	vfma.f32	s13, s8, s9
				if (SetOLangle < M_2PI * POLE_PAIRS) 
 8001e06:	edd5 5a00 	vldr	s11, [r5]
 8001e0a:	eddf 7a56 	vldr	s15, [pc, #344]	; 8001f64 <DMA1_Channel5_IRQHandler+0x274>
 8001e0e:	ed84 8a13 	vstr	s16, [r4, #76]	; 0x4c
 8001e12:	eef4 5ae7 	vcmpe.f32	s11, s15
 8001e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	motor->Idq_A[1] = -motor->IalphaBeta_A[0] * sin(motor->theta_Rad) + motor->IalphaBeta_A[1] * cos(motor->theta_Rad);
 8001e1a:	ed84 6a14 	vstr	s12, [r4, #80]	; 0x50
			motor.FilteredIdqA[0] += normalizedCoeff * (motor.Idq_A[0] - motor.FilteredIdqA[0]);
 8001e1e:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
			motor.FilteredIdqA[1] += normalizedCoeff * (motor.Idq_A[1] - motor.FilteredIdqA[1]);
 8001e22:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
				if (SetOLangle < M_2PI * POLE_PAIRS) 
 8001e26:	d467      	bmi.n	8001ef8 <DMA1_Channel5_IRQHandler+0x208>
					SetOLangle = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	602b      	str	r3, [r5, #0]
			if (motorState )
 8001e2c:	4b4e      	ldr	r3, [pc, #312]	; (8001f68 <DMA1_Channel5_IRQHandler+0x278>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b1ab      	cbz	r3, 8001e5e <DMA1_Channel5_IRQHandler+0x16e>
				if (UART5->ISR & USART_ISR_ORE)
 8001e32:	4b4e      	ldr	r3, [pc, #312]	; (8001f6c <DMA1_Channel5_IRQHandler+0x27c>)
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	0712      	lsls	r2, r2, #28
 8001e38:	d467      	bmi.n	8001f0a <DMA1_Channel5_IRQHandler+0x21a>
			pidUq.Compute();
 8001e3a:	484d      	ldr	r0, [pc, #308]	; (8001f70 <DMA1_Channel5_IRQHandler+0x280>)
 8001e3c:	f7ff f928 	bl	8001090 <_ZN3PID7ComputeEv.isra.0>
			pidUd.Compute();				
 8001e40:	484c      	ldr	r0, [pc, #304]	; (8001f74 <DMA1_Channel5_IRQHandler+0x284>)
 8001e42:	f7ff f925 	bl	8001090 <_ZN3PID7ComputeEv.isra.0>
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001e46:	ed94 8a17 	vldr	s16, [r4, #92]	; 0x5c
  { return __builtin_cosf(__x); }
 8001e4a:	eeb0 0a48 	vmov.f32	s0, s16
 8001e4e:	f000 fab1 	bl	80023b4 <cosf>
 8001e52:	eef0 8a40 	vmov.f32	s17, s0
  { return __builtin_sinf(__x); }
 8001e56:	eeb0 0a48 	vmov.f32	s0, s16
 8001e5a:	f000 fae3 	bl	8002424 <sinf>
 8001e5e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8001e62:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e66:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001f78 <DMA1_Channel5_IRQHandler+0x288>
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001e6a:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <DMA1_Channel5_IRQHandler+0x28c>)
 8001e6c:	4944      	ldr	r1, [pc, #272]	; (8001f80 <DMA1_Channel5_IRQHandler+0x290>)
 8001e6e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	680a      	ldr	r2, [r1, #0]
 8001e76:	7908      	ldrb	r0, [r1, #4]
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001e78:	ee67 4aa8 	vmul.f32	s9, s15, s17
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001e7c:	ee60 7a67 	vnmul.f32	s15, s0, s15
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001e80:	eee7 4a00 	vfma.f32	s9, s14, s0
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001e84:	eee7 7a28 	vfma.f32	s15, s14, s17
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e88:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8001e8c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001e90:	eeb0 4a66 	vmov.f32	s8, s13
 8001e94:	eea7 4a87 	vfma.f32	s8, s15, s14
	motor->Uabc_pu[2] = -0.5f * motor->UalphaBeta_pu[0] - M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001e98:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8001e9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ea0:	eeb8 5a46 	vcvt.f32.u32	s10, s12
 8001ea4:	ee74 5a07 	vadd.f32	s11, s8, s14
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001ea8:	ee37 6a87 	vadd.f32	s12, s15, s14
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001eac:	ee36 7a87 	vadd.f32	s14, s13, s14
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001eb0:	ee65 5a85 	vmul.f32	s11, s11, s10
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001eb4:	ee26 6a05 	vmul.f32	s12, s12, s10
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001eb8:	ee27 7a05 	vmul.f32	s14, s14, s10
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001ebc:	eefc 5ae5 	vcvt.u32.f32	s11, s11
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001ec0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001ec4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8001ec8:	edc3 5a0d 	vstr	s11, [r3, #52]	; 0x34
	motor->UalphaBeta_pu[0] = cos(motor->theta_Rad) * motor->Udq_pu[0] - sin(motor->theta_Rad) * motor->Udq_pu[1];  // -sin(angle) * Uq;
 8001ecc:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8001ed0:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
	motor->UalphaBeta_pu[1] = sin(motor->theta_Rad) * motor->Udq_pu[0] + cos(motor->theta_Rad) * motor->Udq_pu[1];    //  cos(angle) * Uq;
 8001ed4:	edc4 4a0b 	vstr	s9, [r4, #44]	; 0x2c
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8001ed8:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
	motor->Uabc_pu[0] = motor->UalphaBeta_pu[0];
 8001edc:	edc4 7a07 	vstr	s15, [r4, #28]
	motor->Uabc_pu[1] = -0.5f * motor->UalphaBeta_pu[0] + M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001ee0:	ed84 4a08 	vstr	s8, [r4, #32]
	motor->Uabc_pu[2] = -0.5f * motor->UalphaBeta_pu[0] - M_SQRT3_2 * motor->UalphaBeta_pu[1];
 8001ee4:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 8001ee8:	6951      	ldr	r1, [r2, #20]
 8001eea:	2301      	movs	r3, #1
 8001eec:	4083      	lsls	r3, r0
 8001eee:	404b      	eors	r3, r1
 8001ef0:	6153      	str	r3, [r2, #20]
	}
 8001ef2:	ecbd 8b08 	vpop	{d8-d11}
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
					SetOLangle += velChange;
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ed95 7a00 	vldr	s14, [r5]
 8001f00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f04:	edc5 7a00 	vstr	s15, [r5]
 8001f08:	e790      	b.n	8001e2c <DMA1_Channel5_IRQHandler+0x13c>
	GPIOx->BSRR |= (1<<pin);
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <DMA1_Channel5_IRQHandler+0x294>)
 8001f0c:	6811      	ldr	r1, [r2, #0]
 8001f0e:	7915      	ldrb	r5, [r2, #4]
 8001f10:	6988      	ldr	r0, [r1, #24]
 8001f12:	2201      	movs	r2, #1
 8001f14:	40aa      	lsls	r2, r5
 8001f16:	4302      	orrs	r2, r0
 8001f18:	618a      	str	r2, [r1, #24]
					UART5->ICR |= USART_ICR_ORECF;
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
		head=0;
 8001f1c:	491a      	ldr	r1, [pc, #104]	; (8001f88 <DMA1_Channel5_IRQHandler+0x298>)
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f042 0208 	orr.w	r2, r2, #8
 8001f24:	621a      	str	r2, [r3, #32]
 8001f26:	7308      	strb	r0, [r1, #12]
		tail=0;
 8001f28:	7348      	strb	r0, [r1, #13]
}

void Serial::bufferFlush()
{
	buffer.flush();
}
 8001f2a:	e786      	b.n	8001e3a <DMA1_Channel5_IRQHandler+0x14a>
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	200000e0 	.word	0x200000e0
 8001f34:	c2040000 	.word	0xc2040000
 8001f38:	3c88828a 	.word	0x3c88828a
 8001f3c:	3f2aaaab 	.word	0x3f2aaaab
 8001f40:	200000cc 	.word	0x200000cc
 8001f44:	20000104 	.word	0x20000104
 8001f48:	200000fc 	.word	0x200000fc
 8001f4c:	3db6ad09 	.word	0x3db6ad09
 8001f50:	3c1da0c9 	.word	0x3c1da0c9
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000100 	.word	0x20000100
 8001f5c:	37f1933b 	.word	0x37f1933b
 8001f60:	200000c8 	.word	0x200000c8
 8001f64:	428a3ae7 	.word	0x428a3ae7
 8001f68:	2000017c 	.word	0x2000017c
 8001f6c:	40005000 	.word	0x40005000
 8001f70:	20000304 	.word	0x20000304
 8001f74:	200002c4 	.word	0x200002c4
 8001f78:	3f5db3d7 	.word	0x3f5db3d7
 8001f7c:	2000001c 	.word	0x2000001c
 8001f80:	200000c0 	.word	0x200000c0
 8001f84:	200000b8 	.word	0x200000b8
 8001f88:	200001b4 	.word	0x200001b4

08001f8c <TIM2_IRQHandler>:
	
	void TIM2_IRQHandler()
	{
		if (TIM2->SR & TIM_SR_UIF)
 8001f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	07d2      	lsls	r2, r2, #31
 8001f94:	d506      	bpl.n	8001fa4 <TIM2_IRQHandler+0x18>
		{
			TIM2->SR &= ~TIM_SR_UIF;
 8001f96:	691a      	ldr	r2, [r3, #16]
			//led3.toggle();
			TIM2loopFlag = true;
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <TIM2_IRQHandler+0x1c>)
			TIM2->SR &= ~TIM_SR_UIF;
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
			TIM2loopFlag = true;
 8001f9e:	2001      	movs	r0, #1
			TIM2->SR &= ~TIM_SR_UIF;
 8001fa0:	611a      	str	r2, [r3, #16]
			TIM2loopFlag = true;
 8001fa2:	7008      	strb	r0, [r1, #0]
		}
	}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200000f8 	.word	0x200000f8

08001fac <UART5_IRQHandler>:
		if (USARTx->ISR & USART_ISR_RXNE)
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <UART5_IRQHandler+0x38>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	69d1      	ldr	r1, [r2, #28]
 8001fb2:	0689      	lsls	r1, r1, #26
 8001fb4:	d400      	bmi.n	8001fb8 <UART5_IRQHandler+0xc>
extern "C"
{
void UART5_IRQHandler()
	{
		uart.interrupt();
	}
 8001fb6:	4770      	bx	lr
			char c = USARTx->RDR;
 8001fb8:	6a51      	ldr	r1, [r2, #36]	; 0x24
	if ((head+1)==tail)
 8001fba:	7b1a      	ldrb	r2, [r3, #12]
 8001fbc:	7b58      	ldrb	r0, [r3, #13]
 8001fbe:	3201      	adds	r2, #1
 8001fc0:	4282      	cmp	r2, r0
 8001fc2:	b2c9      	uxtb	r1, r1
 8001fc4:	d0f7      	beq.n	8001fb6 <UART5_IRQHandler+0xa>
	buffer[head] = _data;
 8001fc6:	7b18      	ldrb	r0, [r3, #12]
	head++;
 8001fc8:	7b1a      	ldrb	r2, [r3, #12]
 8001fca:	3201      	adds	r2, #1
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	731a      	strb	r2, [r3, #12]
	if ( head == (bSize-1) )
 8001fd0:	7b1a      	ldrb	r2, [r3, #12]
	buffer[head] = _data;
 8001fd2:	4418      	add	r0, r3
	if ( head == (bSize-1) )
 8001fd4:	2aff      	cmp	r2, #255	; 0xff
		head = 0;
 8001fd6:	bf08      	it	eq
 8001fd8:	2200      	moveq	r2, #0
	buffer[head] = _data;
 8001fda:	7381      	strb	r1, [r0, #14]
		head = 0;
 8001fdc:	bf08      	it	eq
 8001fde:	731a      	strbeq	r2, [r3, #12]
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200001b4 	.word	0x200001b4

08001fe8 <SysTick_Handler>:
		milis++;
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <SysTick_Handler+0x10>)
		TIM6->EGR = TIM_EGR_UG;
 8001fea:	4904      	ldr	r1, [pc, #16]	; (8001ffc <SysTick_Handler+0x14>)
		milis++;
 8001fec:	6813      	ldr	r3, [r2, #0]
		TIM6->EGR = TIM_EGR_UG;
 8001fee:	2001      	movs	r0, #1
		milis++;
 8001ff0:	4403      	add	r3, r0
 8001ff2:	6013      	str	r3, [r2, #0]
		TIM6->EGR = TIM_EGR_UG;
 8001ff4:	6148      	str	r0, [r1, #20]
	}
 8001ff6:	4770      	bx	lr
 8001ff8:	20000178 	.word	0x20000178
 8001ffc:	40001000 	.word	0x40001000

08002000 <SystemInit>:

void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <SystemInit+0x30>)
	#else
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	#endif

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	DWT->CYCCNT = 0;
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <SystemInit+0x34>)
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002004:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002008:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800200c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002010:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002014:	6098      	str	r0, [r3, #8]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002016:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
	DWT->CYCCNT = 0;
 800201a:	2000      	movs	r0, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800201c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002020:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
	DWT->CYCCNT = 0;
 8002024:	6050      	str	r0, [r2, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002026:	6813      	ldr	r3, [r2, #0]
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00
 8002034:	e0001000 	.word	0xe0001000

08002038 <_init>:
int __errno;
void *__dso_handle = (void *)&__dso_handle;

void _init(void) {}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop

0800203c <_sub_I_65535_0.0>:
 800203c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	2400      	movs	r4, #0
 8002044:	2601      	movs	r6, #1
 8002046:	4f8a      	ldr	r7, [pc, #552]	; (8002270 <_sub_I_65535_0.0+0x234>)
 8002048:	9400      	str	r4, [sp, #0]
 800204a:	2302      	movs	r3, #2
 800204c:	f04f 0805 	mov.w	r8, #5
 8002050:	461d      	mov	r5, r3
 8002052:	e9cd 6801 	strd	r6, r8, [sp, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	4986      	ldr	r1, [pc, #536]	; (8002274 <_sub_I_65535_0.0+0x238>)
 800205a:	4887      	ldr	r0, [pc, #540]	; (8002278 <_sub_I_65535_0.0+0x23c>)
 800205c:	ed9f 0a87 	vldr	s0, [pc, #540]	; 800227c <_sub_I_65535_0.0+0x240>
 8002060:	f7fe ff8a 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002064:	e9cd 4500 	strd	r4, r5, [sp]
 8002068:	f8cd 8008 	str.w	r8, [sp, #8]
 800206c:	462b      	mov	r3, r5
 800206e:	f04f 0808 	mov.w	r8, #8
 8002072:	4639      	mov	r1, r7
 8002074:	4882      	ldr	r0, [pc, #520]	; (8002280 <_sub_I_65535_0.0+0x244>)
 8002076:	220c      	movs	r2, #12
 8002078:	f7fe ff7e 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800207c:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8002080:	462b      	mov	r3, r5
 8002082:	4642      	mov	r2, r8
 8002084:	4639      	mov	r1, r7
 8002086:	487f      	ldr	r0, [pc, #508]	; (8002284 <_sub_I_65535_0.0+0x248>)
 8002088:	9600      	str	r6, [sp, #0]
 800208a:	f7fe ff75 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800208e:	e9cd 6400 	strd	r6, r4, [sp]
 8002092:	f8cd 8008 	str.w	r8, [sp, #8]
 8002096:	462b      	mov	r3, r5
 8002098:	4639      	mov	r1, r7
 800209a:	487b      	ldr	r0, [pc, #492]	; (8002288 <_sub_I_65535_0.0+0x24c>)
 800209c:	f8df 826c 	ldr.w	r8, [pc, #620]	; 800230c <_sub_I_65535_0.0+0x2d0>
 80020a0:	2209      	movs	r2, #9
 80020a2:	f7fe ff69 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020a6:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80020aa:	462b      	mov	r3, r5
 80020ac:	9400      	str	r4, [sp, #0]
 80020ae:	4622      	mov	r2, r4
 80020b0:	4876      	ldr	r0, [pc, #472]	; (800228c <_sub_I_65535_0.0+0x250>)
 80020b2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80020b6:	f7fe ff5f 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020ba:	f04f 0904 	mov.w	r9, #4
 80020be:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80020c2:	462b      	mov	r3, r5
 80020c4:	9400      	str	r4, [sp, #0]
 80020c6:	4622      	mov	r2, r4
 80020c8:	4639      	mov	r1, r7
 80020ca:	4871      	ldr	r0, [pc, #452]	; (8002290 <_sub_I_65535_0.0+0x254>)
 80020cc:	f7fe ff54 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020d0:	e9cd 4901 	strd	r4, r9, [sp, #4]
 80020d4:	9400      	str	r4, [sp, #0]
 80020d6:	462b      	mov	r3, r5
 80020d8:	4639      	mov	r1, r7
 80020da:	486e      	ldr	r0, [pc, #440]	; (8002294 <_sub_I_65535_0.0+0x258>)
 80020dc:	220d      	movs	r2, #13
 80020de:	f7fe ff4b 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020e2:	f04f 0a06 	mov.w	sl, #6
 80020e6:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80020ea:	9400      	str	r4, [sp, #0]
 80020ec:	462b      	mov	r3, r5
 80020ee:	4632      	mov	r2, r6
 80020f0:	4639      	mov	r1, r7
 80020f2:	4869      	ldr	r0, [pc, #420]	; (8002298 <_sub_I_65535_0.0+0x25c>)
 80020f4:	f7fe ff40 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80020f8:	e9cd 4400 	strd	r4, r4, [sp]
 80020fc:	462b      	mov	r3, r5
 80020fe:	4622      	mov	r2, r4
 8002100:	4641      	mov	r1, r8
 8002102:	4866      	ldr	r0, [pc, #408]	; (800229c <_sub_I_65535_0.0+0x260>)
 8002104:	f8cd a008 	str.w	sl, [sp, #8]
 8002108:	f7fe ff36 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800210c:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8002110:	9400      	str	r4, [sp, #0]
 8002112:	462b      	mov	r3, r5
 8002114:	4862      	ldr	r0, [pc, #392]	; (80022a0 <_sub_I_65535_0.0+0x264>)
 8002116:	220a      	movs	r2, #10
 8002118:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800211c:	f7fe ff2c 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002120:	230c      	movs	r3, #12
 8002122:	e9cd 4400 	strd	r4, r4, [sp]
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	4641      	mov	r1, r8
 800212a:	462b      	mov	r3, r5
 800212c:	485d      	ldr	r0, [pc, #372]	; (80022a4 <_sub_I_65535_0.0+0x268>)
 800212e:	2209      	movs	r2, #9
 8002130:	f7fe ff22 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002134:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002138:	9400      	str	r4, [sp, #0]
 800213a:	4622      	mov	r2, r4
 800213c:	485a      	ldr	r0, [pc, #360]	; (80022a8 <_sub_I_65535_0.0+0x26c>)
 800213e:	2303      	movs	r3, #3
 8002140:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002144:	f7fe ff18 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002148:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800214c:	9400      	str	r4, [sp, #0]
 800214e:	462a      	mov	r2, r5
 8002150:	4639      	mov	r1, r7
 8002152:	4856      	ldr	r0, [pc, #344]	; (80022ac <_sub_I_65535_0.0+0x270>)
 8002154:	2303      	movs	r3, #3
 8002156:	f7fe ff0f 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800215a:	2303      	movs	r3, #3
 800215c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002160:	9400      	str	r4, [sp, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	4639      	mov	r1, r7
 8002166:	4852      	ldr	r0, [pc, #328]	; (80022b0 <_sub_I_65535_0.0+0x274>)
 8002168:	f7fe ff06 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800216c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002170:	462a      	mov	r2, r5
 8002172:	9400      	str	r4, [sp, #0]
 8002174:	4641      	mov	r1, r8
 8002176:	484f      	ldr	r0, [pc, #316]	; (80022b4 <_sub_I_65535_0.0+0x278>)
 8002178:	2303      	movs	r3, #3
 800217a:	f7fe fefd 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 800217e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002182:	9400      	str	r4, [sp, #0]
 8002184:	4641      	mov	r1, r8
 8002186:	484c      	ldr	r0, [pc, #304]	; (80022b8 <_sub_I_65535_0.0+0x27c>)
 8002188:	2303      	movs	r3, #3
 800218a:	220b      	movs	r2, #11
 800218c:	f7fe fef4 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 8002190:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002194:	464a      	mov	r2, r9
 8002196:	9400      	str	r4, [sp, #0]
 8002198:	4633      	mov	r3, r6
 800219a:	4639      	mov	r1, r7
 800219c:	4847      	ldr	r0, [pc, #284]	; (80022bc <_sub_I_65535_0.0+0x280>)
 800219e:	f7fe feeb 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80021a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80021a6:	4633      	mov	r3, r6
 80021a8:	9400      	str	r4, [sp, #0]
 80021aa:	4641      	mov	r1, r8
 80021ac:	4844      	ldr	r0, [pc, #272]	; (80022c0 <_sub_I_65535_0.0+0x284>)
 80021ae:	220a      	movs	r2, #10
 80021b0:	f7fe fee2 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80021b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80021b8:	4633      	mov	r3, r6
 80021ba:	4639      	mov	r1, r7
 80021bc:	9400      	str	r4, [sp, #0]
 80021be:	4841      	ldr	r0, [pc, #260]	; (80022c4 <_sub_I_65535_0.0+0x288>)
 80021c0:	220b      	movs	r2, #11
 80021c2:	f7fe fed9 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80021c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80021ca:	4633      	mov	r3, r6
 80021cc:	4641      	mov	r1, r8
 80021ce:	9400      	str	r4, [sp, #0]
 80021d0:	483d      	ldr	r0, [pc, #244]	; (80022c8 <_sub_I_65535_0.0+0x28c>)
 80021d2:	2207      	movs	r2, #7
 80021d4:	f7fe fed0 	bl	8000f78 <_ZN4GPIOC2EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh.constprop.0.isra.0>
 80021d8:	4a3c      	ldr	r2, [pc, #240]	; (80022cc <_sub_I_65535_0.0+0x290>)
 80021da:	493d      	ldr	r1, [pc, #244]	; (80022d0 <_sub_I_65535_0.0+0x294>)
 80021dc:	6011      	str	r1, [r2, #0]
 80021de:	493d      	ldr	r1, [pc, #244]	; (80022d4 <_sub_I_65535_0.0+0x298>)
 80021e0:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <_sub_I_65535_0.0+0x29c>)
 80021e2:	7314      	strb	r4, [r2, #12]
 80021e4:	e9c2 1401 	strd	r1, r4, [r2, #4]
 80021e8:	7354      	strb	r4, [r2, #13]
 80021ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ec:	483b      	ldr	r0, [pc, #236]	; (80022dc <_sub_I_65535_0.0+0x2a0>)
 80021ee:	4c3c      	ldr	r4, [pc, #240]	; (80022e0 <_sub_I_65535_0.0+0x2a4>)
 80021f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021f4:	659a      	str	r2, [r3, #88]	; 0x58
 80021f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38
 80021fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002200:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
 8002206:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800220a:	6042      	str	r2, [r0, #4]
 800220c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002210:	60ca      	str	r2, [r1, #12]
 8002212:	680a      	ldr	r2, [r1, #0]
 8002214:	4833      	ldr	r0, [pc, #204]	; (80022e4 <_sub_I_65535_0.0+0x2a8>)
 8002216:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 800221a:	600a      	str	r2, [r1, #0]
 800221c:	4a32      	ldr	r2, [pc, #200]	; (80022e8 <_sub_I_65535_0.0+0x2ac>)
 800221e:	6002      	str	r2, [r0, #0]
 8002220:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002222:	4832      	ldr	r0, [pc, #200]	; (80022ec <_sub_I_65535_0.0+0x2b0>)
 8002224:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002228:	6599      	str	r1, [r3, #88]	; 0x58
 800222a:	6813      	ldr	r3, [r2, #0]
 800222c:	4930      	ldr	r1, [pc, #192]	; (80022f0 <_sub_I_65535_0.0+0x2b4>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	6110      	str	r0, [r2, #16]
 8002236:	6813      	ldr	r3, [r2, #0]
 8002238:	482e      	ldr	r0, [pc, #184]	; (80022f4 <_sub_I_65535_0.0+0x2b8>)
 800223a:	4333      	orrs	r3, r6
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002242:	600e      	str	r6, [r1, #0]
 8002244:	4622      	mov	r2, r4
 8002246:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <_sub_I_65535_0.0+0x2bc>)
 800224c:	f7fe fd84 	bl	8000d58 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>
 8002250:	eddf 0a2a 	vldr	s1, [pc, #168]	; 80022fc <_sub_I_65535_0.0+0x2c0>
 8002254:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8002300 <_sub_I_65535_0.0+0x2c4>
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <_sub_I_65535_0.0+0x2c8>)
 800225a:	482b      	ldr	r0, [pc, #172]	; (8002308 <_sub_I_65535_0.0+0x2cc>)
 800225c:	eb04 0209 	add.w	r2, r4, r9
 8002260:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002264:	b004      	add	sp, #16
 8002266:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800226a:	f7fe bd75 	b.w	8000d58 <_ZN3PIDC2EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef.constprop.0.isra.0>
 800226e:	bf00      	nop
 8002270:	48000800 	.word	0x48000800
 8002274:	48000c00 	.word	0x48000c00
 8002278:	200000ac 	.word	0x200000ac
 800227c:	3dcccccd 	.word	0x3dcccccd
 8002280:	200000a4 	.word	0x200000a4
 8002284:	2000009c 	.word	0x2000009c
 8002288:	20000094 	.word	0x20000094
 800228c:	2000008c 	.word	0x2000008c
 8002290:	20000084 	.word	0x20000084
 8002294:	2000007c 	.word	0x2000007c
 8002298:	20000074 	.word	0x20000074
 800229c:	2000006c 	.word	0x2000006c
 80022a0:	20000064 	.word	0x20000064
 80022a4:	2000005c 	.word	0x2000005c
 80022a8:	20000054 	.word	0x20000054
 80022ac:	2000004c 	.word	0x2000004c
 80022b0:	20000044 	.word	0x20000044
 80022b4:	2000003c 	.word	0x2000003c
 80022b8:	20000034 	.word	0x20000034
 80022bc:	200000c0 	.word	0x200000c0
 80022c0:	2000002c 	.word	0x2000002c
 80022c4:	200000ec 	.word	0x200000ec
 80022c8:	200000b8 	.word	0x200000b8
 80022cc:	200001b4 	.word	0x200001b4
 80022d0:	0007a120 	.word	0x0007a120
 80022d4:	40005000 	.word	0x40005000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	20000134 	.word	0x20000134
 80022e4:	200000e8 	.word	0x200000e8
 80022e8:	40007800 	.word	0x40007800
 80022ec:	0070276b 	.word	0x0070276b
 80022f0:	20000170 	.word	0x20000170
 80022f4:	200002c4 	.word	0x200002c4
 80022f8:	200000b4 	.word	0x200000b4
 80022fc:	3e19999a 	.word	0x3e19999a
 8002300:	3c23d70a 	.word	0x3c23d70a
 8002304:	20000018 	.word	0x20000018
 8002308:	20000304 	.word	0x20000304
 800230c:	48000400 	.word	0x48000400

08002310 <Reset_Handler>:
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <LoopForever+0x2>)
 8002312:	4685      	mov	sp, r0
 8002314:	480d      	ldr	r0, [pc, #52]	; (800234c <LoopForever+0x6>)
 8002316:	490e      	ldr	r1, [pc, #56]	; (8002350 <LoopForever+0xa>)
 8002318:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <LoopForever+0xe>)
 800231a:	2300      	movs	r3, #0
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:
 800231e:	58d4      	ldr	r4, [r2, r3]
 8002320:	50c4      	str	r4, [r0, r3]
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:
 8002324:	18c4      	adds	r4, r0, r3
 8002326:	428c      	cmp	r4, r1
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <LoopForever+0x12>)
 800232c:	4c0b      	ldr	r4, [pc, #44]	; (800235c <LoopForever+0x16>)
 800232e:	2300      	movs	r3, #0
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:
 8002336:	42a2      	cmp	r2, r4
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>
 800233a:	f7ff fe61 	bl	8002000 <SystemInit>
 800233e:	f000 f811 	bl	8002364 <__libc_init_array>
 8002342:	f7fe ff21 	bl	8001188 <main>

08002346 <LoopForever>:
 8002346:	e7fe      	b.n	8002346 <LoopForever>
 8002348:	20020000 	.word	0x20020000
 800234c:	20000000 	.word	0x20000000
 8002350:	2000002c 	.word	0x2000002c
 8002354:	080035a8 	.word	0x080035a8
 8002358:	2000002c 	.word	0x2000002c
 800235c:	20000344 	.word	0x20000344

08002360 <ADC1_2_IRQHandler>:
 8002360:	e7fe      	b.n	8002360 <ADC1_2_IRQHandler>
	...

08002364 <__libc_init_array>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <__libc_init_array+0x40>)
 8002368:	4d0f      	ldr	r5, [pc, #60]	; (80023a8 <__libc_init_array+0x44>)
 800236a:	42ab      	cmp	r3, r5
 800236c:	eba3 0605 	sub.w	r6, r3, r5
 8002370:	d007      	beq.n	8002382 <__libc_init_array+0x1e>
 8002372:	10b6      	asrs	r6, r6, #2
 8002374:	2400      	movs	r4, #0
 8002376:	f855 3b04 	ldr.w	r3, [r5], #4
 800237a:	3401      	adds	r4, #1
 800237c:	4798      	blx	r3
 800237e:	42a6      	cmp	r6, r4
 8002380:	d8f9      	bhi.n	8002376 <__libc_init_array+0x12>
 8002382:	f7ff fe59 	bl	8002038 <_init>
 8002386:	4d09      	ldr	r5, [pc, #36]	; (80023ac <__libc_init_array+0x48>)
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <__libc_init_array+0x4c>)
 800238a:	1b5e      	subs	r6, r3, r5
 800238c:	42ab      	cmp	r3, r5
 800238e:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8002392:	d006      	beq.n	80023a2 <__libc_init_array+0x3e>
 8002394:	2400      	movs	r4, #0
 8002396:	f855 3b04 	ldr.w	r3, [r5], #4
 800239a:	3401      	adds	r4, #1
 800239c:	4798      	blx	r3
 800239e:	42a6      	cmp	r6, r4
 80023a0:	d8f9      	bhi.n	8002396 <__libc_init_array+0x32>
 80023a2:	bd70      	pop	{r4, r5, r6, pc}
 80023a4:	080035a4 	.word	0x080035a4
 80023a8:	080035a4 	.word	0x080035a4
 80023ac:	080035a4 	.word	0x080035a4
 80023b0:	080035a8 	.word	0x080035a8

080023b4 <cosf>:
 80023b4:	ee10 3a10 	vmov	r3, s0
 80023b8:	4918      	ldr	r1, [pc, #96]	; (800241c <cosf+0x68>)
 80023ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023be:	428a      	cmp	r2, r1
 80023c0:	d91b      	bls.n	80023fa <cosf+0x46>
 80023c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80023c6:	d302      	bcc.n	80023ce <cosf+0x1a>
 80023c8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80023cc:	4770      	bx	lr
 80023ce:	b500      	push	{lr}
 80023d0:	b083      	sub	sp, #12
 80023d2:	4668      	mov	r0, sp
 80023d4:	f000 f92a 	bl	800262c <__ieee754_rem_pio2f>
 80023d8:	f000 0003 	and.w	r0, r0, #3
 80023dc:	2801      	cmp	r0, #1
 80023de:	eddd 0a01 	vldr	s1, [sp, #4]
 80023e2:	ed9d 0a00 	vldr	s0, [sp]
 80023e6:	d00c      	beq.n	8002402 <cosf+0x4e>
 80023e8:	2802      	cmp	r0, #2
 80023ea:	d012      	beq.n	8002412 <cosf+0x5e>
 80023ec:	b170      	cbz	r0, 800240c <cosf+0x58>
 80023ee:	2001      	movs	r0, #1
 80023f0:	f000 f8d4 	bl	800259c <__kernel_sinf>
 80023f4:	b003      	add	sp, #12
 80023f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80023fa:	eddf 0a09 	vldr	s1, [pc, #36]	; 8002420 <cosf+0x6c>
 80023fe:	f000 b84b 	b.w	8002498 <__kernel_cosf>
 8002402:	f000 f8cb 	bl	800259c <__kernel_sinf>
 8002406:	eeb1 0a40 	vneg.f32	s0, s0
 800240a:	e7f3      	b.n	80023f4 <cosf+0x40>
 800240c:	f000 f844 	bl	8002498 <__kernel_cosf>
 8002410:	e7f0      	b.n	80023f4 <cosf+0x40>
 8002412:	f000 f841 	bl	8002498 <__kernel_cosf>
 8002416:	eeb1 0a40 	vneg.f32	s0, s0
 800241a:	e7eb      	b.n	80023f4 <cosf+0x40>
 800241c:	3f490fd8 	.word	0x3f490fd8
 8002420:	00000000 	.word	0x00000000

08002424 <sinf>:
 8002424:	ee10 3a10 	vmov	r3, s0
 8002428:	4919      	ldr	r1, [pc, #100]	; (8002490 <sinf+0x6c>)
 800242a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800242e:	428a      	cmp	r2, r1
 8002430:	d91c      	bls.n	800246c <sinf+0x48>
 8002432:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8002436:	d302      	bcc.n	800243e <sinf+0x1a>
 8002438:	ee30 0a40 	vsub.f32	s0, s0, s0
 800243c:	4770      	bx	lr
 800243e:	b500      	push	{lr}
 8002440:	b083      	sub	sp, #12
 8002442:	4668      	mov	r0, sp
 8002444:	f000 f8f2 	bl	800262c <__ieee754_rem_pio2f>
 8002448:	f000 0003 	and.w	r0, r0, #3
 800244c:	2801      	cmp	r0, #1
 800244e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002452:	ed9d 0a00 	vldr	s0, [sp]
 8002456:	d00e      	beq.n	8002476 <sinf+0x52>
 8002458:	2802      	cmp	r0, #2
 800245a:	d013      	beq.n	8002484 <sinf+0x60>
 800245c:	b170      	cbz	r0, 800247c <sinf+0x58>
 800245e:	f000 f81b 	bl	8002498 <__kernel_cosf>
 8002462:	eeb1 0a40 	vneg.f32	s0, s0
 8002466:	b003      	add	sp, #12
 8002468:	f85d fb04 	ldr.w	pc, [sp], #4
 800246c:	eddf 0a09 	vldr	s1, [pc, #36]	; 8002494 <sinf+0x70>
 8002470:	2000      	movs	r0, #0
 8002472:	f000 b893 	b.w	800259c <__kernel_sinf>
 8002476:	f000 f80f 	bl	8002498 <__kernel_cosf>
 800247a:	e7f4      	b.n	8002466 <sinf+0x42>
 800247c:	2001      	movs	r0, #1
 800247e:	f000 f88d 	bl	800259c <__kernel_sinf>
 8002482:	e7f0      	b.n	8002466 <sinf+0x42>
 8002484:	2001      	movs	r0, #1
 8002486:	f000 f889 	bl	800259c <__kernel_sinf>
 800248a:	eeb1 0a40 	vneg.f32	s0, s0
 800248e:	e7ea      	b.n	8002466 <sinf+0x42>
 8002490:	3f490fd8 	.word	0x3f490fd8
 8002494:	00000000 	.word	0x00000000

08002498 <__kernel_cosf>:
 8002498:	ee10 3a10 	vmov	r3, s0
 800249c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024a0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80024a4:	d22c      	bcs.n	8002500 <__kernel_cosf+0x68>
 80024a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80024aa:	ee17 3a90 	vmov	r3, s15
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d060      	beq.n	8002574 <__kernel_cosf+0xdc>
 80024b2:	ee60 7a00 	vmul.f32	s15, s0, s0
 80024b6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800257c <__kernel_cosf+0xe4>
 80024ba:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8002580 <__kernel_cosf+0xe8>
 80024be:	eddf 5a31 	vldr	s11, [pc, #196]	; 8002584 <__kernel_cosf+0xec>
 80024c2:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8002588 <__kernel_cosf+0xf0>
 80024c6:	eddf 6a31 	vldr	s13, [pc, #196]	; 800258c <__kernel_cosf+0xf4>
 80024ca:	eea7 5a87 	vfma.f32	s10, s15, s14
 80024ce:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002590 <__kernel_cosf+0xf8>
 80024d2:	eee5 5a27 	vfma.f32	s11, s10, s15
 80024d6:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80024da:	eea7 7a86 	vfma.f32	s14, s15, s12
 80024de:	eee7 6a87 	vfma.f32	s13, s15, s14
 80024e2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024e6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80024ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024ee:	eee7 0aa6 	vfma.f32	s1, s15, s13
 80024f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024f6:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80024fa:	ee30 0a60 	vsub.f32	s0, s0, s1
 80024fe:	4770      	bx	lr
 8002500:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002504:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800257c <__kernel_cosf+0xe4>
 8002508:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8002580 <__kernel_cosf+0xe8>
 800250c:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002584 <__kernel_cosf+0xec>
 8002510:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8002588 <__kernel_cosf+0xf0>
 8002514:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800258c <__kernel_cosf+0xf4>
 8002518:	4a1e      	ldr	r2, [pc, #120]	; (8002594 <__kernel_cosf+0xfc>)
 800251a:	eea7 5a87 	vfma.f32	s10, s15, s14
 800251e:	4293      	cmp	r3, r2
 8002520:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002590 <__kernel_cosf+0xf8>
 8002524:	eee5 5a27 	vfma.f32	s11, s10, s15
 8002528:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800252c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8002530:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002534:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002538:	d9d5      	bls.n	80024e6 <__kernel_cosf+0x4e>
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <__kernel_cosf+0x100>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d814      	bhi.n	800256a <__kernel_cosf+0xd2>
 8002540:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8002544:	ee07 3a10 	vmov	s14, r3
 8002548:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800254c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8002550:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002554:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002558:	ee97 7aa5 	vfnms.f32	s14, s15, s11
 800255c:	eee7 0aa6 	vfma.f32	s1, s15, s13
 8002560:	ee37 7a60 	vsub.f32	s14, s14, s1
 8002564:	ee36 0a47 	vsub.f32	s0, s12, s14
 8002568:	4770      	bx	lr
 800256a:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 800256e:	eeb5 7a02 	vmov.f32	s14, #82	; 0x3e900000  0.2812500
 8002572:	e7ed      	b.n	8002550 <__kernel_cosf+0xb8>
 8002574:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	ad47d74e 	.word	0xad47d74e
 8002580:	310f74f6 	.word	0x310f74f6
 8002584:	b493f27c 	.word	0xb493f27c
 8002588:	37d00d01 	.word	0x37d00d01
 800258c:	3d2aaaab 	.word	0x3d2aaaab
 8002590:	bab60b61 	.word	0xbab60b61
 8002594:	3e999999 	.word	0x3e999999
 8002598:	3f480000 	.word	0x3f480000

0800259c <__kernel_sinf>:
 800259c:	ee10 3a10 	vmov	r3, s0
 80025a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80025a8:	d204      	bcs.n	80025b4 <__kernel_sinf+0x18>
 80025aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80025ae:	ee17 3a90 	vmov	r3, s15
 80025b2:	b35b      	cbz	r3, 800260c <__kernel_sinf+0x70>
 80025b4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80025b8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002610 <__kernel_sinf+0x74>
 80025bc:	eddf 5a15 	vldr	s11, [pc, #84]	; 8002614 <__kernel_sinf+0x78>
 80025c0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8002618 <__kernel_sinf+0x7c>
 80025c4:	eddf 6a15 	vldr	s13, [pc, #84]	; 800261c <__kernel_sinf+0x80>
 80025c8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80025cc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002620 <__kernel_sinf+0x84>
 80025d0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80025d4:	ee20 5a27 	vmul.f32	s10, s0, s15
 80025d8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80025dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80025e0:	b930      	cbnz	r0, 80025f0 <__kernel_sinf+0x54>
 80025e2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002624 <__kernel_sinf+0x88>
 80025e6:	eee7 6a87 	vfma.f32	s13, s15, s14
 80025ea:	eea6 0a85 	vfma.f32	s0, s13, s10
 80025ee:	4770      	bx	lr
 80025f0:	ee27 7a45 	vnmul.f32	s14, s14, s10
 80025f4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80025f8:	eea0 7aa6 	vfma.f32	s14, s1, s13
 80025fc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002628 <__kernel_sinf+0x8c>
 8002600:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8002604:	eee5 0a26 	vfma.f32	s1, s10, s13
 8002608:	ee30 0a60 	vsub.f32	s0, s0, s1
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	2f2ec9d3 	.word	0x2f2ec9d3
 8002614:	b2d72f34 	.word	0xb2d72f34
 8002618:	3638ef1b 	.word	0x3638ef1b
 800261c:	b9500d01 	.word	0xb9500d01
 8002620:	3c088889 	.word	0x3c088889
 8002624:	be2aaaab 	.word	0xbe2aaaab
 8002628:	3e2aaaab 	.word	0x3e2aaaab

0800262c <__ieee754_rem_pio2f>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	ee10 3a10 	vmov	r3, s0
 8002632:	4a88      	ldr	r2, [pc, #544]	; (8002854 <__ieee754_rem_pio2f+0x228>)
 8002634:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002638:	4294      	cmp	r4, r2
 800263a:	b086      	sub	sp, #24
 800263c:	4605      	mov	r5, r0
 800263e:	d971      	bls.n	8002724 <__ieee754_rem_pio2f+0xf8>
 8002640:	4a85      	ldr	r2, [pc, #532]	; (8002858 <__ieee754_rem_pio2f+0x22c>)
 8002642:	4294      	cmp	r4, r2
 8002644:	461e      	mov	r6, r3
 8002646:	d824      	bhi.n	8002692 <__ieee754_rem_pio2f+0x66>
 8002648:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	eddf 7a83 	vldr	s15, [pc, #524]	; 800285c <__ieee754_rem_pio2f+0x230>
 8002652:	4a83      	ldr	r2, [pc, #524]	; (8002860 <__ieee754_rem_pio2f+0x234>)
 8002654:	f026 060f 	bic.w	r6, r6, #15
 8002658:	eeb0 7a40 	vmov.f32	s14, s0
 800265c:	f340 80e0 	ble.w	8002820 <__ieee754_rem_pio2f+0x1f4>
 8002660:	4296      	cmp	r6, r2
 8002662:	ee70 7a67 	vsub.f32	s15, s0, s15
 8002666:	bf09      	itett	eq
 8002668:	ed9f 7a7e 	vldreq	s14, [pc, #504]	; 8002864 <__ieee754_rem_pio2f+0x238>
 800266c:	eddf 6a7e 	vldrne	s13, [pc, #504]	; 8002868 <__ieee754_rem_pio2f+0x23c>
 8002670:	eddf 6a7e 	vldreq	s13, [pc, #504]	; 800286c <__ieee754_rem_pio2f+0x240>
 8002674:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8002678:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800267c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002680:	ed80 7a00 	vstr	s14, [r0]
 8002684:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002688:	edc0 7a01 	vstr	s15, [r0, #4]
 800268c:	2001      	movs	r0, #1
 800268e:	b006      	add	sp, #24
 8002690:	bd70      	pop	{r4, r5, r6, pc}
 8002692:	4a77      	ldr	r2, [pc, #476]	; (8002870 <__ieee754_rem_pio2f+0x244>)
 8002694:	4294      	cmp	r4, r2
 8002696:	d952      	bls.n	800273e <__ieee754_rem_pio2f+0x112>
 8002698:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800269c:	d248      	bcs.n	8002730 <__ieee754_rem_pio2f+0x104>
 800269e:	15e2      	asrs	r2, r4, #23
 80026a0:	3a86      	subs	r2, #134	; 0x86
 80026a2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80026ae:	eddf 6a71 	vldr	s13, [pc, #452]	; 8002874 <__ieee754_rem_pio2f+0x248>
 80026b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026ba:	ed8d 7a03 	vstr	s14, [sp, #12]
 80026be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80026c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026ce:	ed8d 7a04 	vstr	s14, [sp, #16]
 80026d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	edcd 7a05 	vstr	s15, [sp, #20]
 80026e2:	f040 8098 	bne.w	8002816 <__ieee754_rem_pio2f+0x1ea>
 80026e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80026ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2302      	movne	r3, #2
 80026f4:	4960      	ldr	r1, [pc, #384]	; (8002878 <__ieee754_rem_pio2f+0x24c>)
 80026f6:	9101      	str	r1, [sp, #4]
 80026f8:	2102      	movs	r1, #2
 80026fa:	9100      	str	r1, [sp, #0]
 80026fc:	a803      	add	r0, sp, #12
 80026fe:	4629      	mov	r1, r5
 8002700:	f000 f8cc 	bl	800289c <__kernel_rem_pio2f>
 8002704:	2e00      	cmp	r6, #0
 8002706:	dac2      	bge.n	800268e <__ieee754_rem_pio2f+0x62>
 8002708:	ed95 7a00 	vldr	s14, [r5]
 800270c:	edd5 7a01 	vldr	s15, [r5, #4]
 8002710:	eeb1 7a47 	vneg.f32	s14, s14
 8002714:	eef1 7a67 	vneg.f32	s15, s15
 8002718:	ed85 7a00 	vstr	s14, [r5]
 800271c:	edc5 7a01 	vstr	s15, [r5, #4]
 8002720:	4240      	negs	r0, r0
 8002722:	e7b4      	b.n	800268e <__ieee754_rem_pio2f+0x62>
 8002724:	2200      	movs	r2, #0
 8002726:	ed85 0a00 	vstr	s0, [r5]
 800272a:	6042      	str	r2, [r0, #4]
 800272c:	2000      	movs	r0, #0
 800272e:	e7ae      	b.n	800268e <__ieee754_rem_pio2f+0x62>
 8002730:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002734:	edc0 7a01 	vstr	s15, [r0, #4]
 8002738:	edc0 7a00 	vstr	s15, [r0]
 800273c:	e7f6      	b.n	800272c <__ieee754_rem_pio2f+0x100>
 800273e:	f000 f8a5 	bl	800288c <fabsf>
 8002742:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800287c <__ieee754_rem_pio2f+0x250>
 8002746:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800285c <__ieee754_rem_pio2f+0x230>
 800274a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800274e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002752:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002868 <__ieee754_rem_pio2f+0x23c>
 8002756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800275a:	ee17 0a90 	vmov	r0, s15
 800275e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002762:	281f      	cmp	r0, #31
 8002764:	eea6 0ac6 	vfms.f32	s0, s13, s12
 8002768:	ee66 7a87 	vmul.f32	s15, s13, s14
 800276c:	eeb1 6a66 	vneg.f32	s12, s13
 8002770:	dc20      	bgt.n	80027b4 <__ieee754_rem_pio2f+0x188>
 8002772:	4a43      	ldr	r2, [pc, #268]	; (8002880 <__ieee754_rem_pio2f+0x254>)
 8002774:	1e41      	subs	r1, r0, #1
 8002776:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800277a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800277e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002782:	4293      	cmp	r3, r2
 8002784:	d016      	beq.n	80027b4 <__ieee754_rem_pio2f+0x188>
 8002786:	ee30 7a67 	vsub.f32	s14, s0, s15
 800278a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800278e:	2e00      	cmp	r6, #0
 8002790:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002794:	ed85 7a00 	vstr	s14, [r5]
 8002798:	ed85 0a01 	vstr	s0, [r5, #4]
 800279c:	f6bf af77 	bge.w	800268e <__ieee754_rem_pio2f+0x62>
 80027a0:	eeb1 7a47 	vneg.f32	s14, s14
 80027a4:	eeb1 0a40 	vneg.f32	s0, s0
 80027a8:	ed85 7a00 	vstr	s14, [r5]
 80027ac:	ed85 0a01 	vstr	s0, [r5, #4]
 80027b0:	4240      	negs	r0, r0
 80027b2:	e76c      	b.n	800268e <__ieee754_rem_pio2f+0x62>
 80027b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80027b8:	15e2      	asrs	r2, r4, #23
 80027ba:	ee17 3a10 	vmov	r3, s14
 80027be:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80027c2:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	dddf      	ble.n	800278a <__ieee754_rem_pio2f+0x15e>
 80027ca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002864 <__ieee754_rem_pio2f+0x238>
 80027ce:	ed9f 5a27 	vldr	s10, [pc, #156]	; 800286c <__ieee754_rem_pio2f+0x240>
 80027d2:	eef0 5a40 	vmov.f32	s11, s0
 80027d6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80027da:	ee70 7a65 	vsub.f32	s15, s0, s11
 80027de:	eee6 7a07 	vfma.f32	s15, s12, s14
 80027e2:	eed6 7a85 	vfnms.f32	s15, s13, s10
 80027e6:	ee35 7ae7 	vsub.f32	s14, s11, s15
 80027ea:	ee17 3a10 	vmov	r3, s14
 80027ee:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	2a19      	cmp	r2, #25
 80027f6:	dd10      	ble.n	800281a <__ieee754_rem_pio2f+0x1ee>
 80027f8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002884 <__ieee754_rem_pio2f+0x258>
 80027fc:	ed9f 5a22 	vldr	s10, [pc, #136]	; 8002888 <__ieee754_rem_pio2f+0x25c>
 8002800:	eeb0 0a65 	vmov.f32	s0, s11
 8002804:	eea6 0a07 	vfma.f32	s0, s12, s14
 8002808:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800280c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002810:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8002814:	e7b7      	b.n	8002786 <__ieee754_rem_pio2f+0x15a>
 8002816:	2303      	movs	r3, #3
 8002818:	e76c      	b.n	80026f4 <__ieee754_rem_pio2f+0xc8>
 800281a:	eeb0 0a65 	vmov.f32	s0, s11
 800281e:	e7b4      	b.n	800278a <__ieee754_rem_pio2f+0x15e>
 8002820:	4296      	cmp	r6, r2
 8002822:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002826:	bf09      	itett	eq
 8002828:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 8002864 <__ieee754_rem_pio2f+0x238>
 800282c:	eddf 6a0e 	vldrne	s13, [pc, #56]	; 8002868 <__ieee754_rem_pio2f+0x23c>
 8002830:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 800286c <__ieee754_rem_pio2f+0x240>
 8002834:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002838:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800283c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002840:	ed80 7a00 	vstr	s14, [r0]
 8002844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002848:	edc0 7a01 	vstr	s15, [r0, #4]
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	e71d      	b.n	800268e <__ieee754_rem_pio2f+0x62>
 8002852:	bf00      	nop
 8002854:	3f490fd8 	.word	0x3f490fd8
 8002858:	4016cbe3 	.word	0x4016cbe3
 800285c:	3fc90f80 	.word	0x3fc90f80
 8002860:	3fc90fd0 	.word	0x3fc90fd0
 8002864:	37354400 	.word	0x37354400
 8002868:	37354443 	.word	0x37354443
 800286c:	2e85a308 	.word	0x2e85a308
 8002870:	43490f80 	.word	0x43490f80
 8002874:	43800000 	.word	0x43800000
 8002878:	08003254 	.word	0x08003254
 800287c:	3f22f984 	.word	0x3f22f984
 8002880:	080031d4 	.word	0x080031d4
 8002884:	2e85a300 	.word	0x2e85a300
 8002888:	248d3132 	.word	0x248d3132

0800288c <fabsf>:
 800288c:	ee10 3a10 	vmov	r3, s0
 8002890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002894:	ee00 3a10 	vmov	s0, r3
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop

0800289c <__kernel_rem_pio2f>:
 800289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a0:	ed2d 8b04 	vpush	{d8-d9}
 80028a4:	b0db      	sub	sp, #364	; 0x16c
 80028a6:	460c      	mov	r4, r1
 80028a8:	4681      	mov	r9, r0
 80028aa:	4611      	mov	r1, r2
 80028ac:	9868      	ldr	r0, [sp, #416]	; 0x1a0
 80028ae:	4a96      	ldr	r2, [pc, #600]	; (8002b08 <__kernel_rem_pio2f+0x26c>)
 80028b0:	9304      	str	r3, [sp, #16]
 80028b2:	461e      	mov	r6, r3
 80028b4:	4623      	mov	r3, r4
 80028b6:	1d0c      	adds	r4, r1, #4
 80028b8:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80028bc:	f106 37ff 	add.w	r7, r6, #4294967295
 80028c0:	f2c0 82b0 	blt.w	8002e24 <__kernel_rem_pio2f+0x588>
 80028c4:	1eca      	subs	r2, r1, #3
 80028c6:	bf48      	it	mi
 80028c8:	1d0a      	addmi	r2, r1, #4
 80028ca:	10d2      	asrs	r2, r2, #3
 80028cc:	9203      	str	r2, [sp, #12]
 80028ce:	3201      	adds	r2, #1
 80028d0:	00d2      	lsls	r2, r2, #3
 80028d2:	9206      	str	r2, [sp, #24]
 80028d4:	9a06      	ldr	r2, [sp, #24]
 80028d6:	9803      	ldr	r0, [sp, #12]
 80028d8:	19ee      	adds	r6, r5, r7
 80028da:	eba1 0202 	sub.w	r2, r1, r2
 80028de:	eba0 0007 	sub.w	r0, r0, r7
 80028e2:	d419      	bmi.n	8002918 <__kernel_rem_pio2f+0x7c>
 80028e4:	3601      	adds	r6, #1
 80028e6:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002b0c <__kernel_rem_pio2f+0x270>
 80028ea:	f8dd c1a4 	ldr.w	ip, [sp, #420]	; 0x1a4
 80028ee:	4406      	add	r6, r0
 80028f0:	ac1e      	add	r4, sp, #120	; 0x78
 80028f2:	469e      	mov	lr, r3
 80028f4:	2800      	cmp	r0, #0
 80028f6:	bfa4      	itt	ge
 80028f8:	f85c 3020 	ldrge.w	r3, [ip, r0, lsl #2]
 80028fc:	ee07 3a90 	vmovge	s15, r3
 8002900:	f100 0001 	add.w	r0, r0, #1
 8002904:	bfac      	ite	ge
 8002906:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 800290a:	eef0 7a47 	vmovlt.f32	s15, s14
 800290e:	42b0      	cmp	r0, r6
 8002910:	ece4 7a01 	vstmia	r4!, {s15}
 8002914:	d1ee      	bne.n	80028f4 <__kernel_rem_pio2f+0x58>
 8002916:	4673      	mov	r3, lr
 8002918:	2d00      	cmp	r5, #0
 800291a:	f2c0 82d9 	blt.w	8002ed0 <__kernel_rem_pio2f+0x634>
 800291e:	9804      	ldr	r0, [sp, #16]
 8002920:	ac1e      	add	r4, sp, #120	; 0x78
 8002922:	eb04 0680 	add.w	r6, r4, r0, lsl #2
 8002926:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800292a:	eb05 0e00 	add.w	lr, r5, r0
 800292e:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
 8002932:	463c      	mov	r4, r7
 8002934:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002938:	2f00      	cmp	r7, #0
 800293a:	eddf 7a74 	vldr	s15, [pc, #464]	; 8002b0c <__kernel_rem_pio2f+0x270>
 800293e:	db09      	blt.n	8002954 <__kernel_rem_pio2f+0xb8>
 8002940:	46b3      	mov	fp, r6
 8002942:	46ca      	mov	sl, r9
 8002944:	ecfa 6a01 	vldmia	sl!, {s13}
 8002948:	ed3b 7a01 	vldmdb	fp!, {s14}
 800294c:	4582      	cmp	sl, r0
 800294e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002952:	d1f7      	bne.n	8002944 <__kernel_rem_pio2f+0xa8>
 8002954:	3401      	adds	r4, #1
 8002956:	4574      	cmp	r4, lr
 8002958:	ecec 7a01 	vstmia	ip!, {s15}
 800295c:	f106 0604 	add.w	r6, r6, #4
 8002960:	d1ea      	bne.n	8002938 <__kernel_rem_pio2f+0x9c>
 8002962:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8002966:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 800296a:	e9cd 3107 	strd	r3, r1, [sp, #28]
 800296e:	3804      	subs	r0, #4
 8002970:	ed9f 9a68 	vldr	s18, [pc, #416]	; 8002b14 <__kernel_rem_pio2f+0x278>
 8002974:	eddf 8a66 	vldr	s17, [pc, #408]	; 8002b10 <__kernel_rem_pio2f+0x274>
 8002978:	9005      	str	r0, [sp, #20]
 800297a:	eb09 0408 	add.w	r4, r9, r8
 800297e:	46ab      	mov	fp, r5
 8002980:	eb0a 0885 	add.w	r8, sl, r5, lsl #2
 8002984:	ae46      	add	r6, sp, #280	; 0x118
 8002986:	9501      	str	r5, [sp, #4]
 8002988:	4610      	mov	r0, r2
 800298a:	ab5a      	add	r3, sp, #360	; 0x168
 800298c:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8002990:	f1bb 0f00 	cmp.w	fp, #0
 8002994:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8002998:	dd16      	ble.n	80029c8 <__kernel_rem_pio2f+0x12c>
 800299a:	eb06 038b 	add.w	r3, r6, fp, lsl #2
 800299e:	4652      	mov	r2, sl
 80029a0:	ee60 7a09 	vmul.f32	s15, s0, s18
 80029a4:	eeb0 7a40 	vmov.f32	s14, s0
 80029a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ac:	ed73 6a01 	vldmdb	r3!, {s13}
 80029b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b4:	42b3      	cmp	r3, r6
 80029b6:	eea7 7ae8 	vfms.f32	s14, s15, s17
 80029ba:	ee37 0aa6 	vadd.f32	s0, s15, s13
 80029be:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80029c2:	eca2 7a01 	vstmia	r2!, {s14}
 80029c6:	d1eb      	bne.n	80029a0 <__kernel_rem_pio2f+0x104>
 80029c8:	9002      	str	r0, [sp, #8]
 80029ca:	f000 faa5 	bl	8002f18 <scalbnf>
 80029ce:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 80029d2:	eeb0 8a40 	vmov.f32	s16, s0
 80029d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80029da:	f000 fb0f 	bl	8002ffc <floorf>
 80029de:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80029e2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80029e6:	9802      	ldr	r0, [sp, #8]
 80029e8:	2800      	cmp	r0, #0
 80029ea:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 80029ee:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 80029f2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80029f6:	dd6e      	ble.n	8002ad6 <__kernel_rem_pio2f+0x23a>
 80029f8:	f10b 3cff 	add.w	ip, fp, #4294967295
 80029fc:	f1c0 0308 	rsb	r3, r0, #8
 8002a00:	f85a 202c 	ldr.w	r2, [sl, ip, lsl #2]
 8002a04:	fa42 f503 	asr.w	r5, r2, r3
 8002a08:	fa05 f303 	lsl.w	r3, r5, r3
 8002a0c:	1ad2      	subs	r2, r2, r3
 8002a0e:	f1c0 0107 	rsb	r1, r0, #7
 8002a12:	ee19 3a90 	vmov	r3, s19
 8002a16:	fa42 f101 	asr.w	r1, r2, r1
 8002a1a:	442b      	add	r3, r5
 8002a1c:	2900      	cmp	r1, #0
 8002a1e:	f84a 202c 	str.w	r2, [sl, ip, lsl #2]
 8002a22:	ee09 3a90 	vmov	s19, r3
 8002a26:	f300 814b 	bgt.w	8002cc0 <__kernel_rem_pio2f+0x424>
 8002a2a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a32:	f040 80ba 	bne.w	8002baa <__kernel_rem_pio2f+0x30e>
 8002a36:	9b01      	ldr	r3, [sp, #4]
 8002a38:	459b      	cmp	fp, r3
 8002a3a:	dd0b      	ble.n	8002a54 <__kernel_rem_pio2f+0x1b8>
 8002a3c:	eb0a 038b 	add.w	r3, sl, fp, lsl #2
 8002a40:	2200      	movs	r2, #0
 8002a42:	f853 5d04 	ldr.w	r5, [r3, #-4]!
 8002a46:	4543      	cmp	r3, r8
 8002a48:	ea42 0205 	orr.w	r2, r2, r5
 8002a4c:	d1f9      	bne.n	8002a42 <__kernel_rem_pio2f+0x1a6>
 8002a4e:	2a00      	cmp	r2, #0
 8002a50:	f040 8154 	bne.w	8002cfc <__kernel_rem_pio2f+0x460>
 8002a54:	9b01      	ldr	r3, [sp, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 8144 	bne.w	8002cea <__kernel_rem_pio2f+0x44e>
 8002a62:	9b05      	ldr	r3, [sp, #20]
 8002a64:	2101      	movs	r1, #1
 8002a66:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002a6a:	3101      	adds	r1, #1
 8002a6c:	2a00      	cmp	r2, #0
 8002a6e:	d0fa      	beq.n	8002a66 <__kernel_rem_pio2f+0x1ca>
 8002a70:	f10b 0301 	add.w	r3, fp, #1
 8002a74:	4459      	add	r1, fp
 8002a76:	469c      	mov	ip, r3
 8002a78:	9d03      	ldr	r5, [sp, #12]
 8002a7a:	9a04      	ldr	r2, [sp, #16]
 8002a7c:	eb05 0e03 	add.w	lr, r5, r3
 8002a80:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8002a84:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
 8002a86:	445a      	add	r2, fp
 8002a88:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002a8c:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 8002a90:	ab1e      	add	r3, sp, #120	; 0x78
 8002a92:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8002a96:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8002a9a:	edde 7a01 	vldr	s15, [lr, #4]
 8002a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa2:	2f00      	cmp	r7, #0
 8002aa4:	f10e 0e04 	add.w	lr, lr, #4
 8002aa8:	ece5 7a01 	vstmia	r5!, {s15}
 8002aac:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002b0c <__kernel_rem_pio2f+0x270>
 8002ab0:	db09      	blt.n	8002ac6 <__kernel_rem_pio2f+0x22a>
 8002ab2:	462a      	mov	r2, r5
 8002ab4:	464b      	mov	r3, r9
 8002ab6:	ecf3 6a01 	vldmia	r3!, {s13}
 8002aba:	ed32 7a01 	vldmdb	r2!, {s14}
 8002abe:	42a3      	cmp	r3, r4
 8002ac0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002ac4:	d1f7      	bne.n	8002ab6 <__kernel_rem_pio2f+0x21a>
 8002ac6:	f10c 0c01 	add.w	ip, ip, #1
 8002aca:	4561      	cmp	r1, ip
 8002acc:	eceb 7a01 	vstmia	fp!, {s15}
 8002ad0:	dae3      	bge.n	8002a9a <__kernel_rem_pio2f+0x1fe>
 8002ad2:	468b      	mov	fp, r1
 8002ad4:	e759      	b.n	800298a <__kernel_rem_pio2f+0xee>
 8002ad6:	f040 80e9 	bne.w	8002cac <__kernel_rem_pio2f+0x410>
 8002ada:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002ade:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8002ae2:	11c9      	asrs	r1, r1, #7
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	dda0      	ble.n	8002a2a <__kernel_rem_pio2f+0x18e>
 8002ae8:	ee19 3a90 	vmov	r3, s19
 8002aec:	f1bb 0f00 	cmp.w	fp, #0
 8002af0:	f103 0301 	add.w	r3, r3, #1
 8002af4:	ee09 3a90 	vmov	s19, r3
 8002af8:	f340 81ee 	ble.w	8002ed8 <__kernel_rem_pio2f+0x63c>
 8002afc:	2500      	movs	r5, #0
 8002afe:	46d4      	mov	ip, sl
 8002b00:	462a      	mov	r2, r5
 8002b02:	9102      	str	r1, [sp, #8]
 8002b04:	4686      	mov	lr, r0
 8002b06:	e019      	b.n	8002b3c <__kernel_rem_pio2f+0x2a0>
 8002b08:	08003598 	.word	0x08003598
 8002b0c:	00000000 	.word	0x00000000
 8002b10:	43800000 	.word	0x43800000
 8002b14:	3b800000 	.word	0x3b800000
 8002b18:	3501      	adds	r5, #1
 8002b1a:	45ab      	cmp	fp, r5
 8002b1c:	f841 0c04 	str.w	r0, [r1, #-4]
 8002b20:	f340 80e8 	ble.w	8002cf4 <__kernel_rem_pio2f+0x458>
 8002b24:	680b      	ldr	r3, [r1, #0]
 8002b26:	f10c 0c08 	add.w	ip, ip, #8
 8002b2a:	3501      	adds	r5, #1
 8002b2c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002b30:	45ab      	cmp	fp, r5
 8002b32:	f04f 0201 	mov.w	r2, #1
 8002b36:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002b3a:	dd0d      	ble.n	8002b58 <__kernel_rem_pio2f+0x2bc>
 8002b3c:	4661      	mov	r1, ip
 8002b3e:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b42:	2a00      	cmp	r2, #0
 8002b44:	f040 80b0 	bne.w	8002ca8 <__kernel_rem_pio2f+0x40c>
 8002b48:	f5c3 7080 	rsb	r0, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e3      	bne.n	8002b18 <__kernel_rem_pio2f+0x27c>
 8002b50:	3501      	adds	r5, #1
 8002b52:	45ab      	cmp	fp, r5
 8002b54:	468c      	mov	ip, r1
 8002b56:	dcf1      	bgt.n	8002b3c <__kernel_rem_pio2f+0x2a0>
 8002b58:	9902      	ldr	r1, [sp, #8]
 8002b5a:	4670      	mov	r0, lr
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	dd0c      	ble.n	8002b7a <__kernel_rem_pio2f+0x2de>
 8002b60:	2801      	cmp	r0, #1
 8002b62:	f000 80b9 	beq.w	8002cd8 <__kernel_rem_pio2f+0x43c>
 8002b66:	2802      	cmp	r0, #2
 8002b68:	d107      	bne.n	8002b7a <__kernel_rem_pio2f+0x2de>
 8002b6a:	f10b 35ff 	add.w	r5, fp, #4294967295
 8002b6e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8002b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b76:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 8002b7a:	2902      	cmp	r1, #2
 8002b7c:	f47f af55 	bne.w	8002a2a <__kernel_rem_pio2f+0x18e>
 8002b80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b84:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002b88:	2a00      	cmp	r2, #0
 8002b8a:	f43f af4e 	beq.w	8002a2a <__kernel_rem_pio2f+0x18e>
 8002b8e:	9109      	str	r1, [sp, #36]	; 0x24
 8002b90:	9002      	str	r0, [sp, #8]
 8002b92:	f000 f9c1 	bl	8002f18 <scalbnf>
 8002b96:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002b9a:	9802      	ldr	r0, [sp, #8]
 8002b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b9e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba6:	f43f af46 	beq.w	8002a36 <__kernel_rem_pio2f+0x19a>
 8002baa:	9b07      	ldr	r3, [sp, #28]
 8002bac:	9d01      	ldr	r5, [sp, #4]
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	4688      	mov	r8, r1
 8002bb2:	9b06      	ldr	r3, [sp, #24]
 8002bb4:	9908      	ldr	r1, [sp, #32]
 8002bb6:	9002      	str	r0, [sp, #8]
 8002bb8:	eeb0 0a48 	vmov.f32	s0, s16
 8002bbc:	1a58      	subs	r0, r3, r1
 8002bbe:	f000 f9ab 	bl	8002f18 <scalbnf>
 8002bc2:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 8002b10 <__kernel_rem_pio2f+0x274>
 8002bc6:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8002bd2:	eef0 7a40 	vmov.f32	s15, s0
 8002bd6:	f2c0 814d 	blt.w	8002e74 <__kernel_rem_pio2f+0x5d8>
 8002bda:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8002b14 <__kernel_rem_pio2f+0x278>
 8002bde:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002be2:	f10b 0401 	add.w	r4, fp, #1
 8002be6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002bea:	3208      	adds	r2, #8
 8002bec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bf0:	eee7 7a66 	vfms.f32	s15, s14, s13
 8002bf4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bfc:	ee17 1a90 	vmov	r1, s15
 8002c00:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 8002c04:	ee17 1a10 	vmov	r1, s14
 8002c08:	f84a 1024 	str.w	r1, [sl, r4, lsl #2]
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	f000 f980 	bl	8002f18 <scalbnf>
 8002c18:	2c00      	cmp	r4, #0
 8002c1a:	9b01      	ldr	r3, [sp, #4]
 8002c1c:	eeb0 7a40 	vmov.f32	s14, s0
 8002c20:	f2c0 814c 	blt.w	8002ebc <__kernel_rem_pio2f+0x620>
 8002c24:	1c60      	adds	r0, r4, #1
 8002c26:	ae46      	add	r6, sp, #280	; 0x118
 8002c28:	ed5f 6a46 	vldr	s13, [pc, #-280]	; 8002b14 <__kernel_rem_pio2f+0x278>
 8002c2c:	0081      	lsls	r1, r0, #2
 8002c2e:	eb0a 0280 	add.w	r2, sl, r0, lsl #2
 8002c32:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8002c36:	ed72 7a01 	vldmdb	r2!, {s15}
 8002c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3e:	4552      	cmp	r2, sl
 8002c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c44:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c48:	ed60 7a01 	vstmdb	r0!, {s15}
 8002c4c:	d1f3      	bne.n	8002c36 <__kernel_rem_pio2f+0x39a>
 8002c4e:	1f0a      	subs	r2, r1, #4
 8002c50:	a846      	add	r0, sp, #280	; 0x118
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	eb00 0702 	add.w	r7, r0, r2
 8002c58:	f04f 0600 	mov.w	r6, #0
 8002c5c:	469c      	mov	ip, r3
 8002c5e:	db20      	blt.n	8002ca2 <__kernel_rem_pio2f+0x406>
 8002c60:	4bab      	ldr	r3, [pc, #684]	; (8002f10 <__kernel_rem_pio2f+0x674>)
 8002c62:	eddf 7aac 	vldr	s15, [pc, #688]	; 8002f14 <__kernel_rem_pio2f+0x678>
 8002c66:	4638      	mov	r0, r7
 8002c68:	2200      	movs	r2, #0
 8002c6a:	e001      	b.n	8002c70 <__kernel_rem_pio2f+0x3d4>
 8002c6c:	42b2      	cmp	r2, r6
 8002c6e:	dc08      	bgt.n	8002c82 <__kernel_rem_pio2f+0x3e6>
 8002c70:	ecf3 6a01 	vldmia	r3!, {s13}
 8002c74:	ecb0 7a01 	vldmia	r0!, {s14}
 8002c78:	3201      	adds	r2, #1
 8002c7a:	4295      	cmp	r5, r2
 8002c7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002c80:	daf4      	bge.n	8002c6c <__kernel_rem_pio2f+0x3d0>
 8002c82:	ab5a      	add	r3, sp, #360	; 0x168
 8002c84:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 8002c88:	42a6      	cmp	r6, r4
 8002c8a:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8002c8e:	ea4f 0086 	mov.w	r0, r6, lsl #2
 8002c92:	f106 0201 	add.w	r2, r6, #1
 8002c96:	f1a7 0704 	sub.w	r7, r7, #4
 8002c9a:	d047      	beq.n	8002d2c <__kernel_rem_pio2f+0x490>
 8002c9c:	2d00      	cmp	r5, #0
 8002c9e:	4616      	mov	r6, r2
 8002ca0:	dade      	bge.n	8002c60 <__kernel_rem_pio2f+0x3c4>
 8002ca2:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8002f14 <__kernel_rem_pio2f+0x678>
 8002ca6:	e7ec      	b.n	8002c82 <__kernel_rem_pio2f+0x3e6>
 8002ca8:	468c      	mov	ip, r1
 8002caa:	e73e      	b.n	8002b2a <__kernel_rem_pio2f+0x28e>
 8002cac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002cb0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	f280 80a2 	bge.w	8002e00 <__kernel_rem_pio2f+0x564>
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	e6b4      	b.n	8002a2a <__kernel_rem_pio2f+0x18e>
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f1bb 0f00 	cmp.w	fp, #0
 8002cc6:	ee09 3a90 	vmov	s19, r3
 8002cca:	bfd8      	it	le
 8002ccc:	2200      	movle	r2, #0
 8002cce:	f73f af15 	bgt.w	8002afc <__kernel_rem_pio2f+0x260>
 8002cd2:	2801      	cmp	r0, #1
 8002cd4:	f47f af47 	bne.w	8002b66 <__kernel_rem_pio2f+0x2ca>
 8002cd8:	f10b 35ff 	add.w	r5, fp, #4294967295
 8002cdc:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8002ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce4:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 8002ce8:	e747      	b.n	8002b7a <__kernel_rem_pio2f+0x2de>
 8002cea:	f10b 0301 	add.w	r3, fp, #1
 8002cee:	469c      	mov	ip, r3
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	e6c1      	b.n	8002a78 <__kernel_rem_pio2f+0x1dc>
 8002cf4:	9902      	ldr	r1, [sp, #8]
 8002cf6:	4670      	mov	r0, lr
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	e72f      	b.n	8002b5c <__kernel_rem_pio2f+0x2c0>
 8002cfc:	f10b 34ff 	add.w	r4, fp, #4294967295
 8002d00:	4688      	mov	r8, r1
 8002d02:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8002d06:	9d01      	ldr	r5, [sp, #4]
 8002d08:	9b07      	ldr	r3, [sp, #28]
 8002d0a:	f1a0 0208 	sub.w	r2, r0, #8
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	f47f af7c 	bne.w	8002c0c <__kernel_rem_pio2f+0x370>
 8002d14:	f10b 4180 	add.w	r1, fp, #1073741824	; 0x40000000
 8002d18:	3901      	subs	r1, #1
 8002d1a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8002d1e:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8002d22:	3c01      	subs	r4, #1
 8002d24:	3a08      	subs	r2, #8
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d0f9      	beq.n	8002d1e <__kernel_rem_pio2f+0x482>
 8002d2a:	e76f      	b.n	8002c0c <__kernel_rem_pio2f+0x370>
 8002d2c:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002d2e:	2a02      	cmp	r2, #2
 8002d30:	4663      	mov	r3, ip
 8002d32:	dc1b      	bgt.n	8002d6c <__kernel_rem_pio2f+0x4d0>
 8002d34:	2a00      	cmp	r2, #0
 8002d36:	dc7a      	bgt.n	8002e2e <__kernel_rem_pio2f+0x592>
 8002d38:	d10f      	bne.n	8002d5a <__kernel_rem_pio2f+0x4be>
 8002d3a:	aa32      	add	r2, sp, #200	; 0xc8
 8002d3c:	eddf 7a75 	vldr	s15, [pc, #468]	; 8002f14 <__kernel_rem_pio2f+0x678>
 8002d40:	4411      	add	r1, r2
 8002d42:	ed31 7a01 	vldmdb	r1!, {s14}
 8002d46:	4291      	cmp	r1, r2
 8002d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d4c:	d1f9      	bne.n	8002d42 <__kernel_rem_pio2f+0x4a6>
 8002d4e:	4642      	mov	r2, r8
 8002d50:	b10a      	cbz	r2, 8002d56 <__kernel_rem_pio2f+0x4ba>
 8002d52:	eef1 7a67 	vneg.f32	s15, s15
 8002d56:	edc3 7a00 	vstr	s15, [r3]
 8002d5a:	ee19 3a90 	vmov	r3, s19
 8002d5e:	f003 0007 	and.w	r0, r3, #7
 8002d62:	b05b      	add	sp, #364	; 0x16c
 8002d64:	ecbd 8b04 	vpop	{d8-d9}
 8002d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d6c:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002d6e:	2a03      	cmp	r2, #3
 8002d70:	d1f3      	bne.n	8002d5a <__kernel_rem_pio2f+0x4be>
 8002d72:	2c00      	cmp	r4, #0
 8002d74:	f000 80bc 	beq.w	8002ef0 <__kernel_rem_pio2f+0x654>
 8002d78:	a932      	add	r1, sp, #200	; 0xc8
 8002d7a:	180d      	adds	r5, r1, r0
 8002d7c:	ed95 7a00 	vldr	s14, [r5]
 8002d80:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8002d84:	00a7      	lsls	r7, r4, #2
 8002d86:	4606      	mov	r6, r0
 8002d88:	ed56 7a01 	vldr	s15, [r6, #-4]
 8002d8c:	eef0 6a47 	vmov.f32	s13, s14
 8002d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d94:	4632      	mov	r2, r6
 8002d96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d9a:	3e04      	subs	r6, #4
 8002d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002da0:	42b1      	cmp	r1, r6
 8002da2:	edc2 7a00 	vstr	s15, [r2]
 8002da6:	ed02 7a01 	vstr	s14, [r2, #-4]
 8002daa:	d1ed      	bne.n	8002d88 <__kernel_rem_pio2f+0x4ec>
 8002dac:	2c01      	cmp	r4, #1
 8002dae:	f000 809f 	beq.w	8002ef0 <__kernel_rem_pio2f+0x654>
 8002db2:	ed95 7a00 	vldr	s14, [r5]
 8002db6:	ed70 7a01 	vldmdb	r0!, {s15}
 8002dba:	eef0 6a47 	vmov.f32	s13, s14
 8002dbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc2:	4282      	cmp	r2, r0
 8002dc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dc8:	ed80 7a00 	vstr	s14, [r0]
 8002dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd0:	edc0 7a01 	vstr	s15, [r0, #4]
 8002dd4:	d1ef      	bne.n	8002db6 <__kernel_rem_pio2f+0x51a>
 8002dd6:	1d38      	adds	r0, r7, #4
 8002dd8:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8002f14 <__kernel_rem_pio2f+0x678>
 8002ddc:	4401      	add	r1, r0
 8002dde:	3204      	adds	r2, #4
 8002de0:	ed31 7a01 	vldmdb	r1!, {s14}
 8002de4:	428a      	cmp	r2, r1
 8002de6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dea:	d1f9      	bne.n	8002de0 <__kernel_rem_pio2f+0x544>
 8002dec:	4642      	mov	r2, r8
 8002dee:	2a00      	cmp	r2, #0
 8002df0:	d148      	bne.n	8002e84 <__kernel_rem_pio2f+0x5e8>
 8002df2:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8002df4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8002df6:	6019      	str	r1, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	edc3 7a02 	vstr	s15, [r3, #8]
 8002dfe:	e7ac      	b.n	8002d5a <__kernel_rem_pio2f+0x4be>
 8002e00:	ee19 3a90 	vmov	r3, s19
 8002e04:	f1bb 0f00 	cmp.w	fp, #0
 8002e08:	f103 0301 	add.w	r3, r3, #1
 8002e0c:	ee09 3a90 	vmov	s19, r3
 8002e10:	bfc8      	it	gt
 8002e12:	2102      	movgt	r1, #2
 8002e14:	f73f ae72 	bgt.w	8002afc <__kernel_rem_pio2f+0x260>
 8002e18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002e1c:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8002e20:	2102      	movs	r1, #2
 8002e22:	e602      	b.n	8002a2a <__kernel_rem_pio2f+0x18e>
 8002e24:	2208      	movs	r2, #8
 8002e26:	9206      	str	r2, [sp, #24]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	9203      	str	r2, [sp, #12]
 8002e2c:	e552      	b.n	80028d4 <__kernel_rem_pio2f+0x38>
 8002e2e:	aa32      	add	r2, sp, #200	; 0xc8
 8002e30:	eddf 7a38 	vldr	s15, [pc, #224]	; 8002f14 <__kernel_rem_pio2f+0x678>
 8002e34:	4411      	add	r1, r2
 8002e36:	ed31 7a01 	vldmdb	r1!, {s14}
 8002e3a:	428a      	cmp	r2, r1
 8002e3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e40:	d1f9      	bne.n	8002e36 <__kernel_rem_pio2f+0x59a>
 8002e42:	4642      	mov	r2, r8
 8002e44:	bb7a      	cbnz	r2, 8002ea6 <__kernel_rem_pio2f+0x60a>
 8002e46:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8002e4a:	edc3 7a00 	vstr	s15, [r3]
 8002e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e52:	b164      	cbz	r4, 8002e6e <__kernel_rem_pio2f+0x5d2>
 8002e54:	a933      	add	r1, sp, #204	; 0xcc
 8002e56:	2201      	movs	r2, #1
 8002e58:	ecb1 7a01 	vldmia	r1!, {s14}
 8002e5c:	3201      	adds	r2, #1
 8002e5e:	4294      	cmp	r4, r2
 8002e60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e64:	daf8      	bge.n	8002e58 <__kernel_rem_pio2f+0x5bc>
 8002e66:	4642      	mov	r2, r8
 8002e68:	b10a      	cbz	r2, 8002e6e <__kernel_rem_pio2f+0x5d2>
 8002e6a:	eef1 7a67 	vneg.f32	s15, s15
 8002e6e:	edc3 7a01 	vstr	s15, [r3, #4]
 8002e72:	e772      	b.n	8002d5a <__kernel_rem_pio2f+0x4be>
 8002e74:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002e78:	465c      	mov	r4, fp
 8002e7a:	ee17 1a90 	vmov	r1, s15
 8002e7e:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 8002e82:	e6c3      	b.n	8002c0c <__kernel_rem_pio2f+0x370>
 8002e84:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8002e88:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8002e8c:	eef1 6a66 	vneg.f32	s13, s13
 8002e90:	eeb1 7a47 	vneg.f32	s14, s14
 8002e94:	eef1 7a67 	vneg.f32	s15, s15
 8002e98:	edc3 6a00 	vstr	s13, [r3]
 8002e9c:	ed83 7a01 	vstr	s14, [r3, #4]
 8002ea0:	edc3 7a02 	vstr	s15, [r3, #8]
 8002ea4:	e759      	b.n	8002d5a <__kernel_rem_pio2f+0x4be>
 8002ea6:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8002eaa:	eeb1 7a67 	vneg.f32	s14, s15
 8002eae:	ed83 7a00 	vstr	s14, [r3]
 8002eb2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002eb6:	2c00      	cmp	r4, #0
 8002eb8:	d1cc      	bne.n	8002e54 <__kernel_rem_pio2f+0x5b8>
 8002eba:	e7d6      	b.n	8002e6a <__kernel_rem_pio2f+0x5ce>
 8002ebc:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002ebe:	2a02      	cmp	r2, #2
 8002ec0:	dc12      	bgt.n	8002ee8 <__kernel_rem_pio2f+0x64c>
 8002ec2:	2a00      	cmp	r2, #0
 8002ec4:	dc17      	bgt.n	8002ef6 <__kernel_rem_pio2f+0x65a>
 8002ec6:	f47f af48 	bne.w	8002d5a <__kernel_rem_pio2f+0x4be>
 8002eca:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002f14 <__kernel_rem_pio2f+0x678>
 8002ece:	e73e      	b.n	8002d4e <__kernel_rem_pio2f+0x4b2>
 8002ed0:	9804      	ldr	r0, [sp, #16]
 8002ed2:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8002ed6:	e544      	b.n	8002962 <__kernel_rem_pio2f+0xc6>
 8002ed8:	2902      	cmp	r1, #2
 8002eda:	f47f ada6 	bne.w	8002a2a <__kernel_rem_pio2f+0x18e>
 8002ede:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002ee2:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8002ee6:	e5a0      	b.n	8002a2a <__kernel_rem_pio2f+0x18e>
 8002ee8:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8002eea:	2a03      	cmp	r2, #3
 8002eec:	f47f af35 	bne.w	8002d5a <__kernel_rem_pio2f+0x4be>
 8002ef0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8002f14 <__kernel_rem_pio2f+0x678>
 8002ef4:	e77a      	b.n	8002dec <__kernel_rem_pio2f+0x550>
 8002ef6:	4642      	mov	r2, r8
 8002ef8:	b922      	cbnz	r2, 8002f04 <__kernel_rem_pio2f+0x668>
 8002efa:	2200      	movs	r2, #0
 8002efc:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e7b4      	b.n	8002e6e <__kernel_rem_pio2f+0x5d2>
 8002f04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f08:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e7ac      	b.n	8002e6a <__kernel_rem_pio2f+0x5ce>
 8002f10:	0800356c 	.word	0x0800356c
 8002f14:	00000000 	.word	0x00000000

08002f18 <scalbnf>:
 8002f18:	ee10 3a10 	vmov	r3, s0
 8002f1c:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8002f20:	461a      	mov	r2, r3
 8002f22:	d027      	beq.n	8002f74 <scalbnf+0x5c>
 8002f24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002f28:	d221      	bcs.n	8002f6e <scalbnf+0x56>
 8002f2a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8002f2e:	d122      	bne.n	8002f76 <scalbnf+0x5e>
 8002f30:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8002fe0 <scalbnf+0xc8>
 8002f34:	4a2b      	ldr	r2, [pc, #172]	; (8002fe4 <scalbnf+0xcc>)
 8002f36:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002f3a:	4290      	cmp	r0, r2
 8002f3c:	ee17 3a90 	vmov	r3, s15
 8002f40:	db33      	blt.n	8002faa <scalbnf+0x92>
 8002f42:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8002f46:	f3c3 51c7 	ubfx	r1, r3, #23, #8
 8002f4a:	4560      	cmp	r0, ip
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f1a1 0119 	sub.w	r1, r1, #25
 8002f52:	dd16      	ble.n	8002f82 <scalbnf+0x6a>
 8002f54:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002fe8 <scalbnf+0xd0>
 8002f58:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002fec <scalbnf+0xd4>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	eeb0 7a67 	vmov.f32	s14, s15
 8002f62:	bfb8      	it	lt
 8002f64:	eef0 7a66 	vmovlt.f32	s15, s13
 8002f68:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002f6c:	4770      	bx	lr
 8002f6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002f72:	4770      	bx	lr
 8002f74:	4770      	bx	lr
 8002f76:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8002f7a:	4560      	cmp	r0, ip
 8002f7c:	ea4f 51d1 	mov.w	r1, r1, lsr #23
 8002f80:	dce8      	bgt.n	8002f54 <scalbnf+0x3c>
 8002f82:	4401      	add	r1, r0
 8002f84:	29fe      	cmp	r1, #254	; 0xfe
 8002f86:	dce5      	bgt.n	8002f54 <scalbnf+0x3c>
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	dc15      	bgt.n	8002fb8 <scalbnf+0xa0>
 8002f8c:	f111 0f16 	cmn.w	r1, #22
 8002f90:	db19      	blt.n	8002fc6 <scalbnf+0xae>
 8002f92:	3119      	adds	r1, #25
 8002f94:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002f98:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8002f9c:	ee07 2a90 	vmov	s15, r2
 8002fa0:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002ff0 <scalbnf+0xd8>
 8002fa4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002fa8:	4770      	bx	lr
 8002faa:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002ff4 <scalbnf+0xdc>
 8002fae:	ee07 3a10 	vmov	s14, r3
 8002fb2:	ee27 0a27 	vmul.f32	s0, s14, s15
 8002fb6:	4770      	bx	lr
 8002fb8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002fbc:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8002fc0:	ee00 3a10 	vmov	s0, r3
 8002fc4:	4770      	bx	lr
 8002fc6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002ff4 <scalbnf+0xdc>
 8002fca:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002ff8 <scalbnf+0xe0>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	eeb0 7a67 	vmov.f32	s14, s15
 8002fd4:	bfb8      	it	lt
 8002fd6:	eef0 7a66 	vmovlt.f32	s15, s13
 8002fda:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002fde:	4770      	bx	lr
 8002fe0:	4c000000 	.word	0x4c000000
 8002fe4:	ffff3cb0 	.word	0xffff3cb0
 8002fe8:	7149f2ca 	.word	0x7149f2ca
 8002fec:	f149f2ca 	.word	0xf149f2ca
 8002ff0:	33000000 	.word	0x33000000
 8002ff4:	0da24260 	.word	0x0da24260
 8002ff8:	8da24260 	.word	0x8da24260

08002ffc <floorf>:
 8002ffc:	ee10 2a10 	vmov	r2, s0
 8003000:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003004:	3b7f      	subs	r3, #127	; 0x7f
 8003006:	2b16      	cmp	r3, #22
 8003008:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800300c:	dc29      	bgt.n	8003062 <floorf+0x66>
 800300e:	2b00      	cmp	r3, #0
 8003010:	4610      	mov	r0, r2
 8003012:	db18      	blt.n	8003046 <floorf+0x4a>
 8003014:	491a      	ldr	r1, [pc, #104]	; (8003080 <floorf+0x84>)
 8003016:	4119      	asrs	r1, r3
 8003018:	420a      	tst	r2, r1
 800301a:	d021      	beq.n	8003060 <floorf+0x64>
 800301c:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003084 <floorf+0x88>
 8003020:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	dd18      	ble.n	8003060 <floorf+0x64>
 800302e:	2a00      	cmp	r2, #0
 8003030:	da04      	bge.n	800303c <floorf+0x40>
 8003032:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003036:	fa42 f303 	asr.w	r3, r2, r3
 800303a:	4418      	add	r0, r3
 800303c:	ea20 0301 	bic.w	r3, r0, r1
 8003040:	ee00 3a10 	vmov	s0, r3
 8003044:	4770      	bx	lr
 8003046:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003084 <floorf+0x88>
 800304a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800304e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	dd03      	ble.n	8003060 <floorf+0x64>
 8003058:	2a00      	cmp	r2, #0
 800305a:	db08      	blt.n	800306e <floorf+0x72>
 800305c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003088 <floorf+0x8c>
 8003060:	4770      	bx	lr
 8003062:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003066:	d3fb      	bcc.n	8003060 <floorf+0x64>
 8003068:	ee30 0a00 	vadd.f32	s0, s0, s0
 800306c:	4770      	bx	lr
 800306e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800308c <floorf+0x90>
 8003072:	2900      	cmp	r1, #0
 8003074:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003078:	bf08      	it	eq
 800307a:	eeb0 0a67 	vmoveq.f32	s0, s15
 800307e:	4770      	bx	lr
 8003080:	007fffff 	.word	0x007fffff
 8003084:	7149f2ca 	.word	0x7149f2ca
 8003088:	00000000 	.word	0x00000000
 800308c:	80000000 	.word	0x80000000

08003090 <__aeabi_f2lz>:
 8003090:	ee07 0a90 	vmov	s15, r0
 8003094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309c:	d401      	bmi.n	80030a2 <__aeabi_f2lz+0x12>
 800309e:	f000 b80b 	b.w	80030b8 <__aeabi_f2ulz>
 80030a2:	eef1 7a67 	vneg.f32	s15, s15
 80030a6:	b508      	push	{r3, lr}
 80030a8:	ee17 0a90 	vmov	r0, s15
 80030ac:	f000 f804 	bl	80030b8 <__aeabi_f2ulz>
 80030b0:	4240      	negs	r0, r0
 80030b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80030b6:	bd08      	pop	{r3, pc}

080030b8 <__aeabi_f2ulz>:
 80030b8:	b5d0      	push	{r4, r6, r7, lr}
 80030ba:	f7fd f9f1 	bl	80004a0 <__aeabi_f2d>
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <__aeabi_f2ulz+0x38>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	4606      	mov	r6, r0
 80030c4:	460f      	mov	r7, r1
 80030c6:	f7fd fba1 	bl	800080c <__aeabi_dmul>
 80030ca:	f7fd fcc9 	bl	8000a60 <__aeabi_d2uiz>
 80030ce:	4604      	mov	r4, r0
 80030d0:	f7fd f9c4 	bl	800045c <__aeabi_ui2d>
 80030d4:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <__aeabi_f2ulz+0x3c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	f7fd fb98 	bl	800080c <__aeabi_dmul>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4630      	mov	r0, r6
 80030e2:	4639      	mov	r1, r7
 80030e4:	f7fd f87c 	bl	80001e0 <__aeabi_dsub>
 80030e8:	f7fd fcba 	bl	8000a60 <__aeabi_d2uiz>
 80030ec:	4621      	mov	r1, r4
 80030ee:	bdd0      	pop	{r4, r6, r7, pc}
 80030f0:	3df00000 	.word	0x3df00000
 80030f4:	41f00000 	.word	0x41f00000
