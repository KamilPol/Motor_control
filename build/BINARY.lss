
build/BINARY.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_frsub>:
 80005f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	e002      	b.n	80005fc <__addsf3>
 80005f6:	bf00      	nop

080005f8 <__aeabi_fsub>:
 80005f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005fc <__addsf3>:
 80005fc:	0042      	lsls	r2, r0, #1
 80005fe:	bf1f      	itttt	ne
 8000600:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000604:	ea92 0f03 	teqne	r2, r3
 8000608:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800060c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000610:	d06a      	beq.n	80006e8 <__addsf3+0xec>
 8000612:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000616:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800061a:	bfc1      	itttt	gt
 800061c:	18d2      	addgt	r2, r2, r3
 800061e:	4041      	eorgt	r1, r0
 8000620:	4048      	eorgt	r0, r1
 8000622:	4041      	eorgt	r1, r0
 8000624:	bfb8      	it	lt
 8000626:	425b      	neglt	r3, r3
 8000628:	2b19      	cmp	r3, #25
 800062a:	bf88      	it	hi
 800062c:	4770      	bxhi	lr
 800062e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000636:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000642:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000646:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800064a:	bf18      	it	ne
 800064c:	4249      	negne	r1, r1
 800064e:	ea92 0f03 	teq	r2, r3
 8000652:	d03f      	beq.n	80006d4 <__addsf3+0xd8>
 8000654:	f1a2 0201 	sub.w	r2, r2, #1
 8000658:	fa41 fc03 	asr.w	ip, r1, r3
 800065c:	eb10 000c 	adds.w	r0, r0, ip
 8000660:	f1c3 0320 	rsb	r3, r3, #32
 8000664:	fa01 f103 	lsl.w	r1, r1, r3
 8000668:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800066c:	d502      	bpl.n	8000674 <__addsf3+0x78>
 800066e:	4249      	negs	r1, r1
 8000670:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000674:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000678:	d313      	bcc.n	80006a2 <__addsf3+0xa6>
 800067a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800067e:	d306      	bcc.n	800068e <__addsf3+0x92>
 8000680:	0840      	lsrs	r0, r0, #1
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	f102 0201 	add.w	r2, r2, #1
 800068a:	2afe      	cmp	r2, #254	; 0xfe
 800068c:	d251      	bcs.n	8000732 <__addsf3+0x136>
 800068e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000692:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000696:	bf08      	it	eq
 8000698:	f020 0001 	biceq.w	r0, r0, #1
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	4770      	bx	lr
 80006a2:	0049      	lsls	r1, r1, #1
 80006a4:	eb40 0000 	adc.w	r0, r0, r0
 80006a8:	3a01      	subs	r2, #1
 80006aa:	bf28      	it	cs
 80006ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006b0:	d2ed      	bcs.n	800068e <__addsf3+0x92>
 80006b2:	fab0 fc80 	clz	ip, r0
 80006b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80006ba:	ebb2 020c 	subs.w	r2, r2, ip
 80006be:	fa00 f00c 	lsl.w	r0, r0, ip
 80006c2:	bfaa      	itet	ge
 80006c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006c8:	4252      	neglt	r2, r2
 80006ca:	4318      	orrge	r0, r3
 80006cc:	bfbc      	itt	lt
 80006ce:	40d0      	lsrlt	r0, r2
 80006d0:	4318      	orrlt	r0, r3
 80006d2:	4770      	bx	lr
 80006d4:	f092 0f00 	teq	r2, #0
 80006d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006dc:	bf06      	itte	eq
 80006de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006e2:	3201      	addeq	r2, #1
 80006e4:	3b01      	subne	r3, #1
 80006e6:	e7b5      	b.n	8000654 <__addsf3+0x58>
 80006e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f0:	bf18      	it	ne
 80006f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f6:	d021      	beq.n	800073c <__addsf3+0x140>
 80006f8:	ea92 0f03 	teq	r2, r3
 80006fc:	d004      	beq.n	8000708 <__addsf3+0x10c>
 80006fe:	f092 0f00 	teq	r2, #0
 8000702:	bf08      	it	eq
 8000704:	4608      	moveq	r0, r1
 8000706:	4770      	bx	lr
 8000708:	ea90 0f01 	teq	r0, r1
 800070c:	bf1c      	itt	ne
 800070e:	2000      	movne	r0, #0
 8000710:	4770      	bxne	lr
 8000712:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000716:	d104      	bne.n	8000722 <__addsf3+0x126>
 8000718:	0040      	lsls	r0, r0, #1
 800071a:	bf28      	it	cs
 800071c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000720:	4770      	bx	lr
 8000722:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000726:	bf3c      	itt	cc
 8000728:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800072c:	4770      	bxcc	lr
 800072e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000732:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000736:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800073a:	4770      	bx	lr
 800073c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000740:	bf16      	itet	ne
 8000742:	4608      	movne	r0, r1
 8000744:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000748:	4601      	movne	r1, r0
 800074a:	0242      	lsls	r2, r0, #9
 800074c:	bf06      	itte	eq
 800074e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000752:	ea90 0f01 	teqeq	r0, r1
 8000756:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800075a:	4770      	bx	lr

0800075c <__aeabi_ui2f>:
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	e004      	b.n	800076c <__aeabi_i2f+0x8>
 8000762:	bf00      	nop

08000764 <__aeabi_i2f>:
 8000764:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000768:	bf48      	it	mi
 800076a:	4240      	negmi	r0, r0
 800076c:	ea5f 0c00 	movs.w	ip, r0
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000778:	4601      	mov	r1, r0
 800077a:	f04f 0000 	mov.w	r0, #0
 800077e:	e01c      	b.n	80007ba <__aeabi_l2f+0x2a>

08000780 <__aeabi_ul2f>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	f04f 0300 	mov.w	r3, #0
 800078c:	e00a      	b.n	80007a4 <__aeabi_l2f+0x14>
 800078e:	bf00      	nop

08000790 <__aeabi_l2f>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800079c:	d502      	bpl.n	80007a4 <__aeabi_l2f+0x14>
 800079e:	4240      	negs	r0, r0
 80007a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a4:	ea5f 0c01 	movs.w	ip, r1
 80007a8:	bf02      	ittt	eq
 80007aa:	4684      	moveq	ip, r0
 80007ac:	4601      	moveq	r1, r0
 80007ae:	2000      	moveq	r0, #0
 80007b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007b4:	bf08      	it	eq
 80007b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007be:	fabc f28c 	clz	r2, ip
 80007c2:	3a08      	subs	r2, #8
 80007c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007c8:	db10      	blt.n	80007ec <__aeabi_l2f+0x5c>
 80007ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ce:	4463      	add	r3, ip
 80007d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80007d4:	f1c2 0220 	rsb	r2, r2, #32
 80007d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007dc:	fa20 f202 	lsr.w	r2, r0, r2
 80007e0:	eb43 0002 	adc.w	r0, r3, r2
 80007e4:	bf08      	it	eq
 80007e6:	f020 0001 	biceq.w	r0, r0, #1
 80007ea:	4770      	bx	lr
 80007ec:	f102 0220 	add.w	r2, r2, #32
 80007f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80007f4:	f1c2 0220 	rsb	r2, r2, #32
 80007f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000800:	eb43 0002 	adc.w	r0, r3, r2
 8000804:	bf08      	it	eq
 8000806:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800080a:	4770      	bx	lr

0800080c <__aeabi_dmul>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8de 	bleq	80009e8 <__aeabi_dmul+0x1dc>
 800082c:	442c      	add	r4, r5
 800082e:	ea81 0603 	eor.w	r6, r1, r3
 8000832:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000836:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800083a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800083e:	bf18      	it	ne
 8000840:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800084c:	d038      	beq.n	80008c0 <__aeabi_dmul+0xb4>
 800084e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000852:	f04f 0500 	mov.w	r5, #0
 8000856:	fbe1 e502 	umlal	lr, r5, r1, r2
 800085a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800085e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000862:	f04f 0600 	mov.w	r6, #0
 8000866:	fbe1 5603 	umlal	r5, r6, r1, r3
 800086a:	f09c 0f00 	teq	ip, #0
 800086e:	bf18      	it	ne
 8000870:	f04e 0e01 	orrne.w	lr, lr, #1
 8000874:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000878:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800087c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000880:	d204      	bcs.n	800088c <__aeabi_dmul+0x80>
 8000882:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000886:	416d      	adcs	r5, r5
 8000888:	eb46 0606 	adc.w	r6, r6, r6
 800088c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000890:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000894:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000898:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800089c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008a4:	bf88      	it	hi
 80008a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008aa:	d81e      	bhi.n	80008ea <__aeabi_dmul+0xde>
 80008ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008b0:	bf08      	it	eq
 80008b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008b6:	f150 0000 	adcs.w	r0, r0, #0
 80008ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008be:	bd70      	pop	{r4, r5, r6, pc}
 80008c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008c4:	ea46 0101 	orr.w	r1, r6, r1
 80008c8:	ea40 0002 	orr.w	r0, r0, r2
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008d4:	bfc2      	ittt	gt
 80008d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008de:	bd70      	popgt	{r4, r5, r6, pc}
 80008e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008e4:	f04f 0e00 	mov.w	lr, #0
 80008e8:	3c01      	subs	r4, #1
 80008ea:	f300 80ab 	bgt.w	8000a44 <__aeabi_dmul+0x238>
 80008ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80008f2:	bfde      	ittt	le
 80008f4:	2000      	movle	r0, #0
 80008f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80008fa:	bd70      	pople	{r4, r5, r6, pc}
 80008fc:	f1c4 0400 	rsb	r4, r4, #0
 8000900:	3c20      	subs	r4, #32
 8000902:	da35      	bge.n	8000970 <__aeabi_dmul+0x164>
 8000904:	340c      	adds	r4, #12
 8000906:	dc1b      	bgt.n	8000940 <__aeabi_dmul+0x134>
 8000908:	f104 0414 	add.w	r4, r4, #20
 800090c:	f1c4 0520 	rsb	r5, r4, #32
 8000910:	fa00 f305 	lsl.w	r3, r0, r5
 8000914:	fa20 f004 	lsr.w	r0, r0, r4
 8000918:	fa01 f205 	lsl.w	r2, r1, r5
 800091c:	ea40 0002 	orr.w	r0, r0, r2
 8000920:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000924:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000928:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800092c:	fa21 f604 	lsr.w	r6, r1, r4
 8000930:	eb42 0106 	adc.w	r1, r2, r6
 8000934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000938:	bf08      	it	eq
 800093a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f1c4 040c 	rsb	r4, r4, #12
 8000944:	f1c4 0520 	rsb	r5, r4, #32
 8000948:	fa00 f304 	lsl.w	r3, r0, r4
 800094c:	fa20 f005 	lsr.w	r0, r0, r5
 8000950:	fa01 f204 	lsl.w	r2, r1, r4
 8000954:	ea40 0002 	orr.w	r0, r0, r2
 8000958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800095c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000960:	f141 0100 	adc.w	r1, r1, #0
 8000964:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000968:	bf08      	it	eq
 800096a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	f1c4 0520 	rsb	r5, r4, #32
 8000974:	fa00 f205 	lsl.w	r2, r0, r5
 8000978:	ea4e 0e02 	orr.w	lr, lr, r2
 800097c:	fa20 f304 	lsr.w	r3, r0, r4
 8000980:	fa01 f205 	lsl.w	r2, r1, r5
 8000984:	ea43 0302 	orr.w	r3, r3, r2
 8000988:	fa21 f004 	lsr.w	r0, r1, r4
 800098c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000990:	fa21 f204 	lsr.w	r2, r1, r4
 8000994:	ea20 0002 	bic.w	r0, r0, r2
 8000998:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800099c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a0:	bf08      	it	eq
 80009a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f094 0f00 	teq	r4, #0
 80009ac:	d10f      	bne.n	80009ce <__aeabi_dmul+0x1c2>
 80009ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009b2:	0040      	lsls	r0, r0, #1
 80009b4:	eb41 0101 	adc.w	r1, r1, r1
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf08      	it	eq
 80009be:	3c01      	subeq	r4, #1
 80009c0:	d0f7      	beq.n	80009b2 <__aeabi_dmul+0x1a6>
 80009c2:	ea41 0106 	orr.w	r1, r1, r6
 80009c6:	f095 0f00 	teq	r5, #0
 80009ca:	bf18      	it	ne
 80009cc:	4770      	bxne	lr
 80009ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009d2:	0052      	lsls	r2, r2, #1
 80009d4:	eb43 0303 	adc.w	r3, r3, r3
 80009d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009dc:	bf08      	it	eq
 80009de:	3d01      	subeq	r5, #1
 80009e0:	d0f7      	beq.n	80009d2 <__aeabi_dmul+0x1c6>
 80009e2:	ea43 0306 	orr.w	r3, r3, r6
 80009e6:	4770      	bx	lr
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f0:	bf18      	it	ne
 80009f2:	ea95 0f0c 	teqne	r5, ip
 80009f6:	d00c      	beq.n	8000a12 <__aeabi_dmul+0x206>
 80009f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009fc:	bf18      	it	ne
 80009fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a02:	d1d1      	bne.n	80009a8 <__aeabi_dmul+0x19c>
 8000a04:	ea81 0103 	eor.w	r1, r1, r3
 8000a08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	bd70      	pop	{r4, r5, r6, pc}
 8000a12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a16:	bf06      	itte	eq
 8000a18:	4610      	moveq	r0, r2
 8000a1a:	4619      	moveq	r1, r3
 8000a1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a20:	d019      	beq.n	8000a56 <__aeabi_dmul+0x24a>
 8000a22:	ea94 0f0c 	teq	r4, ip
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dmul+0x222>
 8000a28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a2c:	d113      	bne.n	8000a56 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	d105      	bne.n	8000a40 <__aeabi_dmul+0x234>
 8000a34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a38:	bf1c      	itt	ne
 8000a3a:	4610      	movne	r0, r2
 8000a3c:	4619      	movne	r1, r3
 8000a3e:	d10a      	bne.n	8000a56 <__aeabi_dmul+0x24a>
 8000a40:	ea81 0103 	eor.w	r1, r1, r3
 8000a44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
 8000a56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}

08000a60 <__aeabi_d2uiz>:
 8000a60:	004a      	lsls	r2, r1, #1
 8000a62:	d211      	bcs.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d211      	bcs.n	8000a8e <__aeabi_d2uiz+0x2e>
 8000a6a:	d50d      	bpl.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d40e      	bmi.n	8000a94 <__aeabi_d2uiz+0x34>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_d2uiz+0x3a>
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0000 	mov.w	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <__NVIC_EnableIRQ.lto_priv.0>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0c      	blt.n	8000aca <__NVIC_EnableIRQ.lto_priv.0+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4905      	ldr	r1, [pc, #20]	; (8000ad0 <__NVIC_EnableIRQ.lto_priv.0+0x30>)
 8000aba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aca:	bf00      	nop
 8000acc:	b002      	add	sp, #8
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000ad4:	b500      	push	{lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000adc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000ae0:	f002 fa8e 	bl	8003000 <cosf>
 8000ae4:	eef0 7a40 	vmov.f32	s15, s0
 8000ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8000aec:	b003      	add	sp, #12
 8000aee:	f85d fb04 	ldr.w	pc, [sp], #4

08000af2 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000af2:	b500      	push	{lr}
 8000af4:	b083      	sub	sp, #12
 8000af6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000afa:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000afe:	f002 fab7 	bl	8003070 <sinf>
 8000b02:	eef0 7a40 	vmov.f32	s15, s0
 8000b06:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0a:	b003      	add	sp, #12
 8000b0c:	f85d fb04 	ldr.w	pc, [sp], #4

08000b10 <_ZL18getAutoReloadValueP5pwm_t>:
    uint32_t autoReloadValue;
    uint32_t halfAutoReloadValue;
}pwm_t;

static inline void getAutoReloadValue (pwm_t* pwm)
{
 8000b10:	b082      	sub	sp, #8
 8000b12:	9001      	str	r0, [sp, #4]
    pwm->autoReloadValue = pwm->tim->ARR;
 8000b14:	9b01      	ldr	r3, [sp, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b1a:	9b01      	ldr	r3, [sp, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
    pwm->halfAutoReloadValue = pwm->autoReloadValue/2;
 8000b1e:	9b01      	ldr	r3, [sp, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	085a      	lsrs	r2, r3, #1
 8000b24:	9b01      	ldr	r3, [sp, #4]
 8000b26:	60da      	str	r2, [r3, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	b002      	add	sp, #8
 8000b2c:	4770      	bx	lr
	...

08000b30 <_ZL8pwm_initP5pwm_t>:

static inline void pwm_init (pwm_t* pwm)
{
 8000b30:	b500      	push	{lr}
 8000b32:	b083      	sub	sp, #12
 8000b34:	9001      	str	r0, [sp, #4]
    //NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;  
 8000b36:	4b51      	ldr	r3, [pc, #324]	; (8000c7c <_ZL8pwm_initP5pwm_t+0x14c>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3a:	4a50      	ldr	r2, [pc, #320]	; (8000c7c <_ZL8pwm_initP5pwm_t+0x14c>)
 8000b3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b40:	6613      	str	r3, [r2, #96]	; 0x60
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC1PE ; // PWM mode 1 channel 1
 8000b42:	9b01      	ldr	r3, [sp, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	9b01      	ldr	r3, [sp, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8000b50:	619a      	str	r2, [r3, #24]
	pwm->tim->CCMR1 |= 0b110<< TIM_CCMR1_OC2M_Pos | TIM_CCMR1_OC2PE ; // PWM mode 1 channel 2
 8000b52:	9b01      	ldr	r3, [sp, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	699a      	ldr	r2, [r3, #24]
 8000b58:	9b01      	ldr	r3, [sp, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f442 42d0 	orr.w	r2, r2, #26624	; 0x6800
 8000b60:	619a      	str	r2, [r3, #24]
	pwm->tim->CCMR2 |= 0b110<< TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC3PE ; // PWM mode 1 channel 3
 8000b62:	9b01      	ldr	r3, [sp, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	69da      	ldr	r2, [r3, #28]
 8000b68:	9b01      	ldr	r3, [sp, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8000b70:	61da      	str	r2, [r3, #28]
	pwm->tim->CCMR2 |= 0b0110<< TIM_CCMR2_OC4M_Pos;
 8000b72:	9b01      	ldr	r3, [sp, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	69da      	ldr	r2, [r3, #28]
 8000b78:	9b01      	ldr	r3, [sp, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000b80:	61da      	str	r2, [r3, #28]
	pwm->tim->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
 8000b82:	9b01      	ldr	r3, [sp, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	6a1a      	ldr	r2, [r3, #32]
 8000b88:	9b01      	ldr	r3, [sp, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0205 	orr.w	r2, r2, #5
 8000b90:	621a      	str	r2, [r3, #32]
	pwm->tim->CCER |= TIM_CCER_CC2E | TIM_CCER_CC2NE;
 8000b92:	9b01      	ldr	r3, [sp, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	6a1a      	ldr	r2, [r3, #32]
 8000b98:	9b01      	ldr	r3, [sp, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8000ba0:	621a      	str	r2, [r3, #32]
	pwm->tim->CCER |= TIM_CCER_CC3E | TIM_CCER_CC3NE;
 8000ba2:	9b01      	ldr	r3, [sp, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6a1a      	ldr	r2, [r3, #32]
 8000ba8:	9b01      	ldr	r3, [sp, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8000bb0:	621a      	str	r2, [r3, #32]
	//TIM1->CR2 |= 0b010<<TIM_CR2_MMS_Pos;   // Set TRGO on Update Event
	pwm->tim->PSC = 0;  // tim_clk = cpu_clk
 8000bb2:	9b01      	ldr	r3, [sp, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
    (160000000/pwm->frequency/2<=0xFFFF) ? (pwm->tim->ARR = 160000000/pwm->frequency/2) : (pwm->tim->ARR = 0xFFFF);
 8000bba:	9b01      	ldr	r3, [sp, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	4a30      	ldr	r2, [pc, #192]	; (8000c80 <_ZL8pwm_initP5pwm_t+0x150>)
 8000bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc8:	d208      	bcs.n	8000bdc <_ZL8pwm_initP5pwm_t+0xac>
 8000bca:	9b01      	ldr	r3, [sp, #4]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	9b01      	ldr	r3, [sp, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	492b      	ldr	r1, [pc, #172]	; (8000c80 <_ZL8pwm_initP5pwm_t+0x150>)
 8000bd4:	fbb1 f2f2 	udiv	r2, r1, r2
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bda:	e004      	b.n	8000be6 <_ZL8pwm_initP5pwm_t+0xb6>
 8000bdc:	9b01      	ldr	r3, [sp, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->tim->CCR1 = 0;
 8000be6:	9b01      	ldr	r3, [sp, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->tim->CCR2 = 0;
 8000bee:	9b01      	ldr	r3, [sp, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->tim->CCR3 = 0;
 8000bf6:	9b01      	ldr	r3, [sp, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	; 0x3c
	pwm->tim->CCR4 = 0;
 8000bfe:	9b01      	ldr	r3, [sp, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2200      	movs	r2, #0
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
	pwm->tim ->DIER |=  TIM_DIER_UIE; // interrupt enable
 8000c06:	9b01      	ldr	r3, [sp, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	9b01      	ldr	r3, [sp, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f042 0201 	orr.w	r2, r2, #1
 8000c14:	60da      	str	r2, [r3, #12]
	pwm->tim->CR2 = 0b0111<<TIM_CR2_MMS_Pos;   // Set TRGO on Compare 4
 8000c16:	9b01      	ldr	r3, [sp, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2270      	movs	r2, #112	; 0x70
 8000c1c:	605a      	str	r2, [r3, #4]
	pwm->tim->CR1 |= TIM_CR1_ARPE | 0b01<<TIM_CR1_CMS_Pos;
 8000c1e:	9b01      	ldr	r3, [sp, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	9b01      	ldr	r3, [sp, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8000c2c:	601a      	str	r2, [r3, #0]
	pwm->tim->EGR |= TIM_EGR_UG;
 8000c2e:	9b01      	ldr	r3, [sp, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	695a      	ldr	r2, [r3, #20]
 8000c34:	9b01      	ldr	r3, [sp, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f042 0201 	orr.w	r2, r2, #1
 8000c3c:	615a      	str	r2, [r3, #20]
	pwm->tim->BDTR |= TIM_BDTR_MOE | 0b00100000<<TIM_BDTR_DTG_Pos;
 8000c3e:	9b01      	ldr	r3, [sp, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c44:	9a01      	ldr	r2, [sp, #4]
 8000c46:	6812      	ldr	r2, [r2, #0]
 8000c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c4c:	f043 0320 	orr.w	r3, r3, #32
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
	pwm->tim->CR1 |= TIM_CR1_CEN;
 8000c52:	9b01      	ldr	r3, [sp, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	9b01      	ldr	r3, [sp, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f042 0201 	orr.w	r2, r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

    getAutoReloadValue (pwm);
 8000c62:	9801      	ldr	r0, [sp, #4]
 8000c64:	f7ff ff54 	bl	8000b10 <_ZL18getAutoReloadValueP5pwm_t>
	pwm->tim->CCR4= pwm->halfAutoReloadValue;
 8000c68:	9b01      	ldr	r3, [sp, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	9a01      	ldr	r2, [sp, #4]
 8000c6e:	68d2      	ldr	r2, [r2, #12]
 8000c70:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c72:	bf00      	nop
 8000c74:	b003      	add	sp, #12
 8000c76:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	04c4b400 	.word	0x04c4b400

08000c84 <_ZL16pwm_set3Phase_puP5pwm_tPf>:

static inline void pwm_set3Phase_pu(pwm_t* pwm, float* duty3P_pu) //-1 to 1 corresponds to 0 to 100% duty cycle
{
 8000c84:	b082      	sub	sp, #8
 8000c86:	9001      	str	r0, [sp, #4]
 8000c88:	9100      	str	r1, [sp, #0]
    pwm->tim->CCR1 = pwm->halfAutoReloadValue * duty3P_pu[1] + pwm->halfAutoReloadValue;
 8000c8a:	9b00      	ldr	r3, [sp, #0]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	edd3 7a00 	vldr	s15, [r3]
 8000c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c9a:	9b01      	ldr	r3, [sp, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000caa:	9b01      	ldr	r3, [sp, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cb2:	ee17 2a90 	vmov	r2, s15
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->tim->CCR2 = pwm->halfAutoReloadValue * duty3P_pu[0] + pwm->halfAutoReloadValue;
 8000cb8:	9b00      	ldr	r3, [sp, #0]
 8000cba:	edd3 7a00 	vldr	s15, [r3]
 8000cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000cc6:	9b01      	ldr	r3, [sp, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	ee07 3a90 	vmov	s15, r3
 8000cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd6:	9b01      	ldr	r3, [sp, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cde:	ee17 2a90 	vmov	r2, s15
 8000ce2:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->tim->CCR3 = pwm->halfAutoReloadValue * duty3P_pu[2] + pwm->halfAutoReloadValue;
 8000ce4:	9b00      	ldr	r3, [sp, #0]
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	edd3 7a00 	vldr	s15, [r3]
 8000cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000cf4:	9b01      	ldr	r3, [sp, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	ee07 3a90 	vmov	s15, r3
 8000cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d04:	9b01      	ldr	r3, [sp, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d0c:	ee17 2a90 	vmov	r2, s15
 8000d10:	63da      	str	r2, [r3, #60]	; 0x3c
	
    // uint32_t Ua = Ualpha + 500;
	// uint32_t Ub = -0.5f * Ualpha  + M_SQRT3_2 * Ubeta + 500;
	// uint32_t Uc = -0.5f * Ualpha - M_SQRT3_2 * Ubeta + 500;
}
 8000d12:	bf00      	nop
 8000d14:	b002      	add	sp, #8
 8000d16:	4770      	bx	lr

08000d18 <_Z4Initv>:


 

void Init()
{ 
 8000d18:	b500      	push	{lr}
 8000d1a:	b083      	sub	sp, #12
	ClockManager::hseInit();
 8000d1c:	f001 f95c 	bl	8001fd8 <_ZN12ClockManager7hseInitEv>
	ClockManager::pllCfg(1, 320000000, 2, ClockManager::pllDiv::div2, ClockManager::pllDiv::div2); //160 MHz clock
 8000d20:	2300      	movs	r3, #0
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2300      	movs	r3, #0
 8000d26:	2202      	movs	r2, #2
 8000d28:	498c      	ldr	r1, [pc, #560]	; (8000f5c <_Z4Initv+0x244>)
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f001 fa5a 	bl	80021e4 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_>
	ClockManager::setSysClk(clkSrc::pll);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f001 fa03 	bl	800213c <_ZN12ClockManager9setSysClkE6clkSrc>
	//ClockManager::clockSummary();
	ClockManager::initTick();
 8000d36:	f001 fb6b 	bl	8002410 <_ZN12ClockManager8initTickEv>
	

	

	// Speed calculation time base timer
	NVIC_EnableIRQ(TIM2_IRQn);
 8000d3a:	201c      	movs	r0, #28
 8000d3c:	f7ff feb0 	bl	8000aa0 <__NVIC_EnableIRQ.lto_priv.0>
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; 
 8000d40:	4b87      	ldr	r3, [pc, #540]	; (8000f60 <_Z4Initv+0x248>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d44:	4a86      	ldr	r2, [pc, #536]	; (8000f60 <_Z4Initv+0x248>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6593      	str	r3, [r2, #88]	; 0x58
	//RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; 
	TIM2->PSC = 15; // 160000000/16 = 10000000 Hz
 8000d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d50:	220f      	movs	r2, #15
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 4999; // 10000000/99999 = 100 Hz
 8000d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d58:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 10;
 8000d5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d62:	220a      	movs	r2, #10
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2 -> DIER |= TIM_DIER_UIE; // update interrupt enable
 8000d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	60d3      	str	r3, [r2, #12]
	TIM2->CR1  |= TIM_CR1_ARPE;
 8000d76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d84:	6013      	str	r3, [r2, #0]
	TIM2->CR1  |= TIM_CR1_CEN;	
 8000d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6013      	str	r3, [r2, #0]
	// TIM1->BDTR |= TIM_BDTR_MOE | 0b00100000<<TIM_BDTR_DTG_Pos;
	// TIM1->CR1  |= TIM_CR1_CEN;
	

  
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 8000d96:	4b72      	ldr	r3, [pc, #456]	; (8000f60 <_Z4Initv+0x248>)
 8000d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9a:	4a71      	ldr	r2, [pc, #452]	; (8000f60 <_Z4Initv+0x248>)
 8000d9c:	f043 0305 	orr.w	r3, r3, #5
 8000da0:	6493      	str	r3, [r2, #72]	; 0x48
	// DMA1_Channel4->CNDTR = (sizeof(sineLookUp3)/sizeof(sineLookUp3 [0]));
	// DMA1_Channel4->CCR |= DMA_CCR_EN;

	// ADC1 configuration
	//NVIC_EnableIRQ(ADC1_2_IRQn);
	RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;	
 8000da2:	4b6f      	ldr	r3, [pc, #444]	; (8000f60 <_Z4Initv+0x248>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a6e      	ldr	r2, [pc, #440]	; (8000f60 <_Z4Initv+0x248>)
 8000da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC12_COMMON->CCR |= (0b11 << ADC_CCR_CKMODE_Pos | ADC_CCR_VREFEN);	// Set ADC clock to HCLK/2 and enable VREFINT
 8000dae:	4b6d      	ldr	r3, [pc, #436]	; (8000f64 <_Z4Initv+0x24c>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	4a6c      	ldr	r2, [pc, #432]	; (8000f64 <_Z4Initv+0x24c>)
 8000db4:	f443 0386 	orr.w	r3, r3, #4390912	; 0x430000
 8000db8:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADSTP;
 8000dba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	6093      	str	r3, [r2, #8]
	while((ADC1->ISR & ADC_ISR_ADRDY));	
 8000dca:	bf00      	nop
 8000dcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bf14      	ite	ne
 8000dda:	2301      	movne	r3, #1
 8000ddc:	2300      	moveq	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f3      	bne.n	8000dcc <_Z4Initv+0xb4>
	ADC1->CR =0;
 8000de4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
	ADC1->CFGR = ADC_CFGR_OVRMOD | 1<<ADC_CFGR_EXTEN_Pos | 0b01001<<ADC_CFGR_EXTSEL_Pos | ADC_CFGR_DMAEN | ADC_CFGR_DMACFG; // Set overrun mode, external trigger rising edge, TIM1_TRGO as trigger, DMA enable, DMA circular mode
 8000dec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000df0:	f241 5223 	movw	r2, #5411	; 0x1523
 8000df4:	60da      	str	r2, [r3, #12]
	ADC1->CR |= ADC_CR_ADVREGEN;	
 8000df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADCAL;
 8000e06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e14:	6093      	str	r3, [r2, #8]
	while(ADC1->CR & ADC_CR_ADCAL);
 8000e16:	bf00      	nop
 8000e18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	0fdb      	lsrs	r3, r3, #31
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f8      	bne.n	8000e18 <_Z4Initv+0x100>
	
	ADC1->SQR1 |= 0b10<<ADC_SQR1_L_Pos; // 3 ADC1 conversions
 8000e26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |= 1<<ADC_SQR1_SQ1_Pos | 8<<ADC_SQR1_SQ2_Pos | 9<<ADC_SQR1_SQ3_Pos; // First conversion - channel 14. Second conversion - channel 2.
 8000e36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e40:	f443 1312 	orr.w	r3, r3, #2392064	; 0x248000
 8000e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
	//ADC1->IER |= ADC_IER_EOSIE;
	ADC1->CR |= ADC_CR_ADEN;
 8000e4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6093      	str	r3, [r2, #8]
	while(!(ADC1->ISR & ADC_ISR_ADRDY));
 8000e5a:	bf00      	nop
 8000e5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	bf0c      	ite	eq
 8000e6a:	2301      	moveq	r3, #1
 8000e6c:	2300      	movne	r3, #0
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f3      	bne.n	8000e5c <_Z4Initv+0x144>
	ADC1->CR |= ADC_CR_ADSTART;
 8000e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e84:	200f      	movs	r0, #15
 8000e86:	f7ff fe0b 	bl	8000aa0 <__NVIC_EnableIRQ.lto_priv.0>
	DMAMUX1_Channel4->CCR = 5;
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <_Z4Initv+0x250>)
 8000e8c:	2205      	movs	r2, #5
 8000e8e:	601a      	str	r2, [r3, #0]
	DMA1_Channel5-> CCR = 0b1<<DMA_CCR_MSIZE_Pos | 0b10<<DMA_CCR_PSIZE_Pos | DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_TCIE; // 16 bit memory size, 32 bit peripheral size, memory increment mode, circular mode, transfer complete interrupt enable
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <_Z4Initv+0x254>)
 8000e92:	f240 62a2 	movw	r2, #1698	; 0x6a2
 8000e96:	601a      	str	r2, [r3, #0]
	DMA1_Channel5->CPAR = (uint32_t) &(ADC1->DR);
 8000e98:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <_Z4Initv+0x254>)
 8000e9a:	4a35      	ldr	r2, [pc, #212]	; (8000f70 <_Z4Initv+0x258>)
 8000e9c:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t) AdcDmaReadings;
 8000e9e:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <_Z4Initv+0x254>)
 8000ea0:	4a34      	ldr	r2, [pc, #208]	; (8000f74 <_Z4Initv+0x25c>)
 8000ea2:	60da      	str	r2, [r3, #12]
	DMA1_Channel5->CNDTR = 3;
 8000ea4:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <_Z4Initv+0x254>)
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 8000eaa:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <_Z4Initv+0x254>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a2f      	ldr	r2, [pc, #188]	; (8000f6c <_Z4Initv+0x254>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6013      	str	r3, [r2, #0]
	// // DAC1 configuration
	// RCC->AHB2ENR |=RCC_AHB2ENR_DAC1EN;
	// DAC1->CR |= DAC_CR_EN1;
	// DAC1->DHR12R1 = 2050;
	
	ADC2->CR |= ADC_CR_ADSTP;
 8000eb6:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <_Z4Initv+0x260>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <_Z4Initv+0x260>)
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6093      	str	r3, [r2, #8]
	while((ADC2->ISR & ADC_ISR_ADRDY));	
 8000ec2:	bf00      	nop
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <_Z4Initv+0x260>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf14      	ite	ne
 8000ed0:	2301      	movne	r3, #1
 8000ed2:	2300      	moveq	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f4      	bne.n	8000ec4 <_Z4Initv+0x1ac>
	ADC2->CR =0;
 8000eda:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <_Z4Initv+0x260>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
	ADC2->CFGR = ADC_CFGR_OVRMOD | ADC_CFGR_CONT; // Set overrun mode, external trigger rising edge, TIM1_TRGO as trigger, DMA enable, DMA circular mode
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <_Z4Initv+0x260>)
 8000ee2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ee6:	60da      	str	r2, [r3, #12]
	ADC2->CR |= ADC_CR_ADVREGEN;	
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <_Z4Initv+0x260>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <_Z4Initv+0x260>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADCAL;
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <_Z4Initv+0x260>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <_Z4Initv+0x260>)
 8000efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efe:	6093      	str	r3, [r2, #8]
	while(ADC2->CR & ADC_CR_ADCAL);
 8000f00:	bf00      	nop
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <_Z4Initv+0x260>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	0fdb      	lsrs	r3, r3, #31
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f9      	bne.n	8000f02 <_Z4Initv+0x1ea>
	ADC2->SQR1 |= 0b0<<ADC_SQR1_L_Pos; // 1 ADC2 conversions
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <_Z4Initv+0x260>)
 8000f10:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <_Z4Initv+0x260>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
	ADC2->SQR1 |= 12<<ADC_SQR1_SQ1_Pos; // First conversion - ch12
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <_Z4Initv+0x260>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <_Z4Initv+0x260>)
 8000f1c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
	ADC2->CR |= ADC_CR_ADEN;
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <_Z4Initv+0x260>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <_Z4Initv+0x260>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6093      	str	r3, [r2, #8]
	while(!(ADC2->ISR & ADC_ISR_ADRDY));
 8000f2e:	bf00      	nop
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <_Z4Initv+0x260>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f4      	bne.n	8000f30 <_Z4Initv+0x218>
	ADC2->CR |= ADC_CR_ADSTART;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <_Z4Initv+0x260>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <_Z4Initv+0x260>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6093      	str	r3, [r2, #8]
	
}
 8000f52:	bf00      	nop
 8000f54:	b003      	add	sp, #12
 8000f56:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f5a:	bf00      	nop
 8000f5c:	1312d000 	.word	0x1312d000
 8000f60:	40021000 	.word	0x40021000
 8000f64:	50000300 	.word	0x50000300
 8000f68:	40020810 	.word	0x40020810
 8000f6c:	40020058 	.word	0x40020058
 8000f70:	50000040 	.word	0x50000040
 8000f74:	20000068 	.word	0x20000068
 8000f78:	50000100 	.word	0x50000100

08000f7c <_Z15setPhaseVoltagefff>:
            _sineLookUp[i] = 180+(_amplitude*sin(i*inc+phaseShiftDeg))*0.5f;
      }
}
float Uabc_pu[3];
void setPhaseVoltage(float Uq, float Ud, float angle_el) 
{  
 8000f7c:	b500      	push	{lr}
 8000f7e:	ed2d 8b02 	vpush	{d8}
 8000f82:	b085      	sub	sp, #20
 8000f84:	ed8d 0a03 	vstr	s0, [sp, #12]
 8000f88:	edcd 0a02 	vstr	s1, [sp, #8]
 8000f8c:	ed8d 1a01 	vstr	s2, [sp, #4]
    // Inverse park transform
	Ualpha = cos(angle_el) * Ud -sin(angle_el) * Uq;  // -sin(angle) * Uq;
 8000f90:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000f94:	f7ff fd9e 	bl	8000ad4 <_ZSt3cosf>
 8000f98:	eeb0 7a40 	vmov.f32	s14, s0
 8000f9c:	eddd 7a02 	vldr	s15, [sp, #8]
 8000fa0:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000fa4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000fa8:	f7ff fda3 	bl	8000af2 <_ZSt3sinf>
 8000fac:	eeb0 7a40 	vmov.f32	s14, s0
 8000fb0:	eddd 7a03 	vldr	s15, [sp, #12]
 8000fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <_Z15setPhaseVoltagefff+0xe0>)
 8000fbe:	edc3 7a00 	vstr	s15, [r3]
	Ubeta = sin(angle_el) * Ud + cos(angle_el) * Uq;    //  cos(angle) * Uq;
 8000fc2:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000fc6:	f7ff fd94 	bl	8000af2 <_ZSt3sinf>
 8000fca:	eeb0 7a40 	vmov.f32	s14, s0
 8000fce:	eddd 7a02 	vldr	s15, [sp, #8]
 8000fd2:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000fd6:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000fda:	f7ff fd7b 	bl	8000ad4 <_ZSt3cosf>
 8000fde:	eeb0 7a40 	vmov.f32	s14, s0
 8000fe2:	eddd 7a03 	vldr	s15, [sp, #12]
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <_Z15setPhaseVoltagefff+0xe4>)
 8000ff0:	edc3 7a00 	vstr	s15, [r3]

	// Inverse Clarke transform
	
	Uabc_pu[0] = Ualpha;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <_Z15setPhaseVoltagefff+0xe0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <_Z15setPhaseVoltagefff+0xe8>)
 8000ffa:	6013      	str	r3, [r2, #0]
	Uabc_pu[1] = -0.5f * Ualpha  + M_SQRT3_2 * Ubeta;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <_Z15setPhaseVoltagefff+0xe0>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001006:	ee27 7a87 	vmul.f32	s14, s15, s14
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <_Z15setPhaseVoltagefff+0xe4>)
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001068 <_Z15setPhaseVoltagefff+0xec>
 8001014:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <_Z15setPhaseVoltagefff+0xe8>)
 800101e:	edc3 7a01 	vstr	s15, [r3, #4]
	Uabc_pu[2] = -0.5f * Ualpha - M_SQRT3_2 * Ubeta;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <_Z15setPhaseVoltagefff+0xe0>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800102c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <_Z15setPhaseVoltagefff+0xe4>)
 8001032:	edd3 7a00 	vldr	s15, [r3]
 8001036:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001068 <_Z15setPhaseVoltagefff+0xec>
 800103a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800103e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <_Z15setPhaseVoltagefff+0xe8>)
 8001044:	edc3 7a02 	vstr	s15, [r3, #8]

	// for (int i = 0; i<3; i++)
	// {
	// 	Uabc_pu[i] *= 0.002f;
	// }
	pwm_set3Phase_pu(&inverterPWM, Uabc_pu);
 8001048:	4906      	ldr	r1, [pc, #24]	; (8001064 <_Z15setPhaseVoltagefff+0xe8>)
 800104a:	4808      	ldr	r0, [pc, #32]	; (800106c <_Z15setPhaseVoltagefff+0xf0>)
 800104c:	f7ff fe1a 	bl	8000c84 <_ZL16pwm_set3Phase_puP5pwm_tPf>
	// uart.print("Ub:");
	// uart.print(Uabc_pu[1]);
	// uart.print(",");
	// uart.print("Uc:");
	// uart.println(Uabc_pu[2]);
}
 8001050:	bf00      	nop
 8001052:	b005      	add	sp, #20
 8001054:	ecbd 8b02 	vpop	{d8}
 8001058:	f85d fb04 	ldr.w	pc, [sp], #4
 800105c:	200000a8 	.word	0x200000a8
 8001060:	200000ac 	.word	0x200000ac
 8001064:	20000148 	.word	0x20000148
 8001068:	3f5db3d7 	.word	0x3f5db3d7
 800106c:	20000010 	.word	0x20000010

08001070 <main>:

	
int main(void)
{
 8001070:	b500      	push	{lr}
 8001072:	b083      	sub	sp, #12
	// generateSine(sineLookUp, 0, 0, 360);
	// generateSine(sineLookUp2, 120, 0, 360);
	// generateSine(sineLookUp3, 240, 0, 360);
	
	pwm_init(&inverterPWM);
 8001074:	4884      	ldr	r0, [pc, #528]	; (8001288 <main+0x218>)
 8001076:	f7ff fd5b 	bl	8000b30 <_ZL8pwm_initP5pwm_t>
	// int i, j=0;
	static uint32_t prevMotorState=0;
	float offsetAngle = 0;
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	9301      	str	r3, [sp, #4]
	//initSysTick();	
	Init();  
 8001080:	f7ff fe4a 	bl	8000d18 <_Z4Initv>
	pidUq.Init();
 8001084:	4881      	ldr	r0, [pc, #516]	; (800128c <main+0x21c>)
 8001086:	f001 fd31 	bl	8002aec <_ZN3PID4InitEv>
	pidUq.SetOutputLimits(-1,1);
 800108a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800108e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001092:	487e      	ldr	r0, [pc, #504]	; (800128c <main+0x21c>)
 8001094:	f001 fe2e 	bl	8002cf4 <_ZN3PID15SetOutputLimitsEff>
	pidUq.SetMode(PIDMode_TypeDef::_PID_MODE_AUTOMATIC);
 8001098:	2101      	movs	r1, #1
 800109a:	487c      	ldr	r0, [pc, #496]	; (800128c <main+0x21c>)
 800109c:	f001 fe08 	bl	8002cb0 <_ZN3PID7SetModeE15PIDMode_TypeDef>

	pidUd.Init();
 80010a0:	487b      	ldr	r0, [pc, #492]	; (8001290 <main+0x220>)
 80010a2:	f001 fd23 	bl	8002aec <_ZN3PID4InitEv>
	pidUd.SetOutputLimits(-1,1);
 80010a6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80010aa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80010ae:	4878      	ldr	r0, [pc, #480]	; (8001290 <main+0x220>)
 80010b0:	f001 fe20 	bl	8002cf4 <_ZN3PID15SetOutputLimitsEff>
	pidUd.SetMode(PIDMode_TypeDef::_PID_MODE_AUTOMATIC);
 80010b4:	2101      	movs	r1, #1
 80010b6:	4876      	ldr	r0, [pc, #472]	; (8001290 <main+0x220>)
 80010b8:	f001 fdfa 	bl	8002cb0 <_ZN3PID7SetModeE15PIDMode_TypeDef>
		// Uabc_pu1[0] = -1.0f;
		// Uabc_pu1[1] = 0.0f;
		// Uabc_pu1[2] = 0.0f;
		// pwm_set3Phase_pu(&inverterPWM, Uabc_pu1);
		
		if (uart.readTillEOL(UARTrxData)) 
 80010bc:	4975      	ldr	r1, [pc, #468]	; (8001294 <main+0x224>)
 80010be:	4876      	ldr	r0, [pc, #472]	; (8001298 <main+0x228>)
 80010c0:	f000 fe22 	bl	8001d08 <_ZN6Serial11readTillEOLEPc>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d040      	beq.n	800114c <main+0xdc>
		{
			
			if (UARTrxData[0] == '0')
 80010ca:	4b72      	ldr	r3, [pc, #456]	; (8001294 <main+0x224>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b30      	cmp	r3, #48	; 0x30
 80010d0:	d103      	bne.n	80010da <main+0x6a>
			{
				motorState = 0;
 80010d2:	4b72      	ldr	r3, [pc, #456]	; (800129c <main+0x22c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e038      	b.n	800114c <main+0xdc>
			}
			else if (UARTrxData[0] == '1')
 80010da:	4b6e      	ldr	r3, [pc, #440]	; (8001294 <main+0x224>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b31      	cmp	r3, #49	; 0x31
 80010e0:	d103      	bne.n	80010ea <main+0x7a>
			{
					motorState = 1;
 80010e2:	4b6e      	ldr	r3, [pc, #440]	; (800129c <main+0x22c>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e030      	b.n	800114c <main+0xdc>
			}
			else if (UARTrxData[0] == 'p')
 80010ea:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <main+0x224>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b70      	cmp	r3, #112	; 0x70
 80010f0:	d10a      	bne.n	8001108 <main+0x98>
			{
					setiQ +=1;
 80010f2:	4b6b      	ldr	r3, [pc, #428]	; (80012a0 <main+0x230>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001100:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <main+0x230>)
 8001102:	edc3 7a00 	vstr	s15, [r3]
 8001106:	e021      	b.n	800114c <main+0xdc>
			}
			else if (UARTrxData[0] == 'm')
 8001108:	4b62      	ldr	r3, [pc, #392]	; (8001294 <main+0x224>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b6d      	cmp	r3, #109	; 0x6d
 800110e:	d10a      	bne.n	8001126 <main+0xb6>
			{
					setiQ -=1;
 8001110:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <main+0x230>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800111a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800111e:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <main+0x230>)
 8001120:	edc3 7a00 	vstr	s15, [r3]
 8001124:	e012      	b.n	800114c <main+0xdc>
			}
			else if (UARTrxData[0] == 's')
 8001126:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <main+0x224>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b73      	cmp	r3, #115	; 0x73
 800112c:	d105      	bne.n	800113a <main+0xca>
			{
					setMotorSpeed += 50;
 800112e:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <main+0x234>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3332      	adds	r3, #50	; 0x32
 8001134:	4a5b      	ldr	r2, [pc, #364]	; (80012a4 <main+0x234>)
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e008      	b.n	800114c <main+0xdc>
			}
			else if (UARTrxData[0] == 'w')
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <main+0x224>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b77      	cmp	r3, #119	; 0x77
 8001140:	d104      	bne.n	800114c <main+0xdc>
			{
					setMotorSpeed -= 50;
 8001142:	4b58      	ldr	r3, [pc, #352]	; (80012a4 <main+0x234>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3b32      	subs	r3, #50	; 0x32
 8001148:	4a56      	ldr	r2, [pc, #344]	; (80012a4 <main+0x234>)
 800114a:	6013      	str	r3, [r2, #0]
			}

		}

		//if (milis-motorProcessLastTime>=slopeInterval)
		if (TIM2loopFlag)
 800114c:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <main+0x238>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d047      	beq.n	80011e6 <main+0x176>
		{
			if (!motorState)
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <main+0x22c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d11c      	bne.n	8001198 <main+0x128>
					
				}

			
				
				if (motorSpeed > 5)
 800115e:	4b53      	ldr	r3, [pc, #332]	; (80012ac <main+0x23c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b05      	cmp	r3, #5
 8001164:	bf8c      	ite	hi
 8001166:	2301      	movhi	r3, #1
 8001168:	2300      	movls	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <main+0x10c>
				{
					motorSpeed-=5;
 8001170:	4b4e      	ldr	r3, [pc, #312]	; (80012ac <main+0x23c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3b05      	subs	r3, #5
 8001176:	4a4d      	ldr	r2, [pc, #308]	; (80012ac <main+0x23c>)
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e00a      	b.n	8001192 <main+0x122>
				{
					
				// 	generateSine(sineLookUp, 0, 0, 360);
				// 	generateSine(sineLookUp2, 120, 0, 360);
				// 	generateSine(sineLookUp3, 240, 0, 360);
					setUq = 0;
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <main+0x240>)
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
					setUd = 0;
 8001184:	4b4b      	ldr	r3, [pc, #300]	; (80012b4 <main+0x244>)
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
					motorSpeed = 0;
 800118c:	4b47      	ldr	r3, [pc, #284]	; (80012ac <main+0x23c>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
				}	
				prevMotorState = 0;
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <main+0x248>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
											
			}
			if (motorState)
 8001198:	4b40      	ldr	r3, [pc, #256]	; (800129c <main+0x22c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01f      	beq.n	80011e0 <main+0x170>
			{			
			
				if (prevMotorState == 0)
 80011a0:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <main+0x248>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <main+0x140>
				{
					setUq=0;
 80011a8:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <main+0x240>)
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
			// 		generateSine(sineLookUp, 0, 200, 360);  //200hz 42 amplitude 21sek bez rad, 300hz 50 amplitude 6,5sek bez rad
			// 		generateSine(sineLookUp2, 120, 200, 360); // 200hz 42 amplitude 2min+++sek z rad, 300hz 50 amplitude 36 sek z rad
			// 		generateSine(sineLookUp3, 240, 200, 360); 
					// lastacceltime = milis;
				}			
				if ((motorSpeed <setMotorSpeed))
 80011b0:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <main+0x23c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <main+0x234>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	bf34      	ite	cc
 80011bc:	2301      	movcc	r3, #1
 80011be:	2300      	movcs	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <main+0x162>
				{				
					motorSpeed++;			
 80011c6:	4b39      	ldr	r3, [pc, #228]	; (80012ac <main+0x23c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a37      	ldr	r2, [pc, #220]	; (80012ac <main+0x23c>)
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e003      	b.n	80011da <main+0x16a>
				}
				else
				{
					motorSpeed =setMotorSpeed;
 80011d2:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <main+0x234>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a35      	ldr	r2, [pc, #212]	; (80012ac <main+0x23c>)
 80011d8:	6013      	str	r3, [r2, #0]
					//motorState = 0;
					// acceltime = milis - lastacceltime;				
				}
				prevMotorState = 1;
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <main+0x248>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]
			// 	TIM2->ARR = (uint32_t)(44444.44f)/sineFreq; /// clk/tim1->ARR = 16000000/360 = 44,444.44 (HZ)
			// }else 
			{
				//TIM2->ARR = 1;
			}  
			TIM2loopFlag = false;
 80011e0:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <main+0x238>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
		// 	}

	
		

		if(milis-lastPrintTime>=100)
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <main+0x24c>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <main+0x250>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b63      	cmp	r3, #99	; 0x63
 80011f2:	bf8c      	ite	hi
 80011f4:	2301      	movhi	r3, #1
 80011f6:	2300      	movls	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f43f af5e 	beq.w	80010bc <main+0x4c>
		{
			if (motorState)
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <main+0x22c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <main+0x1a0>
			// uart.print("FilterediQ:");
			// uart.print(filterediQ);
			// uart.print(",");			
			uart.print(",");
 8001208:	492e      	ldr	r1, [pc, #184]	; (80012c4 <main+0x254>)
 800120a:	4823      	ldr	r0, [pc, #140]	; (8001298 <main+0x228>)
 800120c:	f000 fcf9 	bl	8001c02 <_ZN6Serial5printEPKc>
			uart.print("speed:");
 8001210:	492d      	ldr	r1, [pc, #180]	; (80012c8 <main+0x258>)
 8001212:	4821      	ldr	r0, [pc, #132]	; (8001298 <main+0x228>)
 8001214:	f000 fcf5 	bl	8001c02 <_ZN6Serial5printEPKc>
			uart.print((int)motorSpeed);
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <main+0x23c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	481e      	ldr	r0, [pc, #120]	; (8001298 <main+0x228>)
 8001220:	f000 fd06 	bl	8001c30 <_ZN6Serial5printEi>
			uart.print(",");
 8001224:	4927      	ldr	r1, [pc, #156]	; (80012c4 <main+0x254>)
 8001226:	481c      	ldr	r0, [pc, #112]	; (8001298 <main+0x228>)
 8001228:	f000 fceb 	bl	8001c02 <_ZN6Serial5printEPKc>
			uart.print("setIQ:");
 800122c:	4927      	ldr	r1, [pc, #156]	; (80012cc <main+0x25c>)
 800122e:	481a      	ldr	r0, [pc, #104]	; (8001298 <main+0x228>)
 8001230:	f000 fce7 	bl	8001c02 <_ZN6Serial5printEPKc>
			uart.print(setiQ);
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <main+0x230>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f931 	bl	80004a0 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	2103      	movs	r1, #3
 8001244:	ec43 2b10 	vmov	d0, r2, r3
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <main+0x228>)
 800124a:	f000 fd0a 	bl	8001c62 <_ZN6Serial5printEdh>
			uart.print(",");
 800124e:	491d      	ldr	r1, [pc, #116]	; (80012c4 <main+0x254>)
 8001250:	4811      	ldr	r0, [pc, #68]	; (8001298 <main+0x228>)
 8001252:	f000 fcd6 	bl	8001c02 <_ZN6Serial5printEPKc>
			uart.print("filterediQ:");
 8001256:	491e      	ldr	r1, [pc, #120]	; (80012d0 <main+0x260>)
 8001258:	480f      	ldr	r0, [pc, #60]	; (8001298 <main+0x228>)
 800125a:	f000 fcd2 	bl	8001c02 <_ZN6Serial5printEPKc>
			uart.println(filterediQ);
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <main+0x264>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f91c 	bl	80004a0 <__aeabi_f2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	2103      	movs	r1, #3
 800126e:	ec43 2b10 	vmov	d0, r2, r3
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <main+0x228>)
 8001274:	f000 fd1c 	bl	8001cb0 <_ZN6Serial7printlnEdh>
			led4.toggle();
 8001278:	4817      	ldr	r0, [pc, #92]	; (80012d8 <main+0x268>)
 800127a:	f001 fa47 	bl	800270c <_ZN4GPIO6toggleEv>
			lastPrintTime = milis;		
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <main+0x24c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <main+0x250>)
 8001284:	6013      	str	r3, [r2, #0]
		if (uart.readTillEOL(UARTrxData)) 
 8001286:	e719      	b.n	80010bc <main+0x4c>
 8001288:	20000010 	.word	0x20000010
 800128c:	200000c8 	.word	0x200000c8
 8001290:	20000108 	.word	0x20000108
 8001294:	20000034 	.word	0x20000034
 8001298:	200001f8 	.word	0x200001f8
 800129c:	200000bc 	.word	0x200000bc
 80012a0:	20000004 	.word	0x20000004
 80012a4:	20000008 	.word	0x20000008
 80012a8:	200000b8 	.word	0x200000b8
 80012ac:	200000c0 	.word	0x200000c0
 80012b0:	200000a0 	.word	0x200000a0
 80012b4:	200000a4 	.word	0x200000a4
 80012b8:	20000154 	.word	0x20000154
 80012bc:	2000030c 	.word	0x2000030c
 80012c0:	20000094 	.word	0x20000094
 80012c4:	08003d44 	.word	0x08003d44
 80012c8:	08003d48 	.word	0x08003d48
 80012cc:	08003d50 	.word	0x08003d50
 80012d0:	08003d58 	.word	0x08003d58
 80012d4:	200000b0 	.word	0x200000b0
 80012d8:	200001e8 	.word	0x200001e8

080012dc <DMA1_Channel5_IRQHandler>:


extern "C"
{
	void DMA1_Channel5_IRQHandler() // New current readings ready
	{
 80012dc:	b508      	push	{r3, lr}
 80012de:	ed2d 8b02 	vpush	{d8}
		if (DMA1->ISR & DMA_ISR_TCIF5)
 80012e2:	4ba4      	ldr	r3, [pc, #656]	; (8001574 <DMA1_Channel5_IRQHandler+0x298>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 8139 	beq.w	800156c <DMA1_Channel5_IRQHandler+0x290>
		{
				DMA1->IFCR |= DMA_IFCR_CTCIF5;
 80012fa:	4b9e      	ldr	r3, [pc, #632]	; (8001574 <DMA1_Channel5_IRQHandler+0x298>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4a9d      	ldr	r2, [pc, #628]	; (8001574 <DMA1_Channel5_IRQHandler+0x298>)
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	6053      	str	r3, [r2, #4]
			
				//iAlpha  = (0.66f)*(AdcDmaReadings[0]*0.0016541352f-3.3f) - (0.33f)*(AdcDmaReadings[1]*0.0016541352f-3.3f) + (0.33f)*(AdcDmaReadings[2]*0.0016541352f-3.3f);

				//iBeta   = (1.1547005f)*(AdcDmaReadings[1]*0.0016541352f-3.3f) - (1.1547005f)*(AdcDmaReadings[2]*0.0016541352f-3.3f);

			iA=AdcDmaReadings[0]*ADC_TO_PHASE_CURRENT-ADC_OFFSET;
 8001306:	4b9c      	ldr	r3, [pc, #624]	; (8001578 <DMA1_Channel5_IRQHandler+0x29c>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800157c <DMA1_Channel5_IRQHandler+0x2a0>
 8001316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001580 <DMA1_Channel5_IRQHandler+0x2a4>
 800131e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001322:	4b98      	ldr	r3, [pc, #608]	; (8001584 <DMA1_Channel5_IRQHandler+0x2a8>)
 8001324:	edc3 7a00 	vstr	s15, [r3]
			iB=AdcDmaReadings[2]*ADC_TO_PHASE_CURRENT-ADC_OFFSET;
 8001328:	4b93      	ldr	r3, [pc, #588]	; (8001578 <DMA1_Channel5_IRQHandler+0x29c>)
 800132a:	889b      	ldrh	r3, [r3, #4]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001334:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800157c <DMA1_Channel5_IRQHandler+0x2a0>
 8001338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133c:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001580 <DMA1_Channel5_IRQHandler+0x2a4>
 8001340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001344:	4b90      	ldr	r3, [pc, #576]	; (8001588 <DMA1_Channel5_IRQHandler+0x2ac>)
 8001346:	edc3 7a00 	vstr	s15, [r3]
			iC=AdcDmaReadings[1]*ADC_TO_PHASE_CURRENT-ADC_OFFSET;
 800134a:	4b8b      	ldr	r3, [pc, #556]	; (8001578 <DMA1_Channel5_IRQHandler+0x29c>)
 800134c:	885b      	ldrh	r3, [r3, #2]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001356:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800157c <DMA1_Channel5_IRQHandler+0x2a0>
 800135a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001580 <DMA1_Channel5_IRQHandler+0x2a4>
 8001362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001366:	4b89      	ldr	r3, [pc, #548]	; (800158c <DMA1_Channel5_IRQHandler+0x2b0>)
 8001368:	edc3 7a00 	vstr	s15, [r3]

			iAlpha = (float) (1.0/3.0) * ((float) (2.0f * iA) - (iB + iC));
 800136c:	4b85      	ldr	r3, [pc, #532]	; (8001584 <DMA1_Channel5_IRQHandler+0x2a8>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001376:	4b84      	ldr	r3, [pc, #528]	; (8001588 <DMA1_Channel5_IRQHandler+0x2ac>)
 8001378:	edd3 6a00 	vldr	s13, [r3]
 800137c:	4b83      	ldr	r3, [pc, #524]	; (800158c <DMA1_Channel5_IRQHandler+0x2b0>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001590 <DMA1_Channel5_IRQHandler+0x2b4>
 800138e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001392:	4b80      	ldr	r3, [pc, #512]	; (8001594 <DMA1_Channel5_IRQHandler+0x2b8>)
 8001394:	edc3 7a00 	vstr	s15, [r3]
			iBeta = (float) (M_1_SQRT3) * (iB - iC);
 8001398:	4b7b      	ldr	r3, [pc, #492]	; (8001588 <DMA1_Channel5_IRQHandler+0x2ac>)
 800139a:	ed93 7a00 	vldr	s14, [r3]
 800139e:	4b7b      	ldr	r3, [pc, #492]	; (800158c <DMA1_Channel5_IRQHandler+0x2b0>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a8:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001598 <DMA1_Channel5_IRQHandler+0x2bc>
 80013ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b0:	4b7a      	ldr	r3, [pc, #488]	; (800159c <DMA1_Channel5_IRQHandler+0x2c0>)
 80013b2:	edc3 7a00 	vstr	s15, [r3]


			// iAlpha  = iA;
			// iBeta = (M_1_SQRT3*iAlpha) + (M_2_SQRT3 * iB);
			theta = SetOLangle;
 80013b6:	4b7a      	ldr	r3, [pc, #488]	; (80015a0 <DMA1_Channel5_IRQHandler+0x2c4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a7a      	ldr	r2, [pc, #488]	; (80015a4 <DMA1_Channel5_IRQHandler+0x2c8>)
 80013bc:	6013      	str	r3, [r2, #0]
			iD = iAlpha*cos(theta)+iBeta*sin(theta);
 80013be:	4b79      	ldr	r3, [pc, #484]	; (80015a4 <DMA1_Channel5_IRQHandler+0x2c8>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	eeb0 0a67 	vmov.f32	s0, s15
 80013c8:	f7ff fb84 	bl	8000ad4 <_ZSt3cosf>
 80013cc:	eeb0 7a40 	vmov.f32	s14, s0
 80013d0:	4b70      	ldr	r3, [pc, #448]	; (8001594 <DMA1_Channel5_IRQHandler+0x2b8>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80013da:	4b72      	ldr	r3, [pc, #456]	; (80015a4 <DMA1_Channel5_IRQHandler+0x2c8>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	eeb0 0a67 	vmov.f32	s0, s15
 80013e4:	f7ff fb85 	bl	8000af2 <_ZSt3sinf>
 80013e8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ec:	4b6b      	ldr	r3, [pc, #428]	; (800159c <DMA1_Channel5_IRQHandler+0x2c0>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013fa:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <DMA1_Channel5_IRQHandler+0x2cc>)
 80013fc:	edc3 7a00 	vstr	s15, [r3]
			iQ = -iAlpha*sin(theta)+iBeta*cos(theta);
 8001400:	4b64      	ldr	r3, [pc, #400]	; (8001594 <DMA1_Channel5_IRQHandler+0x2b8>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	eeb1 8a67 	vneg.f32	s16, s15
 800140a:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <DMA1_Channel5_IRQHandler+0x2c8>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	eeb0 0a67 	vmov.f32	s0, s15
 8001414:	f7ff fb6d 	bl	8000af2 <_ZSt3sinf>
 8001418:	eef0 7a40 	vmov.f32	s15, s0
 800141c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001420:	4b60      	ldr	r3, [pc, #384]	; (80015a4 <DMA1_Channel5_IRQHandler+0x2c8>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	eeb0 0a67 	vmov.f32	s0, s15
 800142a:	f7ff fb53 	bl	8000ad4 <_ZSt3cosf>
 800142e:	eeb0 7a40 	vmov.f32	s14, s0
 8001432:	4b5a      	ldr	r3, [pc, #360]	; (800159c <DMA1_Channel5_IRQHandler+0x2c0>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001440:	4b5a      	ldr	r3, [pc, #360]	; (80015ac <DMA1_Channel5_IRQHandler+0x2d0>)
 8001442:	edc3 7a00 	vstr	s15, [r3]
			filterediQ = filterediQ + normalizedCoeff * (iQ - filterediQ);
 8001446:	4b59      	ldr	r3, [pc, #356]	; (80015ac <DMA1_Channel5_IRQHandler+0x2d0>)
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <DMA1_Channel5_IRQHandler+0x2d4>)
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001456:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <DMA1_Channel5_IRQHandler+0x2d8>)
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <DMA1_Channel5_IRQHandler+0x2d4>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146a:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <DMA1_Channel5_IRQHandler+0x2d4>)
 800146c:	edc3 7a00 	vstr	s15, [r3]
			filterediD = filterediD + normalizedCoeff * (iD - filterediD);
 8001470:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <DMA1_Channel5_IRQHandler+0x2cc>)
 8001472:	ed93 7a00 	vldr	s14, [r3]
 8001476:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <DMA1_Channel5_IRQHandler+0x2dc>)
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001480:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <DMA1_Channel5_IRQHandler+0x2d8>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148a:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <DMA1_Channel5_IRQHandler+0x2dc>)
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001494:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <DMA1_Channel5_IRQHandler+0x2dc>)
 8001496:	edc3 7a00 	vstr	s15, [r3]


			velChange = (motorSpeed * 0.10472f) * PWM_PERIOD * POLE_PAIRS; 
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <DMA1_Channel5_IRQHandler+0x2e0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80015c0 <DMA1_Channel5_IRQHandler+0x2e4>
 80014aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ae:	eddf 6a45 	vldr	s13, [pc, #276]	; 80015c4 <DMA1_Channel5_IRQHandler+0x2e8>
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80014ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014be:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <DMA1_Channel5_IRQHandler+0x2ec>)
 80014c0:	edc3 7a00 	vstr	s15, [r3]
				if (SetOLangle < M_2PI * POLE_PAIRS) 
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <DMA1_Channel5_IRQHandler+0x2c4>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80015cc <DMA1_Channel5_IRQHandler+0x2f0>
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	bf4c      	ite	mi
 80014d8:	2301      	movmi	r3, #1
 80014da:	2300      	movpl	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <DMA1_Channel5_IRQHandler+0x21e>
				{
					SetOLangle += velChange;
 80014e2:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <DMA1_Channel5_IRQHandler+0x2ec>)
 80014e4:	ed93 7a00 	vldr	s14, [r3]
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <DMA1_Channel5_IRQHandler+0x2c4>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <DMA1_Channel5_IRQHandler+0x2c4>)
 80014f4:	edc3 7a00 	vstr	s15, [r3]
 80014f8:	e003      	b.n	8001502 <DMA1_Channel5_IRQHandler+0x226>
				}
				else
				{
					SetOLangle = 0;
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <DMA1_Channel5_IRQHandler+0x2c4>)
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
				}
			
			
				
			if (motorState )
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <DMA1_Channel5_IRQHandler+0x2f4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d01c      	beq.n	8001544 <DMA1_Channel5_IRQHandler+0x268>
			{
				//setPhaseVoltage(0.04, 0.04, SetOLangle);
				pidUq.Compute();
 800150a:	4832      	ldr	r0, [pc, #200]	; (80015d4 <DMA1_Channel5_IRQHandler+0x2f8>)
 800150c:	f001 fb1d 	bl	8002b4a <_ZN3PID7ComputeEv>
				pidUd.Compute();
 8001510:	4831      	ldr	r0, [pc, #196]	; (80015d8 <DMA1_Channel5_IRQHandler+0x2fc>)
 8001512:	f001 fb1a 	bl	8002b4a <_ZN3PID7ComputeEv>
				if (UART5->ISR & USART_ISR_ORE)
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <DMA1_Channel5_IRQHandler+0x300>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <DMA1_Channel5_IRQHandler+0x268>
				{
					led5.set();
 800152c:	482c      	ldr	r0, [pc, #176]	; (80015e0 <DMA1_Channel5_IRQHandler+0x304>)
 800152e:	f001 f8db 	bl	80026e8 <_ZN4GPIO3setEv>
					UART5->ICR |= USART_ICR_ORECF;
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <DMA1_Channel5_IRQHandler+0x300>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a29      	ldr	r2, [pc, #164]	; (80015dc <DMA1_Channel5_IRQHandler+0x300>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6213      	str	r3, [r2, #32]
					uart.bufferFlush();
 800153e:	4829      	ldr	r0, [pc, #164]	; (80015e4 <DMA1_Channel5_IRQHandler+0x308>)
 8001540:	f000 fc5e 	bl	8001e00 <_ZN6Serial11bufferFlushEv>
				}
								
			} setPhaseVoltage(setUq, setUd, SetOLangle);
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <DMA1_Channel5_IRQHandler+0x30c>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <DMA1_Channel5_IRQHandler+0x310>)
 800154c:	ed93 7a00 	vldr	s14, [r3]
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <DMA1_Channel5_IRQHandler+0x2c4>)
 8001552:	edd3 6a00 	vldr	s13, [r3]
 8001556:	eeb0 1a66 	vmov.f32	s2, s13
 800155a:	eef0 0a47 	vmov.f32	s1, s14
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	f7ff fd0b 	bl	8000f7c <_Z15setPhaseVoltagefff>

			led1.toggle();
 8001566:	4822      	ldr	r0, [pc, #136]	; (80015f0 <DMA1_Channel5_IRQHandler+0x314>)
 8001568:	f001 f8d0 	bl	800270c <_ZN4GPIO6toggleEv>
			//setPhaseVoltage(0.5, 0.5, SetOLangle);
		}
	}
 800156c:	bf00      	nop
 800156e:	ecbd 8b02 	vpop	{d8}
 8001572:	bd08      	pop	{r3, pc}
 8001574:	40020000 	.word	0x40020000
 8001578:	20000068 	.word	0x20000068
 800157c:	3d2aa32b 	.word	0x3d2aa32b
 8001580:	42a4ffff 	.word	0x42a4ffff
 8001584:	20000070 	.word	0x20000070
 8001588:	20000074 	.word	0x20000074
 800158c:	20000078 	.word	0x20000078
 8001590:	3eaaaaab 	.word	0x3eaaaaab
 8001594:	2000007c 	.word	0x2000007c
 8001598:	3f13cd3a 	.word	0x3f13cd3a
 800159c:	20000080 	.word	0x20000080
 80015a0:	2000009c 	.word	0x2000009c
 80015a4:	20000090 	.word	0x20000090
 80015a8:	20000084 	.word	0x20000084
 80015ac:	20000088 	.word	0x20000088
 80015b0:	200000b0 	.word	0x200000b0
 80015b4:	20000000 	.word	0x20000000
 80015b8:	200000b4 	.word	0x200000b4
 80015bc:	200000c0 	.word	0x200000c0
 80015c0:	3dd67770 	.word	0x3dd67770
 80015c4:	471c4000 	.word	0x471c4000
 80015c8:	20000098 	.word	0x20000098
 80015cc:	428a3ae7 	.word	0x428a3ae7
 80015d0:	200000bc 	.word	0x200000bc
 80015d4:	200000c8 	.word	0x200000c8
 80015d8:	20000108 	.word	0x20000108
 80015dc:	40005000 	.word	0x40005000
 80015e0:	200001f0 	.word	0x200001f0
 80015e4:	200001f8 	.word	0x200001f8
 80015e8:	200000a0 	.word	0x200000a0
 80015ec:	200000a4 	.word	0x200000a4
 80015f0:	200001d0 	.word	0x200001d0

080015f4 <TIM2_IRQHandler>:
	
	void TIM2_IRQHandler()
	{
 80015f4:	b508      	push	{r3, lr}
		if (TIM2->SR & TIM_SR_UIF)
 80015f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf14      	ite	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2300      	moveq	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00d      	beq.n	800162a <TIM2_IRQHandler+0x36>
		{
			TIM2->SR &= ~TIM_SR_UIF;
 800160e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6113      	str	r3, [r2, #16]
			led3.toggle();
 800161e:	4804      	ldr	r0, [pc, #16]	; (8001630 <TIM2_IRQHandler+0x3c>)
 8001620:	f001 f874 	bl	800270c <_ZN4GPIO6toggleEv>
			TIM2loopFlag = true;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <TIM2_IRQHandler+0x40>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
		}
	}
 800162a:	bf00      	nop
 800162c:	bd08      	pop	{r3, pc}
 800162e:	bf00      	nop
 8001630:	200001e0 	.word	0x200001e0
 8001634:	200000b8 	.word	0x200000b8

08001638 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0>:
// 	{
// 		DMA1->IFCR |= DMA_IFCR_CTCIF2;
// 		//led.toggle();
// 	}

}
 8001638:	b500      	push	{lr}
 800163a:	b085      	sub	sp, #20
 800163c:	9003      	str	r0, [sp, #12]
 800163e:	9102      	str	r1, [sp, #8]
 8001640:	9b03      	ldr	r3, [sp, #12]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d12c      	bne.n	80016a0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x68>
 8001646:	9b02      	ldr	r3, [sp, #8]
 8001648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800164c:	4293      	cmp	r3, r2
 800164e:	d127      	bne.n	80016a0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x68>
uint32_t slopeInterval = 1000/accell;
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x70>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x74>)
 800165e:	6013      	str	r3, [r2, #0]
PID pidUq (&filterediQ,  &setUq, &setiQ, 0.005f, 0.05f, 0, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
 8001660:	2300      	movs	r3, #0
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	2301      	movs	r3, #1
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80016b0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x78>
 800166c:	eddf 0a11 	vldr	s1, [pc, #68]	; 80016b4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x7c>
 8001670:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80016b8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x80>
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x84>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x88>)
 8001678:	4912      	ldr	r1, [pc, #72]	; (80016c4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x8c>)
 800167a:	4813      	ldr	r0, [pc, #76]	; (80016c8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x90>)
 800167c:	f001 f9f4 	bl	8002a68 <_ZN3PIDC1EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef>
PID pidUd (&filterediD,  &setUd, &setiD, 0.005f, 0.05f, 0, PIDPON_TypeDef::_PID_P_ON_E, PIDCD_TypeDef::_PID_CD_DIRECT);
 8001680:	2300      	movs	r3, #0
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2301      	movs	r3, #1
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	ed9f 1a09 	vldr	s2, [pc, #36]	; 80016b0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x78>
 800168c:	eddf 0a09 	vldr	s1, [pc, #36]	; 80016b4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x7c>
 8001690:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80016b8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x80>
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x94>)
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x98>)
 8001698:	490e      	ldr	r1, [pc, #56]	; (80016d4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0x9c>)
 800169a:	480f      	ldr	r0, [pc, #60]	; (80016d8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0+0xa0>)
 800169c:	f001 f9e4 	bl	8002a68 <_ZN3PIDC1EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef>
}
 80016a0:	bf00      	nop
 80016a2:	b005      	add	sp, #20
 80016a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80016a8:	2000000c 	.word	0x2000000c
 80016ac:	200000c4 	.word	0x200000c4
 80016b0:	00000000 	.word	0x00000000
 80016b4:	3d4ccccd 	.word	0x3d4ccccd
 80016b8:	3ba3d70a 	.word	0x3ba3d70a
 80016bc:	20000004 	.word	0x20000004
 80016c0:	200000a0 	.word	0x200000a0
 80016c4:	200000b0 	.word	0x200000b0
 80016c8:	200000c8 	.word	0x200000c8
 80016cc:	2000008c 	.word	0x2000008c
 80016d0:	200000a4 	.word	0x200000a4
 80016d4:	200000b4 	.word	0x200000b4
 80016d8:	20000108 	.word	0x20000108

080016dc <_GLOBAL__sub_I_sineLookUp>:
 80016dc:	b508      	push	{r3, lr}
 80016de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016e2:	2001      	movs	r0, #1
 80016e4:	f7ff ffa8 	bl	8001638 <_Z41__static_initialization_and_destruction_0ii.lto_priv.0>
 80016e8:	bd08      	pop	{r3, pc}
	...

080016ec <UART5_IRQHandler>:
int clockFreq = 160000000; // hard coded core clock freq, to be changed later

extern "C"
{
void UART5_IRQHandler()
	{
 80016ec:	b508      	push	{r3, lr}
		uart.interrupt();
 80016ee:	4802      	ldr	r0, [pc, #8]	; (80016f8 <UART5_IRQHandler+0xc>)
 80016f0:	f000 fb66 	bl	8001dc0 <_ZN6Serial9interruptEv>
	}
 80016f4:	bf00      	nop
 80016f6:	bd08      	pop	{r3, pc}
 80016f8:	200001f8 	.word	0x200001f8

080016fc <_Z41__static_initialization_and_destruction_0ii.lto_priv.1>:
}
float map (float _variable, float _inLowerRange, float _inUpperRange, float _outLowerRange, float _outUpperRange)
{
    float rangeCoefficient = (_outUpperRange - _outLowerRange)/(_inUpperRange - _inLowerRange);
    return _variable * rangeCoefficient + _outLowerRange;
}
 80016fc:	b500      	push	{lr}
 80016fe:	b087      	sub	sp, #28
 8001700:	9005      	str	r0, [sp, #20]
 8001702:	9104      	str	r1, [sp, #16]
 8001704:	9b05      	ldr	r3, [sp, #20]
 8001706:	2b01      	cmp	r3, #1
 8001708:	f040 812a 	bne.w	8001960 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x264>
 800170c:	9b04      	ldr	r3, [sp, #16]
 800170e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001712:	4293      	cmp	r3, r2
 8001714:	f040 8124 	bne.w	8001960 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x264>
GPIO uartTX (GPIOD, 2, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::PullUp, 5);
 8001718:	2305      	movs	r3, #5
 800171a:	9303      	str	r3, [sp, #12]
 800171c:	2301      	movs	r3, #1
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	2300      	movs	r3, #0
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	2300      	movs	r3, #0
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2302      	movs	r3, #2
 800172a:	2202      	movs	r2, #2
 800172c:	498e      	ldr	r1, [pc, #568]	; (8001968 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x26c>)
 800172e:	488f      	ldr	r0, [pc, #572]	; (800196c <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x270>)
 8001730:	f000 feba 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO uartRX (GPIOC, 12, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::PullDown, 5);
 8001734:	2305      	movs	r3, #5
 8001736:	9303      	str	r3, [sp, #12]
 8001738:	2302      	movs	r3, #2
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	2300      	movs	r3, #0
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2300      	movs	r3, #0
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2302      	movs	r3, #2
 8001746:	220c      	movs	r2, #12
 8001748:	4989      	ldr	r1, [pc, #548]	; (8001970 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x274>)
 800174a:	488a      	ldr	r0, [pc, #552]	; (8001974 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x278>)
 800174c:	f000 feac 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO i2cSCL (GPIOC, 8, GPIOmode::AF, GPIOtype::OpenDrain, GPIOspeed::Low, GPIOpull::None, 8);
 8001750:	2308      	movs	r3, #8
 8001752:	9303      	str	r3, [sp, #12]
 8001754:	2300      	movs	r3, #0
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	2300      	movs	r3, #0
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	2301      	movs	r3, #1
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2302      	movs	r3, #2
 8001762:	2208      	movs	r2, #8
 8001764:	4982      	ldr	r1, [pc, #520]	; (8001970 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x274>)
 8001766:	4884      	ldr	r0, [pc, #528]	; (8001978 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x27c>)
 8001768:	f000 fe9e 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO i2cSDA (GPIOC, 9, GPIOmode::AF, GPIOtype::OpenDrain, GPIOspeed::Low, GPIOpull::None, 8);
 800176c:	2308      	movs	r3, #8
 800176e:	9303      	str	r3, [sp, #12]
 8001770:	2300      	movs	r3, #0
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	2300      	movs	r3, #0
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	2301      	movs	r3, #1
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2302      	movs	r3, #2
 800177e:	2209      	movs	r2, #9
 8001780:	497b      	ldr	r1, [pc, #492]	; (8001970 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x274>)
 8001782:	487e      	ldr	r0, [pc, #504]	; (800197c <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x280>)
 8001784:	f000 fe90 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim2ch1 (GPIOA, 0, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 1);
 8001788:	2301      	movs	r3, #1
 800178a:	9303      	str	r3, [sp, #12]
 800178c:	2300      	movs	r3, #0
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	2300      	movs	r3, #0
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	2300      	movs	r3, #0
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2302      	movs	r3, #2
 800179a:	2200      	movs	r2, #0
 800179c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80017a0:	4877      	ldr	r0, [pc, #476]	; (8001980 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x284>)
 80017a2:	f000 fe81 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch1 (GPIOC, 0, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 2);
 80017a6:	2302      	movs	r3, #2
 80017a8:	9303      	str	r3, [sp, #12]
 80017aa:	2300      	movs	r3, #0
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2302      	movs	r3, #2
 80017b8:	2200      	movs	r2, #0
 80017ba:	496d      	ldr	r1, [pc, #436]	; (8001970 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x274>)
 80017bc:	4871      	ldr	r0, [pc, #452]	; (8001984 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x288>)
 80017be:	f000 fe73 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch1N (GPIOC, 13, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 4);
 80017c2:	2304      	movs	r3, #4
 80017c4:	9303      	str	r3, [sp, #12]
 80017c6:	2300      	movs	r3, #0
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	2300      	movs	r3, #0
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2302      	movs	r3, #2
 80017d4:	220d      	movs	r2, #13
 80017d6:	4966      	ldr	r1, [pc, #408]	; (8001970 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x274>)
 80017d8:	486b      	ldr	r0, [pc, #428]	; (8001988 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x28c>)
 80017da:	f000 fe65 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch2 (GPIOC, 1, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 2);
 80017de:	2302      	movs	r3, #2
 80017e0:	9303      	str	r3, [sp, #12]
 80017e2:	2300      	movs	r3, #0
 80017e4:	9302      	str	r3, [sp, #8]
 80017e6:	2300      	movs	r3, #0
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	2300      	movs	r3, #0
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2302      	movs	r3, #2
 80017f0:	2201      	movs	r2, #1
 80017f2:	495f      	ldr	r1, [pc, #380]	; (8001970 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x274>)
 80017f4:	4865      	ldr	r0, [pc, #404]	; (800198c <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x290>)
 80017f6:	f000 fe57 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch2N (GPIOB, 0, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 6);
 80017fa:	2306      	movs	r3, #6
 80017fc:	9303      	str	r3, [sp, #12]
 80017fe:	2300      	movs	r3, #0
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2300      	movs	r3, #0
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	2300      	movs	r3, #0
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2302      	movs	r3, #2
 800180c:	2200      	movs	r2, #0
 800180e:	4960      	ldr	r1, [pc, #384]	; (8001990 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x294>)
 8001810:	4860      	ldr	r0, [pc, #384]	; (8001994 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x298>)
 8001812:	f000 fe49 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch3 (GPIOA, 10, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 6);
 8001816:	2306      	movs	r3, #6
 8001818:	9303      	str	r3, [sp, #12]
 800181a:	2300      	movs	r3, #0
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	2300      	movs	r3, #0
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	2300      	movs	r3, #0
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2302      	movs	r3, #2
 8001828:	220a      	movs	r2, #10
 800182a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800182e:	485a      	ldr	r0, [pc, #360]	; (8001998 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x29c>)
 8001830:	f000 fe3a 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO PWMtim1ch3N (GPIOB, 9, GPIOmode::AF, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 12);
 8001834:	230c      	movs	r3, #12
 8001836:	9303      	str	r3, [sp, #12]
 8001838:	2300      	movs	r3, #0
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	2300      	movs	r3, #0
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	2300      	movs	r3, #0
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2302      	movs	r3, #2
 8001846:	2209      	movs	r2, #9
 8001848:	4951      	ldr	r1, [pc, #324]	; (8001990 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x294>)
 800184a:	4854      	ldr	r0, [pc, #336]	; (800199c <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2a0>)
 800184c:	f000 fe2c 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO adc1Ch1 (GPIOA, 0, GPIOmode::Analog);
 8001850:	2300      	movs	r3, #0
 8001852:	9303      	str	r3, [sp, #12]
 8001854:	2300      	movs	r3, #0
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	2300      	movs	r3, #0
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	2300      	movs	r3, #0
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2303      	movs	r3, #3
 8001862:	2200      	movs	r2, #0
 8001864:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001868:	484d      	ldr	r0, [pc, #308]	; (80019a0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2a4>)
 800186a:	f000 fe1d 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO adc1Ch8 (GPIOC, 2, GPIOmode::Analog);
 800186e:	2300      	movs	r3, #0
 8001870:	9303      	str	r3, [sp, #12]
 8001872:	2300      	movs	r3, #0
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	2300      	movs	r3, #0
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2303      	movs	r3, #3
 8001880:	2202      	movs	r2, #2
 8001882:	493b      	ldr	r1, [pc, #236]	; (8001970 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x274>)
 8001884:	4847      	ldr	r0, [pc, #284]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2a8>)
 8001886:	f000 fe0f 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO adc1Ch9 (GPIOC, 3, GPIOmode::Analog);
 800188a:	2300      	movs	r3, #0
 800188c:	9303      	str	r3, [sp, #12]
 800188e:	2300      	movs	r3, #0
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	2300      	movs	r3, #0
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	2300      	movs	r3, #0
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2303      	movs	r3, #3
 800189c:	2203      	movs	r2, #3
 800189e:	4934      	ldr	r1, [pc, #208]	; (8001970 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x274>)
 80018a0:	4841      	ldr	r0, [pc, #260]	; (80019a8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2ac>)
 80018a2:	f000 fe01 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO adc2Ch12 (GPIOB, 2, GPIOmode::Analog); //Vin
 80018a6:	2300      	movs	r3, #0
 80018a8:	9303      	str	r3, [sp, #12]
 80018aa:	2300      	movs	r3, #0
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	2300      	movs	r3, #0
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	2300      	movs	r3, #0
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2303      	movs	r3, #3
 80018b8:	2202      	movs	r2, #2
 80018ba:	4935      	ldr	r1, [pc, #212]	; (8001990 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x294>)
 80018bc:	483b      	ldr	r0, [pc, #236]	; (80019ac <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2b0>)
 80018be:	f000 fdf3 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO led1 (GPIOC, 4, GPIOmode::Output, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 0);
 80018c2:	2300      	movs	r3, #0
 80018c4:	9303      	str	r3, [sp, #12]
 80018c6:	2300      	movs	r3, #0
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	2300      	movs	r3, #0
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	2204      	movs	r2, #4
 80018d6:	4926      	ldr	r1, [pc, #152]	; (8001970 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x274>)
 80018d8:	4835      	ldr	r0, [pc, #212]	; (80019b0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2b4>)
 80018da:	f000 fde5 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO led2 (GPIOB, 10, GPIOmode::Output, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 0);
 80018de:	2300      	movs	r3, #0
 80018e0:	9303      	str	r3, [sp, #12]
 80018e2:	2300      	movs	r3, #0
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	2300      	movs	r3, #0
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	2300      	movs	r3, #0
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2301      	movs	r3, #1
 80018f0:	220a      	movs	r2, #10
 80018f2:	4927      	ldr	r1, [pc, #156]	; (8001990 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x294>)
 80018f4:	482f      	ldr	r0, [pc, #188]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2b8>)
 80018f6:	f000 fdd7 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO led3 (GPIOB, 11, GPIOmode::Output, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 0);
 80018fa:	2300      	movs	r3, #0
 80018fc:	9303      	str	r3, [sp, #12]
 80018fe:	2300      	movs	r3, #0
 8001900:	9302      	str	r3, [sp, #8]
 8001902:	2300      	movs	r3, #0
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2300      	movs	r3, #0
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2301      	movs	r3, #1
 800190c:	220b      	movs	r2, #11
 800190e:	4920      	ldr	r1, [pc, #128]	; (8001990 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x294>)
 8001910:	4829      	ldr	r0, [pc, #164]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2bc>)
 8001912:	f000 fdc9 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO led4 (GPIOC, 11, GPIOmode::Output, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 0);
 8001916:	2300      	movs	r3, #0
 8001918:	9303      	str	r3, [sp, #12]
 800191a:	2300      	movs	r3, #0
 800191c:	9302      	str	r3, [sp, #8]
 800191e:	2300      	movs	r3, #0
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	2300      	movs	r3, #0
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	220b      	movs	r2, #11
 800192a:	4911      	ldr	r1, [pc, #68]	; (8001970 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x274>)
 800192c:	4823      	ldr	r0, [pc, #140]	; (80019bc <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2c0>)
 800192e:	f000 fdbb 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
GPIO led5 (GPIOB, 7, GPIOmode::Output, GPIOtype::PushPull, GPIOspeed::Low, GPIOpull::None, 0);
 8001932:	2300      	movs	r3, #0
 8001934:	9303      	str	r3, [sp, #12]
 8001936:	2300      	movs	r3, #0
 8001938:	9302      	str	r3, [sp, #8]
 800193a:	2300      	movs	r3, #0
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	2300      	movs	r3, #0
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	2207      	movs	r2, #7
 8001946:	4912      	ldr	r1, [pc, #72]	; (8001990 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x294>)
 8001948:	481d      	ldr	r0, [pc, #116]	; (80019c0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2c4>)
 800194a:	f000 fdad 	bl	80024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>
Serial uart (UART5, 500000);
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2c8>)
 8001950:	491d      	ldr	r1, [pc, #116]	; (80019c8 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2cc>)
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2d0>)
 8001954:	f000 f86e 	bl	8001a34 <_ZN6SerialC1EP13USART_TypeDefi>
I2C i2c3 (I2C3);
 8001958:	491d      	ldr	r1, [pc, #116]	; (80019d0 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2d4>)
 800195a:	481e      	ldr	r0, [pc, #120]	; (80019d4 <_Z41__static_initialization_and_destruction_0ii.lto_priv.1+0x2d8>)
 800195c:	f000 fee8 	bl	8002730 <_ZN3I2CC1EP11I2C_TypeDef>
}
 8001960:	bf00      	nop
 8001962:	b007      	add	sp, #28
 8001964:	f85d fb04 	ldr.w	pc, [sp], #4
 8001968:	48000c00 	.word	0x48000c00
 800196c:	20000158 	.word	0x20000158
 8001970:	48000800 	.word	0x48000800
 8001974:	20000160 	.word	0x20000160
 8001978:	20000168 	.word	0x20000168
 800197c:	20000170 	.word	0x20000170
 8001980:	20000178 	.word	0x20000178
 8001984:	20000180 	.word	0x20000180
 8001988:	20000188 	.word	0x20000188
 800198c:	20000190 	.word	0x20000190
 8001990:	48000400 	.word	0x48000400
 8001994:	20000198 	.word	0x20000198
 8001998:	200001a0 	.word	0x200001a0
 800199c:	200001a8 	.word	0x200001a8
 80019a0:	200001b0 	.word	0x200001b0
 80019a4:	200001b8 	.word	0x200001b8
 80019a8:	200001c0 	.word	0x200001c0
 80019ac:	200001c8 	.word	0x200001c8
 80019b0:	200001d0 	.word	0x200001d0
 80019b4:	200001d8 	.word	0x200001d8
 80019b8:	200001e0 	.word	0x200001e0
 80019bc:	200001e8 	.word	0x200001e8
 80019c0:	200001f0 	.word	0x200001f0
 80019c4:	0007a120 	.word	0x0007a120
 80019c8:	40005000 	.word	0x40005000
 80019cc:	200001f8 	.word	0x200001f8
 80019d0:	40007800 	.word	0x40007800
 80019d4:	20000308 	.word	0x20000308

080019d8 <_GLOBAL__sub_I__ZN12ClockManager8hseClockE>:
 80019d8:	b508      	push	{r3, lr}
 80019da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff fe8c 	bl	80016fc <_Z41__static_initialization_and_destruction_0ii.lto_priv.1>
 80019e4:	bd08      	pop	{r3, pc}
	...

080019e8 <__NVIC_EnableIRQ.lto_priv.1>:
{
 80019e8:	b082      	sub	sp, #8
 80019ea:	4603      	mov	r3, r0
 80019ec:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0c      	blt.n	8001a12 <__NVIC_EnableIRQ.lto_priv.1+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4905      	ldr	r1, [pc, #20]	; (8001a18 <__NVIC_EnableIRQ.lto_priv.1+0x30>)
 8001a02:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a12:	bf00      	nop
 8001a14:	b002      	add	sp, #8
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <_ZN6BufferILi256EEC1Ev>:
#include <stdint.h>


template < int bSize >

class Buffer
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	9001      	str	r0, [sp, #4]
 8001a20:	9b01      	ldr	r3, [sp, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	9b01      	ldr	r3, [sp, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	705a      	strb	r2, [r3, #1]
 8001a2c:	9b01      	ldr	r3, [sp, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	b002      	add	sp, #8
 8001a32:	4770      	bx	lr

08001a34 <_ZN6SerialC1EP13USART_TypeDefi>:
#include "UART.h"


Serial::Serial (USART_TypeDef *_USARTx, int _baudRate): baudRate(_baudRate), USARTx(_USARTx)
 8001a34:	b500      	push	{lr}
 8001a36:	b085      	sub	sp, #20
 8001a38:	9003      	str	r0, [sp, #12]
 8001a3a:	9102      	str	r1, [sp, #8]
 8001a3c:	9201      	str	r2, [sp, #4]
 8001a3e:	9b03      	ldr	r3, [sp, #12]
 8001a40:	9a01      	ldr	r2, [sp, #4]
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	9b03      	ldr	r3, [sp, #12]
 8001a46:	9a02      	ldr	r2, [sp, #8]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	9b03      	ldr	r3, [sp, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	721a      	strb	r2, [r3, #8]
 8001a50:	9b03      	ldr	r3, [sp, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	725a      	strb	r2, [r3, #9]
 8001a56:	9b03      	ldr	r3, [sp, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	729a      	strb	r2, [r3, #10]
 8001a5c:	9b03      	ldr	r3, [sp, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	72da      	strb	r2, [r3, #11]
 8001a62:	9b03      	ldr	r3, [sp, #12]
 8001a64:	330c      	adds	r3, #12
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ffd8 	bl	8001a1c <_ZN6BufferILi256EEC1Ev>
{
	
	
	//delay(100);

	switch ((uint32_t)USARTx)
 8001a6c:	9b03      	ldr	r3, [sp, #12]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a4f      	ldr	r2, [pc, #316]	; (8001bb0 <_ZN6SerialC1EP13USART_TypeDefi+0x17c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d016      	beq.n	8001aa4 <_ZN6SerialC1EP13USART_TypeDefi+0x70>
 8001a76:	4a4e      	ldr	r2, [pc, #312]	; (8001bb0 <_ZN6SerialC1EP13USART_TypeDefi+0x17c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	f200 8081 	bhi.w	8001b80 <_ZN6SerialC1EP13USART_TypeDefi+0x14c>
 8001a7e:	4a4d      	ldr	r2, [pc, #308]	; (8001bb4 <_ZN6SerialC1EP13USART_TypeDefi+0x180>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d067      	beq.n	8001b54 <_ZN6SerialC1EP13USART_TypeDefi+0x120>
 8001a84:	4a4b      	ldr	r2, [pc, #300]	; (8001bb4 <_ZN6SerialC1EP13USART_TypeDefi+0x180>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d87a      	bhi.n	8001b80 <_ZN6SerialC1EP13USART_TypeDefi+0x14c>
 8001a8a:	4a4b      	ldr	r2, [pc, #300]	; (8001bb8 <_ZN6SerialC1EP13USART_TypeDefi+0x184>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d04b      	beq.n	8001b28 <_ZN6SerialC1EP13USART_TypeDefi+0xf4>
 8001a90:	4a49      	ldr	r2, [pc, #292]	; (8001bb8 <_ZN6SerialC1EP13USART_TypeDefi+0x184>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d874      	bhi.n	8001b80 <_ZN6SerialC1EP13USART_TypeDefi+0x14c>
 8001a96:	4a49      	ldr	r2, [pc, #292]	; (8001bbc <_ZN6SerialC1EP13USART_TypeDefi+0x188>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d019      	beq.n	8001ad0 <_ZN6SerialC1EP13USART_TypeDefi+0x9c>
 8001a9c:	4a48      	ldr	r2, [pc, #288]	; (8001bc0 <_ZN6SerialC1EP13USART_TypeDefi+0x18c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d02c      	beq.n	8001afc <_ZN6SerialC1EP13USART_TypeDefi+0xc8>
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_UART5RST;
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_UART5RST;
    NVIC_EnableIRQ(IRQn_Type::UART5_IRQn);
		break;
	default:
		break;
 8001aa2:	e06d      	b.n	8001b80 <_ZN6SerialC1EP13USART_TypeDefi+0x14c>
	RCC->APB2ENR  |= RCC_APB2ENR_USART1EN;
 8001aa4:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa8:	4a46      	ldr	r2, [pc, #280]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aae:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->APB2RSTR |= RCC_APB2RSTR_USART1RST;
 8001ab0:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	4a43      	ldr	r2, [pc, #268]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aba:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB2RSTR &= ~RCC_APB2RSTR_USART1RST;
 8001abc:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a40      	ldr	r2, [pc, #256]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
    NVIC_EnableIRQ(IRQn_Type::USART1_IRQn);
 8001ac8:	2025      	movs	r0, #37	; 0x25
 8001aca:	f7ff ff8d 	bl	80019e8 <__NVIC_EnableIRQ.lto_priv.1>
		break;
 8001ace:	e058      	b.n	8001b82 <_ZN6SerialC1EP13USART_TypeDefi+0x14e>
	RCC->APB1ENR1  |= RCC_APB1ENR1_USART2EN;
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	4a3b      	ldr	r2, [pc, #236]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ada:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_USART2RST;
 8001adc:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	4a38      	ldr	r2, [pc, #224]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae6:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_USART2RST;
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	4a35      	ldr	r2, [pc, #212]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001aee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001af2:	6393      	str	r3, [r2, #56]	; 0x38
    NVIC_EnableIRQ(IRQn_Type::USART2_IRQn);
 8001af4:	2026      	movs	r0, #38	; 0x26
 8001af6:	f7ff ff77 	bl	80019e8 <__NVIC_EnableIRQ.lto_priv.1>
		break;
 8001afa:	e042      	b.n	8001b82 <_ZN6SerialC1EP13USART_TypeDefi+0x14e>
	RCC->APB1ENR1  |= RCC_APB1ENR1_USART3EN;
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	4a30      	ldr	r2, [pc, #192]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b06:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_USART3RST;
 8001b08:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0c:	4a2d      	ldr	r2, [pc, #180]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b12:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_USART3RST;
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1e:	6393      	str	r3, [r2, #56]	; 0x38
    NVIC_EnableIRQ(IRQn_Type::USART3_IRQn);
 8001b20:	2027      	movs	r0, #39	; 0x27
 8001b22:	f7ff ff61 	bl	80019e8 <__NVIC_EnableIRQ.lto_priv.1>
		break;
 8001b26:	e02c      	b.n	8001b82 <_ZN6SerialC1EP13USART_TypeDefi+0x14e>
	RCC->APB1ENR1  |= RCC_APB1ENR1_UART4EN;
 8001b28:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	4a25      	ldr	r2, [pc, #148]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b32:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_UART4RST;
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b3e:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_UART4RST;
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	4a1f      	ldr	r2, [pc, #124]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b46:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b4a:	6393      	str	r3, [r2, #56]	; 0x38
    NVIC_EnableIRQ(IRQn_Type::UART4_IRQn);
 8001b4c:	2034      	movs	r0, #52	; 0x34
 8001b4e:	f7ff ff4b 	bl	80019e8 <__NVIC_EnableIRQ.lto_priv.1>
		break;
 8001b52:	e016      	b.n	8001b82 <_ZN6SerialC1EP13USART_TypeDefi+0x14e>
	RCC->APB1ENR1  |= RCC_APB1ENR1_UART5EN;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	4a1a      	ldr	r2, [pc, #104]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b5e:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_UART5RST;
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b6a:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_UART5RST;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <_ZN6SerialC1EP13USART_TypeDefi+0x190>)
 8001b72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b76:	6393      	str	r3, [r2, #56]	; 0x38
    NVIC_EnableIRQ(IRQn_Type::UART5_IRQn);
 8001b78:	2035      	movs	r0, #53	; 0x35
 8001b7a:	f7ff ff35 	bl	80019e8 <__NVIC_EnableIRQ.lto_priv.1>
		break;
 8001b7e:	e000      	b.n	8001b82 <_ZN6SerialC1EP13USART_TypeDefi+0x14e>
		break;
 8001b80:	bf00      	nop
	}




    USARTx->BRR =  (AHB2clockFreq/baudRate);
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <_ZN6SerialC1EP13USART_TypeDefi+0x194>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	9b03      	ldr	r3, [sp, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b8e:	9b03      	ldr	r3, [sp, #12]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |= ( USART_CR1_UE| USART_CR1_RXNEIE | USART_CR1_TE | USART_CR1_RE);
 8001b94:	9b03      	ldr	r3, [sp, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	9b03      	ldr	r3, [sp, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8001ba2:	601a      	str	r2, [r3, #0]
}
 8001ba4:	9b03      	ldr	r3, [sp, #12]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	b005      	add	sp, #20
 8001baa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bae:	bf00      	nop
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40005000 	.word	0x40005000
 8001bb8:	40004c00 	.word	0x40004c00
 8001bbc:	40004400 	.word	0x40004400
 8001bc0:	40004800 	.word	0x40004800
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	20000020 	.word	0x20000020

08001bcc <_ZN6Serial8sendCharEc>:

void Serial::sendChar (char _char)
{
 8001bcc:	b082      	sub	sp, #8
 8001bce:	9001      	str	r0, [sp, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	f88d 3003 	strb.w	r3, [sp, #3]
	USARTx->TDR = _char;
 8001bd6:	9b01      	ldr	r3, [sp, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(USARTx->ISR & USART_ISR_TC));
 8001be0:	bf00      	nop
 8001be2:	9b01      	ldr	r3, [sp, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f3      	bne.n	8001be2 <_ZN6Serial8sendCharEc+0x16>
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	b002      	add	sp, #8
 8001c00:	4770      	bx	lr

08001c02 <_ZN6Serial5printEPKc>:

void Serial::print(const char* _string)
{
 8001c02:	b500      	push	{lr}
 8001c04:	b083      	sub	sp, #12
 8001c06:	9001      	str	r0, [sp, #4]
 8001c08:	9100      	str	r1, [sp, #0]
	while (*_string)
 8001c0a:	e008      	b.n	8001c1e <_ZN6Serial5printEPKc+0x1c>
	{
		sendChar(*_string);
 8001c0c:	9b00      	ldr	r3, [sp, #0]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	9801      	ldr	r0, [sp, #4]
 8001c14:	f7ff ffda 	bl	8001bcc <_ZN6Serial8sendCharEc>
		_string++;
 8001c18:	9b00      	ldr	r3, [sp, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	9300      	str	r3, [sp, #0]
	while (*_string)
 8001c1e:	9b00      	ldr	r3, [sp, #0]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f2      	bne.n	8001c0c <_ZN6Serial5printEPKc+0xa>
	}
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	b003      	add	sp, #12
 8001c2c:	f85d fb04 	ldr.w	pc, [sp], #4

08001c30 <_ZN6Serial5printEi>:

void Serial::print(int _number)
{ 
 8001c30:	b500      	push	{lr}
 8001c32:	b087      	sub	sp, #28
 8001c34:	9001      	str	r0, [sp, #4]
 8001c36:	9100      	str	r1, [sp, #0]
	char charTab[11]={};
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9303      	str	r3, [sp, #12]
 8001c3c:	ab04      	add	r3, sp, #16
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f8c3 2003 	str.w	r2, [r3, #3]
	typeConverter::IntToString(_number, charTab);
 8001c46:	ab03      	add	r3, sp, #12
 8001c48:	4619      	mov	r1, r3
 8001c4a:	9800      	ldr	r0, [sp, #0]
 8001c4c:	f000 fdcc 	bl	80027e8 <_ZN13typeConverter11IntToStringEiPc>
	print(charTab);
 8001c50:	ab03      	add	r3, sp, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	9801      	ldr	r0, [sp, #4]
 8001c56:	f7ff ffd4 	bl	8001c02 <_ZN6Serial5printEPKc>
}
 8001c5a:	bf00      	nop
 8001c5c:	b007      	add	sp, #28
 8001c5e:	f85d fb04 	ldr.w	pc, [sp], #4

08001c62 <_ZN6Serial5printEdh>:

void Serial::print(double _number, uint8_t _percision)
{
 8001c62:	b510      	push	{r4, lr}
 8001c64:	b08a      	sub	sp, #40	; 0x28
 8001c66:	9003      	str	r0, [sp, #12]
 8001c68:	ed8d 0b00 	vstr	d0, [sp]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	f88d 300b 	strb.w	r3, [sp, #11]
	char charTab[20]={};
 8001c72:	2300      	movs	r3, #0
 8001c74:	9305      	str	r3, [sp, #20]
 8001c76:	ab06      	add	r3, sp, #24
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
	typeConverter::fractionalToString(_number, charTab, _percision);
 8001c82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001c86:	f7fe fc63 	bl	8000550 <__aeabi_d2f>
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001c90:	ab05      	add	r3, sp, #20
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	ee00 4a10 	vmov	s0, r4
 8001c9a:	f000 fdff 	bl	800289c <_ZN13typeConverter18fractionalToStringEfPch>
	print(charTab);
 8001c9e:	ab05      	add	r3, sp, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	9803      	ldr	r0, [sp, #12]
 8001ca4:	f7ff ffad 	bl	8001c02 <_ZN6Serial5printEPKc>
}
 8001ca8:	bf00      	nop
 8001caa:	b00a      	add	sp, #40	; 0x28
 8001cac:	bd10      	pop	{r4, pc}
	...

08001cb0 <_ZN6Serial7printlnEdh>:
    print(_number);
    print("\n");
}

void Serial::println(double _number, uint8_t _percision)
{
 8001cb0:	b500      	push	{lr}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	9003      	str	r0, [sp, #12]
 8001cb6:	ed8d 0b00 	vstr	d0, [sp]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	f88d 300b 	strb.w	r3, [sp, #11]
	print(_number, _percision);
 8001cc0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	ed9d 0b00 	vldr	d0, [sp]
 8001cca:	9803      	ldr	r0, [sp, #12]
 8001ccc:	f7ff ffc9 	bl	8001c62 <_ZN6Serial5printEdh>
	print("\n");
 8001cd0:	4903      	ldr	r1, [pc, #12]	; (8001ce0 <_ZN6Serial7printlnEdh+0x30>)
 8001cd2:	9803      	ldr	r0, [sp, #12]
 8001cd4:	f7ff ff95 	bl	8001c02 <_ZN6Serial5printEPKc>
}
 8001cd8:	bf00      	nop
 8001cda:	b005      	add	sp, #20
 8001cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ce0:	08003d68 	.word	0x08003d68

08001ce4 <_ZN6Serial8readCharEv>:

char Serial::readChar ()
{
 8001ce4:	b500      	push	{lr}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	9001      	str	r0, [sp, #4]
	char tmpChar;
	buffer.read(&tmpChar);
 8001cea:	9b01      	ldr	r3, [sp, #4]
 8001cec:	330c      	adds	r3, #12
 8001cee:	f10d 020f 	add.w	r2, sp, #15
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f88f 	bl	8001e18 <_ZN6BufferILi256EE4readEPc>
	return tmpChar;
 8001cfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	b005      	add	sp, #20
 8001d02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001d08 <_ZN6Serial11readTillEOLEPc>:

bool Serial::readTillEOL (char *_line) // returns 1 if EOL is found, 0 if not, when EOL is found save read data to _line
{
 8001d08:	b500      	push	{lr}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	9001      	str	r0, [sp, #4]
 8001d0e:	9100      	str	r1, [sp, #0]
	if (uart.available())
 8001d10:	4822      	ldr	r0, [pc, #136]	; (8001d9c <_ZN6Serial11readTillEOLEPc+0x94>)
 8001d12:	f000 f845 	bl	8001da0 <_ZN6Serial9availableEv>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d039      	beq.n	8001d90 <_ZN6Serial11readTillEOLEPc+0x88>
	{		
		
		if(count==0)
 8001d1c:	9b01      	ldr	r3, [sp, #4]
 8001d1e:	7a9b      	ldrb	r3, [r3, #10]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d112      	bne.n	8001d4a <_ZN6Serial11readTillEOLEPc+0x42>
		{
				for (int i=0; i<=elementsToFlush; i++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	9305      	str	r3, [sp, #20]
 8001d28:	e009      	b.n	8001d3e <_ZN6Serial11readTillEOLEPc+0x36>
				{
					char* tempPtr =_line+i;
 8001d2a:	9b05      	ldr	r3, [sp, #20]
 8001d2c:	9a00      	ldr	r2, [sp, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	9304      	str	r3, [sp, #16]
					*tempPtr = 0;				
 8001d32:	9b04      	ldr	r3, [sp, #16]
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
				for (int i=0; i<=elementsToFlush; i++)
 8001d38:	9b05      	ldr	r3, [sp, #20]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	9305      	str	r3, [sp, #20]
 8001d3e:	9b01      	ldr	r3, [sp, #4]
 8001d40:	7adb      	ldrb	r3, [r3, #11]
 8001d42:	461a      	mov	r2, r3
 8001d44:	9b05      	ldr	r3, [sp, #20]
 8001d46:	4293      	cmp	r3, r2
 8001d48:	ddef      	ble.n	8001d2a <_ZN6Serial11readTillEOLEPc+0x22>
				}							
		}		

		char c = uart.readChar();
 8001d4a:	4814      	ldr	r0, [pc, #80]	; (8001d9c <_ZN6Serial11readTillEOLEPc+0x94>)
 8001d4c:	f7ff ffca 	bl	8001ce4 <_ZN6Serial8readCharEv>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f88d 300f 	strb.w	r3, [sp, #15]
		if (c == '\n')
 8001d56:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001d5a:	2b0a      	cmp	r3, #10
 8001d5c:	d108      	bne.n	8001d70 <_ZN6Serial11readTillEOLEPc+0x68>
		{
			//GPIOA->ODR ^= GPIO_ODR_OD5;
			elementsToFlush=count;
 8001d5e:	9b01      	ldr	r3, [sp, #4]
 8001d60:	7a9a      	ldrb	r2, [r3, #10]
 8001d62:	9b01      	ldr	r3, [sp, #4]
 8001d64:	72da      	strb	r2, [r3, #11]
			count=0;
 8001d66:	9b01      	ldr	r3, [sp, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	729a      	strb	r2, [r3, #10]
			return 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e010      	b.n	8001d92 <_ZN6Serial11readTillEOLEPc+0x8a>
		}
		else
		{
			_line+=count;
 8001d70:	9b01      	ldr	r3, [sp, #4]
 8001d72:	7a9b      	ldrb	r3, [r3, #10]
 8001d74:	461a      	mov	r2, r3
 8001d76:	9b00      	ldr	r3, [sp, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	9300      	str	r3, [sp, #0]
			*_line=c;
 8001d7c:	9b00      	ldr	r3, [sp, #0]
 8001d7e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001d82:	701a      	strb	r2, [r3, #0]
			count++;
 8001d84:	9b01      	ldr	r3, [sp, #4]
 8001d86:	7a9b      	ldrb	r3, [r3, #10]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	9b01      	ldr	r3, [sp, #4]
 8001d8e:	729a      	strb	r2, [r3, #10]
		}		
	}
	return 0;	
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	b007      	add	sp, #28
 8001d96:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d9a:	bf00      	nop
 8001d9c:	200001f8 	.word	0x200001f8

08001da0 <_ZN6Serial9availableEv>:

bool Serial::available ()
{
 8001da0:	b500      	push	{lr}
 8001da2:	b083      	sub	sp, #12
 8001da4:	9001      	str	r0, [sp, #4]
	return !buffer.empty();
 8001da6:	9b01      	ldr	r3, [sp, #4]
 8001da8:	330c      	adds	r3, #12
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f867 	bl	8001e7e <_ZN6BufferILi256EE5emptyEv>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f083 0301 	eor.w	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	b003      	add	sp, #12
 8001dbc:	f85d fb04 	ldr.w	pc, [sp], #4

08001dc0 <_ZN6Serial9interruptEv>:



void Serial::interrupt()
{
 8001dc0:	b500      	push	{lr}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	9001      	str	r0, [sp, #4]
		if (USARTx->ISR & USART_ISR_RXNE)
 8001dc6:	9b01      	ldr	r3, [sp, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00c      	beq.n	8001df8 <_ZN6Serial9interruptEv+0x38>
		{			
			char c = USARTx->RDR;
 8001dde:	9b01      	ldr	r3, [sp, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f88d 300f 	strb.w	r3, [sp, #15]
			buffer.write(c);
 8001de8:	9b01      	ldr	r3, [sp, #4]
 8001dea:	330c      	adds	r3, #12
 8001dec:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f858 	bl	8001ea8 <_ZN6BufferILi256EE5writeEc>
		}
}
 8001df8:	bf00      	nop
 8001dfa:	b005      	add	sp, #20
 8001dfc:	f85d fb04 	ldr.w	pc, [sp], #4

08001e00 <_ZN6Serial11bufferFlushEv>:

void Serial::bufferFlush()
{
 8001e00:	b500      	push	{lr}
 8001e02:	b083      	sub	sp, #12
 8001e04:	9001      	str	r0, [sp, #4]
	buffer.flush();
 8001e06:	9b01      	ldr	r3, [sp, #4]
 8001e08:	330c      	adds	r3, #12
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f882 	bl	8001f14 <_ZN6BufferILi256EE5flushEv>
}
 8001e10:	bf00      	nop
 8001e12:	b003      	add	sp, #12
 8001e14:	f85d fb04 	ldr.w	pc, [sp], #4

08001e18 <_ZN6BufferILi256EE4readEPc>:
		head = 0;

	return Buffer::status::ok;
	
}
	status read(char* _data)
 8001e18:	b082      	sub	sp, #8
 8001e1a:	9001      	str	r0, [sp, #4]
 8001e1c:	9100      	str	r1, [sp, #0]
	{
	if (tail==head) 
 8001e1e:	9b01      	ldr	r3, [sp, #4]
 8001e20:	785b      	ldrb	r3, [r3, #1]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	9b01      	ldr	r3, [sp, #4]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	bf0c      	ite	eq
 8001e2e:	2301      	moveq	r3, #1
 8001e30:	2300      	movne	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <_ZN6BufferILi256EE4readEPc+0x24>
		return Buffer::status::bufferEmpty;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e01d      	b.n	8001e78 <_ZN6BufferILi256EE4readEPc+0x60>
		
	*_data=buffer[tail];
 8001e3c:	9b01      	ldr	r3, [sp, #4]
 8001e3e:	785b      	ldrb	r3, [r3, #1]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	9b01      	ldr	r3, [sp, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	789a      	ldrb	r2, [r3, #2]
 8001e4a:	9b00      	ldr	r3, [sp, #0]
 8001e4c:	701a      	strb	r2, [r3, #0]
	tail++;
 8001e4e:	9b01      	ldr	r3, [sp, #4]
 8001e50:	785b      	ldrb	r3, [r3, #1]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	9b01      	ldr	r3, [sp, #4]
 8001e5a:	705a      	strb	r2, [r3, #1]

	if ( tail == (bSize-1) )
 8001e5c:	9b01      	ldr	r3, [sp, #4]
 8001e5e:	785b      	ldrb	r3, [r3, #1]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2bff      	cmp	r3, #255	; 0xff
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <_ZN6BufferILi256EE4readEPc+0x5e>
		tail = 0;
 8001e70:	9b01      	ldr	r3, [sp, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	705a      	strb	r2, [r3, #1]

	return Buffer::status::ok;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	b002      	add	sp, #8
 8001e7c:	4770      	bx	lr

08001e7e <_ZN6BufferILi256EE5emptyEv>:
	bool empty()
 8001e7e:	b082      	sub	sp, #8
 8001e80:	9001      	str	r0, [sp, #4]
		if (tail==head) 
 8001e82:	9b01      	ldr	r3, [sp, #4]
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	9b01      	ldr	r3, [sp, #4]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <_ZN6BufferILi256EE5emptyEv+0x22>
			return 1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <_ZN6BufferILi256EE5emptyEv+0x24>
		return 0;		
 8001ea0:	2300      	movs	r3, #0
	}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	b002      	add	sp, #8
 8001ea6:	4770      	bx	lr

08001ea8 <_ZN6BufferILi256EE5writeEc>:
	status write(char _data)
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	9001      	str	r0, [sp, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((head+1)==tail)
 8001eb2:	9b01      	ldr	r3, [sp, #4]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	9a01      	ldr	r2, [sp, #4]
 8001ebc:	7852      	ldrb	r2, [r2, #1]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <_ZN6BufferILi256EE5writeEc+0x2a>
		return Buffer::status::bufferFull;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e01d      	b.n	8001f0e <_ZN6BufferILi256EE5writeEc+0x66>
	buffer[head] = _data;
 8001ed2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001ed6:	9b01      	ldr	r3, [sp, #4]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	4619      	mov	r1, r3
 8001ede:	9b01      	ldr	r3, [sp, #4]
 8001ee0:	440b      	add	r3, r1
 8001ee2:	709a      	strb	r2, [r3, #2]
	head++;
 8001ee4:	9b01      	ldr	r3, [sp, #4]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	9b01      	ldr	r3, [sp, #4]
 8001ef0:	701a      	strb	r2, [r3, #0]
	if ( head == (bSize-1) )
 8001ef2:	9b01      	ldr	r3, [sp, #4]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2bff      	cmp	r3, #255	; 0xff
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <_ZN6BufferILi256EE5writeEc+0x64>
		head = 0;
 8001f06:	9b01      	ldr	r3, [sp, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
	return Buffer::status::ok;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	b002      	add	sp, #8
 8001f12:	4770      	bx	lr

08001f14 <_ZN6BufferILi256EE5flushEv>:
	void flush()
 8001f14:	b082      	sub	sp, #8
 8001f16:	9001      	str	r0, [sp, #4]
		head=0;
 8001f18:	9b01      	ldr	r3, [sp, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
		tail=0;
 8001f1e:	9b01      	ldr	r3, [sp, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	705a      	strb	r2, [r3, #1]
	}
 8001f24:	bf00      	nop
 8001f26:	b002      	add	sp, #8
 8001f28:	4770      	bx	lr
	...

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	4603      	mov	r3, r0
 8001f30:	9100      	str	r1, [sp, #0]
 8001f32:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0a      	blt.n	8001f54 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	9b00      	ldr	r3, [sp, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	490c      	ldr	r1, [pc, #48]	; (8001f74 <__NVIC_SetPriority+0x48>)
 8001f44:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f52:	e00b      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	9b00      	ldr	r3, [sp, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4907      	ldr	r1, [pc, #28]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	b002      	add	sp, #8
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b500      	push	{lr}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	9001      	str	r0, [sp, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f82:	9b01      	ldr	r3, [sp, #4]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8a:	d301      	bcc.n	8001f90 <SysTick_Config+0x14>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e00f      	b.n	8001fb0 <SysTick_Config+0x34>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f90:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <SysTick_Config+0x3c>)
 8001f92:	9b01      	ldr	r3, [sp, #4]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f98:	210f      	movs	r1, #15
 8001f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9e:	f7ff ffc5 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SysTick_Config+0x3c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <SysTick_Config+0x3c>)
 8001faa:	2207      	movs	r2, #7
 8001fac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	b003      	add	sp, #12
 8001fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <SysTick_Handler>:

extern "C"
{
    void SysTick_Handler()
	{
		milis++;
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SysTick_Handler+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a03      	ldr	r2, [pc, #12]	; (8001fd0 <SysTick_Handler+0x14>)
 8001fc4:	6013      	str	r3, [r2, #0]
		TIM6->EGR = TIM_EGR_UG;
 8001fc6:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <SysTick_Handler+0x18>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	615a      	str	r2, [r3, #20]
	}
 8001fcc:	bf00      	nop
 8001fce:	4770      	bx	lr
 8001fd0:	2000030c 	.word	0x2000030c
 8001fd4:	40001000 	.word	0x40001000

08001fd8 <_ZN12ClockManager7hseInitEv>:
}

void ClockManager::hseInit()
{
	if (!(RCC->CR & RCC_CR_HSERDY))
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <_ZN12ClockManager7hseInitEv+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d011      	beq.n	8002012 <_ZN12ClockManager7hseInitEv+0x3a>
	{
		RCC->CR |= RCC_CR_HSEON;
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <_ZN12ClockManager7hseInitEv+0x40>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <_ZN12ClockManager7hseInitEv+0x40>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
		while(!(RCC->CR & RCC_CR_HSERDY));
 8001ffa:	bf00      	nop
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <_ZN12ClockManager7hseInitEv+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f4      	bne.n	8001ffc <_ZN12ClockManager7hseInitEv+0x24>
	}
}
 8002012:	bf00      	nop
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000

0800201c <_ZN12ClockManager18internalFreqUpdateEm>:

void ClockManager::internalFreqUpdate(uint32_t _targetFreq)
{
 800201c:	b086      	sub	sp, #24
 800201e:	9001      	str	r0, [sp, #4]
	uint32_t flashDiv = 35000000;
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <_ZN12ClockManager18internalFreqUpdateEm+0xf4>)
 8002022:	9305      	str	r3, [sp, #20]

	if (_targetFreq < 26000000)
 8002024:	9b01      	ldr	r3, [sp, #4]
 8002026:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <_ZN12ClockManager18internalFreqUpdateEm+0xf8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d812      	bhi.n	8002052 <_ZN12ClockManager18internalFreqUpdateEm+0x36>
	{
		
		PWR->CR1 = 0x2 << PWR_CR1_VOS_Pos;
 800202c:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 800202e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002032:	601a      	str	r2, [r3, #0]
		while(PWR->SR2 & PWR_SR2_VOSF);
 8002034:	bf00      	nop
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf14      	ite	ne
 8002042:	2301      	movne	r3, #1
 8002044:	2300      	moveq	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f4      	bne.n	8002036 <_ZN12ClockManager18internalFreqUpdateEm+0x1a>
		flashDiv = 12000000;
 800204c:	4b33      	ldr	r3, [pc, #204]	; (800211c <_ZN12ClockManager18internalFreqUpdateEm+0x100>)
 800204e:	9305      	str	r3, [sp, #20]
 8002050:	e031      	b.n	80020b6 <_ZN12ClockManager18internalFreqUpdateEm+0x9a>
	}
	else if (_targetFreq < 150000000)
 8002052:	9b01      	ldr	r3, [sp, #4]
 8002054:	4a32      	ldr	r2, [pc, #200]	; (8002120 <_ZN12ClockManager18internalFreqUpdateEm+0x104>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d817      	bhi.n	800208a <_ZN12ClockManager18internalFreqUpdateEm+0x6e>
	{
		
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 800205a:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 800205c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002060:	601a      	str	r2, [r3, #0]
		while(PWR->SR2 & PWR_SR2_VOSF);
 8002062:	bf00      	nop
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f4      	bne.n	8002064 <_ZN12ClockManager18internalFreqUpdateEm+0x48>
		PWR->CR5 = PWR_CR5_R1MODE;
 800207a:	4b27      	ldr	r3, [pc, #156]	; (8002118 <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 800207c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		flashDiv = 30000000;
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <_ZN12ClockManager18internalFreqUpdateEm+0x108>)
 8002086:	9305      	str	r3, [sp, #20]
 8002088:	e015      	b.n	80020b6 <_ZN12ClockManager18internalFreqUpdateEm+0x9a>
	}
	else
	{
		
		PWR->CR1 = 0x1 << PWR_CR1_VOS_Pos;
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 800208c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002090:	601a      	str	r2, [r3, #0]
		while(PWR->SR2 & PWR_SR2_VOSF);
 8002092:	bf00      	nop
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f4      	bne.n	8002094 <_ZN12ClockManager18internalFreqUpdateEm+0x78>
		PWR->CR5 = 0;
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <_ZN12ClockManager18internalFreqUpdateEm+0xfc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		flashDiv = 34000000;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <_ZN12ClockManager18internalFreqUpdateEm+0x10c>)
 80020b4:	9305      	str	r3, [sp, #20]
	}

	ahbClock = _targetFreq;
 80020b6:	4a1d      	ldr	r2, [pc, #116]	; (800212c <_ZN12ClockManager18internalFreqUpdateEm+0x110>)
 80020b8:	9b01      	ldr	r3, [sp, #4]
 80020ba:	6013      	str	r3, [r2, #0]

	uint32_t waitStates = ahbClock / flashDiv < 15 ? ahbClock / flashDiv : 15;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <_ZN12ClockManager18internalFreqUpdateEm+0x110>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	9b05      	ldr	r3, [sp, #20]
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	bf28      	it	cs
 80020ca:	230f      	movcs	r3, #15
 80020cc:	9304      	str	r3, [sp, #16]
	uint32_t flashConf = (FLASH->ACR & ~FLASH_ACR_LATENCY_Msk) | waitStates;
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <_ZN12ClockManager18internalFreqUpdateEm+0x114>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 030f 	bic.w	r3, r3, #15
 80020d6:	9a04      	ldr	r2, [sp, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	9303      	str	r3, [sp, #12]
	
	FLASH->ACR = flashConf;
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <_ZN12ClockManager18internalFreqUpdateEm+0x114>)
 80020de:	9b03      	ldr	r3, [sp, #12]
 80020e0:	6013      	str	r3, [r2, #0]
	while(FLASH->ACR != flashConf)
 80020e2:	bf00      	nop
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <_ZN12ClockManager18internalFreqUpdateEm+0x114>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	9a03      	ldr	r2, [sp, #12]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f5      	bne.n	80020e4 <_ZN12ClockManager18internalFreqUpdateEm+0xc8>
		;


	apbClock = ahbClock;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <_ZN12ClockManager18internalFreqUpdateEm+0x110>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <_ZN12ClockManager18internalFreqUpdateEm+0x118>)
 80020fe:	6013      	str	r3, [r2, #0]
	timerClock = apbClock;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <_ZN12ClockManager18internalFreqUpdateEm+0x118>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <_ZN12ClockManager18internalFreqUpdateEm+0x11c>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	b006      	add	sp, #24
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	02160ec0 	.word	0x02160ec0
 8002114:	018cba7f 	.word	0x018cba7f
 8002118:	40007000 	.word	0x40007000
 800211c:	00b71b00 	.word	0x00b71b00
 8002120:	08f0d17f 	.word	0x08f0d17f
 8002124:	01c9c380 	.word	0x01c9c380
 8002128:	0206cc80 	.word	0x0206cc80
 800212c:	20000028 	.word	0x20000028
 8002130:	40022000 	.word	0x40022000
 8002134:	2000002c 	.word	0x2000002c
 8002138:	20000030 	.word	0x20000030

0800213c <_ZN12ClockManager9setSysClkE6clkSrc>:

void ClockManager::setSysClk(const clkSrc _src)
{
 800213c:	b500      	push	{lr}
 800213e:	b085      	sub	sp, #20
 8002140:	9001      	str	r0, [sp, #4]
	uint32_t targetFreq = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	9303      	str	r3, [sp, #12]
	switch(_src)
 8002146:	9b01      	ldr	r3, [sp, #4]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d010      	beq.n	800216e <_ZN12ClockManager9setSysClkE6clkSrc+0x32>
 800214c:	9b01      	ldr	r3, [sp, #4]
 800214e:	2b03      	cmp	r3, #3
 8002150:	dc11      	bgt.n	8002176 <_ZN12ClockManager9setSysClkE6clkSrc+0x3a>
 8002152:	9b01      	ldr	r3, [sp, #4]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d003      	beq.n	8002160 <_ZN12ClockManager9setSysClkE6clkSrc+0x24>
 8002158:	9b01      	ldr	r3, [sp, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d003      	beq.n	8002166 <_ZN12ClockManager9setSysClkE6clkSrc+0x2a>
 800215e:	e00a      	b.n	8002176 <_ZN12ClockManager9setSysClkE6clkSrc+0x3a>
	{
	case clkSrc::hsi:
		targetFreq = hsiClock;
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <_ZN12ClockManager9setSysClkE6clkSrc+0x94>)
 8002162:	9303      	str	r3, [sp, #12]
		break;
 8002164:	e007      	b.n	8002176 <_ZN12ClockManager9setSysClkE6clkSrc+0x3a>
	case clkSrc::hse:
		targetFreq = hseClock;
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <_ZN12ClockManager9setSysClkE6clkSrc+0x98>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	9303      	str	r3, [sp, #12]
		break;
 800216c:	e003      	b.n	8002176 <_ZN12ClockManager9setSysClkE6clkSrc+0x3a>
	case clkSrc::pll:
		targetFreq = pllClock.r;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <_ZN12ClockManager9setSysClkE6clkSrc+0x9c>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	9303      	str	r3, [sp, #12]
		break;
 8002174:	bf00      	nop
	}
	

	if(targetFreq > coreClock)
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <_ZN12ClockManager9setSysClkE6clkSrc+0xa0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	9a03      	ldr	r2, [sp, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d902      	bls.n	8002186 <_ZN12ClockManager9setSysClkE6clkSrc+0x4a>
		internalFreqUpdate(targetFreq);
 8002180:	9803      	ldr	r0, [sp, #12]
 8002182:	f7ff ff4b 	bl	800201c <_ZN12ClockManager18internalFreqUpdateEm>

	RCC->CFGR = (RCC->CFGR & ~0x7) | static_cast<uint32_t>(_src);
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <_ZN12ClockManager9setSysClkE6clkSrc+0xa4>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	9b01      	ldr	r3, [sp, #4]
 8002190:	4913      	ldr	r1, [pc, #76]	; (80021e0 <_ZN12ClockManager9setSysClkE6clkSrc+0xa4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != static_cast<uint32_t>(_src) << RCC_CFGR_SWS_Pos);
 8002196:	bf00      	nop
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <_ZN12ClockManager9setSysClkE6clkSrc+0xa4>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 020c 	and.w	r2, r3, #12
 80021a0:	9b01      	ldr	r3, [sp, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	bf14      	ite	ne
 80021a8:	2301      	movne	r3, #1
 80021aa:	2300      	moveq	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f2      	bne.n	8002198 <_ZN12ClockManager9setSysClkE6clkSrc+0x5c>

	

	if(targetFreq < coreClock)
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <_ZN12ClockManager9setSysClkE6clkSrc+0xa0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	9a03      	ldr	r2, [sp, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d202      	bcs.n	80021c2 <_ZN12ClockManager9setSysClkE6clkSrc+0x86>
		internalFreqUpdate(targetFreq);
 80021bc:	9803      	ldr	r0, [sp, #12]
 80021be:	f7ff ff2d 	bl	800201c <_ZN12ClockManager18internalFreqUpdateEm>
	coreClock = targetFreq;
 80021c2:	4a06      	ldr	r2, [pc, #24]	; (80021dc <_ZN12ClockManager9setSysClkE6clkSrc+0xa0>)
 80021c4:	9b03      	ldr	r3, [sp, #12]
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	b005      	add	sp, #20
 80021cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	08003d64 	.word	0x08003d64
 80021d8:	20000310 	.word	0x20000310
 80021dc:	20000024 	.word	0x20000024
 80021e0:	40021000 	.word	0x40021000

080021e4 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_>:

void ClockManager::pllCfg([[maybe_unused]] int _pllNum, int _targetFreq, int _p, pllDiv _q, pllDiv _r)
{
 80021e4:	b510      	push	{r4, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	9007      	str	r0, [sp, #28]
 80021ea:	9106      	str	r1, [sp, #24]
 80021ec:	9205      	str	r2, [sp, #20]
 80021ee:	9304      	str	r3, [sp, #16]
	uint32_t sourceFreq;

	RCC->CR &= ~RCC_CR_PLLON;
 80021f0:	4b43      	ldr	r3, [pc, #268]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a42      	ldr	r2, [pc, #264]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 80021f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLRDY);
 80021fc:	bf00      	nop
 80021fe:	4b40      	ldr	r3, [pc, #256]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf14      	ite	ne
 800220a:	2301      	movne	r3, #1
 800220c:	2300      	moveq	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f4      	bne.n	80021fe <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x1a>
	if (RCC->CR & RCC_CR_HSERDY)
 8002214:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x54>
	{
		sourceFreq = hseClock;
 800222a:	4b36      	ldr	r3, [pc, #216]	; (8002304 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x120>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	930b      	str	r3, [sp, #44]	; 0x2c
		RCC->PLLCFGR = RCC_PLLCFGR_PLLSRC_HSE;
 8002230:	4b33      	ldr	r3, [pc, #204]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002232:	2203      	movs	r2, #3
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	e001      	b.n	800223c <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x58>
	}
	else
		sourceFreq = RCC_PLLCFGR_PLLSRC_HSI;
 8002238:	2302      	movs	r3, #2
 800223a:	930b      	str	r3, [sp, #44]	; 0x2c

	int m = sourceFreq / 4000000; //4 MHz input frequency
 800223c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800223e:	4a32      	ldr	r2, [pc, #200]	; (8002308 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x124>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	0d1b      	lsrs	r3, r3, #20
 8002246:	930a      	str	r3, [sp, #40]	; 0x28

	float targetDivider = ((float)_targetFreq) / (sourceFreq / m);
 8002248:	9b06      	ldr	r3, [sp, #24]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002266:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
	int plln = (int)(targetDivider + 0.5f);
 800226a:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800226e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800227a:	ee17 3a90 	vmov	r3, s15
 800227e:	9308      	str	r3, [sp, #32]

	RCC->PLLCFGR |= (m - 1) << RCC_PLLCFGR_PLLM_Pos;
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002286:	3a01      	subs	r2, #1
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	4611      	mov	r1, r2
 800228c:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 800228e:	430b      	orrs	r3, r1
 8002290:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	9b05      	ldr	r3, [sp, #20]
 8002298:	06db      	lsls	r3, r3, #27
 800229a:	4619      	mov	r1, r3
		| static_cast<uint32_t>(_q) << RCC_PLLCFGR_PLLQ_Pos
 800229c:	9b04      	ldr	r3, [sp, #16]
 800229e:	055b      	lsls	r3, r3, #21
 80022a0:	4319      	orrs	r1, r3
		| static_cast<uint32_t>(_r) << RCC_PLLCFGR_PLLR_Pos
 80022a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022a4:	065b      	lsls	r3, r3, #25
 80022a6:	430b      	orrs	r3, r1
		| plln << RCC_PLLCFGR_PLLN_Pos;
 80022a8:	9908      	ldr	r1, [sp, #32]
 80022aa:	0209      	lsls	r1, r1, #8
 80022ac:	430b      	orrs	r3, r1
	RCC->PLLCFGR |= _p << RCC_PLLCFGR_PLLPDIV_Pos
 80022ae:	4914      	ldr	r1, [pc, #80]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60cb      	str	r3, [r1, #12]

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a11      	ldr	r2, [pc, #68]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 80022ba:	f043 7388 	orr.w	r3, r3, #17825792	; 0x1100000
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	60d3      	str	r3, [r2, #12]
	RCC->CR |= RCC_CR_PLLON;
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 80022ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ce:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 80022d0:	bf00      	nop
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x11c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f4      	bne.n	80022d2 <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0xee>

	pllClock = updatePll();
 80022e8:	4c08      	ldr	r4, [pc, #32]	; (800230c <_ZN12ClockManager6pllCfgEiiiNS_6pllDivES0_+0x128>)
 80022ea:	466b      	mov	r3, sp
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f80f 	bl	8002310 <_ZN12ClockManager9updatePllEv>
 80022f2:	466b      	mov	r3, sp
 80022f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	
}
 80022fa:	bf00      	nop
 80022fc:	b00c      	add	sp, #48	; 0x30
 80022fe:	bd10      	pop	{r4, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	08003d64 	.word	0x08003d64
 8002308:	431bde83 	.word	0x431bde83
 800230c:	20000310 	.word	0x20000310

08002310 <_ZN12ClockManager9updatePllEv>:

pllClk ClockManager::updatePll()
{
 8002310:	b084      	sub	sp, #16
 8002312:	9001      	str	r0, [sp, #4]
	pllClk pllClocks = {0, 0, 0, 0};
 8002314:	9b01      	ldr	r3, [sp, #4]
 8002316:	461a      	mov	r2, r3
 8002318:	2300      	movs	r3, #0
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	6053      	str	r3, [r2, #4]
 800231e:	6093      	str	r3, [r2, #8]
 8002320:	60d3      	str	r3, [r2, #12]
	uint32_t sourceFreq;

	if(!(RCC->CR & RCC_CR_PLLRDY))
 8002322:	4b38      	ldr	r3, [pc, #224]	; (8002404 <_ZN12ClockManager9updatePllEv+0xf4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d160      	bne.n	80023fa <_ZN12ClockManager9updatePllEv+0xea>
		return pllClocks;

	if (RCC->CR & RCC_CR_HSERDY)
 8002338:	4b32      	ldr	r3, [pc, #200]	; (8002404 <_ZN12ClockManager9updatePllEv+0xf4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <_ZN12ClockManager9updatePllEv+0x46>
		sourceFreq = hseClock;
 800234e:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <_ZN12ClockManager9updatePllEv+0xf8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	9303      	str	r3, [sp, #12]
 8002354:	e001      	b.n	800235a <_ZN12ClockManager9updatePllEv+0x4a>
	else
		sourceFreq = hsiClock;
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <_ZN12ClockManager9updatePllEv+0xfc>)
 8002358:	9303      	str	r3, [sp, #12]

    float finalMult = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 800235a:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <_ZN12ClockManager9updatePllEv+0xf4>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236c:	edcd 7a02 	vstr	s15, [sp, #8]
    finalMult /= ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos) + 1;
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <_ZN12ClockManager9updatePllEv+0xf4>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3301      	adds	r3, #1
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002384:	eddd 6a02 	vldr	s13, [sp, #8]
 8002388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800238c:	edcd 7a02 	vstr	s15, [sp, #8]
    pllClocks.internal = sourceFreq * finalMult;
 8002390:	9b03      	ldr	r3, [sp, #12]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800239a:	eddd 7a02 	vldr	s15, [sp, #8]
 800239e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a6:	ee17 2a90 	vmov	r2, s15
 80023aa:	9b01      	ldr	r3, [sp, #4]
 80023ac:	601a      	str	r2, [r3, #0]
    pllClocks.p = pllClocks.internal / ((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV_Msk) >> RCC_PLLCFGR_PLLPDIV_Pos);
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <_ZN12ClockManager9updatePllEv+0xf4>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	0edb      	lsrs	r3, r3, #27
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c0:	9b01      	ldr	r3, [sp, #4]
 80023c2:	605a      	str	r2, [r3, #4]
    pllClocks.q = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ_Msk) >> RCC_PLLCFGR_PLLQ_Pos)) * 2);
 80023c4:	9b01      	ldr	r3, [sp, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <_ZN12ClockManager9updatePllEv+0xf4>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	3301      	adds	r3, #1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80023da:	9b01      	ldr	r3, [sp, #4]
 80023dc:	609a      	str	r2, [r3, #8]
    pllClocks.r = pllClocks.internal / ((1 + ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR_Msk) >> RCC_PLLCFGR_PLLR_Pos)) * 2);
 80023de:	9b01      	ldr	r3, [sp, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <_ZN12ClockManager9updatePllEv+0xf4>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	0e5b      	lsrs	r3, r3, #25
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	3301      	adds	r3, #1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f4:	9b01      	ldr	r3, [sp, #4]
 80023f6:	60da      	str	r2, [r3, #12]

	

    return pllClocks;
 80023f8:	e000      	b.n	80023fc <_ZN12ClockManager9updatePllEv+0xec>
		return pllClocks;
 80023fa:	bf00      	nop
}
 80023fc:	9801      	ldr	r0, [sp, #4]
 80023fe:	b004      	add	sp, #16
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	08003d64 	.word	0x08003d64
 800240c:	00f42400 	.word	0x00f42400

08002410 <_ZN12ClockManager8initTickEv>:

void ClockManager::initTick()
{
 8002410:	b500      	push	{lr}
 8002412:	b083      	sub	sp, #12
	enableClk(RCC->APB1ENR1, RCC_APB1ENR1_TIM6EN);
 8002414:	2110      	movs	r1, #16
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <_ZN12ClockManager8initTickEv+0x4c>)
 8002418:	f000 f82c 	bl	8002474 <_ZN12ClockManager9enableClkERVmm>
	int prescaler = timerClock / 1000000;
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <_ZN12ClockManager8initTickEv+0x50>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a10      	ldr	r2, [pc, #64]	; (8002464 <_ZN12ClockManager8initTickEv+0x54>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0c9b      	lsrs	r3, r3, #18
 8002428:	9301      	str	r3, [sp, #4]

	TIM6->PSC = prescaler - 1;
 800242a:	9b01      	ldr	r3, [sp, #4]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <_ZN12ClockManager8initTickEv+0x58>)
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = 0x0FFF;
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <_ZN12ClockManager8initTickEv+0x58>)
 8002434:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->CR1 = TIM_CR1_CEN;
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <_ZN12ClockManager8initTickEv+0x58>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]
    SysTick_Config(coreClock / 1000);
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <_ZN12ClockManager8initTickEv+0x5c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <_ZN12ClockManager8initTickEv+0x60>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fd95 	bl	8001f7c <SysTick_Config>
}
 8002452:	bf00      	nop
 8002454:	b003      	add	sp, #12
 8002456:	f85d fb04 	ldr.w	pc, [sp], #4
 800245a:	bf00      	nop
 800245c:	40021058 	.word	0x40021058
 8002460:	20000030 	.word	0x20000030
 8002464:	431bde83 	.word	0x431bde83
 8002468:	40001000 	.word	0x40001000
 800246c:	20000024 	.word	0x20000024
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <_ZN12ClockManager9enableClkERVmm>:
    __enable_irq();
    return result;
}

void ClockManager::enableClk(volatile uint32_t &_reg, uint32_t _bits)
{
 8002474:	b082      	sub	sp, #8
 8002476:	9001      	str	r0, [sp, #4]
 8002478:	9100      	str	r1, [sp, #0]
	_reg |= _bits;
 800247a:	9b01      	ldr	r3, [sp, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	9b00      	ldr	r3, [sp, #0]
 8002480:	431a      	orrs	r2, r3
 8002482:	9b01      	ldr	r3, [sp, #4]
 8002484:	601a      	str	r2, [r3, #0]
	while((_reg & _bits) != _bits)
 8002486:	bf00      	nop
 8002488:	9b01      	ldr	r3, [sp, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	9b00      	ldr	r3, [sp, #0]
 800248e:	4013      	ands	r3, r2
 8002490:	9a00      	ldr	r2, [sp, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f3      	bne.n	8002488 <_ZN12ClockManager9enableClkERVmm+0x14>
		;
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	b002      	add	sp, #8
 80024a6:	4770      	bx	lr

080024a8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh>:
#include "gpio.h"

GPIO::GPIO (GPIO_TypeDef* _GPIOx, uint8_t _pin, GPIOmode _mode, GPIOtype _type, GPIOspeed _speed, GPIOpull _pull, uint8_t _AFnumber):
 80024a8:	b084      	sub	sp, #16
 80024aa:	9003      	str	r0, [sp, #12]
 80024ac:	9102      	str	r1, [sp, #8]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	f88d 3007 	strb.w	r3, [sp, #7]
GPIOx(_GPIOx), pin(_pin)
 80024b6:	9b03      	ldr	r3, [sp, #12]
 80024b8:	9a02      	ldr	r2, [sp, #8]
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	9b03      	ldr	r3, [sp, #12]
 80024be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80024c2:	711a      	strb	r2, [r3, #4]
{
	switch ((uint32_t) _GPIOx)
 80024c4:	9b02      	ldr	r3, [sp, #8]
 80024c6:	4a81      	ldr	r2, [pc, #516]	; (80026cc <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x224>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d04b      	beq.n	8002564 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xbc>
 80024cc:	4a7f      	ldr	r2, [pc, #508]	; (80026cc <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x224>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d84f      	bhi.n	8002572 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
 80024d2:	4a7f      	ldr	r2, [pc, #508]	; (80026d0 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x228>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d03e      	beq.n	8002556 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xae>
 80024d8:	4a7d      	ldr	r2, [pc, #500]	; (80026d0 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x228>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d849      	bhi.n	8002572 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
 80024de:	4a7d      	ldr	r2, [pc, #500]	; (80026d4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x22c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d031      	beq.n	8002548 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xa0>
 80024e4:	4a7b      	ldr	r2, [pc, #492]	; (80026d4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x22c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d843      	bhi.n	8002572 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
 80024ea:	4a7b      	ldr	r2, [pc, #492]	; (80026d8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x230>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d024      	beq.n	800253a <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x92>
 80024f0:	4a79      	ldr	r2, [pc, #484]	; (80026d8 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x230>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d83d      	bhi.n	8002572 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
 80024f6:	4a79      	ldr	r2, [pc, #484]	; (80026dc <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x234>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d017      	beq.n	800252c <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x84>
 80024fc:	4a77      	ldr	r2, [pc, #476]	; (80026dc <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x234>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d837      	bhi.n	8002572 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
 8002502:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002506:	d003      	beq.n	8002510 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x68>
 8002508:	4a75      	ldr	r2, [pc, #468]	; (80026e0 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x238>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x76>
			break;
		case GPIOG_BASE:
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
			break;
		default: 
		break;
 800250e:	e030      	b.n	8002572 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xca>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8002510:	4b74      	ldr	r3, [pc, #464]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 8002512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002514:	4a73      	ldr	r2, [pc, #460]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 800251c:	e02a      	b.n	8002574 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 800251e:	4b71      	ldr	r3, [pc, #452]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	4a70      	ldr	r2, [pc, #448]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 800252a:	e023      	b.n	8002574 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 800252c:	4b6d      	ldr	r3, [pc, #436]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	4a6c      	ldr	r2, [pc, #432]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8002538:	e01c      	b.n	8002574 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 800253a:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	4a69      	ldr	r2, [pc, #420]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8002546:	e015      	b.n	8002574 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
 8002548:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	4a65      	ldr	r2, [pc, #404]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 800254e:	f043 0310 	orr.w	r3, r3, #16
 8002552:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8002554:	e00e      	b.n	8002574 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOFEN;
 8002556:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	4a62      	ldr	r2, [pc, #392]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 800255c:	f043 0320 	orr.w	r3, r3, #32
 8002560:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8002562:	e007      	b.n	8002574 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
			RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
 8002564:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	4a5e      	ldr	r2, [pc, #376]	; (80026e4 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0x23c>)
 800256a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800256e:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8002570:	e000      	b.n	8002574 <_ZN4GPIOC1EP12GPIO_TypeDefh8GPIOmode8GPIOtype9GPIOspeed8GPIOpullh+0xcc>
		break;
 8002572:	bf00      	nop
	}

	GPIOx->MODER &= ~(0b11 << (pin*2));
 8002574:	9b03      	ldr	r3, [sp, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	9b03      	ldr	r3, [sp, #12]
 800257c:	791b      	ldrb	r3, [r3, #4]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2103      	movs	r1, #3
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	9b03      	ldr	r3, [sp, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	400a      	ands	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (static_cast<int>(_mode) << (pin*2));
 8002592:	9b03      	ldr	r3, [sp, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	9b03      	ldr	r3, [sp, #12]
 800259a:	791b      	ldrb	r3, [r3, #4]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	9900      	ldr	r1, [sp, #0]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	4619      	mov	r1, r3
 80025a6:	9b03      	ldr	r3, [sp, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]
	GPIOx->OTYPER &= ~(1 << pin);
 80025ae:	9b03      	ldr	r3, [sp, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	9b03      	ldr	r3, [sp, #12]
 80025b6:	791b      	ldrb	r3, [r3, #4]
 80025b8:	4619      	mov	r1, r3
 80025ba:	2301      	movs	r3, #1
 80025bc:	408b      	lsls	r3, r1
 80025be:	43db      	mvns	r3, r3
 80025c0:	4619      	mov	r1, r3
 80025c2:	9b03      	ldr	r3, [sp, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	400a      	ands	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
	GPIOx->OTYPER |= (static_cast<int>(_type) << pin);
 80025ca:	9b03      	ldr	r3, [sp, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	9b03      	ldr	r3, [sp, #12]
 80025d2:	791b      	ldrb	r3, [r3, #4]
 80025d4:	4619      	mov	r1, r3
 80025d6:	9b04      	ldr	r3, [sp, #16]
 80025d8:	408b      	lsls	r3, r1
 80025da:	4619      	mov	r1, r3
 80025dc:	9b03      	ldr	r3, [sp, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]
	GPIOx->OSPEEDR &= ~(0b11 << (pin*2));
 80025e4:	9b03      	ldr	r3, [sp, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	9b03      	ldr	r3, [sp, #12]
 80025ec:	791b      	ldrb	r3, [r3, #4]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2103      	movs	r1, #3
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	4619      	mov	r1, r3
 80025fa:	9b03      	ldr	r3, [sp, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	400a      	ands	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (static_cast<int>(_speed)<<(pin*2));
 8002602:	9b03      	ldr	r3, [sp, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	9b03      	ldr	r3, [sp, #12]
 800260a:	791b      	ldrb	r3, [r3, #4]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	9905      	ldr	r1, [sp, #20]
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	4619      	mov	r1, r3
 8002616:	9b03      	ldr	r3, [sp, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	609a      	str	r2, [r3, #8]
	GPIOx->PUPDR &= ~(0b11 << (pin*2));
 800261e:	9b03      	ldr	r3, [sp, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	9b03      	ldr	r3, [sp, #12]
 8002626:	791b      	ldrb	r3, [r3, #4]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2103      	movs	r1, #3
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	4619      	mov	r1, r3
 8002634:	9b03      	ldr	r3, [sp, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	400a      	ands	r2, r1
 800263a:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (static_cast<int>(_pull)<<(pin*2));
 800263c:	9b03      	ldr	r3, [sp, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	9b03      	ldr	r3, [sp, #12]
 8002644:	791b      	ldrb	r3, [r3, #4]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	9906      	ldr	r1, [sp, #24]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	4619      	mov	r1, r3
 8002650:	9b03      	ldr	r3, [sp, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	60da      	str	r2, [r3, #12]
	GPIOx->AFR[pin/8] &= ~(0xF << ((pin % 8)*4));
 8002658:	9b03      	ldr	r3, [sp, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	9a03      	ldr	r2, [sp, #12]
 800265e:	7912      	ldrb	r2, [r2, #4]
 8002660:	08d2      	lsrs	r2, r2, #3
 8002662:	b2d0      	uxtb	r0, r2
 8002664:	4602      	mov	r2, r0
 8002666:	3208      	adds	r2, #8
 8002668:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800266c:	9b03      	ldr	r3, [sp, #12]
 800266e:	791b      	ldrb	r3, [r3, #4]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	210f      	movs	r1, #15
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	4619      	mov	r1, r3
 8002680:	9b03      	ldr	r3, [sp, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4011      	ands	r1, r2
 8002686:	f100 0208 	add.w	r2, r0, #8
 800268a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIOx->AFR[pin/8] |= (_AFnumber << ((pin % 8)*4));
 800268e:	9b03      	ldr	r3, [sp, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	9a03      	ldr	r2, [sp, #12]
 8002694:	7912      	ldrb	r2, [r2, #4]
 8002696:	08d2      	lsrs	r2, r2, #3
 8002698:	b2d0      	uxtb	r0, r2
 800269a:	4602      	mov	r2, r0
 800269c:	3208      	adds	r2, #8
 800269e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026a2:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80026a6:	9b03      	ldr	r3, [sp, #12]
 80026a8:	791b      	ldrb	r3, [r3, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	4619      	mov	r1, r3
 80026b6:	9b03      	ldr	r3, [sp, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4311      	orrs	r1, r2
 80026bc:	f100 0208 	add.w	r2, r0, #8
 80026c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80026c4:	9b03      	ldr	r3, [sp, #12]
 80026c6:	4618      	mov	r0, r3
 80026c8:	b004      	add	sp, #16
 80026ca:	4770      	bx	lr
 80026cc:	48001800 	.word	0x48001800
 80026d0:	48001400 	.word	0x48001400
 80026d4:	48001000 	.word	0x48001000
 80026d8:	48000c00 	.word	0x48000c00
 80026dc:	48000800 	.word	0x48000800
 80026e0:	48000400 	.word	0x48000400
 80026e4:	40021000 	.word	0x40021000

080026e8 <_ZN4GPIO3setEv>:
void GPIO::set()
{
 80026e8:	b082      	sub	sp, #8
 80026ea:	9001      	str	r0, [sp, #4]
	GPIOx->BSRR |= (1<<pin);
 80026ec:	9b01      	ldr	r3, [sp, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	9b01      	ldr	r3, [sp, #4]
 80026f4:	791b      	ldrb	r3, [r3, #4]
 80026f6:	4619      	mov	r1, r3
 80026f8:	2301      	movs	r3, #1
 80026fa:	408b      	lsls	r3, r1
 80026fc:	4619      	mov	r1, r3
 80026fe:	9b01      	ldr	r3, [sp, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	619a      	str	r2, [r3, #24]
}
 8002706:	bf00      	nop
 8002708:	b002      	add	sp, #8
 800270a:	4770      	bx	lr

0800270c <_ZN4GPIO6toggleEv>:
{
	GPIOx->BSRR |= (1<<(pin+16));

}
void GPIO::toggle()
{
 800270c:	b082      	sub	sp, #8
 800270e:	9001      	str	r0, [sp, #4]
	GPIOx->ODR ^= (1<<pin);
 8002710:	9b01      	ldr	r3, [sp, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	9b01      	ldr	r3, [sp, #4]
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	4619      	mov	r1, r3
 800271c:	2301      	movs	r3, #1
 800271e:	408b      	lsls	r3, r1
 8002720:	4619      	mov	r1, r3
 8002722:	9b01      	ldr	r3, [sp, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	404a      	eors	r2, r1
 8002728:	615a      	str	r2, [r3, #20]
}
 800272a:	bf00      	nop
 800272c:	b002      	add	sp, #8
 800272e:	4770      	bx	lr

08002730 <_ZN3I2CC1EP11I2C_TypeDef>:
#include  "i2c.h"


I2C::I2C(I2C_TypeDef* _I2Cx): I2Cx(_I2Cx)
 8002730:	b082      	sub	sp, #8
 8002732:	9001      	str	r0, [sp, #4]
 8002734:	9100      	str	r1, [sp, #0]
 8002736:	9b01      	ldr	r3, [sp, #4]
 8002738:	9a00      	ldr	r2, [sp, #0]
 800273a:	601a      	str	r2, [r3, #0]
{
	switch (uint32_t(I2Cx)) // sprawdzić czy działa dla innych interfejsow niz i2c2
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <_ZN3I2CC1EP11I2C_TypeDef+0xa0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d024      	beq.n	8002790 <_ZN3I2CC1EP11I2C_TypeDef+0x60>
 8002746:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <_ZN3I2CC1EP11I2C_TypeDef+0xa0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d828      	bhi.n	800279e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
 800274c:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <_ZN3I2CC1EP11I2C_TypeDef+0xa4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d017      	beq.n	8002782 <_ZN3I2CC1EP11I2C_TypeDef+0x52>
 8002752:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <_ZN3I2CC1EP11I2C_TypeDef+0xa4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d822      	bhi.n	800279e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <_ZN3I2CC1EP11I2C_TypeDef+0xa8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d003      	beq.n	8002766 <_ZN3I2CC1EP11I2C_TypeDef+0x36>
 800275e:	4a1f      	ldr	r2, [pc, #124]	; (80027dc <_ZN3I2CC1EP11I2C_TypeDef+0xac>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <_ZN3I2CC1EP11I2C_TypeDef+0x44>
 8002764:	e01b      	b.n	800279e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
	{
		case I2C1_BASE:
			RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 800276c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002770:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 8002772:	e014      	b.n	800279e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
		case I2C2_BASE:
			RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 800277a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800277e:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 8002780:	e00d      	b.n	800279e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
		case I2C3_BASE:
			RCC->APB1ENR1 |= RCC_APB1ENR1_I2C3EN;
 8002782:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 8002788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800278c:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 800278e:	e006      	b.n	800279e <_ZN3I2CC1EP11I2C_TypeDef+0x6e>
		case I2C4_BASE:
			RCC->APB1ENR2 |= RCC_APB1ENR2_I2C4EN;
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <_ZN3I2CC1EP11I2C_TypeDef+0xb0>)
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	65d3      	str	r3, [r2, #92]	; 0x5c
			break;
 800279c:	bf00      	nop
	}

	
	I2Cx->CR1 &= ~I2C_CR1_PE; 
 800279e:	9b01      	ldr	r3, [sp, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	9b01      	ldr	r3, [sp, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
	I2Cx->TIMINGR = 0x00701F6B; // Set I2C2 timing register value
 80027ae:	9b01      	ldr	r3, [sp, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <_ZN3I2CC1EP11I2C_TypeDef+0xb4>)
 80027b4:	611a      	str	r2, [r3, #16]
	I2Cx->CR1 |= I2C_CR1_PE; // Enable I2C2 peripheral
 80027b6:	9b01      	ldr	r3, [sp, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	9b01      	ldr	r3, [sp, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 0201 	orr.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	9b01      	ldr	r3, [sp, #4]
 80027c8:	4618      	mov	r0, r3
 80027ca:	b002      	add	sp, #8
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40008400 	.word	0x40008400
 80027d4:	40007800 	.word	0x40007800
 80027d8:	40005400 	.word	0x40005400
 80027dc:	40005800 	.word	0x40005800
 80027e0:	40021000 	.word	0x40021000
 80027e4:	00701f6b 	.word	0x00701f6b

080027e8 <_ZN13typeConverter11IntToStringEiPc>:
#include "typeConverter.h"


void typeConverter::IntToString (int _number, char * _string){
 80027e8:	b500      	push	{lr}
 80027ea:	b087      	sub	sp, #28
 80027ec:	9001      	str	r0, [sp, #4]
 80027ee:	9100      	str	r1, [sp, #0]
int i=0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	9305      	str	r3, [sp, #20]
bool negative = _number<0? true : false;
 80027f4:	9b01      	ldr	r3, [sp, #4]
 80027f6:	17db      	asrs	r3, r3, #31
 80027f8:	f88d 300f 	strb.w	r3, [sp, #15]
 80027fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	f88d 300f 	strb.w	r3, [sp, #15]
int absNumber = _number<0? -_number : _number;
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	bfb8      	it	lt
 800280e:	425b      	neglt	r3, r3
 8002810:	9304      	str	r3, [sp, #16]
	if (absNumber==0) 
 8002812:	9b04      	ldr	r3, [sp, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d123      	bne.n	8002860 <_ZN13typeConverter11IntToStringEiPc+0x78>
	{
		_string[0]='0';
 8002818:	9b00      	ldr	r3, [sp, #0]
 800281a:	2230      	movs	r2, #48	; 0x30
 800281c:	701a      	strb	r2, [r3, #0]
		i=1;
 800281e:	2301      	movs	r3, #1
 8002820:	9305      	str	r3, [sp, #20]
	}
	while (absNumber)
 8002822:	e01d      	b.n	8002860 <_ZN13typeConverter11IntToStringEiPc+0x78>
	{
		_string[i++]=absNumber % 10 + '0';
 8002824:	9a04      	ldr	r2, [sp, #16]
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <_ZN13typeConverter11IntToStringEiPc+0xb0>)
 8002828:	fb83 1302 	smull	r1, r3, r3, r2
 800282c:	1099      	asrs	r1, r3, #2
 800282e:	17d3      	asrs	r3, r2, #31
 8002830:	1ac9      	subs	r1, r1, r3
 8002832:	460b      	mov	r3, r1
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	1ad1      	subs	r1, r2, r3
 800283c:	b2cb      	uxtb	r3, r1
 800283e:	3330      	adds	r3, #48	; 0x30
 8002840:	b2d8      	uxtb	r0, r3
 8002842:	9a00      	ldr	r2, [sp, #0]
 8002844:	9b05      	ldr	r3, [sp, #20]
 8002846:	1c59      	adds	r1, r3, #1
 8002848:	9105      	str	r1, [sp, #20]
 800284a:	4413      	add	r3, r2
 800284c:	4602      	mov	r2, r0
 800284e:	701a      	strb	r2, [r3, #0]
		absNumber /= 10;
 8002850:	9b04      	ldr	r3, [sp, #16]
 8002852:	4a11      	ldr	r2, [pc, #68]	; (8002898 <_ZN13typeConverter11IntToStringEiPc+0xb0>)
 8002854:	fb82 1203 	smull	r1, r2, r2, r3
 8002858:	1092      	asrs	r2, r2, #2
 800285a:	17db      	asrs	r3, r3, #31
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	9304      	str	r3, [sp, #16]
	while (absNumber)
 8002860:	9b04      	ldr	r3, [sp, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1de      	bne.n	8002824 <_ZN13typeConverter11IntToStringEiPc+0x3c>
	}
	if (negative)
 8002866:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d006      	beq.n	800287c <_ZN13typeConverter11IntToStringEiPc+0x94>
		_string[i++]='-';
 800286e:	9a00      	ldr	r2, [sp, #0]
 8002870:	9b05      	ldr	r3, [sp, #20]
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	9105      	str	r1, [sp, #20]
 8002876:	4413      	add	r3, r2
 8002878:	222d      	movs	r2, #45	; 0x2d
 800287a:	701a      	strb	r2, [r3, #0]

	reverseArray(_string, i);
 800287c:	9905      	ldr	r1, [sp, #20]
 800287e:	9800      	ldr	r0, [sp, #0]
 8002880:	f000 f8c2 	bl	8002a08 <_ZN13typeConverter12reverseArrayEPci>
	_string[i]='\0';
 8002884:	9b05      	ldr	r3, [sp, #20]
 8002886:	9a00      	ldr	r2, [sp, #0]
 8002888:	4413      	add	r3, r2
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
}
 800288e:	bf00      	nop
 8002890:	b007      	add	sp, #28
 8002892:	f85d fb04 	ldr.w	pc, [sp], #4
 8002896:	bf00      	nop
 8002898:	66666667 	.word	0x66666667

0800289c <_ZN13typeConverter18fractionalToStringEfPch>:

void typeConverter::fractionalToString (float _number, char * _string, uint8_t _precision)
{
 800289c:	b530      	push	{r4, r5, lr}
 800289e:	b08d      	sub	sp, #52	; 0x34
 80028a0:	ed8d 0a03 	vstr	s0, [sp, #12]
 80028a4:	9002      	str	r0, [sp, #8]
 80028a6:	460b      	mov	r3, r1
 80028a8:	f88d 3007 	strb.w	r3, [sp, #7]
	int i=0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	930b      	str	r3, [sp, #44]	; 0x2c
	bool negative = _number<0? true : false;
 80028b0:	eddd 7a03 	vldr	s15, [sp, #12]
 80028b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	bf4c      	ite	mi
 80028be:	2301      	movmi	r3, #1
 80028c0:	2300      	movpl	r3, #0
 80028c2:	f88d 301f 	strb.w	r3, [sp, #31]
	int64_t integerPart = static_cast<int64_t>(_number);
 80028c6:	9803      	ldr	r0, [sp, #12]
 80028c8:	f001 fa08 	bl	8003cdc <__aeabi_f2lz>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	float fractionalPart;
	fractionalPart =  _number - integerPart;
 80028d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80028d8:	f7fd ff5a 	bl	8000790 <__aeabi_l2f>
 80028dc:	ee07 0a10 	vmov	s14, r0
 80028e0:	eddd 7a03 	vldr	s15, [sp, #12]
 80028e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028e8:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
	fractionalPart <0 ? fractionalPart = -fractionalPart : fractionalPart = fractionalPart;
 80028ec:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80028f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	d505      	bpl.n	8002906 <_ZN13typeConverter18fractionalToStringEfPch+0x6a>
 80028fa:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80028fe:	eef1 7a67 	vneg.f32	s15, s15
 8002902:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
	int absNumber = integerPart < 0 ? -integerPart : integerPart;
 8002906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	da05      	bge.n	800291a <_ZN13typeConverter18fractionalToStringEfPch+0x7e>
 800290e:	2100      	movs	r1, #0
 8002910:	4254      	negs	r4, r2
 8002912:	eb61 0503 	sbc.w	r5, r1, r3
 8002916:	4622      	mov	r2, r4
 8002918:	462b      	mov	r3, r5
 800291a:	4613      	mov	r3, r2
 800291c:	9309      	str	r3, [sp, #36]	; 0x24
	
	if (absNumber==0) 
 800291e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d123      	bne.n	800296c <_ZN13typeConverter18fractionalToStringEfPch+0xd0>
	{
		_string[0]='0';
 8002924:	9b02      	ldr	r3, [sp, #8]
 8002926:	2230      	movs	r2, #48	; 0x30
 8002928:	701a      	strb	r2, [r3, #0]
		i=1;
 800292a:	2301      	movs	r3, #1
 800292c:	930b      	str	r3, [sp, #44]	; 0x2c
	}
	while (absNumber)
 800292e:	e01d      	b.n	800296c <_ZN13typeConverter18fractionalToStringEfPch+0xd0>
	{
		_string[i++]=absNumber % 10 + '0';
 8002930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <_ZN13typeConverter18fractionalToStringEfPch+0x168>)
 8002934:	fb83 1302 	smull	r1, r3, r3, r2
 8002938:	1099      	asrs	r1, r3, #2
 800293a:	17d3      	asrs	r3, r2, #31
 800293c:	1ac9      	subs	r1, r1, r3
 800293e:	460b      	mov	r3, r1
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	1ad1      	subs	r1, r2, r3
 8002948:	b2cb      	uxtb	r3, r1
 800294a:	3330      	adds	r3, #48	; 0x30
 800294c:	b2d8      	uxtb	r0, r3
 800294e:	9a02      	ldr	r2, [sp, #8]
 8002950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002952:	1c59      	adds	r1, r3, #1
 8002954:	910b      	str	r1, [sp, #44]	; 0x2c
 8002956:	4413      	add	r3, r2
 8002958:	4602      	mov	r2, r0
 800295a:	701a      	strb	r2, [r3, #0]
		absNumber /= 10;
 800295c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800295e:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <_ZN13typeConverter18fractionalToStringEfPch+0x168>)
 8002960:	fb82 1203 	smull	r1, r2, r2, r3
 8002964:	1092      	asrs	r2, r2, #2
 8002966:	17db      	asrs	r3, r3, #31
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	9309      	str	r3, [sp, #36]	; 0x24
	while (absNumber)
 800296c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1de      	bne.n	8002930 <_ZN13typeConverter18fractionalToStringEfPch+0x94>
	}
	if (negative)
 8002972:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <_ZN13typeConverter18fractionalToStringEfPch+0xec>
		_string[i++]='-';
 800297a:	9a02      	ldr	r2, [sp, #8]
 800297c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800297e:	1c59      	adds	r1, r3, #1
 8002980:	910b      	str	r1, [sp, #44]	; 0x2c
 8002982:	4413      	add	r3, r2
 8002984:	222d      	movs	r2, #45	; 0x2d
 8002986:	701a      	strb	r2, [r3, #0]
	reverseArray(_string, i);
 8002988:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800298a:	9802      	ldr	r0, [sp, #8]
 800298c:	f000 f83c 	bl	8002a08 <_ZN13typeConverter12reverseArrayEPci>

	_string[i++]='.';
 8002990:	9a02      	ldr	r2, [sp, #8]
 8002992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002994:	1c59      	adds	r1, r3, #1
 8002996:	910b      	str	r1, [sp, #44]	; 0x2c
 8002998:	4413      	add	r3, r2
 800299a:	222e      	movs	r2, #46	; 0x2e
 800299c:	701a      	strb	r2, [r3, #0]

	for (int j=i; j<_precision+i; j++)
 800299e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029a0:	9308      	str	r3, [sp, #32]
 80029a2:	e024      	b.n	80029ee <_ZN13typeConverter18fractionalToStringEfPch+0x152>
	{
		fractionalPart -= static_cast<int>(fractionalPart);
 80029a4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80029a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b0:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 80029b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b8:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
		fractionalPart *=10;
 80029bc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80029c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c8:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
		_string[j]= static_cast<int>(fractionalPart) + '0';
 80029cc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80029d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029d4:	edcd 7a00 	vstr	s15, [sp]
 80029d8:	f89d 2000 	ldrb.w	r2, [sp]
 80029dc:	9b08      	ldr	r3, [sp, #32]
 80029de:	9902      	ldr	r1, [sp, #8]
 80029e0:	440b      	add	r3, r1
 80029e2:	3230      	adds	r2, #48	; 0x30
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]
	for (int j=i; j<_precision+i; j++)
 80029e8:	9b08      	ldr	r3, [sp, #32]
 80029ea:	3301      	adds	r3, #1
 80029ec:	9308      	str	r3, [sp, #32]
 80029ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80029f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029f4:	4413      	add	r3, r2
 80029f6:	9a08      	ldr	r2, [sp, #32]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dbd3      	blt.n	80029a4 <_ZN13typeConverter18fractionalToStringEfPch+0x108>
	}
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	b00d      	add	sp, #52	; 0x34
 8002a02:	bd30      	pop	{r4, r5, pc}
 8002a04:	66666667 	.word	0x66666667

08002a08 <_ZN13typeConverter12reverseArrayEPci>:
			return -number;
		return number;
}

void typeConverter::reverseArray(char* _charTab, int _lenght)
{
 8002a08:	b084      	sub	sp, #16
 8002a0a:	9001      	str	r0, [sp, #4]
 8002a0c:	9100      	str	r1, [sp, #0]
	for (int i =0; i<_lenght/2; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9303      	str	r3, [sp, #12]
 8002a12:	e01c      	b.n	8002a4e <_ZN13typeConverter12reverseArrayEPci+0x46>
	{
		char temp = _charTab[i];
 8002a14:	9b03      	ldr	r3, [sp, #12]
 8002a16:	9a01      	ldr	r2, [sp, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	f88d 300b 	strb.w	r3, [sp, #11]
		_charTab [i] = _charTab [_lenght-i -1];
 8002a20:	9a00      	ldr	r2, [sp, #0]
 8002a22:	9b03      	ldr	r3, [sp, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	9a01      	ldr	r2, [sp, #4]
 8002a2a:	441a      	add	r2, r3
 8002a2c:	9b03      	ldr	r3, [sp, #12]
 8002a2e:	9901      	ldr	r1, [sp, #4]
 8002a30:	440b      	add	r3, r1
 8002a32:	7812      	ldrb	r2, [r2, #0]
 8002a34:	701a      	strb	r2, [r3, #0]
		_charTab [_lenght-i -1] = temp;
 8002a36:	9a00      	ldr	r2, [sp, #0]
 8002a38:	9b03      	ldr	r3, [sp, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	9a01      	ldr	r2, [sp, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002a46:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<_lenght/2; i++)
 8002a48:	9b03      	ldr	r3, [sp, #12]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	9303      	str	r3, [sp, #12]
 8002a4e:	9b00      	ldr	r3, [sp, #0]
 8002a50:	0fda      	lsrs	r2, r3, #31
 8002a52:	4413      	add	r3, r2
 8002a54:	105b      	asrs	r3, r3, #1
 8002a56:	461a      	mov	r2, r3
 8002a58:	9b03      	ldr	r3, [sp, #12]
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	dbda      	blt.n	8002a14 <_ZN13typeConverter12reverseArrayEPci+0xc>
	}
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	b004      	add	sp, #16
 8002a64:	4770      	bx	lr
	...

08002a68 <_ZN3PIDC1EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8002a68:	b500      	push	{lr}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	9007      	str	r0, [sp, #28]
 8002a6e:	9106      	str	r1, [sp, #24]
 8002a70:	9205      	str	r2, [sp, #20]
 8002a72:	9304      	str	r3, [sp, #16]
 8002a74:	ed8d 0a03 	vstr	s0, [sp, #12]
 8002a78:	edcd 0a02 	vstr	s1, [sp, #8]
 8002a7c:	ed8d 1a01 	vstr	s2, [sp, #4]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 8002a80:	9b07      	ldr	r3, [sp, #28]
 8002a82:	9a05      	ldr	r2, [sp, #20]
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
	_myInput    = Input;
 8002a86:	9b07      	ldr	r3, [sp, #28]
 8002a88:	9a06      	ldr	r2, [sp, #24]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24
	_mySetpoint = Setpoint;
 8002a8c:	9b07      	ldr	r3, [sp, #28]
 8002a8e:	9a04      	ldr	r2, [sp, #16]
 8002a90:	62da      	str	r2, [r3, #44]	; 0x2c
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8002a92:	9b07      	ldr	r3, [sp, #28]
 8002a94:	2200      	movs	r2, #0
 8002a96:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8002a98:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002ae4 <_ZN3PIDC1EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef+0x7c>
 8002a9c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002ae8 <_ZN3PIDC1EPfS0_S0_fff14PIDPON_TypeDef13PIDCD_TypeDef+0x80>
 8002aa0:	9807      	ldr	r0, [sp, #28]
 8002aa2:	f000 f927 	bl	8002cf4 <_ZN3PID15SetOutputLimitsEff>
	
	_sampleTime = _PID_SAMPLE_TIME_US_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002aa6:	9b07      	ldr	r3, [sp, #28]
 8002aa8:	2219      	movs	r2, #25
 8002aaa:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 8002aac:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	9807      	ldr	r0, [sp, #28]
 8002ab4:	f000 f9f8 	bl	8002ea8 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 8002ab8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8002abc:	4619      	mov	r1, r3
 8002abe:	ed9d 1a01 	vldr	s2, [sp, #4]
 8002ac2:	eddd 0a02 	vldr	s1, [sp, #8]
 8002ac6:	ed9d 0a03 	vldr	s0, [sp, #12]
 8002aca:	9807      	ldr	r0, [sp, #28]
 8002acc:	f000 f972 	bl	8002db4 <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 8002ad0:	9b07      	ldr	r3, [sp, #28]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	425a      	negs	r2, r3
 8002ad6:	9b07      	ldr	r3, [sp, #28]
 8002ad8:	605a      	str	r2, [r3, #4]
	
}
 8002ada:	9b07      	ldr	r3, [sp, #28]
 8002adc:	4618      	mov	r0, r3
 8002ade:	b009      	add	sp, #36	; 0x24
 8002ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ae4:	437f0000 	.word	0x437f0000
 8002ae8:	00000000 	.word	0x00000000

08002aec <_ZN3PID4InitEv>:

PID::PID(float *Input, float *Output, float *Setpoint, float Kp, float Ki, float Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection){ }

/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 8002aec:	b082      	sub	sp, #8
 8002aee:	9001      	str	r0, [sp, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 8002af0:	9b01      	ldr	r3, [sp, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	9b01      	ldr	r3, [sp, #4]
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
	_lastInput = *_myInput;
 8002afa:	9b01      	ldr	r3, [sp, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	9b01      	ldr	r3, [sp, #4]
 8002b02:	635a      	str	r2, [r3, #52]	; 0x34
	
	if (_outputSum > _outMax)
 8002b04:	9b01      	ldr	r3, [sp, #4]
 8002b06:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002b0a:	9b01      	ldr	r3, [sp, #4]
 8002b0c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	dd04      	ble.n	8002b24 <_ZN3PID4InitEv+0x38>
	{
		_outputSum = _outMax;
 8002b1a:	9b01      	ldr	r3, [sp, #4]
 8002b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b1e:	9b01      	ldr	r3, [sp, #4]
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
	{
		_outputSum = _outMin;
	}
	else { }
	
}
 8002b22:	e00f      	b.n	8002b44 <_ZN3PID4InitEv+0x58>
	else if (_outputSum < _outMin)
 8002b24:	9b01      	ldr	r3, [sp, #4]
 8002b26:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002b2a:	9b01      	ldr	r3, [sp, #4]
 8002b2c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	d400      	bmi.n	8002b3c <_ZN3PID4InitEv+0x50>
}
 8002b3a:	e003      	b.n	8002b44 <_ZN3PID4InitEv+0x58>
		_outputSum = _outMin;
 8002b3c:	9b01      	ldr	r3, [sp, #4]
 8002b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b40:	9b01      	ldr	r3, [sp, #4]
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b44:	bf00      	nop
 8002b46:	b002      	add	sp, #8
 8002b48:	4770      	bx	lr

08002b4a <_ZN3PID7ComputeEv>:
	PID::Init(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID::Compute(void)
{
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	9001      	str	r0, [sp, #4]
	float error;
	float dInput;
	float output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!_inAuto)
 8002b4e:	9b01      	ldr	r3, [sp, #4]
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <_ZN3PID7ComputeEv+0x10>
	{
		return _FALSE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e0a7      	b.n	8002caa <_ZN3PID7ComputeEv+0x160>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9306      	str	r3, [sp, #24]
	timeChange = (now - _lastTime);
 8002b5e:	9b01      	ldr	r3, [sp, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	9a06      	ldr	r2, [sp, #24]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	9305      	str	r3, [sp, #20]
	
	if (timeChange >= 0)
	{
		/* ..... Compute all the working error variables ..... */
		input   = *_myInput;
 8002b68:	9b01      	ldr	r3, [sp, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	9304      	str	r3, [sp, #16]
		error   = *_mySetpoint - input;
 8002b70:	9b01      	ldr	r3, [sp, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	ed93 7a00 	vldr	s14, [r3]
 8002b78:	eddd 7a04 	vldr	s15, [sp, #16]
 8002b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b80:	edcd 7a03 	vstr	s15, [sp, #12]
		dInput  = (input - _lastInput);
 8002b84:	9b01      	ldr	r3, [sp, #4]
 8002b86:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b8a:	ed9d 7a04 	vldr	s14, [sp, #16]
 8002b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b92:	edcd 7a02 	vstr	s15, [sp, #8]
		
		_outputSum += (_ki * error);
 8002b96:	9b01      	ldr	r3, [sp, #4]
 8002b98:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002b9c:	9b01      	ldr	r3, [sp, #4]
 8002b9e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002ba2:	eddd 7a03 	vldr	s15, [sp, #12]
 8002ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bae:	9b01      	ldr	r3, [sp, #4]
 8002bb0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!_pOnE)
 8002bb4:	9b01      	ldr	r3, [sp, #4]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10e      	bne.n	8002bda <_ZN3PID7ComputeEv+0x90>
		{
			_outputSum -= _kp * dInput;
 8002bbc:	9b01      	ldr	r3, [sp, #4]
 8002bbe:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002bc2:	9b01      	ldr	r3, [sp, #4]
 8002bc4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002bc8:	eddd 7a02 	vldr	s15, [sp, #8]
 8002bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd4:	9b01      	ldr	r3, [sp, #4]
 8002bd6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		}
		
		if (_outputSum > _outMax)
 8002bda:	9b01      	ldr	r3, [sp, #4]
 8002bdc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002be0:	9b01      	ldr	r3, [sp, #4]
 8002be2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	dd04      	ble.n	8002bfa <_ZN3PID7ComputeEv+0xb0>
		{
			_outputSum = _outMax;
 8002bf0:	9b01      	ldr	r3, [sp, #4]
 8002bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf4:	9b01      	ldr	r3, [sp, #4]
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf8:	e00e      	b.n	8002c18 <_ZN3PID7ComputeEv+0xce>
		}
		else if (_outputSum < _outMin)
 8002bfa:	9b01      	ldr	r3, [sp, #4]
 8002bfc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002c00:	9b01      	ldr	r3, [sp, #4]
 8002c02:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	d503      	bpl.n	8002c18 <_ZN3PID7ComputeEv+0xce>
		{
			_outputSum = _outMin;
 8002c10:	9b01      	ldr	r3, [sp, #4]
 8002c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c14:	9b01      	ldr	r3, [sp, #4]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (_pOnE)
 8002c18:	9b01      	ldr	r3, [sp, #4]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <_ZN3PID7ComputeEv+0xea>
		{
			output = _kp * error;
 8002c20:	9b01      	ldr	r3, [sp, #4]
 8002c22:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c26:	ed9d 7a03 	vldr	s14, [sp, #12]
 8002c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2e:	edcd 7a07 	vstr	s15, [sp, #28]
 8002c32:	e002      	b.n	8002c3a <_ZN3PID7ComputeEv+0xf0>
		}
		else
		{
			output = 0;
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	9307      	str	r3, [sp, #28]
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += _outputSum - _kd * dInput;
 8002c3a:	9b01      	ldr	r3, [sp, #4]
 8002c3c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002c40:	9b01      	ldr	r3, [sp, #4]
 8002c42:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c46:	eddd 7a02 	vldr	s15, [sp, #8]
 8002c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c52:	ed9d 7a07 	vldr	s14, [sp, #28]
 8002c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5a:	edcd 7a07 	vstr	s15, [sp, #28]
		
		if (output > _outMax)
 8002c5e:	9b01      	ldr	r3, [sp, #4]
 8002c60:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002c64:	ed9d 7a07 	vldr	s14, [sp, #28]
 8002c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c70:	dd03      	ble.n	8002c7a <_ZN3PID7ComputeEv+0x130>
		{
			output = _outMax;
 8002c72:	9b01      	ldr	r3, [sp, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	9307      	str	r3, [sp, #28]
 8002c78:	e00c      	b.n	8002c94 <_ZN3PID7ComputeEv+0x14a>
		}
		else if (output < _outMin)
 8002c7a:	9b01      	ldr	r3, [sp, #4]
 8002c7c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002c80:	ed9d 7a07 	vldr	s14, [sp, #28]
 8002c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8c:	d502      	bpl.n	8002c94 <_ZN3PID7ComputeEv+0x14a>
		{
			output = _outMin;
 8002c8e:	9b01      	ldr	r3, [sp, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	9307      	str	r3, [sp, #28]
		}
		else { }
		
		*_myOutput = output;
 8002c94:	9b01      	ldr	r3, [sp, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	9a07      	ldr	r2, [sp, #28]
 8002c9a:	601a      	str	r2, [r3, #0]
		
		/* ..... Remember some variables for next time ..... */
		_lastInput = input;
 8002c9c:	9b01      	ldr	r3, [sp, #4]
 8002c9e:	9a04      	ldr	r2, [sp, #16]
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34
		_lastTime  = now;
 8002ca2:	9b01      	ldr	r3, [sp, #4]
 8002ca4:	9a06      	ldr	r2, [sp, #24]
 8002ca6:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8002ca8:	2301      	movs	r3, #1
	else
	{
		return _FALSE;
	}
	
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	b008      	add	sp, #32
 8002cae:	4770      	bx	lr

08002cb0 <_ZN3PID7SetModeE15PIDMode_TypeDef>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 8002cb0:	b500      	push	{lr}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	9001      	str	r0, [sp, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	f88d 3003 	strb.w	r3, [sp, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002cbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	f88d 300f 	strb.w	r3, [sp, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 8002cce:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x34>
 8002cd6:	9b01      	ldr	r3, [sp, #4]
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x34>
	{
		Init();
 8002cde:	9801      	ldr	r0, [sp, #4]
 8002ce0:	f7ff ff04 	bl	8002aec <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 8002ce4:	9b01      	ldr	r3, [sp, #4]
 8002ce6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002cea:	705a      	strb	r2, [r3, #1]
	
}
 8002cec:	bf00      	nop
 8002cee:	b005      	add	sp, #20
 8002cf0:	f85d fb04 	ldr.w	pc, [sp], #4

08002cf4 <_ZN3PID15SetOutputLimitsEff>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(float Min, float Max)
{
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	9003      	str	r0, [sp, #12]
 8002cf8:	ed8d 0a02 	vstr	s0, [sp, #8]
 8002cfc:	edcd 0a01 	vstr	s1, [sp, #4]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002d00:	ed9d 7a02 	vldr	s14, [sp, #8]
 8002d04:	eddd 7a01 	vldr	s15, [sp, #4]
 8002d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d10:	da4c      	bge.n	8002dac <_ZN3PID15SetOutputLimitsEff+0xb8>
	{
		return;
	}
	
	_outMin = Min;
 8002d12:	9b03      	ldr	r3, [sp, #12]
 8002d14:	9a02      	ldr	r2, [sp, #8]
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
	_outMax = Max;
 8002d18:	9b03      	ldr	r3, [sp, #12]
 8002d1a:	9a01      	ldr	r2, [sp, #4]
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8002d1e:	9b03      	ldr	r3, [sp, #12]
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d043      	beq.n	8002dae <_ZN3PID15SetOutputLimitsEff+0xba>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8002d26:	9b03      	ldr	r3, [sp, #12]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	ed93 7a00 	vldr	s14, [r3]
 8002d2e:	9b03      	ldr	r3, [sp, #12]
 8002d30:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3c:	dd05      	ble.n	8002d4a <_ZN3PID15SetOutputLimitsEff+0x56>
		{
			*_myOutput = _outMax;
 8002d3e:	9b03      	ldr	r3, [sp, #12]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	9a03      	ldr	r2, [sp, #12]
 8002d44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e010      	b.n	8002d6c <_ZN3PID15SetOutputLimitsEff+0x78>
		}
		else if (*_myOutput < _outMin)
 8002d4a:	9b03      	ldr	r3, [sp, #12]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	ed93 7a00 	vldr	s14, [r3]
 8002d52:	9b03      	ldr	r3, [sp, #12]
 8002d54:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002d58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d60:	d504      	bpl.n	8002d6c <_ZN3PID15SetOutputLimitsEff+0x78>
		{
			*_myOutput = _outMin;
 8002d62:	9b03      	ldr	r3, [sp, #12]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	9a03      	ldr	r2, [sp, #12]
 8002d68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d6a:	601a      	str	r2, [r3, #0]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8002d6c:	9b03      	ldr	r3, [sp, #12]
 8002d6e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d72:	9b03      	ldr	r3, [sp, #12]
 8002d74:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	dd04      	ble.n	8002d8c <_ZN3PID15SetOutputLimitsEff+0x98>
		{
			_outputSum = _outMax;
 8002d82:	9b03      	ldr	r3, [sp, #12]
 8002d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d86:	9b03      	ldr	r3, [sp, #12]
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
 8002d8a:	e010      	b.n	8002dae <_ZN3PID15SetOutputLimitsEff+0xba>
		}
		else if (_outputSum < _outMin)
 8002d8c:	9b03      	ldr	r3, [sp, #12]
 8002d8e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d92:	9b03      	ldr	r3, [sp, #12]
 8002d94:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da0:	d505      	bpl.n	8002dae <_ZN3PID15SetOutputLimitsEff+0xba>
		{
			_outputSum = _outMin;
 8002da2:	9b03      	ldr	r3, [sp, #12]
 8002da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da6:	9b03      	ldr	r3, [sp, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
 8002daa:	e000      	b.n	8002dae <_ZN3PID15SetOutputLimitsEff+0xba>
		return;
 8002dac:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002dae:	b004      	add	sp, #16
 8002db0:	4770      	bx	lr
	...

08002db4 <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef>:
void PID::SetTunings(float Kp, float Ki, float Kd)
{
	PID::SetTunings(Kp, Ki, Kd, _pOn);
}
void PID::SetTunings(float Kp, float Ki, float Kd, PIDPON_TypeDef POn)
{
 8002db4:	b088      	sub	sp, #32
 8002db6:	9005      	str	r0, [sp, #20]
 8002db8:	ed8d 0a04 	vstr	s0, [sp, #16]
 8002dbc:	edcd 0a03 	vstr	s1, [sp, #12]
 8002dc0:	ed8d 1a02 	vstr	s2, [sp, #8]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	f88d 3007 	strb.w	r3, [sp, #7]
	
	float SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002dca:	eddd 7a04 	vldr	s15, [sp, #16]
 8002dce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d462      	bmi.n	8002e9e <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xea>
 8002dd8:	eddd 7a03 	vldr	s15, [sp, #12]
 8002ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	d45b      	bmi.n	8002e9e <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xea>
 8002de6:	eddd 7a02 	vldr	s15, [sp, #8]
 8002dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	d454      	bmi.n	8002e9e <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xea>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 8002df4:	9b05      	ldr	r3, [sp, #20]
 8002df6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002dfa:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	9b05      	ldr	r3, [sp, #20]
 8002e0e:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8002e10:	9b05      	ldr	r3, [sp, #20]
 8002e12:	9a04      	ldr	r2, [sp, #16]
 8002e14:	60da      	str	r2, [r3, #12]
	_dispKi = Ki;
 8002e16:	9b05      	ldr	r3, [sp, #20]
 8002e18:	9a03      	ldr	r2, [sp, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
	_dispKd = Kd;
 8002e1c:	9b05      	ldr	r3, [sp, #20]
 8002e1e:	9a02      	ldr	r2, [sp, #8]
 8002e20:	615a      	str	r2, [r3, #20]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((float)_sampleTime) / 1000000;
 8002e22:	9b05      	ldr	r3, [sp, #20]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	ee07 3a90 	vmov	s15, r3
 8002e2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e2e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002ea4 <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xf0>
 8002e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e36:	edcd 7a07 	vstr	s15, [sp, #28]
	
	_kp = Kp;
 8002e3a:	9b05      	ldr	r3, [sp, #20]
 8002e3c:	9a04      	ldr	r2, [sp, #16]
 8002e3e:	619a      	str	r2, [r3, #24]
	_ki = Ki * SampleTimeInSec;
 8002e40:	ed9d 7a03 	vldr	s14, [sp, #12]
 8002e44:	eddd 7a07 	vldr	s15, [sp, #28]
 8002e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4c:	9b05      	ldr	r3, [sp, #20]
 8002e4e:	edc3 7a07 	vstr	s15, [r3, #28]
	_kd = Kd / SampleTimeInSec;
 8002e52:	eddd 6a02 	vldr	s13, [sp, #8]
 8002e56:	ed9d 7a07 	vldr	s14, [sp, #28]
 8002e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e5e:	9b05      	ldr	r3, [sp, #20]
 8002e60:	edc3 7a08 	vstr	s15, [r3, #32]
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 8002e64:	9b05      	ldr	r3, [sp, #20]
 8002e66:	78db      	ldrb	r3, [r3, #3]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d119      	bne.n	8002ea0 <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xec>
	{
		
		_kp = (0 - _kp);
 8002e6c:	9b05      	ldr	r3, [sp, #20]
 8002e6e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e72:	eef1 7a67 	vneg.f32	s15, s15
 8002e76:	9b05      	ldr	r3, [sp, #20]
 8002e78:	edc3 7a06 	vstr	s15, [r3, #24]
		_ki = (0 - _ki);
 8002e7c:	9b05      	ldr	r3, [sp, #20]
 8002e7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e82:	eef1 7a67 	vneg.f32	s15, s15
 8002e86:	9b05      	ldr	r3, [sp, #20]
 8002e88:	edc3 7a07 	vstr	s15, [r3, #28]
		_kd = (0 - _kd);
 8002e8c:	9b05      	ldr	r3, [sp, #20]
 8002e8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e92:	eef1 7a67 	vneg.f32	s15, s15
 8002e96:	9b05      	ldr	r3, [sp, #20]
 8002e98:	edc3 7a08 	vstr	s15, [r3, #32]
 8002e9c:	e000      	b.n	8002ea0 <_ZN3PID10SetTuningsEfff14PIDPON_TypeDef+0xec>
		return;
 8002e9e:	bf00      	nop
		
	}
	
}
 8002ea0:	b008      	add	sp, #32
 8002ea2:	4770      	bx	lr
 8002ea4:	49742400 	.word	0x49742400

08002ea8 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	9001      	str	r0, [sp, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	f88d 3003 	strb.w	r3, [sp, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8002eb2:	9b01      	ldr	r3, [sp, #4]
 8002eb4:	785b      	ldrb	r3, [r3, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01d      	beq.n	8002ef6 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x4e>
 8002eba:	9b01      	ldr	r3, [sp, #4]
 8002ebc:	78db      	ldrb	r3, [r3, #3]
 8002ebe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d017      	beq.n	8002ef6 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x4e>
	{
		
		_kp = (0 - _kp);
 8002ec6:	9b01      	ldr	r3, [sp, #4]
 8002ec8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ecc:	eef1 7a67 	vneg.f32	s15, s15
 8002ed0:	9b01      	ldr	r3, [sp, #4]
 8002ed2:	edc3 7a06 	vstr	s15, [r3, #24]
		_ki = (0 - _ki);
 8002ed6:	9b01      	ldr	r3, [sp, #4]
 8002ed8:	edd3 7a07 	vldr	s15, [r3, #28]
 8002edc:	eef1 7a67 	vneg.f32	s15, s15
 8002ee0:	9b01      	ldr	r3, [sp, #4]
 8002ee2:	edc3 7a07 	vstr	s15, [r3, #28]
		_kd = (0 - _kd);
 8002ee6:	9b01      	ldr	r3, [sp, #4]
 8002ee8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002eec:	eef1 7a67 	vneg.f32	s15, s15
 8002ef0:	9b01      	ldr	r3, [sp, #4]
 8002ef2:	edc3 7a08 	vstr	s15, [r3, #32]
		
	}
	
	_controllerDirection = Direction;
 8002ef6:	9b01      	ldr	r3, [sp, #4]
 8002ef8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002efc:	70da      	strb	r2, [r3, #3]
	
}
 8002efe:	bf00      	nop
 8002f00:	b002      	add	sp, #8
 8002f02:	4770      	bx	lr

08002f04 <SystemInit>:

void SystemInit(void)
{
	/* FPU settings ------------------------------------------------------------*/
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
		SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f04:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <SystemInit+0x3c>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <SystemInit+0x3c>)
 8002f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location add offset address ------------------*/
	#ifdef VECT_TAB_SRAM
		SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
	#else
		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <SystemInit+0x3c>)
 8002f16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f1a:	609a      	str	r2, [r3, #8]
	#endif

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <SystemInit+0x40>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <SystemInit+0x40>)
 8002f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f26:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <SystemInit+0x44>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <SystemInit+0x44>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <SystemInit+0x44>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	bf00      	nop
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	e000edf0 	.word	0xe000edf0
 8002f48:	e0001000 	.word	0xe0001000

08002f4c <_init>:
int __errno;
void *__dso_handle = (void *)&__dso_handle;

void _init(void) {}
 8002f4c:	bf00      	nop
 8002f4e:	4770      	bx	lr

08002f50 <_sub_I_65535_0.0>:
 8002f50:	b508      	push	{r3, lr}
 8002f52:	f7fe fd41 	bl	80019d8 <_GLOBAL__sub_I__ZN12ClockManager8hseClockE>
 8002f56:	f7fe fbc1 	bl	80016dc <_GLOBAL__sub_I_sineLookUp>
 8002f5a:	bd08      	pop	{r3, pc}

08002f5c <Reset_Handler>:
 8002f5c:	480d      	ldr	r0, [pc, #52]	; (8002f94 <LoopForever+0x2>)
 8002f5e:	4685      	mov	sp, r0
 8002f60:	480d      	ldr	r0, [pc, #52]	; (8002f98 <LoopForever+0x6>)
 8002f62:	490e      	ldr	r1, [pc, #56]	; (8002f9c <LoopForever+0xa>)
 8002f64:	4a0e      	ldr	r2, [pc, #56]	; (8002fa0 <LoopForever+0xe>)
 8002f66:	2300      	movs	r3, #0
 8002f68:	e002      	b.n	8002f70 <LoopCopyDataInit>

08002f6a <CopyDataInit>:
 8002f6a:	58d4      	ldr	r4, [r2, r3]
 8002f6c:	50c4      	str	r4, [r0, r3]
 8002f6e:	3304      	adds	r3, #4

08002f70 <LoopCopyDataInit>:
 8002f70:	18c4      	adds	r4, r0, r3
 8002f72:	428c      	cmp	r4, r1
 8002f74:	d3f9      	bcc.n	8002f6a <CopyDataInit>
 8002f76:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <LoopForever+0x12>)
 8002f78:	4c0b      	ldr	r4, [pc, #44]	; (8002fa8 <LoopForever+0x16>)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e001      	b.n	8002f82 <LoopFillZerobss>

08002f7e <FillZerobss>:
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	3204      	adds	r2, #4

08002f82 <LoopFillZerobss>:
 8002f82:	42a2      	cmp	r2, r4
 8002f84:	d3fb      	bcc.n	8002f7e <FillZerobss>
 8002f86:	f7ff ffbd 	bl	8002f04 <SystemInit>
 8002f8a:	f000 f811 	bl	8002fb0 <__libc_init_array>
 8002f8e:	f7fe f86f 	bl	8001070 <main>

08002f92 <LoopForever>:
 8002f92:	e7fe      	b.n	8002f92 <LoopForever>
 8002f94:	20020000 	.word	0x20020000
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	20000034 	.word	0x20000034
 8002fa0:	08004140 	.word	0x08004140
 8002fa4:	20000034 	.word	0x20000034
 8002fa8:	20000320 	.word	0x20000320

08002fac <ADC1_2_IRQHandler>:
 8002fac:	e7fe      	b.n	8002fac <ADC1_2_IRQHandler>
	...

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <__libc_init_array+0x40>)
 8002fb4:	4d0f      	ldr	r5, [pc, #60]	; (8002ff4 <__libc_init_array+0x44>)
 8002fb6:	42ab      	cmp	r3, r5
 8002fb8:	eba3 0605 	sub.w	r6, r3, r5
 8002fbc:	d007      	beq.n	8002fce <__libc_init_array+0x1e>
 8002fbe:	10b6      	asrs	r6, r6, #2
 8002fc0:	2400      	movs	r4, #0
 8002fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc6:	3401      	adds	r4, #1
 8002fc8:	4798      	blx	r3
 8002fca:	42a6      	cmp	r6, r4
 8002fcc:	d8f9      	bhi.n	8002fc2 <__libc_init_array+0x12>
 8002fce:	f7ff ffbd 	bl	8002f4c <_init>
 8002fd2:	4d09      	ldr	r5, [pc, #36]	; (8002ff8 <__libc_init_array+0x48>)
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <__libc_init_array+0x4c>)
 8002fd6:	1b5e      	subs	r6, r3, r5
 8002fd8:	42ab      	cmp	r3, r5
 8002fda:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8002fde:	d006      	beq.n	8002fee <__libc_init_array+0x3e>
 8002fe0:	2400      	movs	r4, #0
 8002fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe6:	3401      	adds	r4, #1
 8002fe8:	4798      	blx	r3
 8002fea:	42a6      	cmp	r6, r4
 8002fec:	d8f9      	bhi.n	8002fe2 <__libc_init_array+0x32>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	0800413c 	.word	0x0800413c
 8002ff4:	0800413c 	.word	0x0800413c
 8002ff8:	0800413c 	.word	0x0800413c
 8002ffc:	08004140 	.word	0x08004140

08003000 <cosf>:
 8003000:	ee10 3a10 	vmov	r3, s0
 8003004:	4918      	ldr	r1, [pc, #96]	; (8003068 <cosf+0x68>)
 8003006:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800300a:	428a      	cmp	r2, r1
 800300c:	d91b      	bls.n	8003046 <cosf+0x46>
 800300e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003012:	d302      	bcc.n	800301a <cosf+0x1a>
 8003014:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003018:	4770      	bx	lr
 800301a:	b500      	push	{lr}
 800301c:	b083      	sub	sp, #12
 800301e:	4668      	mov	r0, sp
 8003020:	f000 f92a 	bl	8003278 <__ieee754_rem_pio2f>
 8003024:	f000 0003 	and.w	r0, r0, #3
 8003028:	2801      	cmp	r0, #1
 800302a:	eddd 0a01 	vldr	s1, [sp, #4]
 800302e:	ed9d 0a00 	vldr	s0, [sp]
 8003032:	d00c      	beq.n	800304e <cosf+0x4e>
 8003034:	2802      	cmp	r0, #2
 8003036:	d012      	beq.n	800305e <cosf+0x5e>
 8003038:	b170      	cbz	r0, 8003058 <cosf+0x58>
 800303a:	2001      	movs	r0, #1
 800303c:	f000 f8d4 	bl	80031e8 <__kernel_sinf>
 8003040:	b003      	add	sp, #12
 8003042:	f85d fb04 	ldr.w	pc, [sp], #4
 8003046:	eddf 0a09 	vldr	s1, [pc, #36]	; 800306c <cosf+0x6c>
 800304a:	f000 b84b 	b.w	80030e4 <__kernel_cosf>
 800304e:	f000 f8cb 	bl	80031e8 <__kernel_sinf>
 8003052:	eeb1 0a40 	vneg.f32	s0, s0
 8003056:	e7f3      	b.n	8003040 <cosf+0x40>
 8003058:	f000 f844 	bl	80030e4 <__kernel_cosf>
 800305c:	e7f0      	b.n	8003040 <cosf+0x40>
 800305e:	f000 f841 	bl	80030e4 <__kernel_cosf>
 8003062:	eeb1 0a40 	vneg.f32	s0, s0
 8003066:	e7eb      	b.n	8003040 <cosf+0x40>
 8003068:	3f490fd8 	.word	0x3f490fd8
 800306c:	00000000 	.word	0x00000000

08003070 <sinf>:
 8003070:	ee10 3a10 	vmov	r3, s0
 8003074:	4919      	ldr	r1, [pc, #100]	; (80030dc <sinf+0x6c>)
 8003076:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800307a:	428a      	cmp	r2, r1
 800307c:	d91c      	bls.n	80030b8 <sinf+0x48>
 800307e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003082:	d302      	bcc.n	800308a <sinf+0x1a>
 8003084:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003088:	4770      	bx	lr
 800308a:	b500      	push	{lr}
 800308c:	b083      	sub	sp, #12
 800308e:	4668      	mov	r0, sp
 8003090:	f000 f8f2 	bl	8003278 <__ieee754_rem_pio2f>
 8003094:	f000 0003 	and.w	r0, r0, #3
 8003098:	2801      	cmp	r0, #1
 800309a:	eddd 0a01 	vldr	s1, [sp, #4]
 800309e:	ed9d 0a00 	vldr	s0, [sp]
 80030a2:	d00e      	beq.n	80030c2 <sinf+0x52>
 80030a4:	2802      	cmp	r0, #2
 80030a6:	d013      	beq.n	80030d0 <sinf+0x60>
 80030a8:	b170      	cbz	r0, 80030c8 <sinf+0x58>
 80030aa:	f000 f81b 	bl	80030e4 <__kernel_cosf>
 80030ae:	eeb1 0a40 	vneg.f32	s0, s0
 80030b2:	b003      	add	sp, #12
 80030b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80030b8:	eddf 0a09 	vldr	s1, [pc, #36]	; 80030e0 <sinf+0x70>
 80030bc:	2000      	movs	r0, #0
 80030be:	f000 b893 	b.w	80031e8 <__kernel_sinf>
 80030c2:	f000 f80f 	bl	80030e4 <__kernel_cosf>
 80030c6:	e7f4      	b.n	80030b2 <sinf+0x42>
 80030c8:	2001      	movs	r0, #1
 80030ca:	f000 f88d 	bl	80031e8 <__kernel_sinf>
 80030ce:	e7f0      	b.n	80030b2 <sinf+0x42>
 80030d0:	2001      	movs	r0, #1
 80030d2:	f000 f889 	bl	80031e8 <__kernel_sinf>
 80030d6:	eeb1 0a40 	vneg.f32	s0, s0
 80030da:	e7ea      	b.n	80030b2 <sinf+0x42>
 80030dc:	3f490fd8 	.word	0x3f490fd8
 80030e0:	00000000 	.word	0x00000000

080030e4 <__kernel_cosf>:
 80030e4:	ee10 3a10 	vmov	r3, s0
 80030e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80030f0:	d22c      	bcs.n	800314c <__kernel_cosf+0x68>
 80030f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80030f6:	ee17 3a90 	vmov	r3, s15
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d060      	beq.n	80031c0 <__kernel_cosf+0xdc>
 80030fe:	ee60 7a00 	vmul.f32	s15, s0, s0
 8003102:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80031c8 <__kernel_cosf+0xe4>
 8003106:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80031cc <__kernel_cosf+0xe8>
 800310a:	eddf 5a31 	vldr	s11, [pc, #196]	; 80031d0 <__kernel_cosf+0xec>
 800310e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80031d4 <__kernel_cosf+0xf0>
 8003112:	eddf 6a31 	vldr	s13, [pc, #196]	; 80031d8 <__kernel_cosf+0xf4>
 8003116:	eea7 5a87 	vfma.f32	s10, s15, s14
 800311a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80031dc <__kernel_cosf+0xf8>
 800311e:	eee5 5a27 	vfma.f32	s11, s10, s15
 8003122:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8003126:	eea7 7a86 	vfma.f32	s14, s15, s12
 800312a:	eee7 6a87 	vfma.f32	s13, s15, s14
 800312e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003132:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8003136:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800313a:	eee7 0aa6 	vfma.f32	s1, s15, s13
 800313e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003142:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003146:	ee30 0a60 	vsub.f32	s0, s0, s1
 800314a:	4770      	bx	lr
 800314c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8003150:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80031c8 <__kernel_cosf+0xe4>
 8003154:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 80031cc <__kernel_cosf+0xe8>
 8003158:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80031d0 <__kernel_cosf+0xec>
 800315c:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80031d4 <__kernel_cosf+0xf0>
 8003160:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80031d8 <__kernel_cosf+0xf4>
 8003164:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <__kernel_cosf+0xfc>)
 8003166:	eea7 5a87 	vfma.f32	s10, s15, s14
 800316a:	4293      	cmp	r3, r2
 800316c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80031dc <__kernel_cosf+0xf8>
 8003170:	eee5 5a27 	vfma.f32	s11, s10, s15
 8003174:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8003178:	eea6 7a27 	vfma.f32	s14, s12, s15
 800317c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003180:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003184:	d9d5      	bls.n	8003132 <__kernel_cosf+0x4e>
 8003186:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <__kernel_cosf+0x100>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d814      	bhi.n	80031b6 <__kernel_cosf+0xd2>
 800318c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8003190:	ee07 3a10 	vmov	s14, r3
 8003194:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003198:	ee36 6a47 	vsub.f32	s12, s12, s14
 800319c:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80031a0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80031a4:	ee97 7aa5 	vfnms.f32	s14, s15, s11
 80031a8:	eee7 0aa6 	vfma.f32	s1, s15, s13
 80031ac:	ee37 7a60 	vsub.f32	s14, s14, s1
 80031b0:	ee36 0a47 	vsub.f32	s0, s12, s14
 80031b4:	4770      	bx	lr
 80031b6:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 80031ba:	eeb5 7a02 	vmov.f32	s14, #82	; 0x3e900000  0.2812500
 80031be:	e7ed      	b.n	800319c <__kernel_cosf+0xb8>
 80031c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	ad47d74e 	.word	0xad47d74e
 80031cc:	310f74f6 	.word	0x310f74f6
 80031d0:	b493f27c 	.word	0xb493f27c
 80031d4:	37d00d01 	.word	0x37d00d01
 80031d8:	3d2aaaab 	.word	0x3d2aaaab
 80031dc:	bab60b61 	.word	0xbab60b61
 80031e0:	3e999999 	.word	0x3e999999
 80031e4:	3f480000 	.word	0x3f480000

080031e8 <__kernel_sinf>:
 80031e8:	ee10 3a10 	vmov	r3, s0
 80031ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80031f4:	d204      	bcs.n	8003200 <__kernel_sinf+0x18>
 80031f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80031fa:	ee17 3a90 	vmov	r3, s15
 80031fe:	b35b      	cbz	r3, 8003258 <__kernel_sinf+0x70>
 8003200:	ee60 7a00 	vmul.f32	s15, s0, s0
 8003204:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800325c <__kernel_sinf+0x74>
 8003208:	eddf 5a15 	vldr	s11, [pc, #84]	; 8003260 <__kernel_sinf+0x78>
 800320c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003264 <__kernel_sinf+0x7c>
 8003210:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003268 <__kernel_sinf+0x80>
 8003214:	eee7 5a87 	vfma.f32	s11, s15, s14
 8003218:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800326c <__kernel_sinf+0x84>
 800321c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8003220:	ee20 5a27 	vmul.f32	s10, s0, s15
 8003224:	eee6 6a27 	vfma.f32	s13, s12, s15
 8003228:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800322c:	b930      	cbnz	r0, 800323c <__kernel_sinf+0x54>
 800322e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003270 <__kernel_sinf+0x88>
 8003232:	eee7 6a87 	vfma.f32	s13, s15, s14
 8003236:	eea6 0a85 	vfma.f32	s0, s13, s10
 800323a:	4770      	bx	lr
 800323c:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8003240:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003244:	eea0 7aa6 	vfma.f32	s14, s1, s13
 8003248:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003274 <__kernel_sinf+0x8c>
 800324c:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8003250:	eee5 0a26 	vfma.f32	s1, s10, s13
 8003254:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	2f2ec9d3 	.word	0x2f2ec9d3
 8003260:	b2d72f34 	.word	0xb2d72f34
 8003264:	3638ef1b 	.word	0x3638ef1b
 8003268:	b9500d01 	.word	0xb9500d01
 800326c:	3c088889 	.word	0x3c088889
 8003270:	be2aaaab 	.word	0xbe2aaaab
 8003274:	3e2aaaab 	.word	0x3e2aaaab

08003278 <__ieee754_rem_pio2f>:
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	ee10 3a10 	vmov	r3, s0
 800327e:	4a88      	ldr	r2, [pc, #544]	; (80034a0 <__ieee754_rem_pio2f+0x228>)
 8003280:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8003284:	4294      	cmp	r4, r2
 8003286:	b086      	sub	sp, #24
 8003288:	4605      	mov	r5, r0
 800328a:	d971      	bls.n	8003370 <__ieee754_rem_pio2f+0xf8>
 800328c:	4a85      	ldr	r2, [pc, #532]	; (80034a4 <__ieee754_rem_pio2f+0x22c>)
 800328e:	4294      	cmp	r4, r2
 8003290:	461e      	mov	r6, r3
 8003292:	d824      	bhi.n	80032de <__ieee754_rem_pio2f+0x66>
 8003294:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	eddf 7a83 	vldr	s15, [pc, #524]	; 80034a8 <__ieee754_rem_pio2f+0x230>
 800329e:	4a83      	ldr	r2, [pc, #524]	; (80034ac <__ieee754_rem_pio2f+0x234>)
 80032a0:	f026 060f 	bic.w	r6, r6, #15
 80032a4:	eeb0 7a40 	vmov.f32	s14, s0
 80032a8:	f340 80e0 	ble.w	800346c <__ieee754_rem_pio2f+0x1f4>
 80032ac:	4296      	cmp	r6, r2
 80032ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 80032b2:	bf09      	itett	eq
 80032b4:	ed9f 7a7e 	vldreq	s14, [pc, #504]	; 80034b0 <__ieee754_rem_pio2f+0x238>
 80032b8:	eddf 6a7e 	vldrne	s13, [pc, #504]	; 80034b4 <__ieee754_rem_pio2f+0x23c>
 80032bc:	eddf 6a7e 	vldreq	s13, [pc, #504]	; 80034b8 <__ieee754_rem_pio2f+0x240>
 80032c0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80032c4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80032c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032cc:	ed80 7a00 	vstr	s14, [r0]
 80032d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032d4:	edc0 7a01 	vstr	s15, [r0, #4]
 80032d8:	2001      	movs	r0, #1
 80032da:	b006      	add	sp, #24
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
 80032de:	4a77      	ldr	r2, [pc, #476]	; (80034bc <__ieee754_rem_pio2f+0x244>)
 80032e0:	4294      	cmp	r4, r2
 80032e2:	d952      	bls.n	800338a <__ieee754_rem_pio2f+0x112>
 80032e4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80032e8:	d248      	bcs.n	800337c <__ieee754_rem_pio2f+0x104>
 80032ea:	15e2      	asrs	r2, r4, #23
 80032ec:	3a86      	subs	r2, #134	; 0x86
 80032ee:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80032fa:	eddf 6a71 	vldr	s13, [pc, #452]	; 80034c0 <__ieee754_rem_pio2f+0x248>
 80032fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003306:	ed8d 7a03 	vstr	s14, [sp, #12]
 800330a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800330e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003312:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800331a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800331e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003322:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332a:	edcd 7a05 	vstr	s15, [sp, #20]
 800332e:	f040 8098 	bne.w	8003462 <__ieee754_rem_pio2f+0x1ea>
 8003332:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2302      	movne	r3, #2
 8003340:	4960      	ldr	r1, [pc, #384]	; (80034c4 <__ieee754_rem_pio2f+0x24c>)
 8003342:	9101      	str	r1, [sp, #4]
 8003344:	2102      	movs	r1, #2
 8003346:	9100      	str	r1, [sp, #0]
 8003348:	a803      	add	r0, sp, #12
 800334a:	4629      	mov	r1, r5
 800334c:	f000 f8cc 	bl	80034e8 <__kernel_rem_pio2f>
 8003350:	2e00      	cmp	r6, #0
 8003352:	dac2      	bge.n	80032da <__ieee754_rem_pio2f+0x62>
 8003354:	ed95 7a00 	vldr	s14, [r5]
 8003358:	edd5 7a01 	vldr	s15, [r5, #4]
 800335c:	eeb1 7a47 	vneg.f32	s14, s14
 8003360:	eef1 7a67 	vneg.f32	s15, s15
 8003364:	ed85 7a00 	vstr	s14, [r5]
 8003368:	edc5 7a01 	vstr	s15, [r5, #4]
 800336c:	4240      	negs	r0, r0
 800336e:	e7b4      	b.n	80032da <__ieee754_rem_pio2f+0x62>
 8003370:	2200      	movs	r2, #0
 8003372:	ed85 0a00 	vstr	s0, [r5]
 8003376:	6042      	str	r2, [r0, #4]
 8003378:	2000      	movs	r0, #0
 800337a:	e7ae      	b.n	80032da <__ieee754_rem_pio2f+0x62>
 800337c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003380:	edc0 7a01 	vstr	s15, [r0, #4]
 8003384:	edc0 7a00 	vstr	s15, [r0]
 8003388:	e7f6      	b.n	8003378 <__ieee754_rem_pio2f+0x100>
 800338a:	f000 f8a5 	bl	80034d8 <fabsf>
 800338e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80034c8 <__ieee754_rem_pio2f+0x250>
 8003392:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80034a8 <__ieee754_rem_pio2f+0x230>
 8003396:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800339a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800339e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80034b4 <__ieee754_rem_pio2f+0x23c>
 80033a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033a6:	ee17 0a90 	vmov	r0, s15
 80033aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80033ae:	281f      	cmp	r0, #31
 80033b0:	eea6 0ac6 	vfms.f32	s0, s13, s12
 80033b4:	ee66 7a87 	vmul.f32	s15, s13, s14
 80033b8:	eeb1 6a66 	vneg.f32	s12, s13
 80033bc:	dc20      	bgt.n	8003400 <__ieee754_rem_pio2f+0x188>
 80033be:	4a43      	ldr	r2, [pc, #268]	; (80034cc <__ieee754_rem_pio2f+0x254>)
 80033c0:	1e41      	subs	r1, r0, #1
 80033c2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80033c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80033ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d016      	beq.n	8003400 <__ieee754_rem_pio2f+0x188>
 80033d2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80033d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80033da:	2e00      	cmp	r6, #0
 80033dc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80033e0:	ed85 7a00 	vstr	s14, [r5]
 80033e4:	ed85 0a01 	vstr	s0, [r5, #4]
 80033e8:	f6bf af77 	bge.w	80032da <__ieee754_rem_pio2f+0x62>
 80033ec:	eeb1 7a47 	vneg.f32	s14, s14
 80033f0:	eeb1 0a40 	vneg.f32	s0, s0
 80033f4:	ed85 7a00 	vstr	s14, [r5]
 80033f8:	ed85 0a01 	vstr	s0, [r5, #4]
 80033fc:	4240      	negs	r0, r0
 80033fe:	e76c      	b.n	80032da <__ieee754_rem_pio2f+0x62>
 8003400:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003404:	15e2      	asrs	r2, r4, #23
 8003406:	ee17 3a10 	vmov	r3, s14
 800340a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800340e:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 8003412:	2b08      	cmp	r3, #8
 8003414:	dddf      	ble.n	80033d6 <__ieee754_rem_pio2f+0x15e>
 8003416:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80034b0 <__ieee754_rem_pio2f+0x238>
 800341a:	ed9f 5a27 	vldr	s10, [pc, #156]	; 80034b8 <__ieee754_rem_pio2f+0x240>
 800341e:	eef0 5a40 	vmov.f32	s11, s0
 8003422:	eee6 5a07 	vfma.f32	s11, s12, s14
 8003426:	ee70 7a65 	vsub.f32	s15, s0, s11
 800342a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800342e:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8003432:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8003436:	ee17 3a10 	vmov	r3, s14
 800343a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800343e:	1ad2      	subs	r2, r2, r3
 8003440:	2a19      	cmp	r2, #25
 8003442:	dd10      	ble.n	8003466 <__ieee754_rem_pio2f+0x1ee>
 8003444:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80034d0 <__ieee754_rem_pio2f+0x258>
 8003448:	ed9f 5a22 	vldr	s10, [pc, #136]	; 80034d4 <__ieee754_rem_pio2f+0x25c>
 800344c:	eeb0 0a65 	vmov.f32	s0, s11
 8003450:	eea6 0a07 	vfma.f32	s0, s12, s14
 8003454:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8003458:	eee6 7a07 	vfma.f32	s15, s12, s14
 800345c:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8003460:	e7b7      	b.n	80033d2 <__ieee754_rem_pio2f+0x15a>
 8003462:	2303      	movs	r3, #3
 8003464:	e76c      	b.n	8003340 <__ieee754_rem_pio2f+0xc8>
 8003466:	eeb0 0a65 	vmov.f32	s0, s11
 800346a:	e7b4      	b.n	80033d6 <__ieee754_rem_pio2f+0x15e>
 800346c:	4296      	cmp	r6, r2
 800346e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003472:	bf09      	itett	eq
 8003474:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 80034b0 <__ieee754_rem_pio2f+0x238>
 8003478:	eddf 6a0e 	vldrne	s13, [pc, #56]	; 80034b4 <__ieee754_rem_pio2f+0x23c>
 800347c:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 80034b8 <__ieee754_rem_pio2f+0x240>
 8003480:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003484:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003488:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800348c:	ed80 7a00 	vstr	s14, [r0]
 8003490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003494:	edc0 7a01 	vstr	s15, [r0, #4]
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	e71d      	b.n	80032da <__ieee754_rem_pio2f+0x62>
 800349e:	bf00      	nop
 80034a0:	3f490fd8 	.word	0x3f490fd8
 80034a4:	4016cbe3 	.word	0x4016cbe3
 80034a8:	3fc90f80 	.word	0x3fc90f80
 80034ac:	3fc90fd0 	.word	0x3fc90fd0
 80034b0:	37354400 	.word	0x37354400
 80034b4:	37354443 	.word	0x37354443
 80034b8:	2e85a308 	.word	0x2e85a308
 80034bc:	43490f80 	.word	0x43490f80
 80034c0:	43800000 	.word	0x43800000
 80034c4:	08003dec 	.word	0x08003dec
 80034c8:	3f22f984 	.word	0x3f22f984
 80034cc:	08003d6c 	.word	0x08003d6c
 80034d0:	2e85a300 	.word	0x2e85a300
 80034d4:	248d3132 	.word	0x248d3132

080034d8 <fabsf>:
 80034d8:	ee10 3a10 	vmov	r3, s0
 80034dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034e0:	ee00 3a10 	vmov	s0, r3
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop

080034e8 <__kernel_rem_pio2f>:
 80034e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ec:	ed2d 8b04 	vpush	{d8-d9}
 80034f0:	b0db      	sub	sp, #364	; 0x16c
 80034f2:	460c      	mov	r4, r1
 80034f4:	4681      	mov	r9, r0
 80034f6:	4611      	mov	r1, r2
 80034f8:	9868      	ldr	r0, [sp, #416]	; 0x1a0
 80034fa:	4a96      	ldr	r2, [pc, #600]	; (8003754 <__kernel_rem_pio2f+0x26c>)
 80034fc:	9304      	str	r3, [sp, #16]
 80034fe:	461e      	mov	r6, r3
 8003500:	4623      	mov	r3, r4
 8003502:	1d0c      	adds	r4, r1, #4
 8003504:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8003508:	f106 37ff 	add.w	r7, r6, #4294967295
 800350c:	f2c0 82b0 	blt.w	8003a70 <__kernel_rem_pio2f+0x588>
 8003510:	1eca      	subs	r2, r1, #3
 8003512:	bf48      	it	mi
 8003514:	1d0a      	addmi	r2, r1, #4
 8003516:	10d2      	asrs	r2, r2, #3
 8003518:	9203      	str	r2, [sp, #12]
 800351a:	3201      	adds	r2, #1
 800351c:	00d2      	lsls	r2, r2, #3
 800351e:	9206      	str	r2, [sp, #24]
 8003520:	9a06      	ldr	r2, [sp, #24]
 8003522:	9803      	ldr	r0, [sp, #12]
 8003524:	19ee      	adds	r6, r5, r7
 8003526:	eba1 0202 	sub.w	r2, r1, r2
 800352a:	eba0 0007 	sub.w	r0, r0, r7
 800352e:	d419      	bmi.n	8003564 <__kernel_rem_pio2f+0x7c>
 8003530:	3601      	adds	r6, #1
 8003532:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003758 <__kernel_rem_pio2f+0x270>
 8003536:	f8dd c1a4 	ldr.w	ip, [sp, #420]	; 0x1a4
 800353a:	4406      	add	r6, r0
 800353c:	ac1e      	add	r4, sp, #120	; 0x78
 800353e:	469e      	mov	lr, r3
 8003540:	2800      	cmp	r0, #0
 8003542:	bfa4      	itt	ge
 8003544:	f85c 3020 	ldrge.w	r3, [ip, r0, lsl #2]
 8003548:	ee07 3a90 	vmovge	s15, r3
 800354c:	f100 0001 	add.w	r0, r0, #1
 8003550:	bfac      	ite	ge
 8003552:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8003556:	eef0 7a47 	vmovlt.f32	s15, s14
 800355a:	42b0      	cmp	r0, r6
 800355c:	ece4 7a01 	vstmia	r4!, {s15}
 8003560:	d1ee      	bne.n	8003540 <__kernel_rem_pio2f+0x58>
 8003562:	4673      	mov	r3, lr
 8003564:	2d00      	cmp	r5, #0
 8003566:	f2c0 82d9 	blt.w	8003b1c <__kernel_rem_pio2f+0x634>
 800356a:	9804      	ldr	r0, [sp, #16]
 800356c:	ac1e      	add	r4, sp, #120	; 0x78
 800356e:	eb04 0680 	add.w	r6, r4, r0, lsl #2
 8003572:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8003576:	eb05 0e00 	add.w	lr, r5, r0
 800357a:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
 800357e:	463c      	mov	r4, r7
 8003580:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8003584:	2f00      	cmp	r7, #0
 8003586:	eddf 7a74 	vldr	s15, [pc, #464]	; 8003758 <__kernel_rem_pio2f+0x270>
 800358a:	db09      	blt.n	80035a0 <__kernel_rem_pio2f+0xb8>
 800358c:	46b3      	mov	fp, r6
 800358e:	46ca      	mov	sl, r9
 8003590:	ecfa 6a01 	vldmia	sl!, {s13}
 8003594:	ed3b 7a01 	vldmdb	fp!, {s14}
 8003598:	4582      	cmp	sl, r0
 800359a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800359e:	d1f7      	bne.n	8003590 <__kernel_rem_pio2f+0xa8>
 80035a0:	3401      	adds	r4, #1
 80035a2:	4574      	cmp	r4, lr
 80035a4:	ecec 7a01 	vstmia	ip!, {s15}
 80035a8:	f106 0604 	add.w	r6, r6, #4
 80035ac:	d1ea      	bne.n	8003584 <__kernel_rem_pio2f+0x9c>
 80035ae:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 80035b2:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 80035b6:	e9cd 3107 	strd	r3, r1, [sp, #28]
 80035ba:	3804      	subs	r0, #4
 80035bc:	ed9f 9a68 	vldr	s18, [pc, #416]	; 8003760 <__kernel_rem_pio2f+0x278>
 80035c0:	eddf 8a66 	vldr	s17, [pc, #408]	; 800375c <__kernel_rem_pio2f+0x274>
 80035c4:	9005      	str	r0, [sp, #20]
 80035c6:	eb09 0408 	add.w	r4, r9, r8
 80035ca:	46ab      	mov	fp, r5
 80035cc:	eb0a 0885 	add.w	r8, sl, r5, lsl #2
 80035d0:	ae46      	add	r6, sp, #280	; 0x118
 80035d2:	9501      	str	r5, [sp, #4]
 80035d4:	4610      	mov	r0, r2
 80035d6:	ab5a      	add	r3, sp, #360	; 0x168
 80035d8:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80035dc:	f1bb 0f00 	cmp.w	fp, #0
 80035e0:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80035e4:	dd16      	ble.n	8003614 <__kernel_rem_pio2f+0x12c>
 80035e6:	eb06 038b 	add.w	r3, r6, fp, lsl #2
 80035ea:	4652      	mov	r2, sl
 80035ec:	ee60 7a09 	vmul.f32	s15, s0, s18
 80035f0:	eeb0 7a40 	vmov.f32	s14, s0
 80035f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035f8:	ed73 6a01 	vldmdb	r3!, {s13}
 80035fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003600:	42b3      	cmp	r3, r6
 8003602:	eea7 7ae8 	vfms.f32	s14, s15, s17
 8003606:	ee37 0aa6 	vadd.f32	s0, s15, s13
 800360a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800360e:	eca2 7a01 	vstmia	r2!, {s14}
 8003612:	d1eb      	bne.n	80035ec <__kernel_rem_pio2f+0x104>
 8003614:	9002      	str	r0, [sp, #8]
 8003616:	f000 faa5 	bl	8003b64 <scalbnf>
 800361a:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 800361e:	eeb0 8a40 	vmov.f32	s16, s0
 8003622:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003626:	f000 fb0f 	bl	8003c48 <floorf>
 800362a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800362e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003632:	9802      	ldr	r0, [sp, #8]
 8003634:	2800      	cmp	r0, #0
 8003636:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 800363a:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 800363e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003642:	dd6e      	ble.n	8003722 <__kernel_rem_pio2f+0x23a>
 8003644:	f10b 3cff 	add.w	ip, fp, #4294967295
 8003648:	f1c0 0308 	rsb	r3, r0, #8
 800364c:	f85a 202c 	ldr.w	r2, [sl, ip, lsl #2]
 8003650:	fa42 f503 	asr.w	r5, r2, r3
 8003654:	fa05 f303 	lsl.w	r3, r5, r3
 8003658:	1ad2      	subs	r2, r2, r3
 800365a:	f1c0 0107 	rsb	r1, r0, #7
 800365e:	ee19 3a90 	vmov	r3, s19
 8003662:	fa42 f101 	asr.w	r1, r2, r1
 8003666:	442b      	add	r3, r5
 8003668:	2900      	cmp	r1, #0
 800366a:	f84a 202c 	str.w	r2, [sl, ip, lsl #2]
 800366e:	ee09 3a90 	vmov	s19, r3
 8003672:	f300 814b 	bgt.w	800390c <__kernel_rem_pio2f+0x424>
 8003676:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367e:	f040 80ba 	bne.w	80037f6 <__kernel_rem_pio2f+0x30e>
 8003682:	9b01      	ldr	r3, [sp, #4]
 8003684:	459b      	cmp	fp, r3
 8003686:	dd0b      	ble.n	80036a0 <__kernel_rem_pio2f+0x1b8>
 8003688:	eb0a 038b 	add.w	r3, sl, fp, lsl #2
 800368c:	2200      	movs	r2, #0
 800368e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
 8003692:	4543      	cmp	r3, r8
 8003694:	ea42 0205 	orr.w	r2, r2, r5
 8003698:	d1f9      	bne.n	800368e <__kernel_rem_pio2f+0x1a6>
 800369a:	2a00      	cmp	r2, #0
 800369c:	f040 8154 	bne.w	8003948 <__kernel_rem_pio2f+0x460>
 80036a0:	9b01      	ldr	r3, [sp, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 8144 	bne.w	8003936 <__kernel_rem_pio2f+0x44e>
 80036ae:	9b05      	ldr	r3, [sp, #20]
 80036b0:	2101      	movs	r1, #1
 80036b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80036b6:	3101      	adds	r1, #1
 80036b8:	2a00      	cmp	r2, #0
 80036ba:	d0fa      	beq.n	80036b2 <__kernel_rem_pio2f+0x1ca>
 80036bc:	f10b 0301 	add.w	r3, fp, #1
 80036c0:	4459      	add	r1, fp
 80036c2:	469c      	mov	ip, r3
 80036c4:	9d03      	ldr	r5, [sp, #12]
 80036c6:	9a04      	ldr	r2, [sp, #16]
 80036c8:	eb05 0e03 	add.w	lr, r5, r3
 80036cc:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80036d0:	9d69      	ldr	r5, [sp, #420]	; 0x1a4
 80036d2:	445a      	add	r2, fp
 80036d4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80036d8:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 80036dc:	ab1e      	add	r3, sp, #120	; 0x78
 80036de:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 80036e2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 80036e6:	edde 7a01 	vldr	s15, [lr, #4]
 80036ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ee:	2f00      	cmp	r7, #0
 80036f0:	f10e 0e04 	add.w	lr, lr, #4
 80036f4:	ece5 7a01 	vstmia	r5!, {s15}
 80036f8:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003758 <__kernel_rem_pio2f+0x270>
 80036fc:	db09      	blt.n	8003712 <__kernel_rem_pio2f+0x22a>
 80036fe:	462a      	mov	r2, r5
 8003700:	464b      	mov	r3, r9
 8003702:	ecf3 6a01 	vldmia	r3!, {s13}
 8003706:	ed32 7a01 	vldmdb	r2!, {s14}
 800370a:	42a3      	cmp	r3, r4
 800370c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003710:	d1f7      	bne.n	8003702 <__kernel_rem_pio2f+0x21a>
 8003712:	f10c 0c01 	add.w	ip, ip, #1
 8003716:	4561      	cmp	r1, ip
 8003718:	eceb 7a01 	vstmia	fp!, {s15}
 800371c:	dae3      	bge.n	80036e6 <__kernel_rem_pio2f+0x1fe>
 800371e:	468b      	mov	fp, r1
 8003720:	e759      	b.n	80035d6 <__kernel_rem_pio2f+0xee>
 8003722:	f040 80e9 	bne.w	80038f8 <__kernel_rem_pio2f+0x410>
 8003726:	f10b 33ff 	add.w	r3, fp, #4294967295
 800372a:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 800372e:	11c9      	asrs	r1, r1, #7
 8003730:	2900      	cmp	r1, #0
 8003732:	dda0      	ble.n	8003676 <__kernel_rem_pio2f+0x18e>
 8003734:	ee19 3a90 	vmov	r3, s19
 8003738:	f1bb 0f00 	cmp.w	fp, #0
 800373c:	f103 0301 	add.w	r3, r3, #1
 8003740:	ee09 3a90 	vmov	s19, r3
 8003744:	f340 81ee 	ble.w	8003b24 <__kernel_rem_pio2f+0x63c>
 8003748:	2500      	movs	r5, #0
 800374a:	46d4      	mov	ip, sl
 800374c:	462a      	mov	r2, r5
 800374e:	9102      	str	r1, [sp, #8]
 8003750:	4686      	mov	lr, r0
 8003752:	e019      	b.n	8003788 <__kernel_rem_pio2f+0x2a0>
 8003754:	08004130 	.word	0x08004130
 8003758:	00000000 	.word	0x00000000
 800375c:	43800000 	.word	0x43800000
 8003760:	3b800000 	.word	0x3b800000
 8003764:	3501      	adds	r5, #1
 8003766:	45ab      	cmp	fp, r5
 8003768:	f841 0c04 	str.w	r0, [r1, #-4]
 800376c:	f340 80e8 	ble.w	8003940 <__kernel_rem_pio2f+0x458>
 8003770:	680b      	ldr	r3, [r1, #0]
 8003772:	f10c 0c08 	add.w	ip, ip, #8
 8003776:	3501      	adds	r5, #1
 8003778:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800377c:	45ab      	cmp	fp, r5
 800377e:	f04f 0201 	mov.w	r2, #1
 8003782:	f84c 3c04 	str.w	r3, [ip, #-4]
 8003786:	dd0d      	ble.n	80037a4 <__kernel_rem_pio2f+0x2bc>
 8003788:	4661      	mov	r1, ip
 800378a:	f851 3b04 	ldr.w	r3, [r1], #4
 800378e:	2a00      	cmp	r2, #0
 8003790:	f040 80b0 	bne.w	80038f4 <__kernel_rem_pio2f+0x40c>
 8003794:	f5c3 7080 	rsb	r0, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e3      	bne.n	8003764 <__kernel_rem_pio2f+0x27c>
 800379c:	3501      	adds	r5, #1
 800379e:	45ab      	cmp	fp, r5
 80037a0:	468c      	mov	ip, r1
 80037a2:	dcf1      	bgt.n	8003788 <__kernel_rem_pio2f+0x2a0>
 80037a4:	9902      	ldr	r1, [sp, #8]
 80037a6:	4670      	mov	r0, lr
 80037a8:	2800      	cmp	r0, #0
 80037aa:	dd0c      	ble.n	80037c6 <__kernel_rem_pio2f+0x2de>
 80037ac:	2801      	cmp	r0, #1
 80037ae:	f000 80b9 	beq.w	8003924 <__kernel_rem_pio2f+0x43c>
 80037b2:	2802      	cmp	r0, #2
 80037b4:	d107      	bne.n	80037c6 <__kernel_rem_pio2f+0x2de>
 80037b6:	f10b 35ff 	add.w	r5, fp, #4294967295
 80037ba:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80037be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c2:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 80037c6:	2902      	cmp	r1, #2
 80037c8:	f47f af55 	bne.w	8003676 <__kernel_rem_pio2f+0x18e>
 80037cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80037d0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80037d4:	2a00      	cmp	r2, #0
 80037d6:	f43f af4e 	beq.w	8003676 <__kernel_rem_pio2f+0x18e>
 80037da:	9109      	str	r1, [sp, #36]	; 0x24
 80037dc:	9002      	str	r0, [sp, #8]
 80037de:	f000 f9c1 	bl	8003b64 <scalbnf>
 80037e2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80037e6:	9802      	ldr	r0, [sp, #8]
 80037e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80037ea:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80037ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f2:	f43f af46 	beq.w	8003682 <__kernel_rem_pio2f+0x19a>
 80037f6:	9b07      	ldr	r3, [sp, #28]
 80037f8:	9d01      	ldr	r5, [sp, #4]
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	4688      	mov	r8, r1
 80037fe:	9b06      	ldr	r3, [sp, #24]
 8003800:	9908      	ldr	r1, [sp, #32]
 8003802:	9002      	str	r0, [sp, #8]
 8003804:	eeb0 0a48 	vmov.f32	s0, s16
 8003808:	1a58      	subs	r0, r3, r1
 800380a:	f000 f9ab 	bl	8003b64 <scalbnf>
 800380e:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 800375c <__kernel_rem_pio2f+0x274>
 8003812:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8003816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800381e:	eef0 7a40 	vmov.f32	s15, s0
 8003822:	f2c0 814d 	blt.w	8003ac0 <__kernel_rem_pio2f+0x5d8>
 8003826:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8003760 <__kernel_rem_pio2f+0x278>
 800382a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800382e:	f10b 0401 	add.w	r4, fp, #1
 8003832:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003836:	3208      	adds	r2, #8
 8003838:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800383c:	eee7 7a66 	vfms.f32	s15, s14, s13
 8003840:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003848:	ee17 1a90 	vmov	r1, s15
 800384c:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 8003850:	ee17 1a10 	vmov	r1, s14
 8003854:	f84a 1024 	str.w	r1, [sl, r4, lsl #2]
 8003858:	4610      	mov	r0, r2
 800385a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	f000 f980 	bl	8003b64 <scalbnf>
 8003864:	2c00      	cmp	r4, #0
 8003866:	9b01      	ldr	r3, [sp, #4]
 8003868:	eeb0 7a40 	vmov.f32	s14, s0
 800386c:	f2c0 814c 	blt.w	8003b08 <__kernel_rem_pio2f+0x620>
 8003870:	1c60      	adds	r0, r4, #1
 8003872:	ae46      	add	r6, sp, #280	; 0x118
 8003874:	ed5f 6a46 	vldr	s13, [pc, #-280]	; 8003760 <__kernel_rem_pio2f+0x278>
 8003878:	0081      	lsls	r1, r0, #2
 800387a:	eb0a 0280 	add.w	r2, sl, r0, lsl #2
 800387e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8003882:	ed72 7a01 	vldmdb	r2!, {s15}
 8003886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800388a:	4552      	cmp	r2, sl
 800388c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003890:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003894:	ed60 7a01 	vstmdb	r0!, {s15}
 8003898:	d1f3      	bne.n	8003882 <__kernel_rem_pio2f+0x39a>
 800389a:	1f0a      	subs	r2, r1, #4
 800389c:	a846      	add	r0, sp, #280	; 0x118
 800389e:	2d00      	cmp	r5, #0
 80038a0:	eb00 0702 	add.w	r7, r0, r2
 80038a4:	f04f 0600 	mov.w	r6, #0
 80038a8:	469c      	mov	ip, r3
 80038aa:	db20      	blt.n	80038ee <__kernel_rem_pio2f+0x406>
 80038ac:	4bab      	ldr	r3, [pc, #684]	; (8003b5c <__kernel_rem_pio2f+0x674>)
 80038ae:	eddf 7aac 	vldr	s15, [pc, #688]	; 8003b60 <__kernel_rem_pio2f+0x678>
 80038b2:	4638      	mov	r0, r7
 80038b4:	2200      	movs	r2, #0
 80038b6:	e001      	b.n	80038bc <__kernel_rem_pio2f+0x3d4>
 80038b8:	42b2      	cmp	r2, r6
 80038ba:	dc08      	bgt.n	80038ce <__kernel_rem_pio2f+0x3e6>
 80038bc:	ecf3 6a01 	vldmia	r3!, {s13}
 80038c0:	ecb0 7a01 	vldmia	r0!, {s14}
 80038c4:	3201      	adds	r2, #1
 80038c6:	4295      	cmp	r5, r2
 80038c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80038cc:	daf4      	bge.n	80038b8 <__kernel_rem_pio2f+0x3d0>
 80038ce:	ab5a      	add	r3, sp, #360	; 0x168
 80038d0:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 80038d4:	42a6      	cmp	r6, r4
 80038d6:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80038da:	ea4f 0086 	mov.w	r0, r6, lsl #2
 80038de:	f106 0201 	add.w	r2, r6, #1
 80038e2:	f1a7 0704 	sub.w	r7, r7, #4
 80038e6:	d047      	beq.n	8003978 <__kernel_rem_pio2f+0x490>
 80038e8:	2d00      	cmp	r5, #0
 80038ea:	4616      	mov	r6, r2
 80038ec:	dade      	bge.n	80038ac <__kernel_rem_pio2f+0x3c4>
 80038ee:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8003b60 <__kernel_rem_pio2f+0x678>
 80038f2:	e7ec      	b.n	80038ce <__kernel_rem_pio2f+0x3e6>
 80038f4:	468c      	mov	ip, r1
 80038f6:	e73e      	b.n	8003776 <__kernel_rem_pio2f+0x28e>
 80038f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80038fc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	f280 80a2 	bge.w	8003a4c <__kernel_rem_pio2f+0x564>
 8003908:	2100      	movs	r1, #0
 800390a:	e6b4      	b.n	8003676 <__kernel_rem_pio2f+0x18e>
 800390c:	3301      	adds	r3, #1
 800390e:	f1bb 0f00 	cmp.w	fp, #0
 8003912:	ee09 3a90 	vmov	s19, r3
 8003916:	bfd8      	it	le
 8003918:	2200      	movle	r2, #0
 800391a:	f73f af15 	bgt.w	8003748 <__kernel_rem_pio2f+0x260>
 800391e:	2801      	cmp	r0, #1
 8003920:	f47f af47 	bne.w	80037b2 <__kernel_rem_pio2f+0x2ca>
 8003924:	f10b 35ff 	add.w	r5, fp, #4294967295
 8003928:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 800392c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003930:	f84a 3025 	str.w	r3, [sl, r5, lsl #2]
 8003934:	e747      	b.n	80037c6 <__kernel_rem_pio2f+0x2de>
 8003936:	f10b 0301 	add.w	r3, fp, #1
 800393a:	469c      	mov	ip, r3
 800393c:	4619      	mov	r1, r3
 800393e:	e6c1      	b.n	80036c4 <__kernel_rem_pio2f+0x1dc>
 8003940:	9902      	ldr	r1, [sp, #8]
 8003942:	4670      	mov	r0, lr
 8003944:	2201      	movs	r2, #1
 8003946:	e72f      	b.n	80037a8 <__kernel_rem_pio2f+0x2c0>
 8003948:	f10b 34ff 	add.w	r4, fp, #4294967295
 800394c:	4688      	mov	r8, r1
 800394e:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8003952:	9d01      	ldr	r5, [sp, #4]
 8003954:	9b07      	ldr	r3, [sp, #28]
 8003956:	f1a0 0208 	sub.w	r2, r0, #8
 800395a:	2900      	cmp	r1, #0
 800395c:	f47f af7c 	bne.w	8003858 <__kernel_rem_pio2f+0x370>
 8003960:	f10b 4180 	add.w	r1, fp, #1073741824	; 0x40000000
 8003964:	3901      	subs	r1, #1
 8003966:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800396a:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 800396e:	3c01      	subs	r4, #1
 8003970:	3a08      	subs	r2, #8
 8003972:	2800      	cmp	r0, #0
 8003974:	d0f9      	beq.n	800396a <__kernel_rem_pio2f+0x482>
 8003976:	e76f      	b.n	8003858 <__kernel_rem_pio2f+0x370>
 8003978:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 800397a:	2a02      	cmp	r2, #2
 800397c:	4663      	mov	r3, ip
 800397e:	dc1b      	bgt.n	80039b8 <__kernel_rem_pio2f+0x4d0>
 8003980:	2a00      	cmp	r2, #0
 8003982:	dc7a      	bgt.n	8003a7a <__kernel_rem_pio2f+0x592>
 8003984:	d10f      	bne.n	80039a6 <__kernel_rem_pio2f+0x4be>
 8003986:	aa32      	add	r2, sp, #200	; 0xc8
 8003988:	eddf 7a75 	vldr	s15, [pc, #468]	; 8003b60 <__kernel_rem_pio2f+0x678>
 800398c:	4411      	add	r1, r2
 800398e:	ed31 7a01 	vldmdb	r1!, {s14}
 8003992:	4291      	cmp	r1, r2
 8003994:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003998:	d1f9      	bne.n	800398e <__kernel_rem_pio2f+0x4a6>
 800399a:	4642      	mov	r2, r8
 800399c:	b10a      	cbz	r2, 80039a2 <__kernel_rem_pio2f+0x4ba>
 800399e:	eef1 7a67 	vneg.f32	s15, s15
 80039a2:	edc3 7a00 	vstr	s15, [r3]
 80039a6:	ee19 3a90 	vmov	r3, s19
 80039aa:	f003 0007 	and.w	r0, r3, #7
 80039ae:	b05b      	add	sp, #364	; 0x16c
 80039b0:	ecbd 8b04 	vpop	{d8-d9}
 80039b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b8:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 80039ba:	2a03      	cmp	r2, #3
 80039bc:	d1f3      	bne.n	80039a6 <__kernel_rem_pio2f+0x4be>
 80039be:	2c00      	cmp	r4, #0
 80039c0:	f000 80bc 	beq.w	8003b3c <__kernel_rem_pio2f+0x654>
 80039c4:	a932      	add	r1, sp, #200	; 0xc8
 80039c6:	180d      	adds	r5, r1, r0
 80039c8:	ed95 7a00 	vldr	s14, [r5]
 80039cc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80039d0:	00a7      	lsls	r7, r4, #2
 80039d2:	4606      	mov	r6, r0
 80039d4:	ed56 7a01 	vldr	s15, [r6, #-4]
 80039d8:	eef0 6a47 	vmov.f32	s13, s14
 80039dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039e0:	4632      	mov	r2, r6
 80039e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039e6:	3e04      	subs	r6, #4
 80039e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ec:	42b1      	cmp	r1, r6
 80039ee:	edc2 7a00 	vstr	s15, [r2]
 80039f2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80039f6:	d1ed      	bne.n	80039d4 <__kernel_rem_pio2f+0x4ec>
 80039f8:	2c01      	cmp	r4, #1
 80039fa:	f000 809f 	beq.w	8003b3c <__kernel_rem_pio2f+0x654>
 80039fe:	ed95 7a00 	vldr	s14, [r5]
 8003a02:	ed70 7a01 	vldmdb	r0!, {s15}
 8003a06:	eef0 6a47 	vmov.f32	s13, s14
 8003a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a0e:	4282      	cmp	r2, r0
 8003a10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a14:	ed80 7a00 	vstr	s14, [r0]
 8003a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1c:	edc0 7a01 	vstr	s15, [r0, #4]
 8003a20:	d1ef      	bne.n	8003a02 <__kernel_rem_pio2f+0x51a>
 8003a22:	1d38      	adds	r0, r7, #4
 8003a24:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8003b60 <__kernel_rem_pio2f+0x678>
 8003a28:	4401      	add	r1, r0
 8003a2a:	3204      	adds	r2, #4
 8003a2c:	ed31 7a01 	vldmdb	r1!, {s14}
 8003a30:	428a      	cmp	r2, r1
 8003a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a36:	d1f9      	bne.n	8003a2c <__kernel_rem_pio2f+0x544>
 8003a38:	4642      	mov	r2, r8
 8003a3a:	2a00      	cmp	r2, #0
 8003a3c:	d148      	bne.n	8003ad0 <__kernel_rem_pio2f+0x5e8>
 8003a3e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8003a40:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8003a42:	6019      	str	r1, [r3, #0]
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	edc3 7a02 	vstr	s15, [r3, #8]
 8003a4a:	e7ac      	b.n	80039a6 <__kernel_rem_pio2f+0x4be>
 8003a4c:	ee19 3a90 	vmov	r3, s19
 8003a50:	f1bb 0f00 	cmp.w	fp, #0
 8003a54:	f103 0301 	add.w	r3, r3, #1
 8003a58:	ee09 3a90 	vmov	s19, r3
 8003a5c:	bfc8      	it	gt
 8003a5e:	2102      	movgt	r1, #2
 8003a60:	f73f ae72 	bgt.w	8003748 <__kernel_rem_pio2f+0x260>
 8003a64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003a68:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	e602      	b.n	8003676 <__kernel_rem_pio2f+0x18e>
 8003a70:	2208      	movs	r2, #8
 8003a72:	9206      	str	r2, [sp, #24]
 8003a74:	2200      	movs	r2, #0
 8003a76:	9203      	str	r2, [sp, #12]
 8003a78:	e552      	b.n	8003520 <__kernel_rem_pio2f+0x38>
 8003a7a:	aa32      	add	r2, sp, #200	; 0xc8
 8003a7c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8003b60 <__kernel_rem_pio2f+0x678>
 8003a80:	4411      	add	r1, r2
 8003a82:	ed31 7a01 	vldmdb	r1!, {s14}
 8003a86:	428a      	cmp	r2, r1
 8003a88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a8c:	d1f9      	bne.n	8003a82 <__kernel_rem_pio2f+0x59a>
 8003a8e:	4642      	mov	r2, r8
 8003a90:	bb7a      	cbnz	r2, 8003af2 <__kernel_rem_pio2f+0x60a>
 8003a92:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
 8003a96:	edc3 7a00 	vstr	s15, [r3]
 8003a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a9e:	b164      	cbz	r4, 8003aba <__kernel_rem_pio2f+0x5d2>
 8003aa0:	a933      	add	r1, sp, #204	; 0xcc
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	ecb1 7a01 	vldmia	r1!, {s14}
 8003aa8:	3201      	adds	r2, #1
 8003aaa:	4294      	cmp	r4, r2
 8003aac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ab0:	daf8      	bge.n	8003aa4 <__kernel_rem_pio2f+0x5bc>
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	b10a      	cbz	r2, 8003aba <__kernel_rem_pio2f+0x5d2>
 8003ab6:	eef1 7a67 	vneg.f32	s15, s15
 8003aba:	edc3 7a01 	vstr	s15, [r3, #4]
 8003abe:	e772      	b.n	80039a6 <__kernel_rem_pio2f+0x4be>
 8003ac0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003ac4:	465c      	mov	r4, fp
 8003ac6:	ee17 1a90 	vmov	r1, s15
 8003aca:	f84a 102b 	str.w	r1, [sl, fp, lsl #2]
 8003ace:	e6c3      	b.n	8003858 <__kernel_rem_pio2f+0x370>
 8003ad0:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8003ad4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8003ad8:	eef1 6a66 	vneg.f32	s13, s13
 8003adc:	eeb1 7a47 	vneg.f32	s14, s14
 8003ae0:	eef1 7a67 	vneg.f32	s15, s15
 8003ae4:	edc3 6a00 	vstr	s13, [r3]
 8003ae8:	ed83 7a01 	vstr	s14, [r3, #4]
 8003aec:	edc3 7a02 	vstr	s15, [r3, #8]
 8003af0:	e759      	b.n	80039a6 <__kernel_rem_pio2f+0x4be>
 8003af2:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8003af6:	eeb1 7a67 	vneg.f32	s14, s15
 8003afa:	ed83 7a00 	vstr	s14, [r3]
 8003afe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b02:	2c00      	cmp	r4, #0
 8003b04:	d1cc      	bne.n	8003aa0 <__kernel_rem_pio2f+0x5b8>
 8003b06:	e7d6      	b.n	8003ab6 <__kernel_rem_pio2f+0x5ce>
 8003b08:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8003b0a:	2a02      	cmp	r2, #2
 8003b0c:	dc12      	bgt.n	8003b34 <__kernel_rem_pio2f+0x64c>
 8003b0e:	2a00      	cmp	r2, #0
 8003b10:	dc17      	bgt.n	8003b42 <__kernel_rem_pio2f+0x65a>
 8003b12:	f47f af48 	bne.w	80039a6 <__kernel_rem_pio2f+0x4be>
 8003b16:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003b60 <__kernel_rem_pio2f+0x678>
 8003b1a:	e73e      	b.n	800399a <__kernel_rem_pio2f+0x4b2>
 8003b1c:	9804      	ldr	r0, [sp, #16]
 8003b1e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8003b22:	e544      	b.n	80035ae <__kernel_rem_pio2f+0xc6>
 8003b24:	2902      	cmp	r1, #2
 8003b26:	f47f ada6 	bne.w	8003676 <__kernel_rem_pio2f+0x18e>
 8003b2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003b2e:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8003b32:	e5a0      	b.n	8003676 <__kernel_rem_pio2f+0x18e>
 8003b34:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 8003b36:	2a03      	cmp	r2, #3
 8003b38:	f47f af35 	bne.w	80039a6 <__kernel_rem_pio2f+0x4be>
 8003b3c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003b60 <__kernel_rem_pio2f+0x678>
 8003b40:	e77a      	b.n	8003a38 <__kernel_rem_pio2f+0x550>
 8003b42:	4642      	mov	r2, r8
 8003b44:	b922      	cbnz	r2, 8003b50 <__kernel_rem_pio2f+0x668>
 8003b46:	2200      	movs	r2, #0
 8003b48:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e7b4      	b.n	8003aba <__kernel_rem_pio2f+0x5d2>
 8003b50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b54:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e7ac      	b.n	8003ab6 <__kernel_rem_pio2f+0x5ce>
 8003b5c:	08004104 	.word	0x08004104
 8003b60:	00000000 	.word	0x00000000

08003b64 <scalbnf>:
 8003b64:	ee10 3a10 	vmov	r3, s0
 8003b68:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	d027      	beq.n	8003bc0 <scalbnf+0x5c>
 8003b70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003b74:	d221      	bcs.n	8003bba <scalbnf+0x56>
 8003b76:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8003b7a:	d122      	bne.n	8003bc2 <scalbnf+0x5e>
 8003b7c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003c2c <scalbnf+0xc8>
 8003b80:	4a2b      	ldr	r2, [pc, #172]	; (8003c30 <scalbnf+0xcc>)
 8003b82:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003b86:	4290      	cmp	r0, r2
 8003b88:	ee17 3a90 	vmov	r3, s15
 8003b8c:	db33      	blt.n	8003bf6 <scalbnf+0x92>
 8003b8e:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8003b92:	f3c3 51c7 	ubfx	r1, r3, #23, #8
 8003b96:	4560      	cmp	r0, ip
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f1a1 0119 	sub.w	r1, r1, #25
 8003b9e:	dd16      	ble.n	8003bce <scalbnf+0x6a>
 8003ba0:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003c34 <scalbnf+0xd0>
 8003ba4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003c38 <scalbnf+0xd4>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	eeb0 7a67 	vmov.f32	s14, s15
 8003bae:	bfb8      	it	lt
 8003bb0:	eef0 7a66 	vmovlt.f32	s15, s13
 8003bb4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003bb8:	4770      	bx	lr
 8003bba:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003bbe:	4770      	bx	lr
 8003bc0:	4770      	bx	lr
 8003bc2:	f24c 3c50 	movw	ip, #50000	; 0xc350
 8003bc6:	4560      	cmp	r0, ip
 8003bc8:	ea4f 51d1 	mov.w	r1, r1, lsr #23
 8003bcc:	dce8      	bgt.n	8003ba0 <scalbnf+0x3c>
 8003bce:	4401      	add	r1, r0
 8003bd0:	29fe      	cmp	r1, #254	; 0xfe
 8003bd2:	dce5      	bgt.n	8003ba0 <scalbnf+0x3c>
 8003bd4:	2900      	cmp	r1, #0
 8003bd6:	dc15      	bgt.n	8003c04 <scalbnf+0xa0>
 8003bd8:	f111 0f16 	cmn.w	r1, #22
 8003bdc:	db19      	blt.n	8003c12 <scalbnf+0xae>
 8003bde:	3119      	adds	r1, #25
 8003be0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003be4:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8003be8:	ee07 2a90 	vmov	s15, r2
 8003bec:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003c3c <scalbnf+0xd8>
 8003bf0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003bf4:	4770      	bx	lr
 8003bf6:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003c40 <scalbnf+0xdc>
 8003bfa:	ee07 3a10 	vmov	s14, r3
 8003bfe:	ee27 0a27 	vmul.f32	s0, s14, s15
 8003c02:	4770      	bx	lr
 8003c04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003c08:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8003c0c:	ee00 3a10 	vmov	s0, r3
 8003c10:	4770      	bx	lr
 8003c12:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003c40 <scalbnf+0xdc>
 8003c16:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003c44 <scalbnf+0xe0>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	eeb0 7a67 	vmov.f32	s14, s15
 8003c20:	bfb8      	it	lt
 8003c22:	eef0 7a66 	vmovlt.f32	s15, s13
 8003c26:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003c2a:	4770      	bx	lr
 8003c2c:	4c000000 	.word	0x4c000000
 8003c30:	ffff3cb0 	.word	0xffff3cb0
 8003c34:	7149f2ca 	.word	0x7149f2ca
 8003c38:	f149f2ca 	.word	0xf149f2ca
 8003c3c:	33000000 	.word	0x33000000
 8003c40:	0da24260 	.word	0x0da24260
 8003c44:	8da24260 	.word	0x8da24260

08003c48 <floorf>:
 8003c48:	ee10 2a10 	vmov	r2, s0
 8003c4c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003c50:	3b7f      	subs	r3, #127	; 0x7f
 8003c52:	2b16      	cmp	r3, #22
 8003c54:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8003c58:	dc29      	bgt.n	8003cae <floorf+0x66>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	db18      	blt.n	8003c92 <floorf+0x4a>
 8003c60:	491a      	ldr	r1, [pc, #104]	; (8003ccc <floorf+0x84>)
 8003c62:	4119      	asrs	r1, r3
 8003c64:	420a      	tst	r2, r1
 8003c66:	d021      	beq.n	8003cac <floorf+0x64>
 8003c68:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003cd0 <floorf+0x88>
 8003c6c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003c70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c78:	dd18      	ble.n	8003cac <floorf+0x64>
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	da04      	bge.n	8003c88 <floorf+0x40>
 8003c7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c82:	fa42 f303 	asr.w	r3, r2, r3
 8003c86:	4418      	add	r0, r3
 8003c88:	ea20 0301 	bic.w	r3, r0, r1
 8003c8c:	ee00 3a10 	vmov	s0, r3
 8003c90:	4770      	bx	lr
 8003c92:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003cd0 <floorf+0x88>
 8003c96:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca2:	dd03      	ble.n	8003cac <floorf+0x64>
 8003ca4:	2a00      	cmp	r2, #0
 8003ca6:	db08      	blt.n	8003cba <floorf+0x72>
 8003ca8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003cd4 <floorf+0x8c>
 8003cac:	4770      	bx	lr
 8003cae:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003cb2:	d3fb      	bcc.n	8003cac <floorf+0x64>
 8003cb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003cb8:	4770      	bx	lr
 8003cba:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003cd8 <floorf+0x90>
 8003cbe:	2900      	cmp	r1, #0
 8003cc0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003cc4:	bf08      	it	eq
 8003cc6:	eeb0 0a67 	vmoveq.f32	s0, s15
 8003cca:	4770      	bx	lr
 8003ccc:	007fffff 	.word	0x007fffff
 8003cd0:	7149f2ca 	.word	0x7149f2ca
 8003cd4:	00000000 	.word	0x00000000
 8003cd8:	80000000 	.word	0x80000000

08003cdc <__aeabi_f2lz>:
 8003cdc:	ee07 0a90 	vmov	s15, r0
 8003ce0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce8:	d401      	bmi.n	8003cee <__aeabi_f2lz+0x12>
 8003cea:	f000 b80b 	b.w	8003d04 <__aeabi_f2ulz>
 8003cee:	eef1 7a67 	vneg.f32	s15, s15
 8003cf2:	b508      	push	{r3, lr}
 8003cf4:	ee17 0a90 	vmov	r0, s15
 8003cf8:	f000 f804 	bl	8003d04 <__aeabi_f2ulz>
 8003cfc:	4240      	negs	r0, r0
 8003cfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003d02:	bd08      	pop	{r3, pc}

08003d04 <__aeabi_f2ulz>:
 8003d04:	b5d0      	push	{r4, r6, r7, lr}
 8003d06:	f7fc fbcb 	bl	80004a0 <__aeabi_f2d>
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <__aeabi_f2ulz+0x38>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4606      	mov	r6, r0
 8003d10:	460f      	mov	r7, r1
 8003d12:	f7fc fd7b 	bl	800080c <__aeabi_dmul>
 8003d16:	f7fc fea3 	bl	8000a60 <__aeabi_d2uiz>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	f7fc fb9e 	bl	800045c <__aeabi_ui2d>
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <__aeabi_f2ulz+0x3c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	f7fc fd72 	bl	800080c <__aeabi_dmul>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	4639      	mov	r1, r7
 8003d30:	f7fc fa56 	bl	80001e0 <__aeabi_dsub>
 8003d34:	f7fc fe94 	bl	8000a60 <__aeabi_d2uiz>
 8003d38:	4621      	mov	r1, r4
 8003d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8003d3c:	3df00000 	.word	0x3df00000
 8003d40:	41f00000 	.word	0x41f00000
